; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

	TITLE	C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Debug\Strings.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?enableDump@@3HA				; enableDump
_BSS	SEGMENT
?enableDump@@3HA DD 01H DUP (?)				; enableDump
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??4EDGEDATA@@QAEXABU0@@Z			; EDGEDATA::operator=
PUBLIC	??0CON@@QAE@XZ					; CON::CON
PUBLIC	??1CON@@QAE@XZ					; CON::~CON
PUBLIC	??4CON@@QAEAAV0@ABV0@@Z				; CON::operator=
PUBLIC	??8CON@@QBE_NABV0@@Z				; CON::operator==
PUBLIC	?SWHash@CON@@QAE_KXZ				; CON::SWHash
PUBLIC	?CheckEnable@@YAXXZ				; CheckEnable
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	?searchDepth@@3HA:DWORD				; searchDepth
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Strings.cpp
_TEXT	SEGMENT
tv66 = -4						; size = 4
?CheckEnable@@YAXXZ PROC				; CheckEnable

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 15   :   enableDump = ((searchDepth>=0) && (searchDepth<6)) ?1:0;

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?searchDepth@@3HA, 0 ; searchDepth
  0000b	7c 12		 jl	 SHORT $LN3@CheckEnabl
  0000d	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?searchDepth@@3HA, 6 ; searchDepth
  00014	7d 09		 jge	 SHORT $LN3@CheckEnabl
  00016	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  0001d	eb 07		 jmp	 SHORT $LN4@CheckEnabl
$LN3@CheckEnabl:
  0001f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@CheckEnabl:
  00026	8b 45 fc	 mov	 eax, DWORD PTR tv66[ebp]
  00029	a3 00 00 00 00	 mov	 DWORD PTR ?enableDump@@3HA, eax ; enableDump

; 16   :   //enableDump = 0;
; 17   : }

  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?CheckEnable@@YAXXZ ENDP				; CheckEnable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Strings.cpp
_TEXT	SEGMENT
_h2$ = -20						; size = 4
_h1$ = -16						; size = 4
_nnA$ = -12						; size = 4
_nn$ = -8						; size = 4
_this$ = -4						; size = 4
?SWHash@CON@@QAE_KXZ PROC				; CON::SWHash
; _this$ = ecx

; 280  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 281  :   int nn, nnA;
; 282  :   ui32 h1, h2;
; 283  :   h1 = h2 = 0;

  0001d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _h2$[ebp], 0
  00024	8b 45 ec	 mov	 eax, DWORD PTR _h2$[ebp]
  00027	89 45 f0	 mov	 DWORD PTR _h1$[ebp], eax

; 284  :   for (nn = 0; nn<m_numNode; nn++)

  0002a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nn$[ebp], 0
  00031	eb 09		 jmp	 SHORT $LN4@SWHash
$LN2@SWHash:
  00033	8b 4d f8	 mov	 ecx, DWORD PTR _nn$[ebp]
  00036	83 c1 01	 add	 ecx, 1
  00039	89 4d f8	 mov	 DWORD PTR _nn$[ebp], ecx
$LN4@SWHash:
  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _nn$[ebp]
  00042	3b 02		 cmp	 eax, DWORD PTR [edx]
  00044	7d 68		 jge	 SHORT $LN3@SWHash

; 285  :   {
; 286  :     nnA = nd[nn].ix;

  00046	8b 4d f8	 mov	 ecx, DWORD PTR _nn$[ebp]
  00049	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	0f b6 84 8a 13
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4115]
  00054	89 45 f4	 mov	 DWORD PTR _nnA$[ebp], eax

; 287  :     h1 = h1*373733 + *((ui32 *)(&ed[nnA].e[0]));

  00057	69 4d f0 e5 b3
	05 00		 imul	 ecx, DWORD PTR _h1$[ebp], 373733
  0005e	8b 55 f4	 mov	 edx, DWORD PTR _nnA$[ebp]
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8d 54 d0 10	 lea	 edx, DWORD PTR [eax+edx*8+16]
  00068	b8 02 00 00 00	 mov	 eax, 2
  0006d	6b c0 00	 imul	 eax, eax, 0
  00070	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  00073	89 4d f0	 mov	 DWORD PTR _h1$[ebp], ecx

; 288  :     //h1 = h1*375733 + *((ui32 *)(&ed[nnA].e[0]));
; 289  :     h2 = h2*434347 + *((ui32 *)(&ed[nnA].e[2]));

  00076	69 4d ec ab a0
	06 00		 imul	 ecx, DWORD PTR _h2$[ebp], 434347
  0007d	8b 55 f4	 mov	 edx, DWORD PTR _nnA$[ebp]
  00080	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8d 54 d0 10	 lea	 edx, DWORD PTR [eax+edx*8+16]
  00087	b8 02 00 00 00	 mov	 eax, 2
  0008c	d1 e0		 shl	 eax, 1
  0008e	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  00091	89 4d ec	 mov	 DWORD PTR _h2$[ebp], ecx

; 290  :     h1 ^= h2 >> 21;

  00094	8b 4d ec	 mov	 ecx, DWORD PTR _h2$[ebp]
  00097	c1 e9 15	 shr	 ecx, 21			; 00000015H
  0009a	33 4d f0	 xor	 ecx, DWORD PTR _h1$[ebp]
  0009d	89 4d f0	 mov	 DWORD PTR _h1$[ebp], ecx

; 291  :     h2 ^= h1 >> 23;

  000a0	8b 55 f0	 mov	 edx, DWORD PTR _h1$[ebp]
  000a3	c1 ea 17	 shr	 edx, 23			; 00000017H
  000a6	33 55 ec	 xor	 edx, DWORD PTR _h2$[ebp]
  000a9	89 55 ec	 mov	 DWORD PTR _h2$[ebp], edx

; 292  :   };

  000ac	eb 85		 jmp	 SHORT $LN2@SWHash
$LN3@SWHash:

; 293  :   return ((ui64)h1<<32) + h2;

  000ae	33 d2		 xor	 edx, edx
  000b0	8b 45 f0	 mov	 eax, DWORD PTR _h1$[ebp]
  000b3	b1 20		 mov	 cl, 32			; 00000020H
  000b5	e8 00 00 00 00	 call	 __allshl
  000ba	33 c9		 xor	 ecx, ecx
  000bc	03 45 ec	 add	 eax, DWORD PTR _h2$[ebp]
  000bf	13 d1		 adc	 edx, ecx

; 294  : }

  000c1	83 c4 14	 add	 esp, 20			; 00000014H
  000c4	3b ec		 cmp	 ebp, esp
  000c6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
?SWHash@CON@@QAE_KXZ ENDP				; CON::SWHash
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Strings.cpp
_TEXT	SEGMENT
_nnA2$ = -20						; size = 4
_nnA1$ = -16						; size = 4
_en$ = -12						; size = 4
_nn$ = -8						; size = 4
_this$ = -4						; size = 4
_con$ = 8						; size = 4
??8CON@@QBE_NABV0@@Z PROC				; CON::operator==
; _this$ = ecx

; 91   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 92   :   int nn, en, nnA1, nnA2;
; 93   :   if (m_numNode != con.m_numNode) return false;

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00013	74 07		 je	 SHORT $LN8@operator
  00015	32 c0		 xor	 al, al
  00017	e9 5d 01 00 00	 jmp	 $LN1@operator
$LN8@operator:

; 94   :   for (nn=0; nn<m_numNode; nn++)

  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nn$[ebp], 0
  00023	eb 09		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00025	8b 45 f8	 mov	 eax, DWORD PTR _nn$[ebp]
  00028	83 c0 01	 add	 eax, 1
  0002b	89 45 f8	 mov	 DWORD PTR _nn$[ebp], eax
$LN4@operator:
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	8b 55 f8	 mov	 edx, DWORD PTR _nn$[ebp]
  00034	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00036	0f 8d 3b 01 00
	00		 jge	 $LN3@operator

; 95   :   {
; 96   :     nnA1 = nd[nn].ix;

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _nn$[ebp]
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  0004a	89 55 f0	 mov	 DWORD PTR _nnA1$[ebp], edx

; 97   :     nnA2 = con.nd[nn].ix;

  0004d	8b 45 f8	 mov	 eax, DWORD PTR _nn$[ebp]
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00053	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  0005b	89 55 ec	 mov	 DWORD PTR _nnA2$[ebp], edx

; 98   :     if (nd[nnA1].ec != con.nd[nnA2].ec) return false; 

  0005e	8b 45 f0	 mov	 eax, DWORD PTR _nnA1$[ebp]
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	0f b6 94 81 10
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4112]
  0006c	8b 45 ec	 mov	 eax, DWORD PTR _nnA2$[ebp]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00072	0f b6 84 81 10
	10 00 00	 movzx	 eax, BYTE PTR [ecx+eax*4+4112]
  0007a	3b d0		 cmp	 edx, eax
  0007c	74 07		 je	 SHORT $LN9@operator
  0007e	32 c0		 xor	 al, al
  00080	e9 f4 00 00 00	 jmp	 $LN1@operator
$LN9@operator:

; 99   :     if (ed[nnA1].e[0].el != con.ed[nnA2].e[0].el) return false;

  00085	8b 4d f0	 mov	 ecx, DWORD PTR _nnA1$[ebp]
  00088	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008b	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  0008f	b9 02 00 00 00	 mov	 ecx, 2
  00094	6b d1 00	 imul	 edx, ecx, 0
  00097	0f b6 44 10 01	 movzx	 eax, BYTE PTR [eax+edx+1]
  0009c	8b 4d ec	 mov	 ecx, DWORD PTR _nnA2$[ebp]
  0009f	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  000a2	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  000a6	ba 02 00 00 00	 mov	 edx, 2
  000ab	6b d2 00	 imul	 edx, edx, 0
  000ae	0f b6 4c 11 01	 movzx	 ecx, BYTE PTR [ecx+edx+1]
  000b3	3b c1		 cmp	 eax, ecx
  000b5	74 07		 je	 SHORT $LN10@operator
  000b7	32 c0		 xor	 al, al
  000b9	e9 bb 00 00 00	 jmp	 $LN1@operator
$LN10@operator:

; 100  :     if (ed[nnA1].e[0].ng != con.ed[nnA2].e[0].ng) return false;

  000be	8b 55 f0	 mov	 edx, DWORD PTR _nnA1$[ebp]
  000c1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c4	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  000c8	ba 02 00 00 00	 mov	 edx, 2
  000cd	6b c2 00	 imul	 eax, edx, 0
  000d0	0f b6 0c 01	 movzx	 ecx, BYTE PTR [ecx+eax]
  000d4	8b 55 ec	 mov	 edx, DWORD PTR _nnA2$[ebp]
  000d7	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  000da	8d 54 d0 10	 lea	 edx, DWORD PTR [eax+edx*8+16]
  000de	b8 02 00 00 00	 mov	 eax, 2
  000e3	6b c0 00	 imul	 eax, eax, 0
  000e6	0f b6 14 02	 movzx	 edx, BYTE PTR [edx+eax]
  000ea	3b ca		 cmp	 ecx, edx
  000ec	74 07		 je	 SHORT $LN11@operator
  000ee	32 c0		 xor	 al, al
  000f0	e9 84 00 00 00	 jmp	 $LN1@operator
$LN11@operator:

; 101  :     for (en=1; en<nd[nnA1].ec; en++)

  000f5	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR _en$[ebp], 1
  000fc	eb 09		 jmp	 SHORT $LN7@operator
$LN5@operator:
  000fe	8b 45 f4	 mov	 eax, DWORD PTR _en$[ebp]
  00101	83 c0 01	 add	 eax, 1
  00104	89 45 f4	 mov	 DWORD PTR _en$[ebp], eax
$LN7@operator:
  00107	8b 4d f0	 mov	 ecx, DWORD PTR _nnA1$[ebp]
  0010a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0010d	0f b6 84 8a 10
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4112]
  00115	39 45 f4	 cmp	 DWORD PTR _en$[ebp], eax
  00118	7d 58		 jge	 SHORT $LN6@operator

; 102  :     {
; 103  :       if (ed[nnA1].e[en].el != con.ed[nnA2].e[en].el) return false;

  0011a	8b 4d f0	 mov	 ecx, DWORD PTR _nnA1$[ebp]
  0011d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00120	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00124	8b 4d f4	 mov	 ecx, DWORD PTR _en$[ebp]
  00127	0f b6 54 48 01	 movzx	 edx, BYTE PTR [eax+ecx*2+1]
  0012c	8b 45 ec	 mov	 eax, DWORD PTR _nnA2$[ebp]
  0012f	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00132	8d 44 c1 10	 lea	 eax, DWORD PTR [ecx+eax*8+16]
  00136	8b 4d f4	 mov	 ecx, DWORD PTR _en$[ebp]
  00139	0f b6 44 48 01	 movzx	 eax, BYTE PTR [eax+ecx*2+1]
  0013e	3b d0		 cmp	 edx, eax
  00140	74 04		 je	 SHORT $LN12@operator
  00142	32 c0		 xor	 al, al
  00144	eb 33		 jmp	 SHORT $LN1@operator
$LN12@operator:

; 104  :       if (ed[nnA1].e[en].ng != con.ed[nnA2].e[en].ng) return false;

  00146	8b 4d f0	 mov	 ecx, DWORD PTR _nnA1$[ebp]
  00149	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0014c	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00150	8b 4d f4	 mov	 ecx, DWORD PTR _en$[ebp]
  00153	0f b6 14 48	 movzx	 edx, BYTE PTR [eax+ecx*2]
  00157	8b 45 ec	 mov	 eax, DWORD PTR _nnA2$[ebp]
  0015a	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0015d	8d 44 c1 10	 lea	 eax, DWORD PTR [ecx+eax*8+16]
  00161	8b 4d f4	 mov	 ecx, DWORD PTR _en$[ebp]
  00164	0f b6 04 48	 movzx	 eax, BYTE PTR [eax+ecx*2]
  00168	3b d0		 cmp	 edx, eax
  0016a	74 04		 je	 SHORT $LN13@operator
  0016c	32 c0		 xor	 al, al
  0016e	eb 09		 jmp	 SHORT $LN1@operator
$LN13@operator:

; 105  :       //if (sd[nnA1][en].ne != con.sd[nnA2][en].ne) return false;
; 106  :       //if (sd[nnA1][en].ns != con.sd[nnA2][en].ns) return false;
; 107  :     };

  00170	eb 8c		 jmp	 SHORT $LN5@operator
$LN6@operator:

; 108  :   };

  00172	e9 ae fe ff ff	 jmp	 $LN2@operator
$LN3@operator:

; 109  :   return true;

  00177	b0 01		 mov	 al, 1
$LN1@operator:

; 110  : }

  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 04 00	 ret	 4
??8CON@@QBE_NABV0@@Z ENDP				; CON::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Strings.cpp
_TEXT	SEGMENT
_nnA$ = -12						; size = 4
_nn$ = -8						; size = 4
_this$ = -4						; size = 4
_con$ = 8						; size = 4
??4CON@@QAEAAV0@ABV0@@Z PROC				; CON::operator=
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000f	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00016	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 70   :   int nn, nnA;
; 71   :   m_numNode        = con.m_numNode;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	89 10		 mov	 DWORD PTR [eax], edx

; 72   :   m_coinsRemaining = con.m_coinsRemaining;

  0002a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002d	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00030	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00033	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 73   :   m_neededToWin    = con.m_neededToWin;

  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  0003c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0003f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 74   :   nd[GROUND].gn = GROUND;

  00042	b8 04 00 00 00	 mov	 eax, 4
  00047	69 c8 fa 00 00
	00		 imul	 ecx, eax, 250
  0004d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00050	c6 84 0a 11 10
	00 00 fa	 mov	 BYTE PTR [edx+ecx+4113], 250 ; 000000faH

; 75   :   nd[DEADEND].gn = DEADEND;

  00058	b8 04 00 00 00	 mov	 eax, 4
  0005d	69 c8 f9 00 00
	00		 imul	 ecx, eax, 249
  00063	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00066	c6 84 0a 11 10
	00 00 f9	 mov	 BYTE PTR [edx+ecx+4113], 249 ; 000000f9H

; 76   :   for (nn=0; nn<m_numNode; nn++)

  0006e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nn$[ebp], 0
  00075	eb 09		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00077	8b 45 f8	 mov	 eax, DWORD PTR _nn$[ebp]
  0007a	83 c0 01	 add	 eax, 1
  0007d	89 45 f8	 mov	 DWORD PTR _nn$[ebp], eax
$LN4@operator:
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00083	8b 55 f8	 mov	 edx, DWORD PTR _nn$[ebp]
  00086	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00088	0f 8d 92 00 00
	00		 jge	 $LN3@operator

; 77   :   {
; 78   :     nnA = con.nd[nn].ix;

  0008e	8b 45 f8	 mov	 eax, DWORD PTR _nn$[ebp]
  00091	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  00094	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  0009c	89 55 f4	 mov	 DWORD PTR _nnA$[ebp], edx

; 79   :     nd[nn].ix = (STOPNUM)nnA;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _nn$[ebp]
  000a2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	8a 55 f4	 mov	 dl, BYTE PTR _nnA$[ebp]
  000a8	88 94 81 13 10
	00 00		 mov	 BYTE PTR [ecx+eax*4+4115], dl

; 80   :     *((ui64 *)&sd[nnA][0]) = *((ui64 *)&con.sd[nnA][0]);

  000af	8b 45 f4	 mov	 eax, DWORD PTR _nnA$[ebp]
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _con$[ebp]
  000b5	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  000bc	b8 02 00 00 00	 mov	 eax, 2
  000c1	6b c8 00	 imul	 ecx, eax, 0
  000c4	8b 45 f4	 mov	 eax, DWORD PTR _nnA$[ebp]
  000c7	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  000ca	8d 84 c6 10 08
	00 00		 lea	 eax, DWORD PTR [esi+eax*8+2064]
  000d1	be 02 00 00 00	 mov	 esi, 2
  000d6	6b f6 00	 imul	 esi, esi, 0
  000d9	8b 3c 0a	 mov	 edi, DWORD PTR [edx+ecx]
  000dc	8b 4c 0a 04	 mov	 ecx, DWORD PTR [edx+ecx+4]
  000e0	89 3c 30	 mov	 DWORD PTR [eax+esi], edi
  000e3	89 4c 30 04	 mov	 DWORD PTR [eax+esi+4], ecx

; 81   :     //sd[nnA][1] = con.sd[nnA][1];
; 82   :     //sd[nnA][2] = con.sd[nnA][2];
; 83   :     //sd[nnA][3] = con.sd[nnA][3];
; 84   :     ed[nnA] = con.ed[nnA];

  000e7	8b 55 f4	 mov	 edx, DWORD PTR _nnA$[ebp]
  000ea	8b 45 08	 mov	 eax, DWORD PTR _con$[ebp]
  000ed	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  000f1	51		 push	 ecx
  000f2	8b 55 f4	 mov	 edx, DWORD PTR _nnA$[ebp]
  000f5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f8	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  000fc	e8 00 00 00 00	 call	 ??4EDGEDATA@@QAEXABU0@@Z ; EDGEDATA::operator=

; 85   :     nd[nnA] = con.nd[nnA];

  00101	8b 4d f4	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00104	8b 55 08	 mov	 edx, DWORD PTR _con$[ebp]
  00107	8b 84 8a 10 10
	00 00		 mov	 eax, DWORD PTR [edx+ecx*4+4112]
  0010e	8b 4d f4	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00111	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00114	89 84 8a 10 10
	00 00		 mov	 DWORD PTR [edx+ecx*4+4112], eax

; 86   :   };

  0011b	e9 57 ff ff ff	 jmp	 $LN2@operator
$LN3@operator:

; 87   :   return *this;

  00120	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 88   : }

  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	83 c4 0c	 add	 esp, 12			; 0000000cH
  00128	3b ec		 cmp	 ebp, esp
  0012a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012f	8b e5		 mov	 esp, ebp
  00131	5d		 pop	 ebp
  00132	c2 04 00	 ret	 4
??4CON@@QAEAAV0@ABV0@@Z ENDP				; CON::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Strings.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CON@@QAE@XZ PROC					; CON::~CON
; _this$ = ecx

; 60   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 61   : //  NotImplemented("~CON");
; 62   : //  CString msg;
; 63   : //  msg.Format("Hash Stats = %d %d %d",hashTries, hashFinds, hashUses);
; 64   : //  Note(msg);
; 65   : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1CON@@QAE@XZ ENDP					; CON::~CON
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Strings.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CON@@QAE@XZ PROC					; CON::CON
; _this$ = ecx

; 52   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 53   :   m_numNode = 0;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 54   :   nd[GROUND].gn = GROUND;

  00010	b9 04 00 00 00	 mov	 ecx, 4
  00015	69 d1 fa 00 00
	00		 imul	 edx, ecx, 250
  0001b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001e	c6 84 10 11 10
	00 00 fa	 mov	 BYTE PTR [eax+edx+4113], 250 ; 000000faH

; 55   :   nd[DEADEND].gn = DEADEND;

  00026	b9 04 00 00 00	 mov	 ecx, 4
  0002b	69 d1 f9 00 00
	00		 imul	 edx, ecx, 249
  00031	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00034	c6 84 10 11 10
	00 00 f9	 mov	 BYTE PTR [eax+edx+4113], 249 ; 000000f9H

; 56   : }

  0003c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c3		 ret	 0
??0CON@@QAE@XZ ENDP					; CON::CON
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ??4EDGEDATA@@QAEXABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_ed$ = 8						; size = 4
??4EDGEDATA@@QAEXABU0@@Z PROC				; EDGEDATA::operator=, COMDAT
; _this$ = ecx

; 172  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 173  :     *((ui64 *)this) = *((ui64 *)(&ed));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _ed$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00012	89 10		 mov	 DWORD PTR [eax], edx
  00014	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 174  :   };

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
??4EDGEDATA@@QAEXABU0@@Z ENDP				; EDGEDATA::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Strings.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Strings.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
