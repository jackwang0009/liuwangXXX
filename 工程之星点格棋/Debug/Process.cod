; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

	TITLE	C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Debug\Process.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?pCurrentProcess@@3PAPAVPROCESS@@A		; pCurrentProcess
PUBLIC	?numProcess@@3HA				; numProcess
PUBLIC	?replacementProcess@@3PAVPROCESS@@A		; replacementProcess
PUBLIC	?pushedProcess@@3PAVPROCESS@@A			; pushedProcess
PUBLIC	?popProcess@@3_NA				; popProcess
_BSS	SEGMENT
?pCurrentProcess@@3PAPAVPROCESS@@A DD 014H DUP (?)	; pCurrentProcess
?numProcess@@3HA DD 01H DUP (?)				; numProcess
?replacementProcess@@3PAVPROCESS@@A DD 01H DUP (?)	; replacementProcess
?pushedProcess@@3PAVPROCESS@@A DD 01H DUP (?)		; pushedProcess
?popProcess@@3_NA DB 01H DUP (?)			; popProcess
_BSS	ENDS
CONST	SEGMENT
$SG74042 DB	'atlTraceException', 00H
	ORG $+2
$SG226239 DB	'Doubly popped process', 00H
	ORG $+2
$SG226245 DB	'Doubly pushed process', 00H
	ORG $+2
$SG226260 DB	'Doubly replaced process', 00H
$SG226282 DB	'Opening Window twice???', 00H
$SG226289 DB	'Unknown ProcessMaintenance message', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	??0VECTOR@@QAE@XZ				; VECTOR::VECTOR
PUBLIC	?PopProcess@PROCESS@@IAEXXZ			; PROCESS::PopProcess
PUBLIC	?PushProcess@PROCESS@@IAEXPAV1@@Z		; PROCESS::PushProcess
PUBLIC	?ReplaceProcess@PROCESS@@IAEXPAV1@@Z		; PROCESS::ReplaceProcess
PUBLIC	??0PROCESS@@QAE@XZ				; PROCESS::PROCESS
PUBLIC	??1PROCESS@@QAE@XZ				; PROCESS::~PROCESS
PUBLIC	?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; PROCESS::GetTitle
PUBLIC	?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnShutdown
PUBLIC	?OnReturn@PROCESS@@UAE?AW4STATUS@@PAV1@@Z	; PROCESS::OnReturn
PUBLIC	?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z ; PROCESS::OnLButtonDown
PUBLIC	?OnInitialize@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnInitialize
PUBLIC	?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z		; PROCESS::OnChar
PUBLIC	?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z		; PROCESS::OnTimer
PUBLIC	?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnThreadCompletion
PUBLIC	?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnComputerMove
PUBLIC	?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnComputeNimval
PUBLIC	?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnEnterPosition
PUBLIC	?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnPlayGame
PUBLIC	?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnUnDoTurn
PUBLIC	?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnReDoTurn
PUBLIC	?IsIdle@PROCESS@@UBE_NXZ			; PROCESS::IsIdle
PUBLIC	?IsOK_ComputerMove@PROCESS@@UBE_NXZ		; PROCESS::IsOK_ComputerMove
PUBLIC	?IsOK_ComputeNimval@PROCESS@@UBE_NXZ		; PROCESS::IsOK_ComputeNimval
PUBLIC	?IsOK_EnterPosition@PROCESS@@UBE_NXZ		; PROCESS::IsOK_EnterPosition
PUBLIC	?IsOK_PlayGame@PROCESS@@UBE_NXZ			; PROCESS::IsOK_PlayGame
PUBLIC	?IsOK_UnDoTurn@PROCESS@@UBE_NXZ			; PROCESS::IsOK_UnDoTurn
PUBLIC	?IsOK_ReDoTurn@PROCESS@@UBE_NXZ			; PROCESS::IsOK_ReDoTurn
PUBLIC	?IsOK_TestCreation@PROCESS@@UBE_NXZ		; PROCESS::IsOK_TestCreation
PUBLIC	?IsOK_Options@PROCESS@@UBE_NXZ			; PROCESS::IsOK_Options
PUBLIC	??_GPROCESS@@QAEPAXI@Z				; PROCESS::`scalar deleting destructor'
PUBLIC	?IsOK_ComputerMove@PROCESS_PLAY_GAME@@EBE_NXZ	; PROCESS_PLAY_GAME::IsOK_ComputerMove
PUBLIC	?IsOK_ComputeNimval@PROCESS_PLAY_GAME@@EBE_NXZ	; PROCESS_PLAY_GAME::IsOK_ComputeNimval
PUBLIC	?IsOK_Options@PROCESS_PLAY_GAME@@EBE_NXZ	; PROCESS_PLAY_GAME::IsOK_Options
PUBLIC	??0PROCESS_PLAY_GAME@@QAE@XZ			; PROCESS_PLAY_GAME::PROCESS_PLAY_GAME
PUBLIC	?ProcessManager@@YAXW4STATUS@@@Z		; ProcessManager
PUBLIC	?CurrentProcess@@YAPAVPROCESS@@XZ		; CurrentProcess
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@ ; `string'
PUBLIC	??_7PROCESS@@6B@				; PROCESS::`vftable'
PUBLIC	??_C@_0O@BAKGMPOP@Process?5Error@		; `string'
PUBLIC	??_7PROCESS_PLAY_GAME@@6B@			; PROCESS_PLAY_GAME::`vftable'
PUBLIC	??_R4PROCESS@@6B@				; PROCESS::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPROCESS@@@8				; PROCESS `RTTI Type Descriptor'
PUBLIC	??_R3PROCESS@@8					; PROCESS::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PROCESS@@8					; PROCESS::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PROCESS@@8			; PROCESS::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4PROCESS_PLAY_GAME@@6B@			; PROCESS_PLAY_GAME::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPROCESS_PLAY_GAME@@@8			; PROCESS_PLAY_GAME `RTTI Type Descriptor'
PUBLIC	??_R3PROCESS_PLAY_GAME@@8			; PROCESS_PLAY_GAME::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PROCESS_PLAY_GAME@@8			; PROCESS_PLAY_GAME::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PROCESS_PLAY_GAME@@8		; PROCESS_PLAY_GAME::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z:PROC
EXTRN	?die@@YAXPBD@Z:PROC				; die
EXTRN	?InvalidateView@@YAXXZ:PROC			; InvalidateView
EXTRN	?OnLButtonDown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@IVCPoint@@@Z:PROC ; PROCESS_PLAY_GAME::OnLButtonDown
EXTRN	?OnInitialize@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ:PROC ; PROCESS_PLAY_GAME::OnInitialize
EXTRN	?OnShutdown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ:PROC ; PROCESS_PLAY_GAME::OnShutdown
EXTRN	?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ:PROC ; PROCESS_PLAY_GAME::OnComputeNimval
EXTRN	?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ:PROC ; PROCESS_PLAY_GAME::OnComputerMove
EXTRN	?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z:PROC ; PROCESS_PLAY_GAME::OnChar
EXTRN	?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ:PROC ; PROCESS_PLAY_GAME::OnUnDoTurn
EXTRN	?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ:PROC ; PROCESS_PLAY_GAME::OnReDoTurn
EXTRN	?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z:PROC ; PROCESS_PLAY_GAME::OnReturn
EXTRN	?IsOK_UnDoTurn@PROCESS_PLAY_GAME@@EBE_NXZ:PROC	; PROCESS_PLAY_GAME::IsOK_UnDoTurn
EXTRN	?IsOK_ReDoTurn@PROCESS_PLAY_GAME@@EBE_NXZ:PROC	; PROCESS_PLAY_GAME::IsOK_ReDoTurn
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@PROCESS_PLAY_GAME@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PROCESS_PLAY_GAME@@8 DD FLAT:??_R0?AVPROCESS_PLAY_GAME@@@8 ; PROCESS_PLAY_GAME::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PROCESS_PLAY_GAME@@8
rdata$r	ENDS
;	COMDAT ??_R2PROCESS_PLAY_GAME@@8
rdata$r	SEGMENT
??_R2PROCESS_PLAY_GAME@@8 DD FLAT:??_R1A@?0A@EA@PROCESS_PLAY_GAME@@8 ; PROCESS_PLAY_GAME::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R3PROCESS_PLAY_GAME@@8
rdata$r	SEGMENT
??_R3PROCESS_PLAY_GAME@@8 DD 00H			; PROCESS_PLAY_GAME::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PROCESS_PLAY_GAME@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPROCESS_PLAY_GAME@@@8
data$rs	SEGMENT
??_R0?AVPROCESS_PLAY_GAME@@@8 DD FLAT:??_7type_info@@6B@ ; PROCESS_PLAY_GAME `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPROCESS_PLAY_GAME@@', 00H
data$rs	ENDS
;	COMDAT ??_R4PROCESS_PLAY_GAME@@6B@
rdata$r	SEGMENT
??_R4PROCESS_PLAY_GAME@@6B@ DD 00H			; PROCESS_PLAY_GAME::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPROCESS_PLAY_GAME@@@8
	DD	FLAT:??_R3PROCESS_PLAY_GAME@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PROCESS@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PROCESS@@8 DD FLAT:??_R0?AVPROCESS@@@8	; PROCESS::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R2PROCESS@@8
rdata$r	SEGMENT
??_R2PROCESS@@8 DD FLAT:??_R1A@?0A@EA@PROCESS@@8	; PROCESS::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PROCESS@@8
rdata$r	SEGMENT
??_R3PROCESS@@8 DD 00H					; PROCESS::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPROCESS@@@8
data$rs	SEGMENT
??_R0?AVPROCESS@@@8 DD FLAT:??_7type_info@@6B@		; PROCESS `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPROCESS@@', 00H
data$rs	ENDS
;	COMDAT ??_R4PROCESS@@6B@
rdata$r	SEGMENT
??_R4PROCESS@@6B@ DD 00H				; PROCESS::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPROCESS@@@8
	DD	FLAT:??_R3PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_7PROCESS_PLAY_GAME@@6B@
CONST	SEGMENT
??_7PROCESS_PLAY_GAME@@6B@ DD FLAT:??_R4PROCESS_PLAY_GAME@@6B@ ; PROCESS_PLAY_GAME::`vftable'
	DD	FLAT:?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
	DD	FLAT:?OnShutdown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z
	DD	FLAT:?OnLButtonDown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@IVCPoint@@@Z
	DD	FLAT:?OnInitialize@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z
	DD	FLAT:?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z
	DD	FLAT:?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
	DD	FLAT:?IsIdle@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputerMove@PROCESS_PLAY_GAME@@EBE_NXZ
	DD	FLAT:?IsOK_ComputeNimval@PROCESS_PLAY_GAME@@EBE_NXZ
	DD	FLAT:?IsOK_EnterPosition@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_PlayGame@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_UnDoTurn@PROCESS_PLAY_GAME@@EBE_NXZ
	DD	FLAT:?IsOK_ReDoTurn@PROCESS_PLAY_GAME@@EBE_NXZ
	DD	FLAT:?IsOK_TestCreation@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_Options@PROCESS_PLAY_GAME@@EBE_NXZ
CONST	ENDS
;	COMDAT ??_C@_0O@BAKGMPOP@Process?5Error@
CONST	SEGMENT
??_C@_0O@BAKGMPOP@Process?5Error@ DB 'Process Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7PROCESS@@6B@
CONST	SEGMENT
??_7PROCESS@@6B@ DD FLAT:??_R4PROCESS@@6B@		; PROCESS::`vftable'
	DD	FLAT:?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
	DD	FLAT:?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnReturn@PROCESS@@UAE?AW4STATUS@@PAV1@@Z
	DD	FLAT:?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z
	DD	FLAT:?OnInitialize@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z
	DD	FLAT:?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z
	DD	FLAT:?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?IsIdle@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputerMove@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputeNimval@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_EnterPosition@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_PlayGame@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_UnDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ReDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_TestCreation@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_Options@PROCESS@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
CONST	SEGMENT
??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@ DB 'G'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '\'
	DB	00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T', 00H
	DB	'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H, 'S'
	DB	00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.', 00H
	DB	'3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2', 00H, '1'
	DB	00H, '5', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm', 00H
	DB	'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?ProcessManager@@YAXW4STATUS@@@Z$0
	DD	01dH
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$?ProcessManager@@YAXW4STATUS@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ProcessManager@@YAXW4STATUS@@@Z$0
__ehfuncinfo$?ProcessManager@@YAXW4STATUS@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ProcessManager@@YAXW4STATUS@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0PROCESS_PLAY_GAME@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0PROCESS_PLAY_GAME@@QAE@XZ$0
__ehfuncinfo$??0PROCESS_PLAY_GAME@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0PROCESS_PLAY_GAME@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0100H
voltbl	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.cpp
_TEXT	SEGMENT
?CurrentProcess@@YAPAVPROCESS@@XZ PROC			; CurrentProcess

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 66   :   return pCurrentProcess[numProcess-1];

  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numProcess@@3HA ; numProcess
  00008	8b 04 85 fc ff
	ff ff		 mov	 eax, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[eax*4-4]

; 67   : }

  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?CurrentProcess@@YAPAVPROCESS@@XZ ENDP			; CurrentProcess
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.cpp
_TEXT	SEGMENT
tv159 = -52						; size = 4
tv130 = -48						; size = 4
tv86 = -44						; size = 4
tv83 = -40						; size = 4
tv64 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
_i$6 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_status$ = 8						; size = 4
?ProcessManager@@YAXW4STATUS@@@Z PROC			; ProcessManager

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ProcessManager@@YAXW4STATUS@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  00019	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  0001e	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00023	f3 ab		 rep stosd
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
$LN4@ProcessMan:

; 71   :   for (;;)
; 72   :   {
; 73   :     switch(status)

  00036	8b 45 08	 mov	 eax, DWORD PTR _status$[ebp]
  00039	89 45 dc	 mov	 DWORD PTR tv64[ebp], eax
  0003c	83 7d dc 04	 cmp	 DWORD PTR tv64[ebp], 4
  00040	0f 87 65 01 00
	00		 ja	 $LN16@ProcessMan
  00046	8b 4d dc	 mov	 ecx, DWORD PTR tv64[ebp]
  00049	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN28@ProcessMan[ecx*4]
$LN10@ProcessMan:

; 74   :     {
; 75   :     case STATUS_STARTUP:
; 76   :       if (numProcess != 0)

  00050	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?numProcess@@3HA, 0 ; numProcess
  00057	74 12		 je	 SHORT $LN11@ProcessMan

; 77   :       {
; 78   :         die("Opening Window twice???");

  00059	68 00 00 00 00	 push	 OFFSET $SG226282
  0005e	e8 00 00 00 00	 call	 ?die@@YAXPBD@Z		; die
  00063	83 c4 04	 add	 esp, 4

; 79   :         return;

  00066	e9 ad 02 00 00	 jmp	 $LN1@ProcessMan
$LN11@ProcessMan:

; 80   :       };
; 81   :       pCurrentProcess[0] = new PROCESS_PLAY_GAME;

  0006b	6a 10		 push	 16			; 00000010H
  0006d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00072	83 c4 04	 add	 esp, 4
  00075	89 45 e8	 mov	 DWORD PTR $T4[ebp], eax
  00078	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007f	83 7d e8 00	 cmp	 DWORD PTR $T4[ebp], 0
  00083	74 0d		 je	 SHORT $LN21@ProcessMan
  00085	8b 4d e8	 mov	 ecx, DWORD PTR $T4[ebp]
  00088	e8 00 00 00 00	 call	 ??0PROCESS_PLAY_GAME@@QAE@XZ
  0008d	89 45 d8	 mov	 DWORD PTR tv83[ebp], eax
  00090	eb 07		 jmp	 SHORT $LN22@ProcessMan
$LN21@ProcessMan:
  00092	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN22@ProcessMan:
  00099	8b 55 d8	 mov	 edx, DWORD PTR tv83[ebp]
  0009c	89 55 ec	 mov	 DWORD PTR $T5[ebp], edx
  0009f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a6	b8 04 00 00 00	 mov	 eax, 4
  000ab	6b c8 00	 imul	 ecx, eax, 0
  000ae	8b 55 ec	 mov	 edx, DWORD PTR $T5[ebp]
  000b1	89 91 00 00 00
	00		 mov	 DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[ecx], edx

; 82   :       numProcess = 1;

  000b7	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?numProcess@@3HA, 1 ; numProcess

; 83   :       status = CurrentProcess()->OnInitialize();

  000c1	e8 00 00 00 00	 call	 ?CurrentProcess@@YAPAVPROCESS@@XZ ; CurrentProcess
  000c6	89 45 d4	 mov	 DWORD PTR tv86[ebp], eax
  000c9	8b 45 d4	 mov	 eax, DWORD PTR tv86[ebp]
  000cc	8b 10		 mov	 edx, DWORD PTR [eax]
  000ce	8b f4		 mov	 esi, esp
  000d0	8b 4d d4	 mov	 ecx, DWORD PTR tv86[ebp]
  000d3	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000d6	ff d0		 call	 eax
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000df	89 45 08	 mov	 DWORD PTR _status$[ebp], eax

; 84   :       INVALIDATE

  000e2	e8 00 00 00 00	 call	 ?InvalidateView@@YAXXZ	; InvalidateView

; 85   :       break;

  000e7	e9 d1 00 00 00	 jmp	 $LN5@ProcessMan
$LN12@ProcessMan:

; 86   :     case STATUS_SHUTDOWN:
; 87   :       {
; 88   :         int i;
; 89   :         for (i=0; i<numProcess; i++)

  000ec	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  000f3	eb 09		 jmp	 SHORT $LN9@ProcessMan
$LN7@ProcessMan:
  000f5	8b 4d f0	 mov	 ecx, DWORD PTR _i$6[ebp]
  000f8	83 c1 01	 add	 ecx, 1
  000fb	89 4d f0	 mov	 DWORD PTR _i$6[ebp], ecx
$LN9@ProcessMan:
  000fe	8b 55 f0	 mov	 edx, DWORD PTR _i$6[ebp]
  00101	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?numProcess@@3HA ; numProcess
  00107	7d 39		 jge	 SHORT $LN8@ProcessMan

; 90   :         {
; 91   :           delete pCurrentProcess[i];

  00109	8b 45 f0	 mov	 eax, DWORD PTR _i$6[ebp]
  0010c	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[eax*4]
  00113	89 4d e4	 mov	 DWORD PTR $T3[ebp], ecx
  00116	83 7d e4 00	 cmp	 DWORD PTR $T3[ebp], 0
  0011a	74 0f		 je	 SHORT $LN23@ProcessMan
  0011c	6a 01		 push	 1
  0011e	8b 4d e4	 mov	 ecx, DWORD PTR $T3[ebp]
  00121	e8 00 00 00 00	 call	 ??_GPROCESS@@QAEPAXI@Z
  00126	89 45 d0	 mov	 DWORD PTR tv130[ebp], eax
  00129	eb 07		 jmp	 SHORT $LN24@ProcessMan
$LN23@ProcessMan:
  0012b	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
$LN24@ProcessMan:

; 92   :           pCurrentProcess[i] = NULL;

  00132	8b 55 f0	 mov	 edx, DWORD PTR _i$6[ebp]
  00135	c7 04 95 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[edx*4], 0

; 93   :         };

  00140	eb b3		 jmp	 SHORT $LN7@ProcessMan
$LN8@ProcessMan:

; 94   :         numProcess = 0;

  00142	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?numProcess@@3HA, 0 ; numProcess

; 95   :       };
; 96   :       return;

  0014c	e9 c7 01 00 00	 jmp	 $LN1@ProcessMan
$LN14@ProcessMan:

; 97   :     case STATUS_OK:
; 98   :     case STATUS_IGNORED:
; 99   :       break;

  00151	eb 6a		 jmp	 SHORT $LN5@ProcessMan
$LN15@ProcessMan:

; 100  :     case STATUS_DONE:
; 101  :       numProcess--;

  00153	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numProcess@@3HA ; numProcess
  00158	83 e8 01	 sub	 eax, 1
  0015b	a3 00 00 00 00	 mov	 DWORD PTR ?numProcess@@3HA, eax ; numProcess

; 102  :       popProcess = false;

  00160	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?popProcess@@3_NA, 0 ; popProcess

; 103  :       status = pCurrentProcess[numProcess-1]->OnReturn(pCurrentProcess[numProcess]);

  00167	8b f4		 mov	 esi, esp
  00169	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?numProcess@@3HA ; numProcess
  0016f	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[ecx*4]
  00176	52		 push	 edx
  00177	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numProcess@@3HA ; numProcess
  0017c	8b 0c 85 fc ff
	ff ff		 mov	 ecx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[eax*4-4]
  00183	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?numProcess@@3HA ; numProcess
  00189	8b 01		 mov	 eax, DWORD PTR [ecx]
  0018b	8b 0c 95 fc ff
	ff ff		 mov	 ecx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[edx*4-4]
  00192	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00195	ff d2		 call	 edx
  00197	3b f4		 cmp	 esi, esp
  00199	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019e	89 45 08	 mov	 DWORD PTR _status$[ebp], eax

; 104  :       INVALIDATE

  001a1	e8 00 00 00 00	 call	 ?InvalidateView@@YAXXZ	; InvalidateView

; 105  :       continue;

  001a6	e9 8b fe ff ff	 jmp	 $LN4@ProcessMan
$LN16@ProcessMan:

; 106  :     default:
; 107  :       die("Unknown ProcessMaintenance message");

  001ab	68 00 00 00 00	 push	 OFFSET $SG226289
  001b0	e8 00 00 00 00	 call	 ?die@@YAXPBD@Z		; die
  001b5	83 c4 04	 add	 esp, 4

; 108  :       return;

  001b8	e9 5b 01 00 00	 jmp	 $LN1@ProcessMan
$LN5@ProcessMan:

; 109  :     };
; 110  :     if (replacementProcess != NULL)

  001bd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?replacementProcess@@3PAVPROCESS@@A, 0 ; replacementProcess
  001c4	74 7d		 je	 SHORT $LN17@ProcessMan

; 111  :     {
; 112  :       delete pCurrentProcess[numProcess-1];

  001c6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numProcess@@3HA ; numProcess
  001cb	8b 0c 85 fc ff
	ff ff		 mov	 ecx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[eax*4-4]
  001d2	89 4d e0	 mov	 DWORD PTR $T2[ebp], ecx
  001d5	83 7d e0 00	 cmp	 DWORD PTR $T2[ebp], 0
  001d9	74 0f		 je	 SHORT $LN25@ProcessMan
  001db	6a 01		 push	 1
  001dd	8b 4d e0	 mov	 ecx, DWORD PTR $T2[ebp]
  001e0	e8 00 00 00 00	 call	 ??_GPROCESS@@QAEPAXI@Z
  001e5	89 45 cc	 mov	 DWORD PTR tv159[ebp], eax
  001e8	eb 07		 jmp	 SHORT $LN26@ProcessMan
$LN25@ProcessMan:
  001ea	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv159[ebp], 0
$LN26@ProcessMan:

; 113  :       pCurrentProcess[numProcess-1] = replacementProcess;

  001f1	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?numProcess@@3HA ; numProcess
  001f7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?replacementProcess@@3PAVPROCESS@@A ; replacementProcess
  001fc	89 04 95 fc ff
	ff ff		 mov	 DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[edx*4-4], eax

; 114  :       replacementProcess = NULL;

  00203	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?replacementProcess@@3PAVPROCESS@@A, 0 ; replacementProcess

; 115  :       status = pCurrentProcess[numProcess-1]->OnInitialize();

  0020d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?numProcess@@3HA ; numProcess
  00213	8b 14 8d fc ff
	ff ff		 mov	 edx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[ecx*4-4]
  0021a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numProcess@@3HA ; numProcess
  0021f	8b 12		 mov	 edx, DWORD PTR [edx]
  00221	8b f4		 mov	 esi, esp
  00223	8b 0c 85 fc ff
	ff ff		 mov	 ecx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[eax*4-4]
  0022a	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0022d	ff d0		 call	 eax
  0022f	3b f4		 cmp	 esi, esp
  00231	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00236	89 45 08	 mov	 DWORD PTR _status$[ebp], eax

; 116  :       INVALIDATE

  00239	e8 00 00 00 00	 call	 ?InvalidateView@@YAXXZ	; InvalidateView

; 117  :       continue;

  0023e	e9 f3 fd ff ff	 jmp	 $LN4@ProcessMan
$LN17@ProcessMan:

; 118  :     };
; 119  :     if (popProcess)

  00243	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?popProcess@@3_NA ; popProcess
  0024a	85 c9		 test	 ecx, ecx
  0024c	74 5a		 je	 SHORT $LN18@ProcessMan

; 120  :     {
; 121  :       numProcess--;

  0024e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?numProcess@@3HA ; numProcess
  00254	83 ea 01	 sub	 edx, 1
  00257	89 15 00 00 00
	00		 mov	 DWORD PTR ?numProcess@@3HA, edx ; numProcess

; 122  :       popProcess = false;

  0025d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?popProcess@@3_NA, 0 ; popProcess

; 123  :       status = pCurrentProcess[numProcess-1]->OnReturn(pCurrentProcess[numProcess]);

  00264	8b f4		 mov	 esi, esp
  00266	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numProcess@@3HA ; numProcess
  0026b	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[eax*4]
  00272	51		 push	 ecx
  00273	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?numProcess@@3HA ; numProcess
  00279	8b 04 95 fc ff
	ff ff		 mov	 eax, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[edx*4-4]
  00280	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?numProcess@@3HA ; numProcess
  00286	8b 10		 mov	 edx, DWORD PTR [eax]
  00288	8b 0c 8d fc ff
	ff ff		 mov	 ecx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[ecx*4-4]
  0028f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00292	ff d0		 call	 eax
  00294	3b f4		 cmp	 esi, esp
  00296	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0029b	89 45 08	 mov	 DWORD PTR _status$[ebp], eax

; 124  :       INVALIDATE

  0029e	e8 00 00 00 00	 call	 ?InvalidateView@@YAXXZ	; InvalidateView

; 125  :       continue;

  002a3	e9 8e fd ff ff	 jmp	 $LN4@ProcessMan
$LN18@ProcessMan:

; 126  :     };
; 127  :     if (pushedProcess != NULL)

  002a8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pushedProcess@@3PAVPROCESS@@A, 0 ; pushedProcess
  002af	74 60		 je	 SHORT $LN19@ProcessMan

; 128  :     {
; 129  :       pCurrentProcess[numProcess++] = pushedProcess;

  002b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?numProcess@@3HA ; numProcess
  002b7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pushedProcess@@3PAVPROCESS@@A ; pushedProcess
  002bd	89 14 8d 00 00
	00 00		 mov	 DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[ecx*4], edx
  002c4	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numProcess@@3HA ; numProcess
  002c9	83 c0 01	 add	 eax, 1
  002cc	a3 00 00 00 00	 mov	 DWORD PTR ?numProcess@@3HA, eax ; numProcess

; 130  :       pushedProcess = NULL;

  002d1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pushedProcess@@3PAVPROCESS@@A, 0 ; pushedProcess

; 131  :       status = pCurrentProcess[numProcess-1]->OnInitialize();

  002db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?numProcess@@3HA ; numProcess
  002e1	8b 14 8d fc ff
	ff ff		 mov	 edx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[ecx*4-4]
  002e8	a1 00 00 00 00	 mov	 eax, DWORD PTR ?numProcess@@3HA ; numProcess
  002ed	8b 12		 mov	 edx, DWORD PTR [edx]
  002ef	8b f4		 mov	 esi, esp
  002f1	8b 0c 85 fc ff
	ff ff		 mov	 ecx, DWORD PTR ?pCurrentProcess@@3PAPAVPROCESS@@A[eax*4-4]
  002f8	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  002fb	ff d0		 call	 eax
  002fd	3b f4		 cmp	 esi, esp
  002ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00304	89 45 08	 mov	 DWORD PTR _status$[ebp], eax

; 132  :       INVALIDATE

  00307	e8 00 00 00 00	 call	 ?InvalidateView@@YAXXZ	; InvalidateView

; 133  :       continue;

  0030c	e9 25 fd ff ff	 jmp	 $LN4@ProcessMan
$LN19@ProcessMan:

; 134  :     };
; 135  :     break;

  00311	eb 05		 jmp	 SHORT $LN1@ProcessMan

; 136  :   };

  00313	e9 1e fd ff ff	 jmp	 $LN4@ProcessMan
$LN1@ProcessMan:

; 137  : }

  00318	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0031b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00322	59		 pop	 ecx
  00323	5f		 pop	 edi
  00324	5e		 pop	 esi
  00325	83 c4 34	 add	 esp, 52			; 00000034H
  00328	3b ec		 cmp	 ebp, esp
  0032a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0032f	8b e5		 mov	 esp, ebp
  00331	5d		 pop	 ebp
  00332	c3		 ret	 0
  00333	90		 npad	 1
$LN28@ProcessMan:
  00334	00 00 00 00	 DD	 $LN10@ProcessMan
  00338	00 00 00 00	 DD	 $LN12@ProcessMan
  0033c	00 00 00 00	 DD	 $LN15@ProcessMan
  00340	00 00 00 00	 DD	 $LN14@ProcessMan
  00344	00 00 00 00	 DD	 $LN14@ProcessMan
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ProcessManager@@YAXW4STATUS@@@Z$0:
  00000	6a 10		 push	 16			; 00000010H
  00002	8b 45 e8	 mov	 eax, DWORD PTR $T4[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?ProcessManager@@YAXW4STATUS@@@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ProcessManager@@YAXW4STATUS@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ProcessManager@@YAXW4STATUS@@@Z ENDP			; ProcessManager
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0PROCESS_PLAY_GAME@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0PROCESS_PLAY_GAME@@QAE@XZ PROC			; PROCESS_PLAY_GAME::PROCESS_PLAY_GAME, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0PROCESS_PLAY_GAME@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0PROCESS@@QAE@XZ	; PROCESS::PROCESS
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PROCESS_PLAY_GAME@@6B@
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 08	 add	 ecx, 8
  0004b	e8 00 00 00 00	 call	 ??0VECTOR@@QAE@XZ	; VECTOR::VECTOR
  00050	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00057	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0PROCESS_PLAY_GAME@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1PROCESS@@QAE@XZ	; PROCESS::~PROCESS
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0PROCESS_PLAY_GAME@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0PROCESS_PLAY_GAME@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0PROCESS_PLAY_GAME@@QAE@XZ ENDP			; PROCESS_PLAY_GAME::PROCESS_PLAY_GAME
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_Options@PROCESS_PLAY_GAME@@EBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_Options@PROCESS_PLAY_GAME@@EBE_NXZ PROC		; PROCESS_PLAY_GAME::IsOK_Options, COMDAT
; _this$ = ecx

; 104  :   bool    IsOK_Options(void)const{return true;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_Options@PROCESS_PLAY_GAME@@EBE_NXZ ENDP		; PROCESS_PLAY_GAME::IsOK_Options
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ComputeNimval@PROCESS_PLAY_GAME@@EBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ComputeNimval@PROCESS_PLAY_GAME@@EBE_NXZ PROC	; PROCESS_PLAY_GAME::IsOK_ComputeNimval, COMDAT
; _this$ = ecx

; 101  :   bool    IsOK_ComputeNimval(void) const {return true;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ComputeNimval@PROCESS_PLAY_GAME@@EBE_NXZ ENDP	; PROCESS_PLAY_GAME::IsOK_ComputeNimval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ComputerMove@PROCESS_PLAY_GAME@@EBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ComputerMove@PROCESS_PLAY_GAME@@EBE_NXZ PROC	; PROCESS_PLAY_GAME::IsOK_ComputerMove, COMDAT
; _this$ = ecx

; 100  :   bool    IsOK_ComputerMove(void)const{return true;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b0 01		 mov	 al, 1
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ComputerMove@PROCESS_PLAY_GAME@@EBE_NXZ ENDP	; PROCESS_PLAY_GAME::IsOK_ComputerMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GPROCESS@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPROCESS@@QAEPAXI@Z PROC				; PROCESS::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1PROCESS@@QAE@XZ	; PROCESS::~PROCESS
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 08		 push	 8
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GPROCESS@@QAEPAXI@Z ENDP				; PROCESS::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_Options@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_Options@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_Options, COMDAT
; _this$ = ecx

; 48   :   virtual bool    IsOK_Options(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_Options@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_Options
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_TestCreation@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_TestCreation@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_TestCreation, COMDAT
; _this$ = ecx

; 47   :   virtual bool    IsOK_TestCreation(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_TestCreation@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_TestCreation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ReDoTurn@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ReDoTurn@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_ReDoTurn, COMDAT
; _this$ = ecx

; 46   :   virtual bool    IsOK_ReDoTurn(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ReDoTurn@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_ReDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_UnDoTurn@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_UnDoTurn@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_UnDoTurn, COMDAT
; _this$ = ecx

; 45   :   virtual bool    IsOK_UnDoTurn(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_UnDoTurn@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_UnDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_PlayGame@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_PlayGame@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_PlayGame, COMDAT
; _this$ = ecx

; 44   :   virtual bool    IsOK_PlayGame(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_PlayGame@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_PlayGame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_EnterPosition@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_EnterPosition@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_EnterPosition, COMDAT
; _this$ = ecx

; 43   :   virtual bool    IsOK_EnterPosition(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_EnterPosition@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_EnterPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ComputeNimval@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ComputeNimval@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_ComputeNimval, COMDAT
; _this$ = ecx

; 42   :   virtual bool    IsOK_ComputeNimval(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ComputeNimval@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_ComputeNimval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ComputerMove@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ComputerMove@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_ComputerMove, COMDAT
; _this$ = ecx

; 41   :   virtual bool    IsOK_ComputerMove(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ComputerMove@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_ComputerMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsIdle@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsIdle@PROCESS@@UBE_NXZ PROC				; PROCESS::IsIdle, COMDAT
; _this$ = ecx

; 40   :   virtual bool    IsIdle(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsIdle@PROCESS@@UBE_NXZ ENDP				; PROCESS::IsIdle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnReDoTurn, COMDAT
; _this$ = ecx

; 39   :   virtual STATUS  OnReDoTurn(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnReDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnUnDoTurn, COMDAT
; _this$ = ecx

; 38   :   virtual STATUS  OnUnDoTurn(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnUnDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnPlayGame, COMDAT
; _this$ = ecx

; 37   :   virtual STATUS  OnPlayGame(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnPlayGame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ PROC	; PROCESS::OnEnterPosition, COMDAT
; _this$ = ecx

; 36   :   virtual STATUS  OnEnterPosition(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ ENDP	; PROCESS::OnEnterPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ PROC	; PROCESS::OnComputeNimval, COMDAT
; _this$ = ecx

; 35   :   virtual STATUS  OnComputeNimval(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ ENDP	; PROCESS::OnComputeNimval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnComputerMove, COMDAT
; _this$ = ecx

; 34   :   virtual STATUS  OnComputerMove(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnComputerMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ PROC	; PROCESS::OnThreadCompletion, COMDAT
; _this$ = ecx

; 33   :   virtual STATUS  OnThreadCompletion(void){return STATUS_OK;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 03 00 00 00	 mov	 eax, 3
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ ENDP	; PROCESS::OnThreadCompletion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z PROC		; PROCESS::OnTimer, COMDAT
; _this$ = ecx

; 32   :   virtual STATUS  OnTimer(UINT /*nIDEvent*/){return STATUS_OK;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 03 00 00 00	 mov	 eax, 3
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z ENDP		; PROCESS::OnTimer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z PROC		; PROCESS::OnChar, COMDAT
; _this$ = ecx

; 31   :   virtual STATUS  OnChar(UINT /*nChar*/, UINT /*nRepCnt*/, UINT /*nFlags*/){return STATUS_OK;}; 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 03 00 00 00	 mov	 eax, 3
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z ENDP		; PROCESS::OnChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnInitialize@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnInitialize@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnInitialize, COMDAT
; _this$ = ecx

; 30   :   virtual STATUS  OnInitialize(void){m_title="Process Error";return STATUS_OK;}; // You must supply a title!

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b f4		 mov	 esi, esp
  00011	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BAKGMPOP@Process?5Error@
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	83 c1 04	 add	 ecx, 4
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@PBD@Z
  00022	3b f4		 cmp	 esi, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	b8 03 00 00 00	 mov	 eax, 3
  0002e	5e		 pop	 esi
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?OnInitialize@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnInitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z PROC ; PROCESS::OnLButtonDown, COMDAT
; _this$ = ecx

; 29   :   virtual STATUS  OnLButtonDown(UINT /*nFlags*/, CPoint /*point*/){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z ENDP ; PROCESS::OnLButtonDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.cpp
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_pProcess$ = 8						; size = 4
?OnReturn@PROCESS@@UAE?AW4STATUS@@PAV1@@Z PROC		; PROCESS::OnReturn
; _this$ = ecx

; 48   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 49   :   delete pProcess;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00024	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00028	74 0f		 je	 SHORT $LN3@OnReturn
  0002a	6a 01		 push	 1
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	e8 00 00 00 00	 call	 ??_GPROCESS@@QAEPAXI@Z
  00034	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
  00037	eb 07		 jmp	 SHORT $LN4@OnReturn
$LN3@OnReturn:
  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@OnReturn:

; 50   :   return STATUS_OK;

  00040	b8 03 00 00 00	 mov	 eax, 3

; 51   : }

  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?OnReturn@PROCESS@@UAE?AW4STATUS@@PAV1@@Z ENDP		; PROCESS::OnReturn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnShutdown, COMDAT
; _this$ = ecx

; 27   :   virtual STATUS  OnShutdown(void){return STATUS_ERROR;}; // All processes should handle shutdown!

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 05 00 00 00	 mov	 eax, 5
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnShutdown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; PROCESS::GetTitle, COMDAT
; _this$ = ecx

; 25   :   virtual CString GetTitle(void){return m_title;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c0 04	 add	 eax, 4
  00025	8b f4		 mov	 esi, esp
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003b	83 c9 01	 or	 ecx, 1
  0003e	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00041	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00044	5e		 pop	 esi
  00045	83 c4 08	 add	 esp, 8
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; PROCESS::GetTitle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PROCESS@@QAE@XZ PROC					; PROCESS::~PROCESS
; _this$ = ecx

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PROCESS@@6B@

; 24   : }

  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 04	 add	 ecx, 4
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	5e		 pop	 esi
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??1PROCESS@@QAE@XZ ENDP					; PROCESS::~PROCESS
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PROCESS@@QAE@XZ PROC					; PROCESS::PROCESS
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PROCESS@@6B@
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	83 c1 04	 add	 ecx, 4
  0001e	8b f4		 mov	 esi, esp
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00026	3b f4		 cmp	 esi, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 20   : }

  0002d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00030	5e		 pop	 esi
  00031	83 c4 04	 add	 esp, 4
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??0PROCESS@@QAE@XZ ENDP					; PROCESS::PROCESS
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newProcess$ = 8					; size = 4
?ReplaceProcess@PROCESS@@IAEXPAV1@@Z PROC		; PROCESS::ReplaceProcess
; _this$ = ecx

; 55   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 56   :   if (replacementProcess != NULL)

  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?replacementProcess@@3PAVPROCESS@@A, 0 ; replacementProcess
  00015	74 0f		 je	 SHORT $LN2@ReplacePro

; 57   :   {
; 58   :     die ("Doubly replaced process");

  00017	68 00 00 00 00	 push	 OFFSET $SG226260
  0001c	e8 00 00 00 00	 call	 ?die@@YAXPBD@Z		; die
  00021	83 c4 04	 add	 esp, 4

; 59   :     return;

  00024	eb 08		 jmp	 SHORT $LN1@ReplacePro
$LN2@ReplacePro:

; 60   :   };
; 61   :   replacementProcess = newProcess;

  00026	8b 45 08	 mov	 eax, DWORD PTR _newProcess$[ebp]
  00029	a3 00 00 00 00	 mov	 DWORD PTR ?replacementProcess@@3PAVPROCESS@@A, eax ; replacementProcess
$LN1@ReplacePro:

; 62   : }

  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?ReplaceProcess@PROCESS@@IAEXPAV1@@Z ENDP		; PROCESS::ReplaceProcess
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pNewProcess$ = 8					; size = 4
?PushProcess@PROCESS@@IAEXPAV1@@Z PROC			; PROCESS::PushProcess
; _this$ = ecx

; 38   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 39   :   if (pushedProcess != NULL)

  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?pushedProcess@@3PAVPROCESS@@A, 0 ; pushedProcess
  00015	74 0f		 je	 SHORT $LN2@PushProces

; 40   :   {
; 41   :     die("Doubly pushed process");

  00017	68 00 00 00 00	 push	 OFFSET $SG226245
  0001c	e8 00 00 00 00	 call	 ?die@@YAXPBD@Z		; die
  00021	83 c4 04	 add	 esp, 4

; 42   :     return;

  00024	eb 08		 jmp	 SHORT $LN1@PushProces
$LN2@PushProces:

; 43   :   };
; 44   :   pushedProcess = pNewProcess;

  00026	8b 45 08	 mov	 eax, DWORD PTR _pNewProcess$[ebp]
  00029	a3 00 00 00 00	 mov	 DWORD PTR ?pushedProcess@@3PAVPROCESS@@A, eax ; pushedProcess
$LN1@PushProces:

; 45   : }

  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 04 00	 ret	 4
?PushProcess@PROCESS@@IAEXPAV1@@Z ENDP			; PROCESS::PushProcess
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?PopProcess@PROCESS@@IAEXXZ PROC			; PROCESS::PopProcess
; _this$ = ecx

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 28   :   if (popProcess)

  0000e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?popProcess@@3_NA ; popProcess
  00015	85 c0		 test	 eax, eax
  00017	74 0f		 je	 SHORT $LN2@PopProcess

; 29   :   {
; 30   :     die("Doubly popped process");

  00019	68 00 00 00 00	 push	 OFFSET $SG226239
  0001e	e8 00 00 00 00	 call	 ?die@@YAXPBD@Z		; die
  00023	83 c4 04	 add	 esp, 4

; 31   :     return;

  00026	eb 07		 jmp	 SHORT $LN1@PopProcess
$LN2@PopProcess:

; 32   :   };
; 33   :   popProcess = true;

  00028	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?popProcess@@3_NA, 1 ; popProcess
$LN1@PopProcess:

; 34   : }

  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
?PopProcess@PROCESS@@IAEXXZ ENDP			; PROCESS::PopProcess
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\stdafx.h
;	COMDAT ??0VECTOR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VECTOR@@QAE@XZ PROC					; VECTOR::VECTOR, COMDAT
; _this$ = ecx

; 61   :   VECTOR(void){};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0VECTOR@@QAE@XZ ENDP					; VECTOR::VECTOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00011	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 330  : 		if (pszCategory == nullptr)

  00027	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0002b	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0002d	e9 bb 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00032	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00039	72 36		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0003b	33 c0		 xor	 eax, eax
  0003d	75 30		 jne	 SHORT $LN5@RegisterCa
  0003f	8b f4		 mov	 esi, esp
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0004b	6a 00		 push	 0
  0004d	68 51 01 00 00	 push	 337			; 00000151H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
  00057	6a 02		 push	 2
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	83 f8 01	 cmp	 eax, 1
  0006c	75 01		 jne	 SHORT $LN5@RegisterCa
  0006e	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  0006f	eb 7c		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00071	69 15 00 00 00
	00 04 01 00 00	 imul	 edx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _nCategory$[ebp]
  0007e	89 82 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[edx], eax

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  00084	68 00 01 00 00	 push	 256			; 00000100H
  00089	6a 00		 push	 0
  0008b	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _memset
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  0009a	8b 55 08	 mov	 edx, DWORD PTR _pszCategory$[ebp]
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  000a3	6a 7f		 push	 127			; 0000007fH
  000a5	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _swprintf_s
  000b1	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  000b4	8b f4		 mov	 esi, esp
  000b6	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000bc	51		 push	 ecx
  000bd	6a 7f		 push	 127			; 0000007fH
  000bf	69 15 00 00 00
	00 04 01 00 00	 imul	 edx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000c9	81 c2 04 00 00
	00		 add	 edx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000cf	52		 push	 edx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000e5	83 c0 01	 add	 eax, 1
  000e8	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ed	52		 push	 edx
  000ee	8b cd		 mov	 ecx, ebp
  000f0	50		 push	 eax
  000f1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@RegisterCa
  000f7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fc	58		 pop	 eax
  000fd	5a		 pop	 edx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00103	33 cd		 xor	 ecx, ebp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
  0011b	90		 npad	 1
$LN8@RegisterCa:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN7@RegisterCa
$LN7@RegisterCa:
  00124	f8 fe ff ff	 DD	 -264			; fffffef8H
  00128	00 01 00 00	 DD	 256			; 00000100H
  0012c	00 00 00 00	 DD	 $LN6@RegisterCa
$LN6@RegisterCa:
  00130	62		 DB	 98			; 00000062H
  00131	75		 DB	 117			; 00000075H
  00132	66		 DB	 102			; 00000066H
  00133	66		 DB	 102			; 00000066H
  00134	65		 DB	 101			; 00000065H
  00135	72		 DB	 114			; 00000072H
  00136	00		 DB	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG74042
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 20 00 00	 push	 8192			; 00002000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1523 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1524 :             int _Result;
; 1525 :             va_list _ArgList;
; 1526 :             __crt_va_start(_ArgList, _Format);

  0001b	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1527 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 __vswprintf_s_l
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1528 :             __crt_va_end(_ArgList);

  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1529 :             return _Result;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1530 :         }

  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1256 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1257 :         int const _Result = __stdio_common_vswprintf_s(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00030	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00033	52		 push	 edx
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1258 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1259 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1260 : 
; 1261 :         return _Result < 0 ? -1 : _Result;

  0004a	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004e	7d 09		 jge	 SHORT $LN3@vswprintf_
  00050	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00057	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  0005c	89 4d f8	 mov	 DWORD PTR tv73[ebp], ecx
$LN4@vswprintf_:
  0005f	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 1262 :     }

  00062	5e		 pop	 esi
  00063	83 c4 08	 add	 esp, 8
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
