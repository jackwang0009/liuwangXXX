; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

	TITLE	C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Debug\Flow.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?Width@DOTS_AND_BOXES@@QBEHXZ			; DOTS_AND_BOXES::Width
PUBLIC	?Height@DOTS_AND_BOXES@@QBEHXZ			; DOTS_AND_BOXES::Height
PUBLIC	?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
PUBLIC	?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
PUBLIC	?ComputeFlow@FLOW@@QAEXPBVDOTS_AND_BOXES@@@Z	; FLOW::ComputeFlow
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ComputeFlow@FLOW@@QAEXPBVDOTS_AND_BOXES@@@Z
	DD	02aH
	DD	0b09H
voltbl	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Flow.cpp
_TEXT	SEGMENT
_c$1 = -9572						; size = 4
_r0$2 = -9568						; size = 4
_i$3 = -9564						; size = 4
_numR$ = -9560						; size = 4
_r$ = -9552						; size = 9504
_e$ = -44						; size = 4
_w$ = -40						; size = 4
_zero$ = -32						; size = 4
_col$ = -24						; size = 4
_row$ = -20						; size = 4
_height$ = -16						; size = 4
_width$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pDB$ = 8						; size = 4
?ComputeFlow@FLOW@@QAEXPBVDOTS_AND_BOXES@@@Z PROC	; FLOW::ComputeFlow
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 64 25 00 00	 mov	 eax, 9572		; 00002564H
  00008	e8 00 00 00 00	 call	 __chkstk
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	51		 push	 ecx
  00010	8d bd 9c da ff
	ff		 lea	 edi, DWORD PTR [ebp-9572]
  00016	b9 59 09 00 00	 mov	 ecx, 2393		; 00000959H
  0001b	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00020	f3 ab		 rep stosd
  00022	59		 pop	 ecx
  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00028	33 c5		 xor	 eax, ebp
  0002a	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002d	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 15   :   int width, height;
; 16   :   int row, col;
; 17   :   int zero = 0;

  00030	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _zero$[ebp], 0

; 18   :   int w;
; 19   :   int e;
; 20   :   R r[MAX_WIDTH*MAX_HEIGHT*2];
; 21   :   int numR;
; 22   :   width  = pDB->Width();

  00037	8b 4d 08	 mov	 ecx, DWORD PTR _pDB$[ebp]
  0003a	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  0003f	89 45 f4	 mov	 DWORD PTR _width$[ebp], eax

; 23   :   height = pDB->Height();

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _pDB$[ebp]
  00045	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0004a	89 45 f0	 mov	 DWORD PTR _height$[ebp], eax

; 24   :   numR = 0;

  0004d	c7 85 a8 da ff
	ff 00 00 00 00	 mov	 DWORD PTR _numR$[ebp], 0

; 25   :   for (col=0; col<width; col++)

  00057	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  0005e	eb 09		 jmp	 SHORT $LN4@ComputeFlo
$LN2@ComputeFlo:
  00060	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00063	83 c0 01	 add	 eax, 1
  00066	89 45 e8	 mov	 DWORD PTR _col$[ebp], eax
$LN4@ComputeFlo:
  00069	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  0006c	3b 4d f4	 cmp	 ecx, DWORD PTR _width$[ebp]
  0006f	0f 8d 00 09 00
	00		 jge	 $LN10@ComputeFlo

; 26   :   {
; 27   :     for (row=0; row<height; row++)

  00075	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  0007c	eb 09		 jmp	 SHORT $LN7@ComputeFlo
$LN5@ComputeFlo:
  0007e	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00081	83 c2 01	 add	 edx, 1
  00084	89 55 ec	 mov	 DWORD PTR _row$[ebp], edx
$LN7@ComputeFlo:
  00087	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  0008a	3b 45 f0	 cmp	 eax, DWORD PTR _height$[ebp]
  0008d	0f 8d dd 08 00
	00		 jge	 $LN6@ComputeFlo

; 28   :     {
; 29   :       m_v[col][row][0] = 1000*row/(height-1);

  00093	69 45 ec e8 03
	00 00		 imul	 eax, DWORD PTR _row$[ebp], 1000
  0009a	8b 4d f0	 mov	 ecx, DWORD PTR _height$[ebp]
  0009d	83 e9 01	 sub	 ecx, 1
  000a0	99		 cdq
  000a1	f7 f9		 idiv	 ecx
  000a3	6b 55 e8 58	 imul	 edx, DWORD PTR _col$[ebp], 88
  000a7	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  000aa	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  000ad	8d 14 ca	 lea	 edx, DWORD PTR [edx+ecx*8]
  000b0	b9 04 00 00 00	 mov	 ecx, 4
  000b5	6b c9 00	 imul	 ecx, ecx, 0
  000b8	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 30   :       m_v[col][row][1] = 1000*col/(width-1);

  000bb	69 45 e8 e8 03
	00 00		 imul	 eax, DWORD PTR _col$[ebp], 1000
  000c2	8b 4d f4	 mov	 ecx, DWORD PTR _width$[ebp]
  000c5	83 e9 01	 sub	 ecx, 1
  000c8	99		 cdq
  000c9	f7 f9		 idiv	 ecx
  000cb	6b 55 e8 58	 imul	 edx, DWORD PTR _col$[ebp], 88
  000cf	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  000d2	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  000d5	8d 14 ca	 lea	 edx, DWORD PTR [edx+ecx*8]
  000d8	b9 04 00 00 00	 mov	 ecx, 4
  000dd	c1 e1 00	 shl	 ecx, 0
  000e0	89 04 0a	 mov	 DWORD PTR [edx+ecx], eax

; 31   :       if ((row>0)&&(row<height-1))

  000e3	83 7d ec 00	 cmp	 DWORD PTR _row$[ebp], 0
  000e7	0f 8e 3b 04 00
	00		 jle	 $LN14@ComputeFlo
  000ed	8b 55 f0	 mov	 edx, DWORD PTR _height$[ebp]
  000f0	83 ea 01	 sub	 edx, 1
  000f3	39 55 ec	 cmp	 DWORD PTR _row$[ebp], edx
  000f6	0f 8d 2c 04 00
	00		 jge	 $LN14@ComputeFlo

; 32   :       {
; 33   :         r[numR].d = &m_v[col][row][0];

  000fc	6b 45 e8 58	 imul	 eax, DWORD PTR _col$[ebp], 88
  00100	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  00103	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  00106	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  00109	b8 04 00 00 00	 mov	 eax, 4
  0010e	6b c8 00	 imul	 ecx, eax, 0
  00111	03 d1		 add	 edx, ecx
  00113	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  0011a	89 94 05 c0 da
	ff ff		 mov	 DWORD PTR _r$[ebp+eax+16], edx

; 34   :           //
; 35   :           //UP
; 36   :         r[numR].s[0] = &m_v[col][row-1][0];

  00121	6b 4d e8 58	 imul	 ecx, DWORD PTR _col$[ebp], 88
  00125	03 4d f8	 add	 ecx, DWORD PTR _this$[ebp]
  00128	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  0012b	8d 44 d1 f8	 lea	 eax, DWORD PTR [ecx+edx*8-8]
  0012f	b9 04 00 00 00	 mov	 ecx, 4
  00134	6b d1 00	 imul	 edx, ecx, 0
  00137	03 c2		 add	 eax, edx
  00139	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  00140	8d 94 0d b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+ecx]
  00147	b9 04 00 00 00	 mov	 ecx, 4
  0014c	6b c9 00	 imul	 ecx, ecx, 0
  0014f	89 44 0a 14	 mov	 DWORD PTR [edx+ecx+20], eax

; 37   :         if (pDB->VLineType(col,row-1) == LINE_NONE)

  00153	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00156	83 ea 01	 sub	 edx, 1
  00159	52		 push	 edx
  0015a	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  0015d	50		 push	 eax
  0015e	8b 4d 08	 mov	 ecx, DWORD PTR _pDB$[ebp]
  00161	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  00166	85 c0		 test	 eax, eax
  00168	75 1f		 jne	 SHORT $LN15@ComputeFlo

; 38   :         {
; 39   :           r[numR].c[0] = 1;

  0016a	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  00171	8d 94 0d b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+ecx]
  00178	b8 04 00 00 00	 mov	 eax, 4
  0017d	6b c8 00	 imul	 ecx, eax, 0
  00180	c7 04 0a 01 00
	00 00		 mov	 DWORD PTR [edx+ecx], 1

; 40   :         }

  00187	eb 1d		 jmp	 SHORT $LN16@ComputeFlo
$LN15@ComputeFlo:

; 41   :         else
; 42   :         {
; 43   :           r[numR].c[0] = 5;

  00189	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  00190	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  00197	b9 04 00 00 00	 mov	 ecx, 4
  0019c	6b d1 00	 imul	 edx, ecx, 0
  0019f	c7 04 10 05 00
	00 00		 mov	 DWORD PTR [eax+edx], 5
$LN16@ComputeFlo:

; 44   :         };
; 45   :           //
; 46   :           //RIGHT
; 47   :         if (col<width-1)

  001a6	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  001a9	83 e8 01	 sub	 eax, 1
  001ac	39 45 e8	 cmp	 DWORD PTR _col$[ebp], eax
  001af	0f 8d 88 00 00
	00		 jge	 $LN17@ComputeFlo

; 48   :         {
; 49   :           r[numR].s[1] = &m_v[col+1][row][0];

  001b5	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  001b8	83 c1 01	 add	 ecx, 1
  001bb	6b d1 58	 imul	 edx, ecx, 88
  001be	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  001c1	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  001c4	8d 0c c2	 lea	 ecx, DWORD PTR [edx+eax*8]
  001c7	ba 04 00 00 00	 mov	 edx, 4
  001cc	6b c2 00	 imul	 eax, edx, 0
  001cf	03 c8		 add	 ecx, eax
  001d1	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  001d8	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  001df	ba 04 00 00 00	 mov	 edx, 4
  001e4	c1 e2 00	 shl	 edx, 0
  001e7	89 4c 10 14	 mov	 DWORD PTR [eax+edx+20], ecx

; 50   :           if (pDB->HLineType(col,row) == LINE_NONE)

  001eb	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  001ee	50		 push	 eax
  001ef	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  001f2	51		 push	 ecx
  001f3	8b 4d 08	 mov	 ecx, DWORD PTR _pDB$[ebp]
  001f6	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  001fb	85 c0		 test	 eax, eax
  001fd	75 1f		 jne	 SHORT $LN19@ComputeFlo

; 51   :           {
; 52   :             r[numR].c[1] = 1;

  001ff	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  00206	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  0020d	b9 04 00 00 00	 mov	 ecx, 4
  00212	c1 e1 00	 shl	 ecx, 0
  00215	c7 04 08 01 00
	00 00		 mov	 DWORD PTR [eax+ecx], 1

; 53   :           }

  0021c	eb 1d		 jmp	 SHORT $LN20@ComputeFlo
$LN19@ComputeFlo:

; 54   :           else
; 55   :           {
; 56   :             r[numR].c[1] = 5;

  0021e	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  00225	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  0022c	b9 04 00 00 00	 mov	 ecx, 4
  00231	c1 e1 00	 shl	 ecx, 0
  00234	c7 04 08 05 00
	00 00		 mov	 DWORD PTR [eax+ecx], 5
$LN20@ComputeFlo:

; 57   :           };
; 58   :         }

  0023b	eb 3a		 jmp	 SHORT $LN18@ComputeFlo
$LN17@ComputeFlo:

; 59   :         else
; 60   :         {
; 61   :           r[numR].s[1] = &zero;

  0023d	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  00244	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  0024b	b9 04 00 00 00	 mov	 ecx, 4
  00250	c1 e1 00	 shl	 ecx, 0
  00253	8d 55 e0	 lea	 edx, DWORD PTR _zero$[ebp]
  00256	89 54 08 14	 mov	 DWORD PTR [eax+ecx+20], edx

; 62   :           r[numR].c[1] = 0;

  0025a	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  00261	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  00268	ba 04 00 00 00	 mov	 edx, 4
  0026d	c1 e2 00	 shl	 edx, 0
  00270	c7 04 11 00 00
	00 00		 mov	 DWORD PTR [ecx+edx], 0
$LN18@ComputeFlo:

; 63   :         };
; 64   :           //
; 65   :           //DOWN
; 66   :         r[numR].s[2] = &m_v[col][row+1][0];

  00277	6b 45 e8 58	 imul	 eax, DWORD PTR _col$[ebp], 88
  0027b	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  0027e	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  00281	8d 54 c8 08	 lea	 edx, DWORD PTR [eax+ecx*8+8]
  00285	b8 04 00 00 00	 mov	 eax, 4
  0028a	6b c8 00	 imul	 ecx, eax, 0
  0028d	03 d1		 add	 edx, ecx
  0028f	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  00296	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  0029d	b8 04 00 00 00	 mov	 eax, 4
  002a2	d1 e0		 shl	 eax, 1
  002a4	89 54 01 14	 mov	 DWORD PTR [ecx+eax+20], edx

; 67   :         if (pDB->VLineType(col,row) == LINE_NONE)

  002a8	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  002ab	51		 push	 ecx
  002ac	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  002af	52		 push	 edx
  002b0	8b 4d 08	 mov	 ecx, DWORD PTR _pDB$[ebp]
  002b3	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  002b8	85 c0		 test	 eax, eax
  002ba	75 1e		 jne	 SHORT $LN21@ComputeFlo

; 68   :         {
; 69   :           r[numR].c[2] = 1;

  002bc	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  002c3	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  002ca	ba 04 00 00 00	 mov	 edx, 4
  002cf	d1 e2		 shl	 edx, 1
  002d1	c7 04 11 01 00
	00 00		 mov	 DWORD PTR [ecx+edx], 1

; 70   :         }

  002d8	eb 1c		 jmp	 SHORT $LN22@ComputeFlo
$LN21@ComputeFlo:

; 71   :         else
; 72   :         {
; 73   :           r[numR].c[2] = 5;

  002da	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  002e1	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  002e8	ba 04 00 00 00	 mov	 edx, 4
  002ed	d1 e2		 shl	 edx, 1
  002ef	c7 04 11 05 00
	00 00		 mov	 DWORD PTR [ecx+edx], 5
$LN22@ComputeFlo:

; 74   :         };
; 75   :           //
; 76   :           //LEFT
; 77   :         if (col > 0)

  002f6	83 7d e8 00	 cmp	 DWORD PTR _col$[ebp], 0
  002fa	0f 8e 8b 00 00
	00		 jle	 $LN23@ComputeFlo

; 78   :         {
; 79   :           r[numR].s[3] = &m_v[col-1][row][0];

  00300	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00303	83 e8 01	 sub	 eax, 1
  00306	6b c8 58	 imul	 ecx, eax, 88
  00309	03 4d f8	 add	 ecx, DWORD PTR _this$[ebp]
  0030c	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  0030f	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00312	b9 04 00 00 00	 mov	 ecx, 4
  00317	6b d1 00	 imul	 edx, ecx, 0
  0031a	03 c2		 add	 eax, edx
  0031c	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  00323	8d 94 0d b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+ecx]
  0032a	b9 04 00 00 00	 mov	 ecx, 4
  0032f	6b c9 03	 imul	 ecx, ecx, 3
  00332	89 44 0a 14	 mov	 DWORD PTR [edx+ecx+20], eax

; 80   :           if (pDB->HLineType(col-1,row) == LINE_NONE)

  00336	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00339	52		 push	 edx
  0033a	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  0033d	83 e8 01	 sub	 eax, 1
  00340	50		 push	 eax
  00341	8b 4d 08	 mov	 ecx, DWORD PTR _pDB$[ebp]
  00344	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  00349	85 c0		 test	 eax, eax
  0034b	75 1f		 jne	 SHORT $LN25@ComputeFlo

; 81   :           {
; 82   :             r[numR].c[3] = 1;

  0034d	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  00354	8d 94 0d b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+ecx]
  0035b	b8 04 00 00 00	 mov	 eax, 4
  00360	6b c8 03	 imul	 ecx, eax, 3
  00363	c7 04 0a 01 00
	00 00		 mov	 DWORD PTR [edx+ecx], 1

; 83   :           }

  0036a	eb 1d		 jmp	 SHORT $LN26@ComputeFlo
$LN25@ComputeFlo:

; 84   :           else
; 85   :           {
; 86   :             r[numR].c[3] = 5;

  0036c	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  00373	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  0037a	b9 04 00 00 00	 mov	 ecx, 4
  0037f	6b d1 03	 imul	 edx, ecx, 3
  00382	c7 04 10 05 00
	00 00		 mov	 DWORD PTR [eax+edx], 5
$LN26@ComputeFlo:

; 87   :           };
; 88   :         }

  00389	eb 3a		 jmp	 SHORT $LN24@ComputeFlo
$LN23@ComputeFlo:

; 89   :         else
; 90   :         {
; 91   :           r[numR].s[3] = &zero;

  0038b	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  00392	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  00399	ba 04 00 00 00	 mov	 edx, 4
  0039e	6b c2 03	 imul	 eax, edx, 3
  003a1	8d 55 e0	 lea	 edx, DWORD PTR _zero$[ebp]
  003a4	89 54 01 14	 mov	 DWORD PTR [ecx+eax+20], edx

; 92   :           r[numR].c[3] = 0;

  003a8	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  003af	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  003b6	ba 04 00 00 00	 mov	 edx, 4
  003bb	6b c2 03	 imul	 eax, edx, 3
  003be	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0
$LN24@ComputeFlo:

; 93   :         };
; 94   :         w = r[numR].c[0] + r[numR].c[1] + r[numR].c[2] + r[numR].c[3];

  003c5	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  003cc	8d 94 0d b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+ecx]
  003d3	b8 04 00 00 00	 mov	 eax, 4
  003d8	6b c8 00	 imul	 ecx, eax, 0
  003db	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  003e2	8d 84 05 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+eax]
  003e9	be 04 00 00 00	 mov	 esi, 4
  003ee	c1 e6 00	 shl	 esi, 0
  003f1	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  003f4	03 0c 30	 add	 ecx, DWORD PTR [eax+esi]
  003f7	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  003fe	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  00405	ba 04 00 00 00	 mov	 edx, 4
  0040a	d1 e2		 shl	 edx, 1
  0040c	03 0c 10	 add	 ecx, DWORD PTR [eax+edx]
  0040f	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  00416	8d 94 05 b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+eax]
  0041d	b8 04 00 00 00	 mov	 eax, 4
  00422	6b c0 03	 imul	 eax, eax, 3
  00425	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  00428	89 4d d8	 mov	 DWORD PTR _w$[ebp], ecx

; 95   :         r[numR].c[0] *= 1000000/w;

  0042b	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  00432	8d 8c 0d b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+ecx]
  00439	ba 04 00 00 00	 mov	 edx, 4
  0043e	6b f2 00	 imul	 esi, edx, 0
  00441	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  00446	99		 cdq
  00447	f7 7d d8	 idiv	 DWORD PTR _w$[ebp]
  0044a	0f af 04 31	 imul	 eax, DWORD PTR [ecx+esi]
  0044e	b9 04 00 00 00	 mov	 ecx, 4
  00453	6b d1 00	 imul	 edx, ecx, 0
  00456	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  0045d	8d 8c 0d b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+ecx]
  00464	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 96   :         r[numR].c[1] *= 1000000/w;

  00467	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  0046e	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  00475	be 04 00 00 00	 mov	 esi, 4
  0047a	c1 e6 00	 shl	 esi, 0
  0047d	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  00482	99		 cdq
  00483	f7 7d d8	 idiv	 DWORD PTR _w$[ebp]
  00486	0f af 04 31	 imul	 eax, DWORD PTR [ecx+esi]
  0048a	ba 04 00 00 00	 mov	 edx, 4
  0048f	c1 e2 00	 shl	 edx, 0
  00492	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  00499	8d 8c 0d b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+ecx]
  004a0	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 97   :         r[numR].c[2] *= 1000000/w;

  004a3	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  004aa	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  004b1	be 04 00 00 00	 mov	 esi, 4
  004b6	d1 e6		 shl	 esi, 1
  004b8	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  004bd	99		 cdq
  004be	f7 7d d8	 idiv	 DWORD PTR _w$[ebp]
  004c1	0f af 04 31	 imul	 eax, DWORD PTR [ecx+esi]
  004c5	ba 04 00 00 00	 mov	 edx, 4
  004ca	d1 e2		 shl	 edx, 1
  004cc	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  004d3	8d 8c 0d b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+ecx]
  004da	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 98   :         r[numR].c[3] *= 1000000/w;

  004dd	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  004e4	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  004eb	ba 04 00 00 00	 mov	 edx, 4
  004f0	6b f2 03	 imul	 esi, edx, 3
  004f3	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  004f8	99		 cdq
  004f9	f7 7d d8	 idiv	 DWORD PTR _w$[ebp]
  004fc	0f af 04 31	 imul	 eax, DWORD PTR [ecx+esi]
  00500	b9 04 00 00 00	 mov	 ecx, 4
  00505	6b d1 03	 imul	 edx, ecx, 3
  00508	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  0050f	8d 8c 0d b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+ecx]
  00516	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 99   :         numR++;

  00519	8b 95 a8 da ff
	ff		 mov	 edx, DWORD PTR _numR$[ebp]
  0051f	83 c2 01	 add	 edx, 1
  00522	89 95 a8 da ff
	ff		 mov	 DWORD PTR _numR$[ebp], edx
$LN14@ComputeFlo:

; 100  :       };
; 101  :       if ((col>0)&&(col<width-1))

  00528	83 7d e8 00	 cmp	 DWORD PTR _col$[ebp], 0
  0052c	0f 8e 39 04 00
	00		 jle	 $LN27@ComputeFlo
  00532	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  00535	83 e8 01	 sub	 eax, 1
  00538	39 45 e8	 cmp	 DWORD PTR _col$[ebp], eax
  0053b	0f 8d 2a 04 00
	00		 jge	 $LN27@ComputeFlo

; 102  :       {
; 103  :         r[numR].d = &m_v[col][row][1];

  00541	6b 4d e8 58	 imul	 ecx, DWORD PTR _col$[ebp], 88
  00545	03 4d f8	 add	 ecx, DWORD PTR _this$[ebp]
  00548	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  0054b	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  0054e	b9 04 00 00 00	 mov	 ecx, 4
  00553	c1 e1 00	 shl	 ecx, 0
  00556	03 c1		 add	 eax, ecx
  00558	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  0055f	89 84 15 c0 da
	ff ff		 mov	 DWORD PTR _r$[ebp+edx+16], eax

; 104  :           //
; 105  :           //UP
; 106  :         if (row>0)

  00566	83 7d ec 00	 cmp	 DWORD PTR _row$[ebp], 0
  0056a	0f 8e 87 00 00
	00		 jle	 $LN28@ComputeFlo

; 107  :         {
; 108  :           r[numR].s[0] = &m_v[col][row-1][1];

  00570	6b 45 e8 58	 imul	 eax, DWORD PTR _col$[ebp], 88
  00574	03 45 f8	 add	 eax, DWORD PTR _this$[ebp]
  00577	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  0057a	8d 54 c8 f8	 lea	 edx, DWORD PTR [eax+ecx*8-8]
  0057e	b8 04 00 00 00	 mov	 eax, 4
  00583	c1 e0 00	 shl	 eax, 0
  00586	03 d0		 add	 edx, eax
  00588	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  0058f	8d 84 0d b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+ecx]
  00596	b9 04 00 00 00	 mov	 ecx, 4
  0059b	6b c9 00	 imul	 ecx, ecx, 0
  0059e	89 54 08 14	 mov	 DWORD PTR [eax+ecx+20], edx

; 109  :           if (pDB->VLineType(col,row-1) == LINE_NONE)

  005a2	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  005a5	83 ea 01	 sub	 edx, 1
  005a8	52		 push	 edx
  005a9	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  005ac	50		 push	 eax
  005ad	8b 4d 08	 mov	 ecx, DWORD PTR _pDB$[ebp]
  005b0	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  005b5	85 c0		 test	 eax, eax
  005b7	75 1f		 jne	 SHORT $LN30@ComputeFlo

; 110  :           {
; 111  :             r[numR].c[0] = 1;

  005b9	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  005c0	8d 94 0d b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+ecx]
  005c7	b8 04 00 00 00	 mov	 eax, 4
  005cc	6b c8 00	 imul	 ecx, eax, 0
  005cf	c7 04 0a 01 00
	00 00		 mov	 DWORD PTR [edx+ecx], 1

; 112  :           }

  005d6	eb 1d		 jmp	 SHORT $LN31@ComputeFlo
$LN30@ComputeFlo:

; 113  :           else
; 114  :           {
; 115  :             r[numR].c[0] = 5;

  005d8	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  005df	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  005e6	b9 04 00 00 00	 mov	 ecx, 4
  005eb	6b d1 00	 imul	 edx, ecx, 0
  005ee	c7 04 10 05 00
	00 00		 mov	 DWORD PTR [eax+edx], 5
$LN31@ComputeFlo:

; 116  :           };
; 117  :         }

  005f5	eb 3a		 jmp	 SHORT $LN29@ComputeFlo
$LN28@ComputeFlo:

; 118  :         else
; 119  :         {
; 120  :           r[numR].s[0] = &zero;

  005f7	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  005fe	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  00605	ba 04 00 00 00	 mov	 edx, 4
  0060a	6b c2 00	 imul	 eax, edx, 0
  0060d	8d 55 e0	 lea	 edx, DWORD PTR _zero$[ebp]
  00610	89 54 01 14	 mov	 DWORD PTR [ecx+eax+20], edx

; 121  :           r[numR].c[0] = 0;

  00614	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  0061b	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  00622	ba 04 00 00 00	 mov	 edx, 4
  00627	6b c2 00	 imul	 eax, edx, 0
  0062a	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [ecx+eax], 0
$LN29@ComputeFlo:

; 122  :         };
; 123  :           //
; 124  :           //RIGHT
; 125  :         r[numR].s[1] = &m_v[col+1][row][1];

  00631	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  00634	83 c1 01	 add	 ecx, 1
  00637	6b d1 58	 imul	 edx, ecx, 88
  0063a	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  0063d	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  00640	8d 0c c2	 lea	 ecx, DWORD PTR [edx+eax*8]
  00643	ba 04 00 00 00	 mov	 edx, 4
  00648	c1 e2 00	 shl	 edx, 0
  0064b	03 ca		 add	 ecx, edx
  0064d	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  00654	8d 94 05 b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+eax]
  0065b	b8 04 00 00 00	 mov	 eax, 4
  00660	c1 e0 00	 shl	 eax, 0
  00663	89 4c 02 14	 mov	 DWORD PTR [edx+eax+20], ecx

; 126  :         if (pDB->HLineType(col,row) == LINE_NONE)

  00667	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  0066a	51		 push	 ecx
  0066b	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  0066e	52		 push	 edx
  0066f	8b 4d 08	 mov	 ecx, DWORD PTR _pDB$[ebp]
  00672	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  00677	85 c0		 test	 eax, eax
  00679	75 1f		 jne	 SHORT $LN32@ComputeFlo

; 127  :         {
; 128  :           r[numR].c[1] = 1;

  0067b	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  00682	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  00689	ba 04 00 00 00	 mov	 edx, 4
  0068e	c1 e2 00	 shl	 edx, 0
  00691	c7 04 11 01 00
	00 00		 mov	 DWORD PTR [ecx+edx], 1

; 129  :         }

  00698	eb 1d		 jmp	 SHORT $LN33@ComputeFlo
$LN32@ComputeFlo:

; 130  :         else
; 131  :         {
; 132  :           r[numR].c[1] = 5;

  0069a	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  006a1	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  006a8	ba 04 00 00 00	 mov	 edx, 4
  006ad	c1 e2 00	 shl	 edx, 0
  006b0	c7 04 11 05 00
	00 00		 mov	 DWORD PTR [ecx+edx], 5
$LN33@ComputeFlo:

; 133  :         };
; 134  :           //
; 135  :           //DOWN
; 136  :         if (row < height-1)

  006b7	8b 45 f0	 mov	 eax, DWORD PTR _height$[ebp]
  006ba	83 e8 01	 sub	 eax, 1
  006bd	39 45 ec	 cmp	 DWORD PTR _row$[ebp], eax
  006c0	0f 8d 81 00 00
	00		 jge	 $LN34@ComputeFlo

; 137  :         {
; 138  :           r[numR].s[2] = &m_v[col][row+1][1];

  006c6	6b 4d e8 58	 imul	 ecx, DWORD PTR _col$[ebp], 88
  006ca	03 4d f8	 add	 ecx, DWORD PTR _this$[ebp]
  006cd	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  006d0	8d 44 d1 08	 lea	 eax, DWORD PTR [ecx+edx*8+8]
  006d4	b9 04 00 00 00	 mov	 ecx, 4
  006d9	c1 e1 00	 shl	 ecx, 0
  006dc	03 c1		 add	 eax, ecx
  006de	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  006e5	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  006ec	ba 04 00 00 00	 mov	 edx, 4
  006f1	d1 e2		 shl	 edx, 1
  006f3	89 44 11 14	 mov	 DWORD PTR [ecx+edx+20], eax

; 139  :           if (pDB->VLineType(col,row) == LINE_NONE)

  006f7	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  006fa	50		 push	 eax
  006fb	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  006fe	51		 push	 ecx
  006ff	8b 4d 08	 mov	 ecx, DWORD PTR _pDB$[ebp]
  00702	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  00707	85 c0		 test	 eax, eax
  00709	75 1e		 jne	 SHORT $LN36@ComputeFlo

; 140  :           {
; 141  :             r[numR].c[2] = 1;

  0070b	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  00712	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  00719	b9 04 00 00 00	 mov	 ecx, 4
  0071e	d1 e1		 shl	 ecx, 1
  00720	c7 04 08 01 00
	00 00		 mov	 DWORD PTR [eax+ecx], 1

; 142  :           }

  00727	eb 1c		 jmp	 SHORT $LN37@ComputeFlo
$LN36@ComputeFlo:

; 143  :           else
; 144  :           {
; 145  :             r[numR].c[2] = 5;

  00729	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  00730	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  00737	b9 04 00 00 00	 mov	 ecx, 4
  0073c	d1 e1		 shl	 ecx, 1
  0073e	c7 04 08 05 00
	00 00		 mov	 DWORD PTR [eax+ecx], 5
$LN37@ComputeFlo:

; 146  :           };
; 147  :         }

  00745	eb 38		 jmp	 SHORT $LN35@ComputeFlo
$LN34@ComputeFlo:

; 148  :         else
; 149  :         {
; 150  :           r[numR].s[2] = &zero;

  00747	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  0074e	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  00755	b9 04 00 00 00	 mov	 ecx, 4
  0075a	d1 e1		 shl	 ecx, 1
  0075c	8d 55 e0	 lea	 edx, DWORD PTR _zero$[ebp]
  0075f	89 54 08 14	 mov	 DWORD PTR [eax+ecx+20], edx

; 151  :           r[numR].c[2] = 0;

  00763	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  0076a	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  00771	ba 04 00 00 00	 mov	 edx, 4
  00776	d1 e2		 shl	 edx, 1
  00778	c7 04 11 00 00
	00 00		 mov	 DWORD PTR [ecx+edx], 0
$LN35@ComputeFlo:

; 152  :         };
; 153  :           //
; 154  :           //LEFT
; 155  :         r[numR].s[3] = &m_v[col-1][row][1];

  0077f	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00782	83 e8 01	 sub	 eax, 1
  00785	6b c8 58	 imul	 ecx, eax, 88
  00788	03 4d f8	 add	 ecx, DWORD PTR _this$[ebp]
  0078b	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  0078e	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00791	b9 04 00 00 00	 mov	 ecx, 4
  00796	c1 e1 00	 shl	 ecx, 0
  00799	03 c1		 add	 eax, ecx
  0079b	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  007a2	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  007a9	ba 04 00 00 00	 mov	 edx, 4
  007ae	6b d2 03	 imul	 edx, edx, 3
  007b1	89 44 11 14	 mov	 DWORD PTR [ecx+edx+20], eax

; 156  :         if (pDB->HLineType(col-1,row) == LINE_NONE)

  007b5	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  007b8	50		 push	 eax
  007b9	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  007bc	83 e9 01	 sub	 ecx, 1
  007bf	51		 push	 ecx
  007c0	8b 4d 08	 mov	 ecx, DWORD PTR _pDB$[ebp]
  007c3	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  007c8	85 c0		 test	 eax, eax
  007ca	75 1f		 jne	 SHORT $LN38@ComputeFlo

; 157  :         {
; 158  :           r[numR].c[3] = 1;

  007cc	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  007d3	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  007da	b9 04 00 00 00	 mov	 ecx, 4
  007df	6b d1 03	 imul	 edx, ecx, 3
  007e2	c7 04 10 01 00
	00 00		 mov	 DWORD PTR [eax+edx], 1

; 159  :         }

  007e9	eb 1d		 jmp	 SHORT $LN39@ComputeFlo
$LN38@ComputeFlo:

; 160  :         else
; 161  :         {
; 162  :           r[numR].c[3] = 5;

  007eb	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  007f2	8d 8c 05 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+eax]
  007f9	ba 04 00 00 00	 mov	 edx, 4
  007fe	6b c2 03	 imul	 eax, edx, 3
  00801	c7 04 01 05 00
	00 00		 mov	 DWORD PTR [ecx+eax], 5
$LN39@ComputeFlo:

; 163  :         };
; 164  :         w = r[numR].c[0] + r[numR].c[1] + r[numR].c[2] + r[numR].c[3];

  00808	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  0080f	8d 94 0d b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+ecx]
  00816	b8 04 00 00 00	 mov	 eax, 4
  0081b	6b c8 00	 imul	 ecx, eax, 0
  0081e	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  00825	8d 84 05 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+eax]
  0082c	be 04 00 00 00	 mov	 esi, 4
  00831	c1 e6 00	 shl	 esi, 0
  00834	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00837	03 0c 30	 add	 ecx, DWORD PTR [eax+esi]
  0083a	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  00841	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  00848	ba 04 00 00 00	 mov	 edx, 4
  0084d	d1 e2		 shl	 edx, 1
  0084f	03 0c 10	 add	 ecx, DWORD PTR [eax+edx]
  00852	6b 85 a8 da ff
	ff 24		 imul	 eax, DWORD PTR _numR$[ebp], 36
  00859	8d 94 05 b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+eax]
  00860	b8 04 00 00 00	 mov	 eax, 4
  00865	6b c0 03	 imul	 eax, eax, 3
  00868	03 0c 02	 add	 ecx, DWORD PTR [edx+eax]
  0086b	89 4d d8	 mov	 DWORD PTR _w$[ebp], ecx

; 165  :         r[numR].c[0] *= 1000000/w;

  0086e	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  00875	8d 8c 0d b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+ecx]
  0087c	ba 04 00 00 00	 mov	 edx, 4
  00881	6b f2 00	 imul	 esi, edx, 0
  00884	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  00889	99		 cdq
  0088a	f7 7d d8	 idiv	 DWORD PTR _w$[ebp]
  0088d	0f af 04 31	 imul	 eax, DWORD PTR [ecx+esi]
  00891	b9 04 00 00 00	 mov	 ecx, 4
  00896	6b d1 00	 imul	 edx, ecx, 0
  00899	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  008a0	8d 8c 0d b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+ecx]
  008a7	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 166  :         r[numR].c[1] *= 1000000/w;

  008aa	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  008b1	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  008b8	be 04 00 00 00	 mov	 esi, 4
  008bd	c1 e6 00	 shl	 esi, 0
  008c0	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  008c5	99		 cdq
  008c6	f7 7d d8	 idiv	 DWORD PTR _w$[ebp]
  008c9	0f af 04 31	 imul	 eax, DWORD PTR [ecx+esi]
  008cd	ba 04 00 00 00	 mov	 edx, 4
  008d2	c1 e2 00	 shl	 edx, 0
  008d5	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  008dc	8d 8c 0d b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+ecx]
  008e3	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 167  :         r[numR].c[2] *= 1000000/w;

  008e6	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  008ed	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  008f4	be 04 00 00 00	 mov	 esi, 4
  008f9	d1 e6		 shl	 esi, 1
  008fb	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  00900	99		 cdq
  00901	f7 7d d8	 idiv	 DWORD PTR _w$[ebp]
  00904	0f af 04 31	 imul	 eax, DWORD PTR [ecx+esi]
  00908	ba 04 00 00 00	 mov	 edx, 4
  0090d	d1 e2		 shl	 edx, 1
  0090f	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  00916	8d 8c 0d b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+ecx]
  0091d	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 168  :         r[numR].c[3] *= 1000000/w;

  00920	6b 95 a8 da ff
	ff 24		 imul	 edx, DWORD PTR _numR$[ebp], 36
  00927	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  0092e	ba 04 00 00 00	 mov	 edx, 4
  00933	6b f2 03	 imul	 esi, edx, 3
  00936	b8 40 42 0f 00	 mov	 eax, 1000000		; 000f4240H
  0093b	99		 cdq
  0093c	f7 7d d8	 idiv	 DWORD PTR _w$[ebp]
  0093f	0f af 04 31	 imul	 eax, DWORD PTR [ecx+esi]
  00943	b9 04 00 00 00	 mov	 ecx, 4
  00948	6b d1 03	 imul	 edx, ecx, 3
  0094b	6b 8d a8 da ff
	ff 24		 imul	 ecx, DWORD PTR _numR$[ebp], 36
  00952	8d 8c 0d b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+ecx]
  00959	89 04 11	 mov	 DWORD PTR [ecx+edx], eax

; 169  :         numR++;

  0095c	8b 95 a8 da ff
	ff		 mov	 edx, DWORD PTR _numR$[ebp]
  00962	83 c2 01	 add	 edx, 1
  00965	89 95 a8 da ff
	ff		 mov	 DWORD PTR _numR$[ebp], edx
$LN27@ComputeFlo:

; 170  :       };
; 171  :     };

  0096b	e9 0e f7 ff ff	 jmp	 $LN5@ComputeFlo
$LN6@ComputeFlo:

; 172  :   };

  00970	e9 eb f6 ff ff	 jmp	 $LN2@ComputeFlo
$LN10@ComputeFlo:

; 173  :   do
; 174  :   {
; 175  :     int i;
; 176  :     e = 0;

  00975	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _e$[ebp], 0

; 177  :     for (i=0; i<numR; i++)

  0097c	c7 85 a4 da ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$3[ebp], 0
  00986	eb 0f		 jmp	 SHORT $LN13@ComputeFlo
$LN11@ComputeFlo:
  00988	8b 85 a4 da ff
	ff		 mov	 eax, DWORD PTR _i$3[ebp]
  0098e	83 c0 01	 add	 eax, 1
  00991	89 85 a4 da ff
	ff		 mov	 DWORD PTR _i$3[ebp], eax
$LN13@ComputeFlo:
  00997	8b 8d a4 da ff
	ff		 mov	 ecx, DWORD PTR _i$3[ebp]
  0099d	3b 8d a8 da ff
	ff		 cmp	 ecx, DWORD PTR _numR$[ebp]
  009a3	0f 8d 3e 01 00
	00		 jge	 $LN8@ComputeFlo

; 178  :     {
; 179  :       int r0, c;
; 180  :       r0 = *r[i].d;

  009a9	6b 95 a4 da ff
	ff 24		 imul	 edx, DWORD PTR _i$3[ebp], 36
  009b0	8b 84 15 c0 da
	ff ff		 mov	 eax, DWORD PTR _r$[ebp+edx+16]
  009b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  009b9	89 8d a0 da ff
	ff		 mov	 DWORD PTR _r0$2[ebp], ecx

; 181  :       *r[i].d = (   *r[i].s[0] * r[i].c[0]

  009bf	6b 95 a4 da ff
	ff 24		 imul	 edx, DWORD PTR _i$3[ebp], 36
  009c6	8d 84 15 b0 da
	ff ff		 lea	 eax, DWORD PTR _r$[ebp+edx]
  009cd	b9 04 00 00 00	 mov	 ecx, 4
  009d2	6b d1 00	 imul	 edx, ecx, 0
  009d5	8b 44 10 14	 mov	 eax, DWORD PTR [eax+edx+20]
  009d9	6b 8d a4 da ff
	ff 24		 imul	 ecx, DWORD PTR _i$3[ebp], 36
  009e0	8d 94 0d b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+ecx]
  009e7	b9 04 00 00 00	 mov	 ecx, 4
  009ec	6b c9 00	 imul	 ecx, ecx, 0
  009ef	8b 00		 mov	 eax, DWORD PTR [eax]
  009f1	0f af 04 0a	 imul	 eax, DWORD PTR [edx+ecx]
  009f5	6b 95 a4 da ff
	ff 24		 imul	 edx, DWORD PTR _i$3[ebp], 36
  009fc	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  00a03	ba 04 00 00 00	 mov	 edx, 4
  00a08	c1 e2 00	 shl	 edx, 0
  00a0b	8b 4c 11 14	 mov	 ecx, DWORD PTR [ecx+edx+20]
  00a0f	6b 95 a4 da ff
	ff 24		 imul	 edx, DWORD PTR _i$3[ebp], 36
  00a16	8d 94 15 b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+edx]
  00a1d	be 04 00 00 00	 mov	 esi, 4
  00a22	c1 e6 00	 shl	 esi, 0
  00a25	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00a27	0f af 0c 32	 imul	 ecx, DWORD PTR [edx+esi]
  00a2b	03 c1		 add	 eax, ecx
  00a2d	6b 95 a4 da ff
	ff 24		 imul	 edx, DWORD PTR _i$3[ebp], 36
  00a34	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  00a3b	ba 04 00 00 00	 mov	 edx, 4
  00a40	d1 e2		 shl	 edx, 1
  00a42	8b 4c 11 14	 mov	 ecx, DWORD PTR [ecx+edx+20]
  00a46	6b 95 a4 da ff
	ff 24		 imul	 edx, DWORD PTR _i$3[ebp], 36
  00a4d	8d 94 15 b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+edx]
  00a54	be 04 00 00 00	 mov	 esi, 4
  00a59	d1 e6		 shl	 esi, 1
  00a5b	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00a5d	0f af 0c 32	 imul	 ecx, DWORD PTR [edx+esi]
  00a61	03 c1		 add	 eax, ecx
  00a63	6b 95 a4 da ff
	ff 24		 imul	 edx, DWORD PTR _i$3[ebp], 36
  00a6a	8d 8c 15 b0 da
	ff ff		 lea	 ecx, DWORD PTR _r$[ebp+edx]
  00a71	ba 04 00 00 00	 mov	 edx, 4
  00a76	6b d2 03	 imul	 edx, edx, 3
  00a79	8b 4c 11 14	 mov	 ecx, DWORD PTR [ecx+edx+20]
  00a7d	6b 95 a4 da ff
	ff 24		 imul	 edx, DWORD PTR _i$3[ebp], 36
  00a84	8d 94 15 b0 da
	ff ff		 lea	 edx, DWORD PTR _r$[ebp+edx]
  00a8b	be 04 00 00 00	 mov	 esi, 4
  00a90	6b f6 03	 imul	 esi, esi, 3
  00a93	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00a95	0f af 0c 32	 imul	 ecx, DWORD PTR [edx+esi]
  00a99	03 c1		 add	 eax, ecx
  00a9b	99		 cdq
  00a9c	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00aa1	f7 f9		 idiv	 ecx
  00aa3	6b 95 a4 da ff
	ff 24		 imul	 edx, DWORD PTR _i$3[ebp], 36
  00aaa	8b 8c 15 c0 da
	ff ff		 mov	 ecx, DWORD PTR _r$[ebp+edx+16]
  00ab1	89 01		 mov	 DWORD PTR [ecx], eax

; 182  :                   +  *r[i].s[1] * r[i].c[1]
; 183  :                   +  *r[i].s[2] * r[i].c[2]
; 184  :                   +  *r[i].s[3] * r[i].c[3]
; 185  :                 ) / 1000000;
; 186  : 
; 187  :       c = (r0 - *r[i].d);

  00ab3	6b 95 a4 da ff
	ff 24		 imul	 edx, DWORD PTR _i$3[ebp], 36
  00aba	8b 84 15 c0 da
	ff ff		 mov	 eax, DWORD PTR _r$[ebp+edx+16]
  00ac1	8b 8d a0 da ff
	ff		 mov	 ecx, DWORD PTR _r0$2[ebp]
  00ac7	2b 08		 sub	 ecx, DWORD PTR [eax]
  00ac9	89 8d 9c da ff
	ff		 mov	 DWORD PTR _c$1[ebp], ecx

; 188  :       e += c * c;

  00acf	8b 95 9c da ff
	ff		 mov	 edx, DWORD PTR _c$1[ebp]
  00ad5	0f af 95 9c da
	ff ff		 imul	 edx, DWORD PTR _c$1[ebp]
  00adc	03 55 d4	 add	 edx, DWORD PTR _e$[ebp]
  00adf	89 55 d4	 mov	 DWORD PTR _e$[ebp], edx

; 189  :     };

  00ae2	e9 a1 fe ff ff	 jmp	 $LN11@ComputeFlo
$LN8@ComputeFlo:

; 190  :   } while (e > numR);

  00ae7	8b 45 d4	 mov	 eax, DWORD PTR _e$[ebp]
  00aea	3b 85 a8 da ff
	ff		 cmp	 eax, DWORD PTR _numR$[ebp]
  00af0	0f 8f 7f fe ff
	ff		 jg	 $LN10@ComputeFlo

; 191  : }

  00af6	52		 push	 edx
  00af7	8b cd		 mov	 ecx, ebp
  00af9	50		 push	 eax
  00afa	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN44@ComputeFlo
  00b00	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00b05	58		 pop	 eax
  00b06	5a		 pop	 edx
  00b07	5f		 pop	 edi
  00b08	5e		 pop	 esi
  00b09	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00b0c	33 cd		 xor	 ecx, ebp
  00b0e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00b13	81 c4 64 25 00
	00		 add	 esp, 9572		; 00002564H
  00b19	3b ec		 cmp	 ebp, esp
  00b1b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b20	8b e5		 mov	 esp, ebp
  00b22	5d		 pop	 ebp
  00b23	c2 04 00	 ret	 4
  00b26	66 90		 npad	 2
$LN44@ComputeFlo:
  00b28	02 00 00 00	 DD	 2
  00b2c	00 00 00 00	 DD	 $LN43@ComputeFlo
$LN43@ComputeFlo:
  00b30	e0 ff ff ff	 DD	 -32			; ffffffe0H
  00b34	04 00 00 00	 DD	 4
  00b38	00 00 00 00	 DD	 $LN41@ComputeFlo
  00b3c	b0 da ff ff	 DD	 -9552			; ffffdab0H
  00b40	20 25 00 00	 DD	 9504			; 00002520H
  00b44	00 00 00 00	 DD	 $LN42@ComputeFlo
$LN42@ComputeFlo:
  00b48	72		 DB	 114			; 00000072H
  00b49	00		 DB	 0
$LN41@ComputeFlo:
  00b4a	7a		 DB	 122			; 0000007aH
  00b4b	65		 DB	 101			; 00000065H
  00b4c	72		 DB	 114			; 00000072H
  00b4d	6f		 DB	 111			; 0000006fH
  00b4e	00		 DB	 0
?ComputeFlow@FLOW@@QAEXPBVDOTS_AND_BOXES@@@Z ENDP	; FLOW::ComputeFlow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z PROC	; DOTS_AND_BOXES::HLineType, COMDAT
; _this$ = ecx

; 101  :   INLINE LINE_TYPE HLineType(int col, int row)const{return (LINE_TYPE)m_hlines[row*(m_width-1) + col];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	0f af 4d 0c	 imul	 ecx, DWORD PTR _row$[ebp]
  00014	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001d	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ENDP	; DOTS_AND_BOXES::HLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z PROC	; DOTS_AND_BOXES::VLineType, COMDAT
; _this$ = ecx

; 97   :   INLINE LINE_TYPE VLineType(int col, int row)const{return (LINE_TYPE)m_vlines[row*m_width + col];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _row$[ebp]
  0000d	0f af 48 10	 imul	 ecx, DWORD PTR [eax+16]
  00011	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0001a	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ENDP	; DOTS_AND_BOXES::VLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Height@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::Height, COMDAT
; _this$ = ecx

; 93   :   INLINE int Height(void) const {return m_height;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Height@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::Height
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Width@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::Width, COMDAT
; _this$ = ecx

; 92   :   INLINE int Width(void) const {return m_width;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Width@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::Width
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Flow.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Flow.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
