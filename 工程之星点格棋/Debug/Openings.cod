; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

	TITLE	C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Debug\Openings.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG224980 DB	'Cannot allocate opening book space', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??0OPENINGp@@QAE@HHH@Z				; OPENINGp::OPENINGp
PUBLIC	??1OPENINGp@@QAE@XZ				; OPENINGp::~OPENINGp
PUBLIC	??1COMBINATIONS@@QAE@XZ				; COMBINATIONS::~COMBINATIONS
PUBLIC	?Decode@@YAXAAPA_KPAEHHH@Z			; Decode
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	?die@@YAXPBD@Z:PROC				; die
EXTRN	??0COMBINATIONS@@QAE@XZ:PROC			; COMBINATIONS::COMBINATIONS
EXTRN	?Combination@COMBINATIONS@@QAE_KIHH@Z:PROC	; COMBINATIONS::Combination
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	?numOpenings5x5@@3PAY03IA:BYTE			; numOpenings5x5
EXTRN	?Openings5x5@@3PAY03PAEA:BYTE			; Openings5x5
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?Decode@@YAXAAPA_KPAEHHH@Z$0
	DD	019H
	DD	026H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?Decode@@YAXAAPA_KPAEHHH@Z
	DD	032H
	DD	0176H
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$?Decode@@YAXAAPA_KPAEHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Decode@@YAXAAPA_KPAEHHH@Z$0
__ehfuncinfo$?Decode@@YAXAAPA_KPAEHHH@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Decode@@YAXAAPA_KPAEHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Openings.cpp
_TEXT	SEGMENT
_combinations$ = -1848					; size = 1804
_byteIndex$ = -40					; size = 4
_prevIndex$ = -36					; size = 4
_index$ = -32						; size = 4
_delta$ = -28						; size = 4
_n$ = -24						; size = 4
_i$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_positions$ = 8						; size = 4
_src$ = 12						; size = 4
_numPosition$ = 16					; size = 4
_nOneBits$ = 20						; size = 4
_nTotalBits$ = 24					; size = 4
?Decode@@YAXAAPA_KPAEHHH@Z PROC				; Decode

; 15   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Decode@@YAXAAPA_KPAEHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 30 07 00
	00		 sub	 esp, 1840		; 00000730H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd c4 f8 ff
	ff		 lea	 edi, DWORD PTR [ebp-1852]
  0001f	b9 cc 01 00 00	 mov	 ecx, 460		; 000001ccH
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 16   :   int i, n, delta, index;
; 17   :   int prevIndex;
; 18   :   int byteIndex;
; 19   :   COMBINATIONS combinations;

  0003f	8d 8d c8 f8 ff
	ff		 lea	 ecx, DWORD PTR _combinations$[ebp]
  00045	e8 00 00 00 00	 call	 ??0COMBINATIONS@@QAE@XZ	; COMBINATIONS::COMBINATIONS
  0004a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 20   :   positions = (ui64 *)malloc(numPosition * sizeof (ui64));

  00051	8b 45 10	 mov	 eax, DWORD PTR _numPosition$[ebp]
  00054	c1 e0 03	 shl	 eax, 3
  00057	8b f4		 mov	 esi, esp
  00059	50		 push	 eax
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00060	83 c4 04	 add	 esp, 4
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _positions$[ebp]
  0006d	89 01		 mov	 DWORD PTR [ecx], eax

; 21   :   if (positions == NULL)

  0006f	8b 55 08	 mov	 edx, DWORD PTR _positions$[ebp]
  00072	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00075	75 0d		 jne	 SHORT $LN7@Decode

; 22   :   {
; 23   :     die("Cannot allocate opening book space");

  00077	68 00 00 00 00	 push	 OFFSET $SG224980
  0007c	e8 00 00 00 00	 call	 ?die@@YAXPBD@Z		; die
  00081	83 c4 04	 add	 esp, 4
$LN7@Decode:

; 24   :   };
; 25   :   prevIndex = 0;

  00084	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _prevIndex$[ebp], 0

; 26   :   byteIndex = 0;

  0008b	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _byteIndex$[ebp], 0

; 27   :   for (i=0; i<numPosition; i++)

  00092	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00099	eb 09		 jmp	 SHORT $LN4@Decode
$LN2@Decode:
  0009b	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  0009e	83 c0 01	 add	 eax, 1
  000a1	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Decode:
  000a4	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  000a7	3b 4d 10	 cmp	 ecx, DWORD PTR _numPosition$[ebp]
  000aa	0f 8d 96 00 00
	00		 jge	 $LN3@Decode

; 28   :   {
; 29   :     n = (src[byteIndex] >> 6) & 3;

  000b0	8b 55 0c	 mov	 edx, DWORD PTR _src$[ebp]
  000b3	03 55 d8	 add	 edx, DWORD PTR _byteIndex$[ebp]
  000b6	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000b9	c1 f8 06	 sar	 eax, 6
  000bc	83 e0 03	 and	 eax, 3
  000bf	89 45 e8	 mov	 DWORD PTR _n$[ebp], eax

; 30   :     delta = src[byteIndex] & 0x3f;

  000c2	8b 4d 0c	 mov	 ecx, DWORD PTR _src$[ebp]
  000c5	03 4d d8	 add	 ecx, DWORD PTR _byteIndex$[ebp]
  000c8	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  000cb	83 e2 3f	 and	 edx, 63			; 0000003fH
  000ce	89 55 e4	 mov	 DWORD PTR _delta$[ebp], edx

; 31   :     byteIndex++;

  000d1	8b 45 d8	 mov	 eax, DWORD PTR _byteIndex$[ebp]
  000d4	83 c0 01	 add	 eax, 1
  000d7	89 45 d8	 mov	 DWORD PTR _byteIndex$[ebp], eax
$LN5@Decode:

; 32   :     while (n > 0)

  000da	83 7d e8 00	 cmp	 DWORD PTR _n$[ebp], 0
  000de	7e 2c		 jle	 SHORT $LN6@Decode

; 33   :     {
; 34   :       delta <<= 8;

  000e0	8b 4d e4	 mov	 ecx, DWORD PTR _delta$[ebp]
  000e3	c1 e1 08	 shl	 ecx, 8
  000e6	89 4d e4	 mov	 DWORD PTR _delta$[ebp], ecx

; 35   :       delta += src[byteIndex++];

  000e9	8b 55 0c	 mov	 edx, DWORD PTR _src$[ebp]
  000ec	03 55 d8	 add	 edx, DWORD PTR _byteIndex$[ebp]
  000ef	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  000f2	03 45 e4	 add	 eax, DWORD PTR _delta$[ebp]
  000f5	89 45 e4	 mov	 DWORD PTR _delta$[ebp], eax
  000f8	8b 4d d8	 mov	 ecx, DWORD PTR _byteIndex$[ebp]
  000fb	83 c1 01	 add	 ecx, 1
  000fe	89 4d d8	 mov	 DWORD PTR _byteIndex$[ebp], ecx

; 36   :       n--;

  00101	8b 55 e8	 mov	 edx, DWORD PTR _n$[ebp]
  00104	83 ea 01	 sub	 edx, 1
  00107	89 55 e8	 mov	 DWORD PTR _n$[ebp], edx

; 37   :     };

  0010a	eb ce		 jmp	 SHORT $LN5@Decode
$LN6@Decode:

; 38   :     index = prevIndex + delta;

  0010c	8b 45 dc	 mov	 eax, DWORD PTR _prevIndex$[ebp]
  0010f	03 45 e4	 add	 eax, DWORD PTR _delta$[ebp]
  00112	89 45 e0	 mov	 DWORD PTR _index$[ebp], eax

; 39   :     prevIndex = index;

  00115	8b 4d e0	 mov	 ecx, DWORD PTR _index$[ebp]
  00118	89 4d dc	 mov	 DWORD PTR _prevIndex$[ebp], ecx

; 40   :     positions[i] = combinations.Combination(index, nOneBits, nTotalBits);

  0011b	8b 55 18	 mov	 edx, DWORD PTR _nTotalBits$[ebp]
  0011e	52		 push	 edx
  0011f	8b 45 14	 mov	 eax, DWORD PTR _nOneBits$[ebp]
  00122	50		 push	 eax
  00123	8b 4d e0	 mov	 ecx, DWORD PTR _index$[ebp]
  00126	51		 push	 ecx
  00127	8d 8d c8 f8 ff
	ff		 lea	 ecx, DWORD PTR _combinations$[ebp]
  0012d	e8 00 00 00 00	 call	 ?Combination@COMBINATIONS@@QAE_KIHH@Z ; COMBINATIONS::Combination
  00132	8b 4d 08	 mov	 ecx, DWORD PTR _positions$[ebp]
  00135	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00137	8b 75 ec	 mov	 esi, DWORD PTR _i$[ebp]
  0013a	89 04 f1	 mov	 DWORD PTR [ecx+esi*8], eax
  0013d	89 54 f1 04	 mov	 DWORD PTR [ecx+esi*8+4], edx

; 41   :   };

  00141	e9 55 ff ff ff	 jmp	 $LN2@Decode
$LN3@Decode:

; 42   : }

  00146	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014d	8d 8d c8 f8 ff
	ff		 lea	 ecx, DWORD PTR _combinations$[ebp]
  00153	e8 00 00 00 00	 call	 ??1COMBINATIONS@@QAE@XZ	; COMBINATIONS::~COMBINATIONS
  00158	52		 push	 edx
  00159	8b cd		 mov	 ecx, ebp
  0015b	50		 push	 eax
  0015c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@Decode
  00162	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00167	58		 pop	 eax
  00168	5a		 pop	 edx
  00169	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00173	59		 pop	 ecx
  00174	5f		 pop	 edi
  00175	5e		 pop	 esi
  00176	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00179	33 cd		 xor	 ecx, ebp
  0017b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00180	81 c4 3c 07 00
	00		 add	 esp, 1852		; 0000073cH
  00186	3b ec		 cmp	 ebp, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c3		 ret	 0
  00191	0f 1f 00	 npad	 3
$LN13@Decode:
  00194	01 00 00 00	 DD	 1
  00198	00 00 00 00	 DD	 $LN12@Decode
$LN12@Decode:
  0019c	c8 f8 ff ff	 DD	 -1848			; fffff8c8H
  001a0	0c 07 00 00	 DD	 1804			; 0000070cH
  001a4	00 00 00 00	 DD	 $LN10@Decode
$LN10@Decode:
  001a8	63		 DB	 99			; 00000063H
  001a9	6f		 DB	 111			; 0000006fH
  001aa	6d		 DB	 109			; 0000006dH
  001ab	62		 DB	 98			; 00000062H
  001ac	69		 DB	 105			; 00000069H
  001ad	6e		 DB	 110			; 0000006eH
  001ae	61		 DB	 97			; 00000061H
  001af	74		 DB	 116			; 00000074H
  001b0	69		 DB	 105			; 00000069H
  001b1	6f		 DB	 111			; 0000006fH
  001b2	6e		 DB	 110			; 0000006eH
  001b3	73		 DB	 115			; 00000073H
  001b4	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Decode@@YAXAAPA_KPAEHHH@Z$0:
  00000	8d 8d c8 f8 ff
	ff		 lea	 ecx, DWORD PTR _combinations$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1COMBINATIONS@@QAE@XZ	; COMBINATIONS::~COMBINATIONS
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?Decode@@YAXAAPA_KPAEHHH@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a c4 f8 ff
	ff		 mov	 ecx, DWORD PTR [edx-1852]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Decode@@YAXAAPA_KPAEHHH@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Decode@@YAXAAPA_KPAEHHH@Z ENDP				; Decode
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Combinations.h
;	COMDAT ??1COMBINATIONS@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COMBINATIONS@@QAE@XZ PROC				; COMBINATIONS::~COMBINATIONS, COMDAT
; _this$ = ecx

; 6    :   ~COMBINATIONS(void){};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
??1COMBINATIONS@@QAE@XZ ENDP				; COMBINATIONS::~COMBINATIONS
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Openings.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
??1OPENINGp@@QAE@XZ PROC				; OPENINGp::~OPENINGp
; _this$ = ecx

; 61   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 62   :   int i;
; 63   :   for (i=0; i<4; i++)

  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001f	eb 09		 jmp	 SHORT $LN4@OPENINGp
$LN2@OPENINGp:
  00021	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00024	83 c0 01	 add	 eax, 1
  00027	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@OPENINGp:
  0002a	83 7d f8 04	 cmp	 DWORD PTR _i$[ebp], 4
  0002e	7d 3a		 jge	 SHORT $LN6@OPENINGp

; 64   :   {
; 65   :     if (positions[i] != NULL)

  00030	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	83 7c 8a 10 00	 cmp	 DWORD PTR [edx+ecx*4+16], 0
  0003b	74 2b		 je	 SHORT $LN5@OPENINGp

; 66   :     {
; 67   :       free(positions[i]);

  0003d	8b f4		 mov	 esi, esp
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00042	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00045	8b 54 81 10	 mov	 edx, DWORD PTR [ecx+eax*4+16]
  00049	52		 push	 edx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00050	83 c4 04	 add	 esp, 4
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 68   :       positions[i] = NULL;

  0005a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0005d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	c7 44 81 10 00
	00 00 00	 mov	 DWORD PTR [ecx+eax*4+16], 0
$LN5@OPENINGp:

; 69   :     };
; 70   :   };

  00068	eb b7		 jmp	 SHORT $LN2@OPENINGp
$LN6@OPENINGp:

; 71   : }

  0006a	5e		 pop	 esi
  0006b	83 c4 08	 add	 esp, 8
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
??1OPENINGp@@QAE@XZ ENDP				; OPENINGp::~OPENINGp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Openings.cpp
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_numLine$ = 16						; size = 4
??0OPENINGp@@QAE@HHH@Z PROC				; OPENINGp::OPENINGp
; _this$ = ecx

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 46   :   int i;
; 47   :   m_numLine = numLine;

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR _numLine$[ebp]
  0001e	89 48 20	 mov	 DWORD PTR [eax+32], ecx

; 48   :   for (i=0; i<4; i++)

  00021	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00028	eb 09		 jmp	 SHORT $LN4@OPENINGp
$LN2@OPENINGp:
  0002a	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0002d	83 c2 01	 add	 edx, 1
  00030	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$LN4@OPENINGp:
  00033	83 7d f8 04	 cmp	 DWORD PTR _i$[ebp], 4
  00037	7d 7a		 jge	 SHORT $LN1@OPENINGp

; 49   :   {
; 50   :     Decode(positions[i], 

  00039	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0003c	83 e8 01	 sub	 eax, 1
  0003f	0f af 45 0c	 imul	 eax, DWORD PTR _height$[ebp]
  00043	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00046	83 e9 01	 sub	 ecx, 1
  00049	0f af 4d 08	 imul	 ecx, DWORD PTR _width$[ebp]
  0004d	03 c1		 add	 eax, ecx
  0004f	50		 push	 eax
  00050	8b 55 10	 mov	 edx, DWORD PTR _numLine$[ebp]
  00053	83 c2 01	 add	 edx, 1
  00056	52		 push	 edx
  00057	8b 45 10	 mov	 eax, DWORD PTR _numLine$[ebp]
  0005a	83 c0 01	 add	 eax, 1
  0005d	c1 e0 04	 shl	 eax, 4
  00060	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00063	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?numOpenings5x5@@3PAY03IA[eax+ecx*4]
  0006a	52		 push	 edx
  0006b	8b 45 10	 mov	 eax, DWORD PTR _numLine$[ebp]
  0006e	83 c0 01	 add	 eax, 1
  00071	c1 e0 04	 shl	 eax, 4
  00074	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00077	8b 94 88 00 00
	00 00		 mov	 edx, DWORD PTR ?Openings5x5@@3PAY03PAEA[eax+ecx*4]
  0007e	52		 push	 edx
  0007f	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	8d 54 81 10	 lea	 edx, DWORD PTR [ecx+eax*4+16]
  00089	52		 push	 edx
  0008a	e8 00 00 00 00	 call	 ?Decode@@YAXAAPA_KPAEHHH@Z ; Decode
  0008f	83 c4 14	 add	 esp, 20			; 00000014H

; 51   :            Openings5x5[numLine+1][i],
; 52   :            numOpenings5x5[numLine+1][i],
; 53   :            numLine+1,
; 54   :            (width-1)*height + (height-1)*width);
; 55   :     numPositions[i] = numOpenings5x5[numLine+1][i];

  00092	8b 45 10	 mov	 eax, DWORD PTR _numLine$[ebp]
  00095	83 c0 01	 add	 eax, 1
  00098	c1 e0 04	 shl	 eax, 4
  0009b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0009e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000a1	8b 75 f8	 mov	 esi, DWORD PTR _i$[ebp]
  000a4	8b 84 b0 00 00
	00 00		 mov	 eax, DWORD PTR ?numOpenings5x5@@3PAY03IA[eax+esi*4]
  000ab	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 56   :   };

  000ae	e9 77 ff ff ff	 jmp	 $LN2@OPENINGp
$LN1@OPENINGp:

; 57   : }

  000b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	5e		 pop	 esi
  000b7	83 c4 08	 add	 esp, 8
  000ba	3b ec		 cmp	 ebp, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	8b e5		 mov	 esp, ebp
  000c3	5d		 pop	 ebp
  000c4	c2 0c 00	 ret	 12			; 0000000cH
??0OPENINGp@@QAE@HHH@Z ENDP				; OPENINGp::OPENINGp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Openings.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Openings.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
