; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

	TITLE	C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Debug\NewBoxesDoc.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?pDoc@@3PAVCNewBoxesDoc@@A			; pDoc
_BSS	SEGMENT
?pDoc@@3PAVCNewBoxesDoc@@A DD 01H DUP (?)		; pDoc
_BSS	ENDS
CONST	SEGMENT
$SG74042 DB	'atlTraceException', 00H
	ORG $+2
$SG225985 DB	'CNewBoxesDoc', 00H
	ORG $+3
$SG226056 DB	0b9H, 0feH, 0b9H, 0a4H, 0b3H, 0ccH, 0b9H, 0a4H, 0b3H, 0ccH
	DB	0d6H, 0aeH, 0d0H, 0c7H, '-2013', 0b2H, 0a9H, 0deH, 0c4H, 0d7H, 0e9H
	DB	00H
	ORG $+2
$SG226082 DB	'=Analysis ', 00H
	ORG $+1
$SG226083 DB	' Yes', 00H
	ORG $+3
$SG226084 DB	' No', 00H
$SG226085 DB	0aH, 00H
	ORG $+2
$SG226101 DB	'%d', 00H
	ORG $+1
$SG226105 DB	' Yes', 00H
	ORG $+3
$SG226108 DB	' No', 00H
$SG226109 DB	'Unknown value', 00H
	ORG $+2
$SG226127 DB	'Unknown Analysis Parameter', 00H
	ORG $+1
$SG226135 DB	'=Analysis ', 00H
	ORG $+1
$SG226163 DB	'=Analysis ', 00H
	ORG $+1
$SG226164 DB	' %d', 00H
$SG226165 DB	0aH, 00H
	ORG $+2
$SG226314 DB	'Error', 00H
	ORG $+2
$SG226315 DB	'Exceeded Move History Limit', 00H
$SG73381 DB	'atlTraceGeneral', 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_HRESULT_FROM_WIN32
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	__vsnprintf_s_l
PUBLIC	__vsnprintf_s
PUBLIC	__vscprintf_l
PUBLIC	__vscprintf
PUBLIC	__vsscanf_l
PUBLIC	_sscanf
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??$AtlMultiply@I@ATL@@YAJPAIII@Z		; ATL::AtlMultiply<unsigned int>
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
PUBLIC	??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PBD@Z	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
PUBLIC	??B?$CTraceCategoryEx@$00$0A@@ATL@@QAEIXZ	; ATL::CTraceCategoryEx<1,0>::operator unsigned int
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	?GetCategoryName@CTrace@ATL@@CAPA_WI@Z		; ATL::CTrace::GetCategoryName
PUBLIC	?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z		; ATL::CTrace::TraceV
PUBLIC	?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z		; ATL::CTrace::TraceV
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>
PUBLIC	??0CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::CPreserveLastError
PUBLIC	??1CPreserveLastError@ATL@@QAE@XZ		; ATL::CPreserveLastError::~CPreserveLastError
PUBLIC	??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z	; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
PUBLIC	??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ		; ATL::CTraceFileAndLineInfo::operator()
PUBLIC	??0IDocument@ATL@@IAE@XZ			; ATL::IDocument::IDocument
PUBLIC	??1IDocument@ATL@@UAE@XZ			; ATL::IDocument::~IDocument
PUBLIC	?AddRef@IDocument@ATL@@UAEJXZ			; ATL::IDocument::AddRef
PUBLIC	?Release@IDocument@ATL@@UAEJXZ			; ATL::IDocument::Release
PUBLIC	??_GIDocument@ATL@@UAEPAXI@Z			; ATL::IDocument::`scalar deleting destructor'
PUBLIC	??0CDocumentAdapter@CDocument@@QAE@PAV1@@Z	; CDocument::CDocumentAdapter::CDocumentAdapter
PUBLIC	??1CDocumentAdapter@CDocument@@UAE@XZ		; CDocument::CDocumentAdapter::~CDocumentAdapter
PUBLIC	?LoadFromStream@CDocumentAdapter@CDocument@@UAEJPAUIStream@@K@Z ; CDocument::CDocumentAdapter::LoadFromStream
PUBLIC	?InitializeSearchContent@CDocumentAdapter@CDocument@@UAEXXZ ; CDocument::CDocumentAdapter::InitializeSearchContent
PUBLIC	?ClearChunkList@CDocumentAdapter@CDocument@@UAEXXZ ; CDocument::CDocumentAdapter::ClearChunkList
PUBLIC	?SetChunkValue@CDocumentAdapter@CDocument@@UAEHPAUIFilterChunkValue@ATL@@@Z ; CDocument::CDocumentAdapter::SetChunkValue
PUBLIC	?BeginReadChunks@CDocumentAdapter@CDocument@@UAEXXZ ; CDocument::CDocumentAdapter::BeginReadChunks
PUBLIC	?ReadNextChunkValue@CDocumentAdapter@CDocument@@UAEHPAPAUIFilterChunkValue@ATL@@@Z ; CDocument::CDocumentAdapter::ReadNextChunkValue
PUBLIC	?RemoveChunk@CDocumentAdapter@CDocument@@UAEXABU_GUID@@K@Z ; CDocument::CDocumentAdapter::RemoveChunk
PUBLIC	?FindChunk@CDocumentAdapter@CDocument@@UAEPAU__POSITION@@ABU_GUID@@K@Z ; CDocument::CDocumentAdapter::FindChunk
PUBLIC	?GetContainer@CDocumentAdapter@CDocument@@UBEPAXXZ ; CDocument::CDocumentAdapter::GetContainer
PUBLIC	?GetThumbnail@CDocumentAdapter@CDocument@@UAEHIPAPAUHBITMAP__@@PAW4WTS_ALPHATYPE@@@Z ; CDocument::CDocumentAdapter::GetThumbnail
PUBLIC	??_GCDocumentAdapter@CDocument@@UAEPAXI@Z	; CDocument::CDocumentAdapter::`scalar deleting destructor'
PUBLIC	?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ	; CDocument::GetAdapter
PUBLIC	?OnBeforeRichPreviewFontChanged@CDocument@@UAEXXZ ; CDocument::OnBeforeRichPreviewFontChanged
PUBLIC	?OnRichPreviewFontChanged@CDocument@@UAEXXZ	; CDocument::OnRichPreviewFontChanged
PUBLIC	?OnRichPreviewTextColorChanged@CDocument@@UAEXXZ ; CDocument::OnRichPreviewTextColorChanged
PUBLIC	?OnRichPreviewBackColorChanged@CDocument@@UAEXXZ ; CDocument::OnRichPreviewBackColorChanged
PUBLIC	?OnRichPreviewSiteChanged@CDocument@@UAEXXZ	; CDocument::OnRichPreviewSiteChanged
PUBLIC	?InitializeSearchContent@CDocument@@UAEXXZ	; CDocument::InitializeSearchContent
PUBLIC	??0VECTOR@@QAE@XZ				; VECTOR::VECTOR
PUBLIC	??0VECTOR@@QAE@HH@Z				; VECTOR::VECTOR
PUBLIC	??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z		; VECTOR::operator=
PUBLIC	?v@DOTS_AND_BOXES@@AAEXXZ			; DOTS_AND_BOXES::v
PUBLIC	?Width@DOTS_AND_BOXES@@QBEHXZ			; DOTS_AND_BOXES::Width
PUBLIC	?Height@DOTS_AND_BOXES@@QBEHXZ			; DOTS_AND_BOXES::Height
PUBLIC	?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
PUBLIC	?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::VLineType
PUBLIC	?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType
PUBLIC	?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType
PUBLIC	?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
PUBLIC	?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::HLineType
PUBLIC	?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType
PUBLIC	?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType
PUBLIC	?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z ; DOTS_AND_BOXES::BoxOwner
PUBLIC	?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::BoxOwner
PUBLIC	?SetBoxOwner@DOTS_AND_BOXES@@QAEXHHW4OWNER_TYPE@@@Z ; DOTS_AND_BOXES::SetBoxOwner
PUBLIC	?SetBoxOwner@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; DOTS_AND_BOXES::SetBoxOwner
PUBLIC	?Dot2Line@DOTS_AND_BOXES@@QBEHHH_N@Z		; DOTS_AND_BOXES::Dot2Line
PUBLIC	?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z	; DOTS_AND_BOXES::Dot2Line
PUBLIC	?VerticalLoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ; DOTS_AND_BOXES::VerticalLoopWeight
PUBLIC	?HorizontalLoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ; DOTS_AND_BOXES::HorizontalLoopWeight
PUBLIC	?VerticalDivideWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ; DOTS_AND_BOXES::VerticalDivideWeight
PUBLIC	?HorizontalDivideWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ; DOTS_AND_BOXES::HorizontalDivideWeight
PUBLIC	??_GDOTS_AND_BOXES@@QAEPAXI@Z			; DOTS_AND_BOXES::`scalar deleting destructor'
PUBLIC	??_GSWHASHTABLE@@QAEPAXI@Z			; SWHASHTABLE::`scalar deleting destructor'
PUBLIC	??_GNIMHASHTABLE@@QAEPAXI@Z			; NIMHASHTABLE::`scalar deleting destructor'
PUBLIC	??0MOVE@@QAE@XZ					; MOVE::MOVE
PUBLIC	??0MOVE_HISTORY@@QAE@XZ				; MOVE_HISTORY::MOVE_HISTORY
PUBLIC	?Erase@MOVE_HISTORY@@QAEXXZ			; MOVE_HISTORY::Erase
PUBLIC	?AddMove@MOVE_HISTORY@@QAEXABUMOVE@@@Z		; MOVE_HISTORY::AddMove
PUBLIC	??0CNewBoxesDoc@@IAE@XZ				; CNewBoxesDoc::CNewBoxesDoc
PUBLIC	?_GetBaseClass@CNewBoxesDoc@@KGPAUCRuntimeClass@@XZ ; CNewBoxesDoc::_GetBaseClass
PUBLIC	?GetThisClass@CNewBoxesDoc@@SGPAUCRuntimeClass@@XZ ; CNewBoxesDoc::GetThisClass
PUBLIC	?GetRuntimeClass@CNewBoxesDoc@@UBEPAUCRuntimeClass@@XZ ; CNewBoxesDoc::GetRuntimeClass
PUBLIC	?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ	; CNewBoxesDoc::CreateObject
PUBLIC	?GameSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ	; CNewBoxesDoc::GameSize
PUBLIC	?CurrentRandomize@CNewBoxesDoc@@QAEX_N@Z	; CNewBoxesDoc::CurrentRandomize
PUBLIC	?CurrentRandomSeed@CNewBoxesDoc@@QAEXI@Z	; CNewBoxesDoc::CurrentRandomSeed
PUBLIC	?SetRandom@CNewBoxesDoc@@QAEXI@Z		; CNewBoxesDoc::SetRandom
PUBLIC	?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CNewBoxesDoc::InputAnalysisParameter
PUBLIC	?InputParameter@CNewBoxesDoc@@QAEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CNewBoxesDoc::InputParameter
PUBLIC	?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::HorizontalLineType
PUBLIC	?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@HH@Z ; CNewBoxesDoc::HorizontalLineType
PUBLIC	?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::VerticalLineType
PUBLIC	?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@HH@Z ; CNewBoxesDoc::VerticalLineType
PUBLIC	?HorizontalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; CNewBoxesDoc::HorizontalLineType
PUBLIC	?VerticalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; CNewBoxesDoc::VerticalLineType
PUBLIC	?BoxOwner@CNewBoxesDoc@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::BoxOwner
PUBLIC	?BoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; CNewBoxesDoc::BoxOwner
PUBLIC	?IncrementHLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z ; CNewBoxesDoc::IncrementHLineType
PUBLIC	?IncrementVLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z ; CNewBoxesDoc::IncrementVLineType
PUBLIC	?IncrementBoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z ; CNewBoxesDoc::IncrementBoxOwner
PUBLIC	?Score@CNewBoxesDoc@@QBE?AVVECTOR@@XZ		; CNewBoxesDoc::Score
PUBLIC	?AI_Option@CNewBoxesDoc@@QAEXW4MOVE_TYPE@@H@Z	; CNewBoxesDoc::AI_Option
PUBLIC	?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z	; CNewBoxesDoc::AI_Option
PUBLIC	?NimstringValueToVerify@CNewBoxesDoc@@QAEXH@Z	; CNewBoxesDoc::NimstringValueToVerify
PUBLIC	?IsMoveAvailable@CNewBoxesDoc@@QBE_NXZ		; CNewBoxesDoc::IsMoveAvailable
PUBLIC	?VerticalLoopWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z ; CNewBoxesDoc::VerticalLoopWeight
PUBLIC	?HorizontalLoopWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z ; CNewBoxesDoc::HorizontalLoopWeight
PUBLIC	?VerticalDivideWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z ; CNewBoxesDoc::VerticalDivideWeight
PUBLIC	?HorizontalDivideWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z ; CNewBoxesDoc::HorizontalDivideWeight
PUBLIC	?EraseMoveHistory@CNewBoxesDoc@@QAEXXZ		; CNewBoxesDoc::EraseMoveHistory
PUBLIC	?MyRandom@CNewBoxesDoc@@QAEII@Z			; CNewBoxesDoc::MyRandom
PUBLIC	?MyRandomize@CNewBoxesDoc@@QAEXXZ		; CNewBoxesDoc::MyRandomize
PUBLIC	?OnNewDocument@CNewBoxesDoc@@UAEHXZ		; CNewBoxesDoc::OnNewDocument
PUBLIC	?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z	; CNewBoxesDoc::Serialize
PUBLIC	??1CNewBoxesDoc@@UAE@XZ				; CNewBoxesDoc::~CNewBoxesDoc
PUBLIC	?AssertValid@CNewBoxesDoc@@UBEXXZ		; CNewBoxesDoc::AssertValid
PUBLIC	?Dump@CNewBoxesDoc@@UBEXAAVCDumpContext@@@Z	; CNewBoxesDoc::Dump
PUBLIC	?GetThisMessageMap@CNewBoxesDoc@@KGPBUAFX_MSGMAP@@XZ ; CNewBoxesDoc::GetThisMessageMap
PUBLIC	?GetMessageMap@CNewBoxesDoc@@MBEPBUAFX_MSGMAP@@XZ ; CNewBoxesDoc::GetMessageMap
PUBLIC	??_GCNewBoxesDoc@@UAEPAXI@Z			; CNewBoxesDoc::`scalar deleting destructor'
PUBLIC	??1NewDialog@@UAE@XZ				; NewDialog::~NewDialog
PUBLIC	?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; AnalysisOption
PUBLIC	?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; CheckAnalysisParameter
PUBLIC	?NextLineType@@YA?AW4LINE_TYPE@@W41@@Z		; NextLineType
PUBLIC	?NextOwnerType@@YA?AW4OWNER_TYPE@@W41@@Z	; NextOwnerType
PUBLIC	?MyRandom@@YAII@Z				; MyRandom
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	??_C@_1LM@NNHIEMFN@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@ ; `string'
PUBLIC	?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?m_nLevel@CTrace@ATL@@1IA			; ATL::CTrace::m_nLevel
PUBLIC	?m_nCategory@CTrace@ATL@@1IA			; ATL::CTrace::m_nCategory
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ ; `string'
PUBLIC	??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ ; `string'
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@ ; `string'
PUBLIC	??_R0PAVCException@@@8				; CException * `RTTI Type Descriptor'
PUBLIC	??_7IDocument@ATL@@6B@				; ATL::IDocument::`vftable'
PUBLIC	??_C@_0GA@OBEGHEBG@G?3?2Microsoft?5Visual?5Studio?22022@ ; `string'
PUBLIC	??_7CDocumentAdapter@CDocument@@6B@		; CDocument::CDocumentAdapter::`vftable'
PUBLIC	??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@ ; `string'
PUBLIC	??_C@_0EI@HGKAOJLD@CDocumentAdapter?3?3LoadFromStrea@ ; `string'
PUBLIC	??_C@_03CGPANDLG@?$CFTs@			; `string'
PUBLIC	??_C@_0FB@KEINPFKK@CDocumentAdapter?3?3InitializeSea@ ; `string'
PUBLIC	??_C@_0EI@LDLNHGOL@CDocumentAdapter?3?3ClearChunkLis@ ; `string'
PUBLIC	??_C@_0EH@MDEFKGNO@CDocumentAdapter?3?3SetChunkValue@ ; `string'
PUBLIC	??_C@_0EJ@OPNFODHI@CDocumentAdapter?3?3BeginReadChun@ ; `string'
PUBLIC	??_C@_0EM@LNMILABG@CDocumentAdapter?3?3ReadNextChunk@ ; `string'
PUBLIC	??_C@_0EF@IDAFELPE@CDocumentAdapter?3?3RemoveChunk?5i@ ; `string'
PUBLIC	??_C@_0ED@KIDKKKHO@CDocumentAdapter?3?3FindChunk?5is?5@ ; `string'
PUBLIC	??_C@_0EG@KNBCAJKP@CDocumentAdapter?3?3GetThumbnail?5@ ; `string'
PUBLIC	??_C@_0FF@ECNBNEDM@Override?5this?5method?5in?5a?5deriv@ ; `string'
PUBLIC	??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_R4IDocument@ATL@@6B@				; ATL::IDocument::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUIDocument@ATL@@@8			; ATL::IDocument `RTTI Type Descriptor'
PUBLIC	??_R3IDocument@ATL@@8				; ATL::IDocument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IDocument@ATL@@8				; ATL::IDocument::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IDocument@ATL@@8			; ATL::IDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CObject@@8			; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCObject@@@8				; CObject `RTTI Type Descriptor'
PUBLIC	??_R3CObject@@8					; CObject::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CObject@@8					; CObject::`RTTI Base Class Array'
PUBLIC	??_R4CDocumentAdapter@CDocument@@6B@		; CDocument::CDocumentAdapter::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDocumentAdapter@CDocument@@@8		; CDocument::CDocumentAdapter `RTTI Type Descriptor'
PUBLIC	??_R3CDocumentAdapter@CDocument@@8		; CDocument::CDocumentAdapter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDocumentAdapter@CDocument@@8		; CDocument::CDocumentAdapter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDocumentAdapter@CDocument@@8	; CDocument::CDocumentAdapter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CCmdTarget@@8			; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCCmdTarget@@@8				; CCmdTarget `RTTI Type Descriptor'
PUBLIC	??_R3CCmdTarget@@8				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCmdTarget@@8				; CCmdTarget::`RTTI Base Class Array'
PUBLIC	?classCNewBoxesDoc@CNewBoxesDoc@@2UCRuntimeClass@@B ; CNewBoxesDoc::classCNewBoxesDoc
PUBLIC	??_7CNewBoxesDoc@@6B@				; CNewBoxesDoc::`vftable'
PUBLIC	??_R4CNewBoxesDoc@@6B@				; CNewBoxesDoc::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCNewBoxesDoc@@@8			; CNewBoxesDoc `RTTI Type Descriptor'
PUBLIC	??_R3CNewBoxesDoc@@8				; CNewBoxesDoc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CNewBoxesDoc@@8				; CNewBoxesDoc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CNewBoxesDoc@@8			; CNewBoxesDoc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CDocument@@8			; CDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCDocument@@@8				; CDocument `RTTI Type Descriptor'
PUBLIC	??_R3CDocument@@8				; CDocument::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDocument@@8				; CDocument::`RTTI Base Class Array'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	?__global_delete@@YAXPAXI@Z:PROC		; __global_delete
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__wcslen:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__GetSystemTimeAsFileTime@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsnprintf_s:PROC
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z:PROC ; AfxAssertValidObject
EXTRN	??3CObject@@SGXPAX@Z:PROC			; CObject::operator delete
EXTRN	??2CObject@@SGPAXIPBDH@Z:PROC			; CObject::operator new
EXTRN	??3CObject@@SGXPAXPBDH@Z:PROC			; CObject::operator delete
EXTRN	?Delete@CException@@QAEXXZ:PROC			; CException::Delete
EXTRN	__imp_??A?$CSimpleStringT@D$00@ATL@@QBEDH@Z:PROC
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:PROC
EXTRN	__imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z:PROC
EXTRN	__imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z:PROC
EXTRN	__imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z:PROC
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:PROC
EXTRN	??2@YAPAXIPBDH@Z:PROC				; operator new
EXTRN	??3@YAXPAXPBDH@Z:PROC				; operator delete
EXTRN	?IsStoring@CArchive@@QBEHXZ:PROC		; CArchive::IsStoring
EXTRN	??_EIDocument@ATL@@UAEPAXI@Z:PROC		; ATL::IDocument::`vector deleting destructor'
EXTRN	?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z:PROC	; CCmdTarget::IsInvokeAllowed
EXTRN	?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z:PROC ; CCmdTarget::GetDispatchIID
EXTRN	?GetTypeInfoCount@CCmdTarget@@UAEIXZ:PROC	; CCmdTarget::GetTypeInfoCount
EXTRN	?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ:PROC ; CCmdTarget::GetTypeLibCache
EXTRN	?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z:PROC ; CCmdTarget::GetTypeLib
EXTRN	?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ:PROC ; CCmdTarget::GetCommandMap
EXTRN	?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ:PROC ; CCmdTarget::GetDispatchMap
EXTRN	?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ:PROC ; CCmdTarget::GetConnectionMap
EXTRN	?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ:PROC ; CCmdTarget::GetEventSinkMap
EXTRN	?OnCreateAggregates@CCmdTarget@@UAEHXZ:PROC	; CCmdTarget::OnCreateAggregates
EXTRN	?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z:PROC ; CCmdTarget::GetInterfaceHook
EXTRN	?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z:PROC ; CCmdTarget::GetExtraConnectionPoints
EXTRN	?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z:PROC ; CCmdTarget::GetConnectionHook
EXTRN	?DoModal@CDialog@@UAEHXZ:PROC			; CDialog::DoModal
EXTRN	??1CDialog@@UAE@XZ:PROC				; CDialog::~CDialog
EXTRN	??1CButton@@UAE@XZ:PROC				; CButton::~CButton
EXTRN	?GetThisClass@CDocument@@SGPAUCRuntimeClass@@XZ:PROC ; CDocument::GetThisClass
EXTRN	??0CDocument@@QAE@XZ:PROC			; CDocument::CDocument
EXTRN	??_ECDocumentAdapter@CDocument@@UAEPAXI@Z:PROC	; CDocument::CDocumentAdapter::`vector deleting destructor'
EXTRN	?SetTitle@CDocument@@UAEXPBD@Z:PROC		; CDocument::SetTitle
EXTRN	?SetPathName@CDocument@@UAEXPBDH@Z:PROC		; CDocument::SetPathName
EXTRN	?ClearPathName@CDocument@@UAEXXZ:PROC		; CDocument::ClearPathName
EXTRN	?IsModified@CDocument@@UAEHXZ:PROC		; CDocument::IsModified
EXTRN	?SetModifiedFlag@CDocument@@UAEXH@Z:PROC	; CDocument::SetModifiedFlag
EXTRN	?GetFirstViewPosition@CDocument@@UBEPAU__POSITION@@XZ:PROC ; CDocument::GetFirstViewPosition
EXTRN	?GetNextView@CDocument@@UBEPAVCView@@AAPAU__POSITION@@@Z:PROC ; CDocument::GetNextView
EXTRN	?UpdateAllViews@CDocument@@QAEXPAVCView@@JPAVCObject@@@Z:PROC ; CDocument::UpdateAllViews
EXTRN	?OnChangedViewList@CDocument@@UAEXXZ:PROC	; CDocument::OnChangedViewList
EXTRN	?DeleteContents@CDocument@@UAEXXZ:PROC		; CDocument::DeleteContents
EXTRN	?OnNewDocument@CDocument@@UAEHXZ:PROC		; CDocument::OnNewDocument
EXTRN	?OnOpenDocument@CDocument@@UAEHPBD@Z:PROC	; CDocument::OnOpenDocument
EXTRN	?OnSaveDocument@CDocument@@UAEHPBD@Z:PROC	; CDocument::OnSaveDocument
EXTRN	?OnCloseDocument@CDocument@@UAEXXZ:PROC		; CDocument::OnCloseDocument
EXTRN	?ReportSaveLoadException@CDocument@@UAEXPBDPAVCException@@HI@Z:PROC ; CDocument::ReportSaveLoadException
EXTRN	?GetFile@CDocument@@UAEPAVCFile@@PBDIPAVCFileException@@@Z:PROC ; CDocument::GetFile
EXTRN	?ReleaseFile@CDocument@@UAEXPAVCFile@@H@Z:PROC	; CDocument::ReleaseFile
EXTRN	?OnRichPreviewUnload@CDocument@@UAEXXZ:PROC	; CDocument::OnRichPreviewUnload
EXTRN	?LoadDocumentFromStream@CDocument@@UAEJPAUIStream@@K@Z:PROC ; CDocument::LoadDocumentFromStream
EXTRN	?GetThumbnail@CDocument@@UAEHIPAPAUHBITMAP__@@PAW4WTS_ALPHATYPE@@@Z:PROC ; CDocument::GetThumbnail
EXTRN	?ClearChunkList@CDocument@@UAEXXZ:PROC		; CDocument::ClearChunkList
EXTRN	?SetChunkValue@CDocument@@UAEHPAUIFilterChunkValue@ATL@@@Z:PROC ; CDocument::SetChunkValue
EXTRN	?BeginReadChunks@CDocument@@UAEXXZ:PROC		; CDocument::BeginReadChunks
EXTRN	?ReadNextChunkValue@CDocument@@UAEHPAPAUIFilterChunkValue@ATL@@@Z:PROC ; CDocument::ReadNextChunkValue
EXTRN	?RemoveChunk@CDocument@@UAEXABU_GUID@@K@Z:PROC	; CDocument::RemoveChunk
EXTRN	?FindChunk@CDocument@@UAEPAU__POSITION@@ABU_GUID@@K@Z:PROC ; CDocument::FindChunk
EXTRN	?OnDocumentEvent@CDocument@@UAEXW4DocumentEvent@1@@Z:PROC ; CDocument::OnDocumentEvent
EXTRN	?CanCloseFrame@CDocument@@UAEHPAVCFrameWnd@@@Z:PROC ; CDocument::CanCloseFrame
EXTRN	?SaveModified@CDocument@@UAEHXZ:PROC		; CDocument::SaveModified
EXTRN	?PreCloseFrame@CDocument@@UAEXPAVCFrameWnd@@@Z:PROC ; CDocument::PreCloseFrame
EXTRN	?Dump@CDocument@@UBEXAAVCDumpContext@@@Z:PROC	; CDocument::Dump
EXTRN	?AssertValid@CDocument@@UBEXXZ:PROC		; CDocument::AssertValid
EXTRN	??1CDocument@@UAE@XZ:PROC			; CDocument::~CDocument
EXTRN	?DoSave@CDocument@@UAEHPBDH@Z:PROC		; CDocument::DoSave
EXTRN	?DoFileSave@CDocument@@UAEHXZ:PROC		; CDocument::DoFileSave
EXTRN	?UpdateFrameCounts@CDocument@@UAEXXZ:PROC	; CDocument::UpdateFrameCounts
EXTRN	?GetDefaultMenu@CDocument@@UAEPAUHMENU__@@XZ:PROC ; CDocument::GetDefaultMenu
EXTRN	?GetDefaultAccelerator@CDocument@@UAEPAUHACCEL__@@XZ:PROC ; CDocument::GetDefaultAccelerator
EXTRN	?OnIdle@CDocument@@UAEXXZ:PROC			; CDocument::OnIdle
EXTRN	?OnFinalRelease@CDocument@@UAEXXZ:PROC		; CDocument::OnFinalRelease
EXTRN	?OnLoadDocumentFromStream@CDocument@@UAEJPAUIStream@@K@Z:PROC ; CDocument::OnLoadDocumentFromStream
EXTRN	?OnPreviewHandlerQueryFocus@CDocument@@UAEJPAPAUHWND__@@@Z:PROC ; CDocument::OnPreviewHandlerQueryFocus
EXTRN	?OnPreviewHandlerTranslateAccelerator@CDocument@@UAEJPAUtagMSG@@@Z:PROC ; CDocument::OnPreviewHandlerTranslateAccelerator
EXTRN	?OnCreatePreviewFrame@CDocument@@UAEHXZ:PROC	; CDocument::OnCreatePreviewFrame
EXTRN	?OnUnloadHandler@CDocument@@UAEXXZ:PROC		; CDocument::OnUnloadHandler
EXTRN	?OnDrawThumbnail@CDocument@@UAEXAAVCDC@@PAUtagRECT@@@Z:PROC ; CDocument::OnDrawThumbnail
EXTRN	?OnCmdMsg@CDocument@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z:PROC ; CDocument::OnCmdMsg
EXTRN	?GetThisMessageMap@CDocument@@KGPBUAFX_MSGMAP@@XZ:PROC ; CDocument::GetThisMessageMap
EXTRN	?GetInterfaceMap@CDocument@@MBEPBUAFX_INTERFACEMAP@@XZ:PROC ; CDocument::GetInterfaceMap
EXTRN	??0arInput@@QAE@PAVCArchive@@@Z:PROC		; arInput::arInput
EXTRN	??1arInput@@QAE@XZ:PROC				; arInput::~arInput
EXTRN	?ReadLine@arInput@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:PROC ; arInput::ReadLine
EXTRN	??0DOTS_AND_BOXES@@QAE@HH@Z:PROC		; DOTS_AND_BOXES::DOTS_AND_BOXES
EXTRN	??1DOTS_AND_BOXES@@QAE@XZ:PROC			; DOTS_AND_BOXES::~DOTS_AND_BOXES
EXTRN	??5DOTS_AND_BOXES@@QBEXAAVCArchive@@@Z:PROC	; DOTS_AND_BOXES::operator>>
EXTRN	??6DOTS_AND_BOXES@@QAEXAAVarInput@@@Z:PROC	; DOTS_AND_BOXES::operator<<
EXTRN	?CountLines@DOTS_AND_BOXES@@QBEHUtagPOINT@@@Z:PROC ; DOTS_AND_BOXES::CountLines
EXTRN	??0SWHASHTABLE@@QAE@XZ:PROC			; SWHASHTABLE::SWHASHTABLE
EXTRN	??1SWHASHTABLE@@QAE@XZ:PROC			; SWHASHTABLE::~SWHASHTABLE
EXTRN	??0NIMHASHTABLE@@QAE@XZ:PROC			; NIMHASHTABLE::NIMHASHTABLE
EXTRN	??1NIMHASHTABLE@@QAE@XZ:PROC			; NIMHASHTABLE::~NIMHASHTABLE
EXTRN	?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:PROC ; MOVE::TypeName
EXTRN	??_ECNewBoxesDoc@@UAEPAXI@Z:PROC		; CNewBoxesDoc::`vector deleting destructor'
EXTRN	??0NewDialog@@QAE@PAVCWnd@@@Z:PROC		; NewDialog::NewDialog
EXTRN	?Write@@YAXAAVCArchive@@PBD@Z:PROC		; Write
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?swHashTable@@3PAVSWHASHTABLE@@A:DWORD		; swHashTable
EXTRN	?nimHashTable@@3PAVNIMHASHTABLE@@A:DWORD	; nimHashTable
EXTRN	?tOption@@3_NA:BYTE				; tOption
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A
_BSS	SEGMENT
?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceGeneral
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?m_nLevel@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLevel@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLevel
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceGeneral$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceGeneral@ATL@@YAXXZ ; ATL::atlTraceGeneral$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R2CDocument@@8
rdata$r	SEGMENT
??_R2CDocument@@8 DD FLAT:??_R1A@?0A@EA@CDocument@@8	; CDocument::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CDocument@@8
rdata$r	SEGMENT
??_R3CDocument@@8 DD 00H				; CDocument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2CDocument@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDocument@@@8
data$rs	SEGMENT
??_R0?AVCDocument@@@8 DD FLAT:??_7type_info@@6B@	; CDocument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDocument@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CDocument@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDocument@@8 DD FLAT:??_R0?AVCDocument@@@8 ; CDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDocument@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CNewBoxesDoc@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CNewBoxesDoc@@8 DD FLAT:??_R0?AVCNewBoxesDoc@@@8 ; CNewBoxesDoc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CNewBoxesDoc@@8
rdata$r	ENDS
;	COMDAT ??_R2CNewBoxesDoc@@8
rdata$r	SEGMENT
??_R2CNewBoxesDoc@@8 DD FLAT:??_R1A@?0A@EA@CNewBoxesDoc@@8 ; CNewBoxesDoc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CDocument@@8
	DD	FLAT:??_R1A@?0A@EA@CCmdTarget@@8
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CNewBoxesDoc@@8
rdata$r	SEGMENT
??_R3CNewBoxesDoc@@8 DD 00H				; CNewBoxesDoc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2CNewBoxesDoc@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCNewBoxesDoc@@@8
data$rs	SEGMENT
??_R0?AVCNewBoxesDoc@@@8 DD FLAT:??_7type_info@@6B@	; CNewBoxesDoc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCNewBoxesDoc@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CNewBoxesDoc@@6B@
rdata$r	SEGMENT
??_R4CNewBoxesDoc@@6B@ DD 00H				; CNewBoxesDoc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCNewBoxesDoc@@@8
	DD	FLAT:??_R3CNewBoxesDoc@@8
rdata$r	ENDS
;	COMDAT ?messageMap@?1??GetThisMessageMap@CNewBoxesDoc@@KGPBUAFX_MSGMAP@@XZ@4U3@B
CONST	SEGMENT
?messageMap@?1??GetThisMessageMap@CNewBoxesDoc@@KGPBUAFX_MSGMAP@@XZ@4U3@B DD FLAT:?GetThisMessageMap@CDocument@@KGPBUAFX_MSGMAP@@XZ ; `CNewBoxesDoc::GetThisMessageMap'::`2'::messageMap
	DD	FLAT:?_messageEntries@?1??GetThisMessageMap@CNewBoxesDoc@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	ENDS
;	COMDAT ?_messageEntries@?1??GetThisMessageMap@CNewBoxesDoc@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B
CONST	SEGMENT
?_messageEntries@?1??GetThisMessageMap@CNewBoxesDoc@@KGPBUAFX_MSGMAP@@XZ@4QBUAFX_MSGMAP_ENTRY@@B DD 00H ; `CNewBoxesDoc::GetThisMessageMap'::`2'::_messageEntries
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
CONST	ENDS
_DATA	SEGMENT
?THIS_FILE@@3PADA DB 'C:\Users\15485\Desktop\', 0b9H, 0a4H, 0b3H, 0ccH, 0d6H
	DB	0aeH, 0d0H, 0c7H, 0b5H, 0e3H, 0b8H, 0f1H, 0c6H, 0e5H, '\', 0b9H
	DB	0a4H, 0b3H, 0ccH, 0d6H, 0aeH, 0d0H, 0c7H, 0b5H, 0e3H, 0b8H, 0f1H
	DB	0c6H, 0e5H, '\NewBoxesDoc.cpp', 00H		; THIS_FILE
_DATA	ENDS
;	COMDAT ??_7CNewBoxesDoc@@6B@
CONST	SEGMENT
??_7CNewBoxesDoc@@6B@ DD FLAT:??_R4CNewBoxesDoc@@6B@	; CNewBoxesDoc::`vftable'
	DD	FLAT:?GetRuntimeClass@CNewBoxesDoc@@UBEPAUCRuntimeClass@@XZ
	DD	FLAT:??_ECNewBoxesDoc@@UAEPAXI@Z
	DD	FLAT:?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z
	DD	FLAT:?AssertValid@CNewBoxesDoc@@UBEXXZ
	DD	FLAT:?Dump@CNewBoxesDoc@@UBEXAAVCDumpContext@@@Z
	DD	FLAT:?OnCmdMsg@CDocument@@UAEHIHPAXPAUAFX_CMDHANDLERINFO@@@Z
	DD	FLAT:?OnFinalRelease@CDocument@@UAEXXZ
	DD	FLAT:?IsInvokeAllowed@CCmdTarget@@UAEHJ@Z
	DD	FLAT:?GetDispatchIID@CCmdTarget@@UAEHPAU_GUID@@@Z
	DD	FLAT:?GetTypeInfoCount@CCmdTarget@@UAEIXZ
	DD	FLAT:?GetTypeLibCache@CCmdTarget@@UAEPAVCTypeLibCache@@XZ
	DD	FLAT:?GetTypeLib@CCmdTarget@@UAEJKPAPAUITypeLib@@@Z
	DD	FLAT:?GetMessageMap@CNewBoxesDoc@@MBEPBUAFX_MSGMAP@@XZ
	DD	FLAT:?GetCommandMap@CCmdTarget@@MBEPBUAFX_OLECMDMAP@@XZ
	DD	FLAT:?GetDispatchMap@CCmdTarget@@MBEPBUAFX_DISPMAP@@XZ
	DD	FLAT:?GetConnectionMap@CCmdTarget@@MBEPBUAFX_CONNECTIONMAP@@XZ
	DD	FLAT:?GetInterfaceMap@CDocument@@MBEPBUAFX_INTERFACEMAP@@XZ
	DD	FLAT:?GetEventSinkMap@CCmdTarget@@MBEPBUAFX_EVENTSINKMAP@@XZ
	DD	FLAT:?OnCreateAggregates@CCmdTarget@@UAEHXZ
	DD	FLAT:?GetInterfaceHook@CCmdTarget@@UAEPAUIUnknown@@PBX@Z
	DD	FLAT:?GetExtraConnectionPoints@CCmdTarget@@MAEHPAVCPtrArray@@@Z
	DD	FLAT:?GetConnectionHook@CCmdTarget@@MAEPAUIConnectionPoint@@ABU_GUID@@@Z
	DD	FLAT:?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ
	DD	FLAT:?SetTitle@CDocument@@UAEXPBD@Z
	DD	FLAT:?SetPathName@CDocument@@UAEXPBDH@Z
	DD	FLAT:?ClearPathName@CDocument@@UAEXXZ
	DD	FLAT:?IsModified@CDocument@@UAEHXZ
	DD	FLAT:?SetModifiedFlag@CDocument@@UAEXH@Z
	DD	FLAT:?GetFirstViewPosition@CDocument@@UBEPAU__POSITION@@XZ
	DD	FLAT:?GetNextView@CDocument@@UBEPAVCView@@AAPAU__POSITION@@@Z
	DD	FLAT:?OnChangedViewList@CDocument@@UAEXXZ
	DD	FLAT:?DeleteContents@CDocument@@UAEXXZ
	DD	FLAT:?OnNewDocument@CNewBoxesDoc@@UAEHXZ
	DD	FLAT:?OnOpenDocument@CDocument@@UAEHPBD@Z
	DD	FLAT:?OnSaveDocument@CDocument@@UAEHPBD@Z
	DD	FLAT:?OnCloseDocument@CDocument@@UAEXXZ
	DD	FLAT:?ReportSaveLoadException@CDocument@@UAEXPBDPAVCException@@HI@Z
	DD	FLAT:?GetFile@CDocument@@UAEPAVCFile@@PBDIPAVCFileException@@@Z
	DD	FLAT:?ReleaseFile@CDocument@@UAEXPAVCFile@@H@Z
	DD	FLAT:?OnBeforeRichPreviewFontChanged@CDocument@@UAEXXZ
	DD	FLAT:?OnRichPreviewFontChanged@CDocument@@UAEXXZ
	DD	FLAT:?OnRichPreviewTextColorChanged@CDocument@@UAEXXZ
	DD	FLAT:?OnRichPreviewBackColorChanged@CDocument@@UAEXXZ
	DD	FLAT:?OnRichPreviewSiteChanged@CDocument@@UAEXXZ
	DD	FLAT:?OnRichPreviewUnload@CDocument@@UAEXXZ
	DD	FLAT:?LoadDocumentFromStream@CDocument@@UAEJPAUIStream@@K@Z
	DD	FLAT:?GetThumbnail@CDocument@@UAEHIPAPAUHBITMAP__@@PAW4WTS_ALPHATYPE@@@Z
	DD	FLAT:?InitializeSearchContent@CDocument@@UAEXXZ
	DD	FLAT:?ClearChunkList@CDocument@@UAEXXZ
	DD	FLAT:?SetChunkValue@CDocument@@UAEHPAUIFilterChunkValue@ATL@@@Z
	DD	FLAT:?BeginReadChunks@CDocument@@UAEXXZ
	DD	FLAT:?ReadNextChunkValue@CDocument@@UAEHPAPAUIFilterChunkValue@ATL@@@Z
	DD	FLAT:?RemoveChunk@CDocument@@UAEXABU_GUID@@K@Z
	DD	FLAT:?FindChunk@CDocument@@UAEPAU__POSITION@@ABU_GUID@@K@Z
	DD	FLAT:?OnDocumentEvent@CDocument@@UAEXW4DocumentEvent@1@@Z
	DD	FLAT:?CanCloseFrame@CDocument@@UAEHPAVCFrameWnd@@@Z
	DD	FLAT:?SaveModified@CDocument@@UAEHXZ
	DD	FLAT:?PreCloseFrame@CDocument@@UAEXPAVCFrameWnd@@@Z
	DD	FLAT:?DoSave@CDocument@@UAEHPBDH@Z
	DD	FLAT:?DoFileSave@CDocument@@UAEHXZ
	DD	FLAT:?UpdateFrameCounts@CDocument@@UAEXXZ
	DD	FLAT:?GetDefaultMenu@CDocument@@UAEPAUHMENU__@@XZ
	DD	FLAT:?GetDefaultAccelerator@CDocument@@UAEPAUHACCEL__@@XZ
	DD	FLAT:?OnIdle@CDocument@@UAEXXZ
	DD	FLAT:?OnLoadDocumentFromStream@CDocument@@UAEJPAUIStream@@K@Z
	DD	FLAT:?OnPreviewHandlerQueryFocus@CDocument@@UAEJPAPAUHWND__@@@Z
	DD	FLAT:?OnPreviewHandlerTranslateAccelerator@CDocument@@UAEJPAUtagMSG@@@Z
	DD	FLAT:?OnCreatePreviewFrame@CDocument@@UAEHXZ
	DD	FLAT:?OnUnloadHandler@CDocument@@UAEXXZ
	DD	FLAT:?OnDrawThumbnail@CDocument@@UAEXAAVCDC@@PAUtagRECT@@@Z
CONST	ENDS
;	COMDAT ?classCNewBoxesDoc@CNewBoxesDoc@@2UCRuntimeClass@@B
CONST	SEGMENT
?classCNewBoxesDoc@CNewBoxesDoc@@2UCRuntimeClass@@B DD FLAT:$SG225985 ; CNewBoxesDoc::classCNewBoxesDoc
	DD	0362cH
	DD	0ffffH
	DD	FLAT:?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ
	DD	FLAT:?_GetBaseClass@CNewBoxesDoc@@KGPAUCRuntimeClass@@XZ
	DD	00H
	DD	00H
CONST	ENDS
;	COMDAT ??_R2CCmdTarget@@8
rdata$r	SEGMENT
??_R2CCmdTarget@@8 DD FLAT:??_R1A@?0A@EA@CCmdTarget@@8	; CCmdTarget::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CObject@@8
rdata$r	ENDS
;	COMDAT ??_R3CCmdTarget@@8
rdata$r	SEGMENT
??_R3CCmdTarget@@8 DD 00H				; CCmdTarget::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCmdTarget@@@8
data$rs	SEGMENT
??_R0?AVCCmdTarget@@@8 DD FLAT:??_7type_info@@6B@	; CCmdTarget `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCmdTarget@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CCmdTarget@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCmdTarget@@8 DD FLAT:??_R0?AVCCmdTarget@@@8 ; CCmdTarget::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCmdTarget@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDocumentAdapter@CDocument@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDocumentAdapter@CDocument@@8 DD FLAT:??_R0?AVCDocumentAdapter@CDocument@@@8 ; CDocument::CDocumentAdapter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDocumentAdapter@CDocument@@8
rdata$r	ENDS
;	COMDAT ??_R2CDocumentAdapter@CDocument@@8
rdata$r	SEGMENT
??_R2CDocumentAdapter@CDocument@@8 DD FLAT:??_R1A@?0A@EA@CDocumentAdapter@CDocument@@8 ; CDocument::CDocumentAdapter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IDocument@ATL@@8
rdata$r	ENDS
;	COMDAT ??_R3CDocumentAdapter@CDocument@@8
rdata$r	SEGMENT
??_R3CDocumentAdapter@CDocument@@8 DD 00H		; CDocument::CDocumentAdapter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CDocumentAdapter@CDocument@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDocumentAdapter@CDocument@@@8
data$rs	SEGMENT
??_R0?AVCDocumentAdapter@CDocument@@@8 DD FLAT:??_7type_info@@6B@ ; CDocument::CDocumentAdapter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDocumentAdapter@CDocument@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CDocumentAdapter@CDocument@@6B@
rdata$r	SEGMENT
??_R4CDocumentAdapter@CDocument@@6B@ DD 00H		; CDocument::CDocumentAdapter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDocumentAdapter@CDocument@@@8
	DD	FLAT:??_R3CDocumentAdapter@CDocument@@8
rdata$r	ENDS
;	COMDAT ??_R2CObject@@8
rdata$r	SEGMENT
??_R2CObject@@8 DD FLAT:??_R1A@?0A@EA@CObject@@8	; CObject::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CObject@@8
rdata$r	SEGMENT
??_R3CObject@@8 DD 00H					; CObject::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CObject@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCObject@@@8
data$rs	SEGMENT
??_R0?AVCObject@@@8 DD FLAT:??_7type_info@@6B@		; CObject `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCObject@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@CObject@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CObject@@8 DD FLAT:??_R0?AVCObject@@@8	; CObject::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CObject@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IDocument@ATL@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IDocument@ATL@@8 DD FLAT:??_R0?AUIDocument@ATL@@@8 ; ATL::IDocument::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IDocument@ATL@@8
rdata$r	ENDS
;	COMDAT ??_R2IDocument@ATL@@8
rdata$r	SEGMENT
??_R2IDocument@ATL@@8 DD FLAT:??_R1A@?0A@EA@IDocument@ATL@@8 ; ATL::IDocument::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IDocument@ATL@@8
rdata$r	SEGMENT
??_R3IDocument@ATL@@8 DD 00H				; ATL::IDocument::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IDocument@ATL@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIDocument@ATL@@@8
data$rs	SEGMENT
??_R0?AUIDocument@ATL@@@8 DD FLAT:??_7type_info@@6B@	; ATL::IDocument `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIDocument@ATL@@', 00H
data$rs	ENDS
;	COMDAT ??_R4IDocument@ATL@@6B@
rdata$r	SEGMENT
??_R4IDocument@ATL@@6B@ DD 00H				; ATL::IDocument::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIDocument@ATL@@@8
	DD	FLAT:??_R3IDocument@ATL@@8
rdata$r	ENDS
;	COMDAT ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ DB 'm'
	DB	00H, '_', 00H, 'p', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@ECNBNEDM@Override?5this?5method?5in?5a?5deriv@
CONST	SEGMENT
??_C@_0FF@ECNBNEDM@Override?5this?5method?5in?5a?5deriv@ DB 'Override thi'
	DB	's method in a derived class to initialize chunk list for sear'
	DB	'ch filter.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@KNBCAJKP@CDocumentAdapter?3?3GetThumbnail?5@
CONST	SEGMENT
??_C@_0EG@KNBCAJKP@CDocumentAdapter?3?3GetThumbnail?5@ DB 'CDocumentAdapt'
	DB	'er::GetThumbnail is called, but its CDocument is NULL.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@KIDKKKHO@CDocumentAdapter?3?3FindChunk?5is?5@
CONST	SEGMENT
??_C@_0ED@KIDKKKHO@CDocumentAdapter?3?3FindChunk?5is?5@ DB 'CDocumentAdap'
	DB	'ter::FindChunk is called, but its CDocument is NULL.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@IDAFELPE@CDocumentAdapter?3?3RemoveChunk?5i@
CONST	SEGMENT
??_C@_0EF@IDAFELPE@CDocumentAdapter?3?3RemoveChunk?5i@ DB 'CDocumentAdapt'
	DB	'er::RemoveChunk is called, but its CDocument is NULL.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@LNMILABG@CDocumentAdapter?3?3ReadNextChunk@
CONST	SEGMENT
??_C@_0EM@LNMILABG@CDocumentAdapter?3?3ReadNextChunk@ DB 'CDocumentAdapte'
	DB	'r::ReadNextChunkValue is called, but its CDocument is NULL.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@OPNFODHI@CDocumentAdapter?3?3BeginReadChun@
CONST	SEGMENT
??_C@_0EJ@OPNFODHI@CDocumentAdapter?3?3BeginReadChun@ DB 'CDocumentAdapte'
	DB	'r::BeginReadChunks is called, but its CDocument is NULL.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@MDEFKGNO@CDocumentAdapter?3?3SetChunkValue@
CONST	SEGMENT
??_C@_0EH@MDEFKGNO@CDocumentAdapter?3?3SetChunkValue@ DB 'CDocumentAdapte'
	DB	'r::SetChunkValue is called, but its CDocument is NULL.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@LDLNHGOL@CDocumentAdapter?3?3ClearChunkLis@
CONST	SEGMENT
??_C@_0EI@LDLNHGOL@CDocumentAdapter?3?3ClearChunkLis@ DB 'CDocumentAdapte'
	DB	'r::ClearChunkList is called, but its CDocument is NULL.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@KEINPFKK@CDocumentAdapter?3?3InitializeSea@
CONST	SEGMENT
??_C@_0FB@KEINPFKK@CDocumentAdapter?3?3InitializeSea@ DB 'CDocumentAdapte'
	DB	'r::InitializeSearchContent is called, but its CDocument is NU'
	DB	'LL.', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03CGPANDLG@?$CFTs@
CONST	SEGMENT
??_C@_03CGPANDLG@?$CFTs@ DB '%Ts', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@HGKAOJLD@CDocumentAdapter?3?3LoadFromStrea@
CONST	SEGMENT
??_C@_0EI@HGKAOJLD@CDocumentAdapter?3?3LoadFromStrea@ DB 'CDocumentAdapte'
	DB	'r::LoadFromStream is called, but its CDocument is NULL.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
CONST	SEGMENT
??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@ DB 'G:\Microsoft'
	DB	' Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmf'
	DB	'c\include\afxwin.h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CDocumentAdapter@CDocument@@6B@
CONST	SEGMENT
??_7CDocumentAdapter@CDocument@@6B@ DD FLAT:??_R4CDocumentAdapter@CDocument@@6B@ ; CDocument::CDocumentAdapter::`vftable'
	DD	FLAT:??_ECDocumentAdapter@CDocument@@UAEPAXI@Z
	DD	FLAT:?AddRef@IDocument@ATL@@UAEJXZ
	DD	FLAT:?Release@IDocument@ATL@@UAEJXZ
	DD	FLAT:?LoadFromStream@CDocumentAdapter@CDocument@@UAEJPAUIStream@@K@Z
	DD	FLAT:?InitializeSearchContent@CDocumentAdapter@CDocument@@UAEXXZ
	DD	FLAT:?BeginReadChunks@CDocumentAdapter@CDocument@@UAEXXZ
	DD	FLAT:?GetThumbnail@CDocumentAdapter@CDocument@@UAEHIPAPAUHBITMAP__@@PAW4WTS_ALPHATYPE@@@Z
	DD	FLAT:?ClearChunkList@CDocumentAdapter@CDocument@@UAEXXZ
	DD	FLAT:?SetChunkValue@CDocumentAdapter@CDocument@@UAEHPAUIFilterChunkValue@ATL@@@Z
	DD	FLAT:?ReadNextChunkValue@CDocumentAdapter@CDocument@@UAEHPAPAUIFilterChunkValue@ATL@@@Z
	DD	FLAT:?RemoveChunk@CDocumentAdapter@CDocument@@UAEXABU_GUID@@K@Z
	DD	FLAT:?FindChunk@CDocumentAdapter@CDocument@@UAEPAU__POSITION@@ABU_GUID@@K@Z
	DD	FLAT:?GetContainer@CDocumentAdapter@CDocument@@UBEPAXXZ
CONST	ENDS
;	COMDAT ??_C@_0GA@OBEGHEBG@G?3?2Microsoft?5Visual?5Studio?22022@
CONST	SEGMENT
??_C@_0GA@OBEGHEBG@G?3?2Microsoft?5Visual?5Studio?22022@ DB 'G:\Microsoft'
	DB	' Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmf'
	DB	'c\include\atlhandler.h', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7IDocument@ATL@@6B@
CONST	SEGMENT
??_7IDocument@ATL@@6B@ DD FLAT:??_R4IDocument@ATL@@6B@	; ATL::IDocument::`vftable'
	DD	FLAT:??_EIDocument@ATL@@UAEPAXI@Z
	DD	FLAT:?AddRef@IDocument@ATL@@UAEJXZ
	DD	FLAT:?Release@IDocument@ATL@@UAEJXZ
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT ??_R0PAVCException@@@8
data$r	SEGMENT
??_R0PAVCException@@@8 DD FLAT:??_7type_info@@6B@	; CException * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAVCException@@', 00H
data$r	ENDS
;	COMDAT ??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
CONST	SEGMENT
??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@ DB 'G'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '\'
	DB	00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T', 00H
	DB	'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H, 'S'
	DB	00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.', 00H
	DB	'3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2', 00H, '1'
	DB	00H, '5', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm', 00H
	DB	'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H
	DB	's', 00H, '%', 00H, 'l', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'u', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
CONST	SEGMENT
??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@ DB '%', 00H, 'l', 00H
	DB	's', 00H, ' ', 00H, '-', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?m_nCategory@CTrace@ATL@@1IA
_DATA	SEGMENT
?m_nCategory@CTrace@ATL@@1IA DD 0ffffffffH		; ATL::CTrace::m_nCategory
_DATA	ENDS
;	COMDAT ??_C@_1LM@NNHIEMFN@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
CONST	SEGMENT
??_C@_1LM@NNHIEMFN@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@ DB 'G'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '\'
	DB	00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T', 00H
	DB	'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H, 'S'
	DB	00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.', 00H
	DB	'3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2', 00H, '1'
	DB	00H, '5', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm', 00H
	DB	'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z$0
	DD	020H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?OnNewDocument@CNewBoxesDoc@@UAEHXZ$0
	DD	05eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0
	DD	020H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ$0
	DD	01fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??0CNewBoxesDoc@@IAE@XZ$0
	DD	016H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z$0
	DD	044H
	DD	051H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z
	DD	032H
	DD	033aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$6
	DD	064H
	DD	071H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z
	DD	034H
	DD	03caH
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z$0
__unwindtable$?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0
__unwindtable$?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ$0
__unwindtable$??0CNewBoxesDoc@@IAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CNewBoxesDoc@@IAE@XZ$0
__unwindtable$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z$4
__unwindtable$?OnNewDocument@CNewBoxesDoc@@UAEHXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnNewDocument@CNewBoxesDoc@@UAEHXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?OnNewDocument@CNewBoxesDoc@@UAEHXZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?OnNewDocument@CNewBoxesDoc@@UAEHXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?OnNewDocument@CNewBoxesDoc@@UAEHXZ$3
__ehfuncinfo$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?OnNewDocument@CNewBoxesDoc@@UAEHXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?OnNewDocument@CNewBoxesDoc@@UAEHXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0CNewBoxesDoc@@IAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CNewBoxesDoc@@IAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$8
	DD	02H
	DD	FLAT:__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$9
	DD	03H
	DD	FLAT:__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$10
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01dH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ$3 DD 00H
	DD	FLAT:??_R0PAVCException@@@8
	DD	0ffffffe4H
	DD	FLAT:__catch$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ$0
__tryblocktable$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ$3
__unwindtable$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	022H
	DB	082H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	013H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ$0
__ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0100H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01eH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$1
__ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0234H
voltbl	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_n$ = 8							; size = 4
?MyRandom@@YAII@Z PROC					; MyRandom

; 421  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 422  :   return pDoc->MyRandom(n);

  00003	8b 45 08	 mov	 eax, DWORD PTR _n$[ebp]
  00006	50		 push	 eax
  00007	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0000d	e8 00 00 00 00	 call	 ?MyRandom@CNewBoxesDoc@@QAEII@Z ; CNewBoxesDoc::MyRandom

; 423  : }

  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
?MyRandom@@YAII@Z ENDP					; MyRandom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_ot$ = 8						; size = 4
?NextOwnerType@@YA?AW4OWNER_TYPE@@W41@@Z PROC		; NextOwnerType

; 248  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 249  :   switch (ot)

  00004	8b 45 08	 mov	 eax, DWORD PTR _ot$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000a	83 7d fc 00	 cmp	 DWORD PTR tv64[ebp], 0
  0000e	74 08		 je	 SHORT $LN4@NextOwnerT
  00010	83 7d fc 01	 cmp	 DWORD PTR tv64[ebp], 1
  00014	74 09		 je	 SHORT $LN5@NextOwnerT
  00016	eb 0e		 jmp	 SHORT $LN2@NextOwnerT
$LN4@NextOwnerT:

; 250  :   {
; 251  :   case OWNER_NONE: return OWNER_HUMAN;

  00018	b8 01 00 00 00	 mov	 eax, 1
  0001d	eb 09		 jmp	 SHORT $LN1@NextOwnerT
$LN5@NextOwnerT:

; 252  :   case OWNER_HUMAN: return OWNER_COMPUTER;

  0001f	b8 02 00 00 00	 mov	 eax, 2
  00024	eb 02		 jmp	 SHORT $LN1@NextOwnerT
$LN2@NextOwnerT:

; 253  :   };
; 254  :   return OWNER_NONE;

  00026	33 c0		 xor	 eax, eax
$LN1@NextOwnerT:

; 255  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?NextOwnerType@@YA?AW4OWNER_TYPE@@W41@@Z ENDP		; NextOwnerType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv64 = -4						; size = 4
_lt$ = 8						; size = 4
?NextLineType@@YA?AW4LINE_TYPE@@W41@@Z PROC		; NextLineType

; 238  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 239  :   switch (lt)

  00004	8b 45 08	 mov	 eax, DWORD PTR _lt$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR tv64[ebp], eax
  0000a	83 7d fc 00	 cmp	 DWORD PTR tv64[ebp], 0
  0000e	74 08		 je	 SHORT $LN4@NextLineTy
  00010	83 7d fc 02	 cmp	 DWORD PTR tv64[ebp], 2
  00014	74 09		 je	 SHORT $LN5@NextLineTy
  00016	eb 0e		 jmp	 SHORT $LN2@NextLineTy
$LN4@NextLineTy:

; 240  :   {
; 241  :   case LINE_NONE: return LINE_HUMAN;

  00018	b8 02 00 00 00	 mov	 eax, 2
  0001d	eb 09		 jmp	 SHORT $LN1@NextLineTy
$LN5@NextLineTy:

; 242  :   case LINE_HUMAN: return LINE_COMPUTER;

  0001f	b8 01 00 00 00	 mov	 eax, 1
  00024	eb 02		 jmp	 SHORT $LN1@NextLineTy
$LN2@NextLineTy:

; 243  :   };
; 244  :   return LINE_NONE;

  00026	33 c0		 xor	 eax, eax
$LN1@NextLineTy:

; 245  : }

  00028	8b e5		 mov	 esp, ebp
  0002a	5d		 pop	 ebp
  0002b	c3		 ret	 0
?NextLineType@@YA?AW4LINE_TYPE@@W41@@Z ENDP		; NextLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv201 = -160						; size = 4
tv204 = -156						; size = 4
tv199 = -152						; size = 4
tv66 = -148						; size = 4
tv196 = -144						; size = 4
tv84 = -140						; size = 4
tv194 = -136						; size = 4
$T2 = -130						; size = 1
$T3 = -129						; size = 1
$T4 = -128						; size = 4
$T5 = -124						; size = 4
$T6 = -117						; size = 1
$T7 = -116						; size = 4
$T8 = -112						; size = 4
$T9 = -105						; size = 1
_v$10 = -100						; size = 4
_value$ = -88						; size = 4
_temp$ = -76						; size = 56
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_line$ = 8						; size = 4
_mt$ = 12						; size = 4
?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z PROC ; CheckAnalysisParameter

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 94 00 00
	00		 sub	 esp, 148		; 00000094H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8d bd 60 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-160]
  0001f	b9 25 00 00 00	 mov	 ecx, 37			; 00000025H
  00024	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00029	f3 ab		 rep stosd
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 133  :   MOVE temp;

  0003f	8d 4d b4	 lea	 ecx, DWORD PTR _temp$[ebp]
  00042	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 134  :   CString value;

  00047	8b f4		 mov	 esi, esp
  00049	8d 4d a8	 lea	 ecx, DWORD PTR _value$[ebp]
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 135  :   temp.moveType = mt;

  00060	8b 45 0c	 mov	 eax, DWORD PTR _mt$[ebp]
  00063	89 45 e8	 mov	 DWORD PTR _temp$[ebp+52], eax

; 136  :   if (line.Find(temp.TypeName()) == 0)

  00066	8b f4		 mov	 esi, esp
  00068	6a 00		 push	 0
  0006a	8d 4d 90	 lea	 ecx, DWORD PTR $T8[ebp]
  0006d	51		 push	 ecx
  0006e	8d 4d b4	 lea	 ecx, DWORD PTR _temp$[ebp]
  00071	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  00076	89 85 78 ff ff
	ff		 mov	 DWORD PTR tv194[ebp], eax
  0007c	8b fc		 mov	 edi, esp
  0007e	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR tv194[ebp]
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0008a	3b fc		 cmp	 edi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	50		 push	 eax
  00092	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	85 c0		 test	 eax, eax
  000a4	75 0c		 jne	 SHORT $LN9@CheckAnaly
  000a6	c7 85 74 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv84[ebp], 1
  000b0	eb 0a		 jmp	 SHORT $LN10@CheckAnaly
$LN9@CheckAnaly:
  000b2	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv84[ebp], 0
$LN10@CheckAnaly:
  000bc	8a 95 74 ff ff
	ff		 mov	 dl, BYTE PTR tv84[ebp]
  000c2	88 55 97	 mov	 BYTE PTR $T9[ebp], dl
  000c5	8b f4		 mov	 esi, esp
  000c7	8d 4d 90	 lea	 ecx, DWORD PTR $T8[ebp]
  000ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000d0	3b f4		 cmp	 esi, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	0f b6 45 97	 movzx	 eax, BYTE PTR $T9[ebp]
  000db	85 c0		 test	 eax, eax
  000dd	0f 84 13 02 00
	00		 je	 $LN2@CheckAnaly

; 137  :   {
; 138  :     if (mt == MT_VERIFYNIMSTRINGVALUE)

  000e3	83 7d 0c 10	 cmp	 DWORD PTR _mt$[ebp], 16	; 00000010H
  000e7	0f 85 ad 00 00
	00		 jne	 $LN3@CheckAnaly

; 139  :     {
; 140  :       int v=0;

  000ed	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _v$10[ebp], 0

; 141  :       sscanf((LPCSTR)line + temp.TypeName().GetLength(),"%d",&v);

  000f4	8d 4d 9c	 lea	 ecx, DWORD PTR _v$10[ebp]
  000f7	51		 push	 ecx
  000f8	68 00 00 00 00	 push	 OFFSET $SG226101
  000fd	8b f4		 mov	 esi, esp
  000ff	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00108	3b f4		 cmp	 esi, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	8b f0		 mov	 esi, eax
  00111	8d 55 8c	 lea	 edx, DWORD PTR $T7[ebp]
  00114	52		 push	 edx
  00115	8d 4d b4	 lea	 ecx, DWORD PTR _temp$[ebp]
  00118	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  0011d	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv196[ebp], eax
  00123	8b fc		 mov	 edi, esp
  00125	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR tv196[ebp]
  0012b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  00131	3b fc		 cmp	 edi, esp
  00133	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00138	03 f0		 add	 esi, eax
  0013a	56		 push	 esi
  0013b	e8 00 00 00 00	 call	 _sscanf
  00140	83 c4 0c	 add	 esp, 12			; 0000000cH
  00143	8b f4		 mov	 esi, esp
  00145	8d 4d 8c	 lea	 ecx, DWORD PTR $T7[ebp]
  00148	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0014e	3b f4		 cmp	 esi, esp
  00150	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 142  :       pDoc->NimstringValueToVerify(v);

  00155	8b 45 9c	 mov	 eax, DWORD PTR _v$10[ebp]
  00158	50		 push	 eax
  00159	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0015f	e8 00 00 00 00	 call	 ?NimstringValueToVerify@CNewBoxesDoc@@QAEXH@Z ; CNewBoxesDoc::NimstringValueToVerify

; 143  :       pDoc->AI_Option(mt, true);

  00164	6a 01		 push	 1
  00166	8b 4d 0c	 mov	 ecx, DWORD PTR _mt$[ebp]
  00169	51		 push	 ecx
  0016a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00170	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QAEXW4MOVE_TYPE@@H@Z ; CNewBoxesDoc::AI_Option

; 144  :       return true;

  00175	c6 45 8b 01	 mov	 BYTE PTR $T6[ebp], 1
  00179	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00180	8b f4		 mov	 esi, esp
  00182	8d 4d a8	 lea	 ecx, DWORD PTR _value$[ebp]
  00185	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0018b	3b f4		 cmp	 esi, esp
  0018d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00192	8a 45 8b	 mov	 al, BYTE PTR $T6[ebp]
  00195	e9 82 01 00 00	 jmp	 $LN1@CheckAnaly
$LN3@CheckAnaly:

; 145  :     }
; 146  :     value = line.Mid(temp.TypeName().GetLength());

  0019a	8d 55 84	 lea	 edx, DWORD PTR $T5[ebp]
  0019d	52		 push	 edx
  0019e	8d 4d b4	 lea	 ecx, DWORD PTR _temp$[ebp]
  001a1	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  001a6	89 85 6c ff ff
	ff		 mov	 DWORD PTR tv66[ebp], eax
  001ac	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR tv66[ebp]
  001b2	89 85 68 ff ff
	ff		 mov	 DWORD PTR tv199[ebp], eax
  001b8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001bc	8b f4		 mov	 esi, esp
  001be	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR tv199[ebp]
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  001ca	3b f4		 cmp	 esi, esp
  001cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d1	8b f4		 mov	 esi, esp
  001d3	50		 push	 eax
  001d4	8d 4d 80	 lea	 ecx, DWORD PTR $T4[ebp]
  001d7	51		 push	 ecx
  001d8	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  001db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  001e1	3b f4		 cmp	 esi, esp
  001e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e8	89 85 64 ff ff
	ff		 mov	 DWORD PTR tv204[ebp], eax
  001ee	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR tv204[ebp]
  001f4	89 95 60 ff ff
	ff		 mov	 DWORD PTR tv201[ebp], edx
  001fa	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001fe	8b f4		 mov	 esi, esp
  00200	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR tv201[ebp]
  00206	50		 push	 eax
  00207	8d 4d a8	 lea	 ecx, DWORD PTR _value$[ebp]
  0020a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  00210	3b f4		 cmp	 esi, esp
  00212	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00217	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0021b	8b f4		 mov	 esi, esp
  0021d	8d 4d 80	 lea	 ecx, DWORD PTR $T4[ebp]
  00220	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00226	3b f4		 cmp	 esi, esp
  00228	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0022d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00231	8b f4		 mov	 esi, esp
  00233	8d 4d 84	 lea	 ecx, DWORD PTR $T5[ebp]
  00236	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0023c	3b f4		 cmp	 esi, esp
  0023e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 147  :     if (value.Find(" Yes") == 0) pDoc->AI_Option(mt, true);

  00243	8b f4		 mov	 esi, esp
  00245	6a 00		 push	 0
  00247	68 00 00 00 00	 push	 OFFSET $SG226105
  0024c	8d 4d a8	 lea	 ecx, DWORD PTR _value$[ebp]
  0024f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  00255	3b f4		 cmp	 esi, esp
  00257	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025c	85 c0		 test	 eax, eax
  0025e	75 13		 jne	 SHORT $LN4@CheckAnaly
  00260	6a 01		 push	 1
  00262	8b 4d 0c	 mov	 ecx, DWORD PTR _mt$[ebp]
  00265	51		 push	 ecx
  00266	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0026c	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QAEXW4MOVE_TYPE@@H@Z ; CNewBoxesDoc::AI_Option
  00271	eb 5b		 jmp	 SHORT $LN5@CheckAnaly
$LN4@CheckAnaly:

; 148  :     else if (value.Find(" No") == 0)  pDoc->AI_Option(mt, false);

  00273	8b f4		 mov	 esi, esp
  00275	6a 00		 push	 0
  00277	68 00 00 00 00	 push	 OFFSET $SG226108
  0027c	8d 4d a8	 lea	 ecx, DWORD PTR _value$[ebp]
  0027f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  00285	3b f4		 cmp	 esi, esp
  00287	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0028c	85 c0		 test	 eax, eax
  0028e	75 13		 jne	 SHORT $LN6@CheckAnaly
  00290	6a 00		 push	 0
  00292	8b 55 0c	 mov	 edx, DWORD PTR _mt$[ebp]
  00295	52		 push	 edx
  00296	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0029c	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QAEXW4MOVE_TYPE@@H@Z ; CNewBoxesDoc::AI_Option
  002a1	eb 2b		 jmp	 SHORT $LN5@CheckAnaly
$LN6@CheckAnaly:

; 149  :     else MessageBox(NULL, line, "Unknown value", MB_OK);

  002a3	8b f4		 mov	 esi, esp
  002a5	6a 00		 push	 0
  002a7	68 00 00 00 00	 push	 OFFSET $SG226109
  002ac	8b fc		 mov	 edi, esp
  002ae	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  002b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  002b7	3b fc		 cmp	 edi, esp
  002b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002be	50		 push	 eax
  002bf	6a 00		 push	 0
  002c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  002c7	3b f4		 cmp	 esi, esp
  002c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@CheckAnaly:

; 150  :     return true;

  002ce	c6 85 7f ff ff
	ff 01		 mov	 BYTE PTR $T3[ebp], 1
  002d5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002dc	8b f4		 mov	 esi, esp
  002de	8d 4d a8	 lea	 ecx, DWORD PTR _value$[ebp]
  002e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  002e7	3b f4		 cmp	 esi, esp
  002e9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ee	8a 85 7f ff ff
	ff		 mov	 al, BYTE PTR $T3[ebp]
  002f4	eb 26		 jmp	 SHORT $LN1@CheckAnaly
$LN2@CheckAnaly:

; 151  :   };
; 152  :   return false;

  002f6	c6 85 7e ff ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  002fd	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00304	8b f4		 mov	 esi, esp
  00306	8d 4d a8	 lea	 ecx, DWORD PTR _value$[ebp]
  00309	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0030f	3b f4		 cmp	 esi, esp
  00311	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00316	8a 85 7e ff ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@CheckAnaly:

; 153  : }

  0031c	52		 push	 edx
  0031d	8b cd		 mov	 ecx, ebp
  0031f	50		 push	 eax
  00320	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@CheckAnaly
  00326	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0032b	58		 pop	 eax
  0032c	5a		 pop	 edx
  0032d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00330	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00337	59		 pop	 ecx
  00338	5f		 pop	 edi
  00339	5e		 pop	 esi
  0033a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0033d	33 cd		 xor	 ecx, ebp
  0033f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00344	81 c4 a0 00 00
	00		 add	 esp, 160		; 000000a0H
  0034a	3b ec		 cmp	 ebp, esp
  0034c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00351	8b e5		 mov	 esp, ebp
  00353	5d		 pop	 ebp
  00354	c3		 ret	 0
  00355	0f 1f 00	 npad	 3
$LN21@CheckAnaly:
  00358	03 00 00 00	 DD	 3
  0035c	00 00 00 00	 DD	 $LN20@CheckAnaly
$LN20@CheckAnaly:
  00360	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00364	38 00 00 00	 DD	 56			; 00000038H
  00368	00 00 00 00	 DD	 $LN16@CheckAnaly
  0036c	a8 ff ff ff	 DD	 -88			; ffffffa8H
  00370	04 00 00 00	 DD	 4
  00374	00 00 00 00	 DD	 $LN17@CheckAnaly
  00378	9c ff ff ff	 DD	 -100			; ffffff9cH
  0037c	04 00 00 00	 DD	 4
  00380	00 00 00 00	 DD	 $LN18@CheckAnaly
$LN18@CheckAnaly:
  00384	76		 DB	 118			; 00000076H
  00385	00		 DB	 0
$LN17@CheckAnaly:
  00386	76		 DB	 118			; 00000076H
  00387	61		 DB	 97			; 00000061H
  00388	6c		 DB	 108			; 0000006cH
  00389	75		 DB	 117			; 00000075H
  0038a	65		 DB	 101			; 00000065H
  0038b	00		 DB	 0
$LN16@CheckAnaly:
  0038c	74		 DB	 116			; 00000074H
  0038d	65		 DB	 101			; 00000065H
  0038e	6d		 DB	 109			; 0000006dH
  0038f	70		 DB	 112			; 00000070H
  00390	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d a8	 lea	 ecx, DWORD PTR _value$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z$3:
  00012	8b f4		 mov	 esi, esp
  00014	8d 4d 84	 lea	 ecx, DWORD PTR $T5[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0001d	3b f4		 cmp	 esi, esp
  0001f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z$4:
  00024	8b f4		 mov	 esi, esp
  00026	8d 4d 80	 lea	 ecx, DWORD PTR $T4[ebp]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0002f	3b f4		 cmp	 esi, esp
  00031	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
  00036	cc		 int	 3
  00037	cc		 int	 3
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
__ehhandler$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z:
  0003b	90		 npad	 1
  0003c	90		 npad	 1
  0003d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00041	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00044	8b 8a 60 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-160]
  0004a	33 c8		 xor	 ecx, eax
  0004c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00051	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00054	33 c8		 xor	 ecx, eax
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z
  00060	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ENDP ; CheckAnalysisParameter
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv80 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
_name$ = 12						; size = 4
_mt$ = 16						; size = 4
?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z PROC ; AnalysisOption

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001f	33 c5		 xor	 eax, ebp
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 125  :   Write(ar,"=Analysis ");

  00032	68 00 00 00 00	 push	 OFFSET $SG226082
  00037	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ?Write@@YAXAAVCArchive@@PBD@Z ; Write
  00040	83 c4 08	 add	 esp, 8

; 126  :   Write(ar,LPCSTR (name));

  00043	8b f4		 mov	 esi, esp
  00045	8d 4d 0c	 lea	 ecx, DWORD PTR _name$[ebp]
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	50		 push	 eax
  00056	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00059	51		 push	 ecx
  0005a	e8 00 00 00 00	 call	 ?Write@@YAXAAVCArchive@@PBD@Z ; Write
  0005f	83 c4 08	 add	 esp, 8

; 127  :   Write(ar, pDoc->AI_Option(mt) ? " Yes" : " No");

  00062	8b 55 10	 mov	 edx, DWORD PTR _mt$[ebp]
  00065	52		 push	 edx
  00066	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0006c	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ; CNewBoxesDoc::AI_Option
  00071	0f b6 c0	 movzx	 eax, al
  00074	85 c0		 test	 eax, eax
  00076	74 09		 je	 SHORT $LN3@AnalysisOp
  00078	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], OFFSET $SG226083
  0007f	eb 07		 jmp	 SHORT $LN4@AnalysisOp
$LN3@AnalysisOp:
  00081	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], OFFSET $SG226084
$LN4@AnalysisOp:
  00088	8b 4d f0	 mov	 ecx, DWORD PTR tv80[ebp]
  0008b	51		 push	 ecx
  0008c	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  0008f	52		 push	 edx
  00090	e8 00 00 00 00	 call	 ?Write@@YAXAAVCArchive@@PBD@Z ; Write
  00095	83 c4 08	 add	 esp, 8

; 128  :   Write(ar,"\n");

  00098	68 00 00 00 00	 push	 OFFSET $SG226085
  0009d	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000a0	50		 push	 eax
  000a1	e8 00 00 00 00	 call	 ?Write@@YAXAAVCArchive@@PBD@Z ; Write
  000a6	83 c4 08	 add	 esp, 8

; 129  : }

  000a9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b0	8b f4		 mov	 esi, esp
  000b2	8d 4d 0c	 lea	 ecx, DWORD PTR _name$[ebp]
  000b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000bb	3b f4		 cmp	 esi, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5e		 pop	 esi
  000ce	83 c4 10	 add	 esp, 16			; 00000010H
  000d1	3b ec		 cmp	 ebp, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d 0c	 lea	 ecx, DWORD PTR _name$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ENDP ; AnalysisOption
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1NewDialog@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1NewDialog@@UAE@XZ PROC				; NewDialog::~NewDialog, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  00017	e8 00 00 00 00	 call	 ??1CButton@@UAE@XZ	; CButton::~CButton
  0001c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	e8 00 00 00 00	 call	 ??1CDialog@@UAE@XZ	; CDialog::~CDialog
  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
??1NewDialog@@UAE@XZ ENDP				; NewDialog::~NewDialog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCNewBoxesDoc@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCNewBoxesDoc@@UAEPAXI@Z PROC			; CNewBoxesDoc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CNewBoxesDoc@@UAE@XZ	; CNewBoxesDoc::~CNewBoxesDoc
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 24		 je	 SHORT $LN2@scalar
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR ___flags$[ebp]
  00021	83 e1 04	 and	 ecx, 4
  00024	75 0b		 jne	 SHORT $LN3@scalar
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	52		 push	 edx
  0002a	e8 00 00 00 00	 call	 ??3CObject@@SGXPAX@Z	; CObject::operator delete
  0002f	eb 11		 jmp	 SHORT $LN2@scalar
$LN3@scalar:
  00031	68 2c 36 00 00	 push	 13868			; 0000362cH
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ?__global_delete@@YAXPAXI@Z ; __global_delete
  0003f	83 c4 08	 add	 esp, 8
$LN2@scalar:
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	83 c4 04	 add	 esp, 4
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
??_GCNewBoxesDoc@@UAEPAXI@Z ENDP			; CNewBoxesDoc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetMessageMap@CNewBoxesDoc@@MBEPBUAFX_MSGMAP@@XZ PROC	; CNewBoxesDoc::GetMessageMap
; _this$ = ecx

; 30   : BEGIN_MESSAGE_MAP(CNewBoxesDoc, CDocument)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	e8 00 00 00 00	 call	 ?GetThisMessageMap@CNewBoxesDoc@@KGPBUAFX_MSGMAP@@XZ ; CNewBoxesDoc::GetThisMessageMap
  00013	83 c4 04	 add	 esp, 4
  00016	3b ec		 cmp	 ebp, esp
  00018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
?GetMessageMap@CNewBoxesDoc@@MBEPBUAFX_MSGMAP@@XZ ENDP	; CNewBoxesDoc::GetMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
?GetThisMessageMap@CNewBoxesDoc@@KGPBUAFX_MSGMAP@@XZ PROC ; CNewBoxesDoc::GetThisMessageMap

; 30   : BEGIN_MESSAGE_MAP(CNewBoxesDoc, CDocument)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 31   : 	//{{AFX_MSG_MAP(CNewBoxesDoc)
; 32   : 		// NOTE - the ClassWizard will add and remove mapping macros here.
; 33   : 		//    DO NOT EDIT what you see in these blocks of generated code!
; 34   : 	//}}AFX_MSG_MAP
; 35   : END_MESSAGE_MAP()

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?messageMap@?1??GetThisMessageMap@CNewBoxesDoc@@KGPBUAFX_MSGMAP@@XZ@4U3@B
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?GetThisMessageMap@CNewBoxesDoc@@KGPBUAFX_MSGMAP@@XZ ENDP ; CNewBoxesDoc::GetThisMessageMap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dc$ = 8						; size = 4
?Dump@CNewBoxesDoc@@UBEXAAVCDumpContext@@@Z PROC	; CNewBoxesDoc::Dump
; _this$ = ecx

; 228  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 229  : 	CDocument::Dump(dc);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _dc$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	e8 00 00 00 00	 call	 ?Dump@CDocument@@UBEXAAVCDumpContext@@@Z ; CDocument::Dump

; 230  : }

  0001a	83 c4 04	 add	 esp, 4
  0001d	3b ec		 cmp	 ebp, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00024	8b e5		 mov	 esp, ebp
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
?Dump@CNewBoxesDoc@@UBEXAAVCDumpContext@@@Z ENDP	; CNewBoxesDoc::Dump
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AssertValid@CNewBoxesDoc@@UBEXXZ PROC			; CNewBoxesDoc::AssertValid
; _this$ = ecx

; 223  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 224  : 	CDocument::AssertValid();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?AssertValid@CDocument@@UBEXXZ ; CDocument::AssertValid

; 225  : }

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?AssertValid@CNewBoxesDoc@@UBEXXZ ENDP			; CNewBoxesDoc::AssertValid
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv81 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1CNewBoxesDoc@@UAE@XZ PROC				; CNewBoxesDoc::~CNewBoxesDoc
; _this$ = ecx

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CNewBoxesDoc@@6B@

; 88   :   if (m_pGame != NULL) delete m_pGame;

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	83 b9 28 36 00
	00 00		 cmp	 DWORD PTR [ecx+13864], 0
  00031	74 28		 je	 SHORT $LN2@CNewBoxesD
  00033	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00036	8b 82 28 36 00
	00		 mov	 eax, DWORD PTR [edx+13864]
  0003c	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0003f	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00043	74 0f		 je	 SHORT $LN4@CNewBoxesD
  00045	6a 01		 push	 1
  00047	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0004a	e8 00 00 00 00	 call	 ??_GDOTS_AND_BOXES@@QAEPAXI@Z
  0004f	89 45 f4	 mov	 DWORD PTR tv81[ebp], eax
  00052	eb 07		 jmp	 SHORT $LN2@CNewBoxesD
$LN4@CNewBoxesD:
  00054	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN2@CNewBoxesD:

; 89   :   m_pGame = NULL;

  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	c7 81 28 36 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+13864], 0

; 90   :   pDoc = NULL;

  00068	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A, 0 ; pDoc

; 91   : }

  00072	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ??1CDocument@@UAE@XZ	; CDocument::~CDocument
  0007a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007d	3b ec		 cmp	 ebp, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
??1CNewBoxesDoc@@UAE@XZ ENDP				; CNewBoxesDoc::~CNewBoxesDoc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv262 = -176						; size = 4
tv309 = -172						; size = 4
tv241 = -168						; size = 4
tv305 = -164						; size = 4
tv205 = -160						; size = 4
$T2 = -156						; size = 4
$T3 = -149						; size = 1
$T4 = -148						; size = 4
$T5 = -144						; size = 4
$T6 = -140						; size = 4
$T7 = -136						; size = 4
$T8 = -132						; size = 4
$T9 = -128						; size = 4
$T10 = -124						; size = 4
_line$11 = -116						; size = 4
_arIn$12 = -104						; size = 4
_s$13 = -92						; size = 4
_temp$14 = -80						; size = 56
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ar$ = 8						; size = 4
?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z PROC	; CNewBoxesDoc::Serialize
; _this$ = ecx

; 174  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd 50 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-176]
  00020	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 175  : 	if (ar.IsStoring())

  00044	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00047	e8 00 00 00 00	 call	 ?IsStoring@CArchive@@QBEHXZ ; CArchive::IsStoring
  0004c	85 c0		 test	 eax, eax
  0004e	0f 84 17 02 00
	00		 je	 $LN4@Serialize

; 176  : 	{
; 177  : 		// TODO: add storing code here
; 178  :     *m_pGame >> ar;

  00054	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00057	50		 push	 eax
  00058	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  00061	e8 00 00 00 00	 call	 ??5DOTS_AND_BOXES@@QBEXAAVCArchive@@@Z ; DOTS_AND_BOXES::operator>>

; 179  :     MOVE temp;

  00066	8d 4d b0	 lea	 ecx, DWORD PTR _temp$14[ebp]
  00069	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 180  :     temp.moveType = MT_RANDOM;

  0006e	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _temp$14[ebp+52], 1

; 181  :     AnalysisOption(ar, temp.TypeName(), MT_RANDOM);

  00075	6a 01		 push	 1
  00077	51		 push	 ecx
  00078	8b d4		 mov	 edx, esp
  0007a	89 65 84	 mov	 DWORD PTR $T10[ebp], esp
  0007d	52		 push	 edx
  0007e	8d 4d b0	 lea	 ecx, DWORD PTR _temp$14[ebp]
  00081	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  00086	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; AnalysisOption
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 182  :     temp.moveType = MT_OBVIOUSCAPTURE;

  00092	c7 45 e4 02 00
	00 00		 mov	 DWORD PTR _temp$14[ebp+52], 2

; 183  :     AnalysisOption(ar, temp.TypeName(), MT_OBVIOUSCAPTURE);

  00099	6a 02		 push	 2
  0009b	51		 push	 ecx
  0009c	8b cc		 mov	 ecx, esp
  0009e	89 65 80	 mov	 DWORD PTR $T9[ebp], esp
  000a1	51		 push	 ecx
  000a2	8d 4d b0	 lea	 ecx, DWORD PTR _temp$14[ebp]
  000a5	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  000aa	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  000ad	52		 push	 edx
  000ae	e8 00 00 00 00	 call	 ?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; AnalysisOption
  000b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 184  :     temp.moveType = MT_GIVENOTHING;

  000b6	c7 45 e4 03 00
	00 00		 mov	 DWORD PTR _temp$14[ebp+52], 3

; 185  :     AnalysisOption(ar, temp.TypeName(), MT_GIVENOTHING);

  000bd	6a 03		 push	 3
  000bf	51		 push	 ecx
  000c0	8b c4		 mov	 eax, esp
  000c2	89 a5 7c ff ff
	ff		 mov	 DWORD PTR $T8[ebp], esp
  000c8	50		 push	 eax
  000c9	8d 4d b0	 lea	 ecx, DWORD PTR _temp$14[ebp]
  000cc	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  000d1	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  000d4	51		 push	 ecx
  000d5	e8 00 00 00 00	 call	 ?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; AnalysisOption
  000da	83 c4 0c	 add	 esp, 12			; 0000000cH

; 186  :     temp.moveType = MT_GIVELITTLE;

  000dd	c7 45 e4 07 00
	00 00		 mov	 DWORD PTR _temp$14[ebp+52], 7

; 187  :     AnalysisOption(ar, temp.TypeName(), MT_GIVELITTLE);

  000e4	6a 07		 push	 7
  000e6	51		 push	 ecx
  000e7	8b d4		 mov	 edx, esp
  000e9	89 a5 78 ff ff
	ff		 mov	 DWORD PTR $T7[ebp], esp
  000ef	52		 push	 edx
  000f0	8d 4d b0	 lea	 ecx, DWORD PTR _temp$14[ebp]
  000f3	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  000f8	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; AnalysisOption
  00101	83 c4 0c	 add	 esp, 12			; 0000000cH

; 188  :     temp.moveType = MT_GRABANYTHING;

  00104	c7 45 e4 08 00
	00 00		 mov	 DWORD PTR _temp$14[ebp+52], 8

; 189  :     AnalysisOption(ar, temp.TypeName(), MT_GRABANYTHING);

  0010b	6a 08		 push	 8
  0010d	51		 push	 ecx
  0010e	8b cc		 mov	 ecx, esp
  00110	89 a5 74 ff ff
	ff		 mov	 DWORD PTR $T6[ebp], esp
  00116	51		 push	 ecx
  00117	8d 4d b0	 lea	 ecx, DWORD PTR _temp$14[ebp]
  0011a	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  0011f	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00122	52		 push	 edx
  00123	e8 00 00 00 00	 call	 ?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; AnalysisOption
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH

; 190  :     temp.moveType = MT_SIMPLEWIN;

  0012b	c7 45 e4 09 00
	00 00		 mov	 DWORD PTR _temp$14[ebp+52], 9

; 191  :     AnalysisOption(ar, temp.TypeName(), MT_SIMPLEWIN);

  00132	6a 09		 push	 9
  00134	51		 push	 ecx
  00135	8b c4		 mov	 eax, esp
  00137	89 a5 70 ff ff
	ff		 mov	 DWORD PTR $T5[ebp], esp
  0013d	50		 push	 eax
  0013e	8d 4d b0	 lea	 ecx, DWORD PTR _temp$14[ebp]
  00141	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  00146	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00149	51		 push	 ecx
  0014a	e8 00 00 00 00	 call	 ?AnalysisOption@@YAXAAVCArchive@@V?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; AnalysisOption
  0014f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 192  :     temp.moveType = MT_VERIFYNIMSTRINGVALUE;

  00152	c7 45 e4 10 00
	00 00		 mov	 DWORD PTR _temp$14[ebp+52], 16 ; 00000010H

; 193  :     if (AI_Option(MT_VERIFYNIMSTRINGVALUE))

  00159	6a 10		 push	 16			; 00000010H
  0015b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0015e	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ; CNewBoxesDoc::AI_Option
  00163	0f b6 d0	 movzx	 edx, al
  00166	85 d2		 test	 edx, edx
  00168	0f 84 f8 00 00
	00		 je	 $LN6@Serialize

; 194  :     {
; 195  :       CString s;

  0016e	8b f4		 mov	 esi, esp
  00170	8d 4d a4	 lea	 ecx, DWORD PTR _s$13[ebp]
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00179	3b f4		 cmp	 esi, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 196  :       Write(ar,"=Analysis ");

  00187	68 00 00 00 00	 push	 OFFSET $SG226163
  0018c	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0018f	50		 push	 eax
  00190	e8 00 00 00 00	 call	 ?Write@@YAXAAVCArchive@@PBD@Z ; Write
  00195	83 c4 08	 add	 esp, 8

; 197  :       Write(ar, temp.TypeName());

  00198	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0019e	51		 push	 ecx
  0019f	8d 4d b0	 lea	 ecx, DWORD PTR _temp$14[ebp]
  001a2	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  001a7	89 85 60 ff ff
	ff		 mov	 DWORD PTR tv205[ebp], eax
  001ad	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR tv205[ebp]
  001b3	89 95 5c ff ff
	ff		 mov	 DWORD PTR tv305[ebp], edx
  001b9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001bd	8b f4		 mov	 esi, esp
  001bf	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR tv305[ebp]
  001c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  001cb	3b f4		 cmp	 esi, esp
  001cd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d2	50		 push	 eax
  001d3	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  001d6	50		 push	 eax
  001d7	e8 00 00 00 00	 call	 ?Write@@YAXAAVCArchive@@PBD@Z ; Write
  001dc	83 c4 08	 add	 esp, 8
  001df	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001e3	8b f4		 mov	 esi, esp
  001e5	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  001eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001f1	3b f4		 cmp	 esi, esp
  001f3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 198  :       s.Format(" %d",m_nimstringValueToVerify);

  001f8	8b f4		 mov	 esi, esp
  001fa	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001fd	8b 91 3c 01 00
	00		 mov	 edx, DWORD PTR [ecx+316]
  00203	52		 push	 edx
  00204	68 00 00 00 00	 push	 OFFSET $SG226164
  00209	8d 45 a4	 lea	 eax, DWORD PTR _s$13[ebp]
  0020c	50		 push	 eax
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00213	83 c4 0c	 add	 esp, 12			; 0000000cH
  00216	3b f4		 cmp	 esi, esp
  00218	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 199  :       Write(ar, s);

  0021d	8b f4		 mov	 esi, esp
  0021f	8d 4d a4	 lea	 ecx, DWORD PTR _s$13[ebp]
  00222	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  00228	3b f4		 cmp	 esi, esp
  0022a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0022f	50		 push	 eax
  00230	8b 4d 08	 mov	 ecx, DWORD PTR _ar$[ebp]
  00233	51		 push	 ecx
  00234	e8 00 00 00 00	 call	 ?Write@@YAXAAVCArchive@@PBD@Z ; Write
  00239	83 c4 08	 add	 esp, 8

; 200  :       Write(ar,"\n");

  0023c	68 00 00 00 00	 push	 OFFSET $SG226165
  00241	8b 55 08	 mov	 edx, DWORD PTR _ar$[ebp]
  00244	52		 push	 edx
  00245	e8 00 00 00 00	 call	 ?Write@@YAXAAVCArchive@@PBD@Z ; Write
  0024a	83 c4 08	 add	 esp, 8

; 201  :     };

  0024d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00254	8b f4		 mov	 esi, esp
  00256	8d 4d a4	 lea	 ecx, DWORD PTR _s$13[ebp]
  00259	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0025f	3b f4		 cmp	 esi, esp
  00261	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Serialize:

; 202  : 	}

  00266	e9 41 01 00 00	 jmp	 $LN1@Serialize
$LN4@Serialize:

; 203  : 	else
; 204  : 	{
; 205  : 		// TODO: add loading code here
; 206  :     arInput arIn(&ar);

  0026b	8b 45 08	 mov	 eax, DWORD PTR _ar$[ebp]
  0026e	50		 push	 eax
  0026f	8d 4d 98	 lea	 ecx, DWORD PTR _arIn$12[ebp]
  00272	e8 00 00 00 00	 call	 ??0arInput@@QAE@PAVCArchive@@@Z ; arInput::arInput
  00277	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2

; 207  :     CString line;

  0027e	8b f4		 mov	 esi, esp
  00280	8d 4d 8c	 lea	 ecx, DWORD PTR _line$11[ebp]
  00283	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00289	3b f4		 cmp	 esi, esp
  0028b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00290	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 208  :     m_aiOptions = 0;

  00294	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00297	c7 81 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+300], 0

; 209  :     *m_pGame << arIn;

  002a1	8d 55 98	 lea	 edx, DWORD PTR _arIn$12[ebp]
  002a4	52		 push	 edx
  002a5	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  002a8	8b 88 28 36 00
	00		 mov	 ecx, DWORD PTR [eax+13864]
  002ae	e8 00 00 00 00	 call	 ??6DOTS_AND_BOXES@@QAEXAAVarInput@@@Z ; DOTS_AND_BOXES::operator<<
$LN2@Serialize:

; 210  :     while ((line = arIn.ReadLine()).GetLength() != 0)

  002b3	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  002b9	51		 push	 ecx
  002ba	8d 4d 98	 lea	 ecx, DWORD PTR _arIn$12[ebp]
  002bd	e8 00 00 00 00	 call	 ?ReadLine@arInput@@QAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; arInput::ReadLine
  002c2	89 85 58 ff ff
	ff		 mov	 DWORD PTR tv241[ebp], eax
  002c8	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR tv241[ebp]
  002ce	89 95 54 ff ff
	ff		 mov	 DWORD PTR tv309[ebp], edx
  002d4	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  002d8	8b f4		 mov	 esi, esp
  002da	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv309[ebp]
  002e0	50		 push	 eax
  002e1	8d 4d 8c	 lea	 ecx, DWORD PTR _line$11[ebp]
  002e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??4?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAEAAV01@ABV01@@Z
  002ea	3b f4		 cmp	 esi, esp
  002ec	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002f1	8b f4		 mov	 esi, esp
  002f3	8b c8		 mov	 ecx, eax
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?GetLength@?$CSimpleStringT@D$00@ATL@@QBEHXZ
  002fb	3b f4		 cmp	 esi, esp
  002fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00302	85 c0		 test	 eax, eax
  00304	74 0c		 je	 SHORT $LN9@Serialize
  00306	c7 85 50 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv262[ebp], 1
  00310	eb 0a		 jmp	 SHORT $LN10@Serialize
$LN9@Serialize:
  00312	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv262[ebp], 0
$LN10@Serialize:
  0031c	8a 8d 50 ff ff
	ff		 mov	 cl, BYTE PTR tv262[ebp]
  00322	88 8d 6b ff ff
	ff		 mov	 BYTE PTR $T3[ebp], cl
  00328	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0032c	8b f4		 mov	 esi, esp
  0032e	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00334	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0033a	3b f4		 cmp	 esi, esp
  0033c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00341	0f b6 95 6b ff
	ff ff		 movzx	 edx, BYTE PTR $T3[ebp]
  00348	85 d2		 test	 edx, edx
  0034a	74 2d		 je	 SHORT $LN3@Serialize

; 211  :     {
; 212  :       if (line[0] == '=') InputParameter(line);

  0034c	8b f4		 mov	 esi, esp
  0034e	6a 00		 push	 0
  00350	8d 4d 8c	 lea	 ecx, DWORD PTR _line$11[ebp]
  00353	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??A?$CSimpleStringT@D$00@ATL@@QBEDH@Z
  00359	3b f4		 cmp	 esi, esp
  0035b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00360	0f be c0	 movsx	 eax, al
  00363	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  00366	75 0c		 jne	 SHORT $LN7@Serialize
  00368	8d 4d 8c	 lea	 ecx, DWORD PTR _line$11[ebp]
  0036b	51		 push	 ecx
  0036c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0036f	e8 00 00 00 00	 call	 ?InputParameter@CNewBoxesDoc@@QAEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CNewBoxesDoc::InputParameter
$LN7@Serialize:

; 213  :     };

  00374	e9 3a ff ff ff	 jmp	 $LN2@Serialize
$LN3@Serialize:

; 214  :     UpdateAllViews(NULL);

  00379	6a 00		 push	 0
  0037b	6a 00		 push	 0
  0037d	6a 00		 push	 0
  0037f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00382	e8 00 00 00 00	 call	 ?UpdateAllViews@CDocument@@QAEXPAVCView@@JPAVCObject@@@Z ; CDocument::UpdateAllViews

; 215  : 	}

  00387	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0038b	8b f4		 mov	 esi, esp
  0038d	8d 4d 8c	 lea	 ecx, DWORD PTR _line$11[ebp]
  00390	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00396	3b f4		 cmp	 esi, esp
  00398	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0039d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003a4	8d 4d 98	 lea	 ecx, DWORD PTR _arIn$12[ebp]
  003a7	e8 00 00 00 00	 call	 ??1arInput@@QAE@XZ	; arInput::~arInput
$LN1@Serialize:

; 216  : }

  003ac	52		 push	 edx
  003ad	8b cd		 mov	 ecx, ebp
  003af	50		 push	 eax
  003b0	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@Serialize
  003b6	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003bb	58		 pop	 eax
  003bc	5a		 pop	 edx
  003bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003c7	59		 pop	 ecx
  003c8	5f		 pop	 edi
  003c9	5e		 pop	 esi
  003ca	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003cd	33 cd		 xor	 ecx, ebp
  003cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003d4	81 c4 b0 00 00
	00		 add	 esp, 176		; 000000b0H
  003da	3b ec		 cmp	 ebp, esp
  003dc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e1	8b e5		 mov	 esp, ebp
  003e3	5d		 pop	 ebp
  003e4	c2 04 00	 ret	 4
  003e7	90		 npad	 1
$LN28@Serialize:
  003e8	04 00 00 00	 DD	 4
  003ec	00 00 00 00	 DD	 $LN27@Serialize
$LN27@Serialize:
  003f0	b0 ff ff ff	 DD	 -80			; ffffffb0H
  003f4	38 00 00 00	 DD	 56			; 00000038H
  003f8	00 00 00 00	 DD	 $LN22@Serialize
  003fc	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00400	04 00 00 00	 DD	 4
  00404	00 00 00 00	 DD	 $LN23@Serialize
  00408	98 ff ff ff	 DD	 -104			; ffffff98H
  0040c	04 00 00 00	 DD	 4
  00410	00 00 00 00	 DD	 $LN24@Serialize
  00414	8c ff ff ff	 DD	 -116			; ffffff8cH
  00418	04 00 00 00	 DD	 4
  0041c	00 00 00 00	 DD	 $LN25@Serialize
$LN25@Serialize:
  00420	6c		 DB	 108			; 0000006cH
  00421	69		 DB	 105			; 00000069H
  00422	6e		 DB	 110			; 0000006eH
  00423	65		 DB	 101			; 00000065H
  00424	00		 DB	 0
$LN24@Serialize:
  00425	61		 DB	 97			; 00000061H
  00426	72		 DB	 114			; 00000072H
  00427	49		 DB	 73			; 00000049H
  00428	6e		 DB	 110			; 0000006eH
  00429	00		 DB	 0
$LN23@Serialize:
  0042a	73		 DB	 115			; 00000073H
  0042b	00		 DB	 0
$LN22@Serialize:
  0042c	74		 DB	 116			; 00000074H
  0042d	65		 DB	 101			; 00000065H
  0042e	6d		 DB	 109			; 0000006dH
  0042f	70		 DB	 112			; 00000070H
  00430	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$6:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d a4	 lea	 ecx, DWORD PTR _s$13[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$7:
  00012	8b f4		 mov	 esi, esp
  00014	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00020	3b f4		 cmp	 esi, esp
  00022	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$8:
  00027	8d 4d 98	 lea	 ecx, DWORD PTR _arIn$12[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1arInput@@QAE@XZ	; arInput::~arInput
__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$9:
  0002f	8b f4		 mov	 esi, esp
  00031	8d 4d 8c	 lea	 ecx, DWORD PTR _line$11[ebp]
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0003a	3b f4		 cmp	 esi, esp
  0003c	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z$10:
  00041	8b f4		 mov	 esi, esp
  00043	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00049	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0004f	3b f4		 cmp	 esi, esp
  00051	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
  00056	cc		 int	 3
  00057	cc		 int	 3
  00058	cc		 int	 3
  00059	cc		 int	 3
  0005a	cc		 int	 3
__ehhandler$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z:
  0005b	90		 npad	 1
  0005c	90		 npad	 1
  0005d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00061	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00064	8b 8a 50 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-176]
  0006a	33 c8		 xor	 ecx, eax
  0006c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00071	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00074	33 c8		 xor	 ecx, eax
  00076	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z
  00080	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Serialize@CNewBoxesDoc@@UAEXAAVCArchive@@@Z ENDP	; CNewBoxesDoc::Serialize
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv187 = -412						; size = 4
tv172 = -408						; size = 4
tv167 = -404						; size = 4
tv152 = -400						; size = 4
tv147 = -396						; size = 4
tv129 = -392						; size = 4
$T2 = -388						; size = 4
$T3 = -384						; size = 4
$T4 = -380						; size = 4
$T5 = -376						; size = 4
$T6 = -372						; size = 4
$T7 = -368						; size = 4
$T8 = -364						; size = 4
$T9 = -360						; size = 4
$T10 = -356						; size = 4
$T11 = -352						; size = 4
$T12 = -348						; size = 4
_newDlg$ = -340						; size = 320
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?OnNewDocument@CNewBoxesDoc@@UAEHXZ PROC		; CNewBoxesDoc::OnNewDocument
; _this$ = ecx

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnNewDocument@CNewBoxesDoc@@UAEHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 90 01 00
	00		 sub	 esp, 400		; 00000190H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd 64 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-412]
  00020	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	50		 push	 eax
  00035	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00038	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003e	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 95   : SetTitle("哈工程工程之星-2013博弈组");

  00041	8b f4		 mov	 esi, esp
  00043	68 00 00 00 00	 push	 OFFSET $SG226056
  00048	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8b 10		 mov	 edx, DWORD PTR [eax]
  0004d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  00053	ff d0		 call	 eax
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 96   :   NewDialog newDlg;

  0005c	6a 00		 push	 0
  0005e	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _newDlg$[ebp]
  00064	e8 00 00 00 00	 call	 ??0NewDialog@@QAE@PAVCWnd@@@Z ; NewDialog::NewDialog
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 97   : 	if (!CDocument::OnNewDocument())

  00070	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?OnNewDocument@CDocument@@UAEHXZ ; CDocument::OnNewDocument
  00078	85 c0		 test	 eax, eax
  0007a	75 27		 jne	 SHORT $LN2@OnNewDocum

; 98   : 		return FALSE;

  0007c	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T12[ebp], 0
  00086	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008d	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _newDlg$[ebp]
  00093	e8 00 00 00 00	 call	 ??1NewDialog@@UAE@XZ
  00098	8b 85 a4 fe ff
	ff		 mov	 eax, DWORD PTR $T12[ebp]
  0009e	e9 4e 02 00 00	 jmp	 $LN1@OnNewDocum
$LN2@OnNewDocum:

; 99   : 
; 100  : 	// TODO: add reinitialization code here
; 101  : 	// (SDI documents will reuse this document)
; 102  :   if (!tOption) newDlg.DoModal();

  000a3	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?tOption@@3_NA ; tOption
  000aa	85 c9		 test	 ecx, ecx
  000ac	75 0b		 jne	 SHORT $LN3@OnNewDocum
  000ae	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _newDlg$[ebp]
  000b4	e8 00 00 00 00	 call	 ?DoModal@CDialog@@UAEHXZ ; CDialog::DoModal
$LN3@OnNewDocum:

; 103  :   if (m_pGame != NULL) delete m_pGame;

  000b9	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	83 ba 28 36 00
	00 00		 cmp	 DWORD PTR [edx+13864], 0
  000c3	74 37		 je	 SHORT $LN4@OnNewDocum
  000c5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000c8	8b 88 28 36 00
	00		 mov	 ecx, DWORD PTR [eax+13864]
  000ce	89 8d a0 fe ff
	ff		 mov	 DWORD PTR $T11[ebp], ecx
  000d4	83 bd a0 fe ff
	ff 00		 cmp	 DWORD PTR $T11[ebp], 0
  000db	74 15		 je	 SHORT $LN8@OnNewDocum
  000dd	6a 01		 push	 1
  000df	8b 8d a0 fe ff
	ff		 mov	 ecx, DWORD PTR $T11[ebp]
  000e5	e8 00 00 00 00	 call	 ??_GDOTS_AND_BOXES@@QAEPAXI@Z
  000ea	89 85 78 fe ff
	ff		 mov	 DWORD PTR tv129[ebp], eax
  000f0	eb 0a		 jmp	 SHORT $LN4@OnNewDocum
$LN8@OnNewDocum:
  000f2	c7 85 78 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv129[ebp], 0
$LN4@OnNewDocum:

; 104  :   m_pGame = new DOTS_AND_BOXES(newDlg.m_width, newDlg.m_height);

  000fc	6a 68		 push	 104			; 00000068H
  000fe	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00103	6a 30		 push	 48			; 00000030H
  00105	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  0010a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0010d	89 85 98 fe ff
	ff		 mov	 DWORD PTR $T9[ebp], eax
  00113	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00117	83 bd 98 fe ff
	ff 00		 cmp	 DWORD PTR $T9[ebp], 0
  0011e	74 1b		 je	 SHORT $LN10@OnNewDocum
  00120	8b 55 e0	 mov	 edx, DWORD PTR _newDlg$[ebp+308]
  00123	52		 push	 edx
  00124	8b 45 d8	 mov	 eax, DWORD PTR _newDlg$[ebp+300]
  00127	50		 push	 eax
  00128	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR $T9[ebp]
  0012e	e8 00 00 00 00	 call	 ??0DOTS_AND_BOXES@@QAE@HH@Z ; DOTS_AND_BOXES::DOTS_AND_BOXES
  00133	89 85 74 fe ff
	ff		 mov	 DWORD PTR tv147[ebp], eax
  00139	eb 0a		 jmp	 SHORT $LN11@OnNewDocum
$LN10@OnNewDocum:
  0013b	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv147[ebp], 0
$LN11@OnNewDocum:
  00145	8b 8d 74 fe ff
	ff		 mov	 ecx, DWORD PTR tv147[ebp]
  0014b	89 8d 9c fe ff
	ff		 mov	 DWORD PTR $T10[ebp], ecx
  00151	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00155	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00158	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  0015e	89 82 28 36 00
	00		 mov	 DWORD PTR [edx+13864], eax

; 105  : #ifdef HASH_CARRY
; 106  :   if (nimHashTable != NULL) delete nimHashTable;

  00164	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A, 0 ; nimHashTable
  0016b	74 34		 je	 SHORT $LN5@OnNewDocum
  0016d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A ; nimHashTable
  00173	89 8d 94 fe ff
	ff		 mov	 DWORD PTR $T8[ebp], ecx
  00179	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR $T8[ebp], 0
  00180	74 15		 je	 SHORT $LN12@OnNewDocum
  00182	6a 01		 push	 1
  00184	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR $T8[ebp]
  0018a	e8 00 00 00 00	 call	 ??_GNIMHASHTABLE@@QAEPAXI@Z
  0018f	89 85 70 fe ff
	ff		 mov	 DWORD PTR tv152[ebp], eax
  00195	eb 0a		 jmp	 SHORT $LN5@OnNewDocum
$LN12@OnNewDocum:
  00197	c7 85 70 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv152[ebp], 0
$LN5@OnNewDocum:

; 107  :   nimHashTable = new NIMHASHTABLE;

  001a1	6a 6b		 push	 107			; 0000006bH
  001a3	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  001a8	6a 0c		 push	 12			; 0000000cH
  001aa	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  001af	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b2	89 85 8c fe ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  001b8	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  001bc	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR $T6[ebp], 0
  001c3	74 13		 je	 SHORT $LN14@OnNewDocum
  001c5	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  001cb	e8 00 00 00 00	 call	 ??0NIMHASHTABLE@@QAE@XZ	; NIMHASHTABLE::NIMHASHTABLE
  001d0	89 85 6c fe ff
	ff		 mov	 DWORD PTR tv167[ebp], eax
  001d6	eb 0a		 jmp	 SHORT $LN15@OnNewDocum
$LN14@OnNewDocum:
  001d8	c7 85 6c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv167[ebp], 0
$LN15@OnNewDocum:
  001e2	8b 95 6c fe ff
	ff		 mov	 edx, DWORD PTR tv167[ebp]
  001e8	89 95 90 fe ff
	ff		 mov	 DWORD PTR $T7[ebp], edx
  001ee	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001f2	8b 85 90 fe ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  001f8	a3 00 00 00 00	 mov	 DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A, eax ; nimHashTable

; 108  :   if (swHashTable != NULL) delete swHashTable;

  001fd	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?swHashTable@@3PAVSWHASHTABLE@@A, 0 ; swHashTable
  00204	74 34		 je	 SHORT $LN6@OnNewDocum
  00206	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?swHashTable@@3PAVSWHASHTABLE@@A ; swHashTable
  0020c	89 8d 88 fe ff
	ff		 mov	 DWORD PTR $T5[ebp], ecx
  00212	83 bd 88 fe ff
	ff 00		 cmp	 DWORD PTR $T5[ebp], 0
  00219	74 15		 je	 SHORT $LN16@OnNewDocum
  0021b	6a 01		 push	 1
  0021d	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  00223	e8 00 00 00 00	 call	 ??_GSWHASHTABLE@@QAEPAXI@Z
  00228	89 85 68 fe ff
	ff		 mov	 DWORD PTR tv172[ebp], eax
  0022e	eb 0a		 jmp	 SHORT $LN6@OnNewDocum
$LN16@OnNewDocum:
  00230	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv172[ebp], 0
$LN6@OnNewDocum:

; 109  :   swHashTable = new SWHASHTABLE;

  0023a	6a 6d		 push	 109			; 0000006dH
  0023c	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00241	6a 0c		 push	 12			; 0000000cH
  00243	e8 00 00 00 00	 call	 ??2@YAPAXIPBDH@Z	; operator new
  00248	83 c4 0c	 add	 esp, 12			; 0000000cH
  0024b	89 85 80 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00251	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00255	83 bd 80 fe ff
	ff 00		 cmp	 DWORD PTR $T3[ebp], 0
  0025c	74 13		 je	 SHORT $LN18@OnNewDocum
  0025e	8b 8d 80 fe ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00264	e8 00 00 00 00	 call	 ??0SWHASHTABLE@@QAE@XZ	; SWHASHTABLE::SWHASHTABLE
  00269	89 85 64 fe ff
	ff		 mov	 DWORD PTR tv187[ebp], eax
  0026f	eb 0a		 jmp	 SHORT $LN19@OnNewDocum
$LN18@OnNewDocum:
  00271	c7 85 64 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv187[ebp], 0
$LN19@OnNewDocum:
  0027b	8b 95 64 fe ff
	ff		 mov	 edx, DWORD PTR tv187[ebp]
  00281	89 95 84 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], edx
  00287	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0028b	8b 85 84 fe ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00291	a3 00 00 00 00	 mov	 DWORD PTR ?swHashTable@@3PAVSWHASHTABLE@@A, eax ; swHashTable

; 110  : #endif
; 111  :   pDoc->CurrentRandomize(newDlg.m_bRandomize);

  00296	0f b6 4d e4	 movzx	 ecx, BYTE PTR _newDlg$[ebp+312]
  0029a	51		 push	 ecx
  0029b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  002a1	e8 00 00 00 00	 call	 ?CurrentRandomize@CNewBoxesDoc@@QAEX_N@Z ; CNewBoxesDoc::CurrentRandomize

; 112  :   pDoc->CurrentRandomSeed(newDlg.m_randomSeed);

  002a6	8b 55 d4	 mov	 edx, DWORD PTR _newDlg$[ebp+296]
  002a9	52		 push	 edx
  002aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  002b0	e8 00 00 00 00	 call	 ?CurrentRandomSeed@CNewBoxesDoc@@QAEXI@Z ; CNewBoxesDoc::CurrentRandomSeed

; 113  :   pDoc->SetRandom(newDlg.m_randomSeed);

  002b5	8b 45 d4	 mov	 eax, DWORD PTR _newDlg$[ebp+296]
  002b8	50		 push	 eax
  002b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  002bf	e8 00 00 00 00	 call	 ?SetRandom@CNewBoxesDoc@@QAEXI@Z ; CNewBoxesDoc::SetRandom

; 114  :   pDoc->EraseMoveHistory();

  002c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  002ca	e8 00 00 00 00	 call	 ?EraseMoveHistory@CNewBoxesDoc@@QAEXXZ ; CNewBoxesDoc::EraseMoveHistory

; 115  : 	return TRUE;

  002cf	c7 85 7c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR $T2[ebp], 1
  002d9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002e0	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _newDlg$[ebp]
  002e6	e8 00 00 00 00	 call	 ??1NewDialog@@UAE@XZ
  002eb	8b 85 7c fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@OnNewDocum:

; 116  : }

  002f1	52		 push	 edx
  002f2	8b cd		 mov	 ecx, ebp
  002f4	50		 push	 eax
  002f5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN27@OnNewDocum
  002fb	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00300	58		 pop	 eax
  00301	5a		 pop	 edx
  00302	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00305	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0030c	59		 pop	 ecx
  0030d	5f		 pop	 edi
  0030e	5e		 pop	 esi
  0030f	81 c4 9c 01 00
	00		 add	 esp, 412		; 0000019cH
  00315	3b ec		 cmp	 ebp, esp
  00317	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0031c	8b e5		 mov	 esp, ebp
  0031e	5d		 pop	 ebp
  0031f	c3		 ret	 0
$LN27@OnNewDocum:
  00320	01 00 00 00	 DD	 1
  00324	00 00 00 00	 DD	 $LN26@OnNewDocum
$LN26@OnNewDocum:
  00328	ac fe ff ff	 DD	 -340			; fffffeacH
  0032c	40 01 00 00	 DD	 320			; 00000140H
  00330	00 00 00 00	 DD	 $LN24@OnNewDocum
$LN24@OnNewDocum:
  00334	6e		 DB	 110			; 0000006eH
  00335	65		 DB	 101			; 00000065H
  00336	77		 DB	 119			; 00000077H
  00337	44		 DB	 68			; 00000044H
  00338	6c		 DB	 108			; 0000006cH
  00339	67		 DB	 103			; 00000067H
  0033a	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OnNewDocument@CNewBoxesDoc@@UAEHXZ$0:
  00000	8d 8d ac fe ff
	ff		 lea	 ecx, DWORD PTR _newDlg$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1NewDialog@@UAE@XZ
__unwindfunclet$?OnNewDocument@CNewBoxesDoc@@UAEHXZ$1:
  0000b	6a 68		 push	 104			; 00000068H
  0000d	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00012	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR $T9[ebp]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00021	c3		 ret	 0
__unwindfunclet$?OnNewDocument@CNewBoxesDoc@@UAEHXZ$2:
  00022	6a 6b		 push	 107			; 0000006bH
  00024	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00029	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  00035	83 c4 0c	 add	 esp, 12			; 0000000cH
  00038	c3		 ret	 0
__unwindfunclet$?OnNewDocument@CNewBoxesDoc@@UAEHXZ$3:
  00039	6a 6d		 push	 109			; 0000006dH
  0003b	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00040	8b 85 80 fe ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ??3@YAXPAXPBDH@Z	; operator delete
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	c3		 ret	 0
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
__ehhandler$?OnNewDocument@CNewBoxesDoc@@UAEHXZ:
  00055	90		 npad	 1
  00056	90		 npad	 1
  00057	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005e	8b 8a 64 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-412]
  00064	33 c8		 xor	 ecx, eax
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnNewDocument@CNewBoxesDoc@@UAEHXZ
  00070	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnNewDocument@CNewBoxesDoc@@UAEHXZ ENDP		; CNewBoxesDoc::OnNewDocument
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?MyRandomize@CNewBoxesDoc@@QAEXXZ
_TEXT	SEGMENT
_fileTime$ = -16					; size = 8
_this$ = -4						; size = 4
?MyRandomize@CNewBoxesDoc@@QAEXXZ PROC			; CNewBoxesDoc::MyRandomize, COMDAT
; _this$ = ecx

; 167  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 168  :     FILETIME fileTime;
; 169  :     GetSystemTimeAsFileTime(&fileTime);

  0001e	8b f4		 mov	 esi, esp
  00020	8d 45 f0	 lea	 eax, DWORD PTR _fileTime$[ebp]
  00023	50		 push	 eax
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTimeAsFileTime@4
  0002a	3b f4		 cmp	 esi, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 170  :     m_random = fileTime.dwLowDateTime;

  00031	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	8b 55 f0	 mov	 edx, DWORD PTR _fileTime$[ebp]
  00037	89 91 30 01 00
	00		 mov	 DWORD PTR [ecx+304], edx

; 171  :     m_currentRandomSeed = m_random;

  0003d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	8b 91 30 01 00
	00		 mov	 edx, DWORD PTR [ecx+304]
  00049	89 90 34 01 00
	00		 mov	 DWORD PTR [eax+308], edx

; 172  :   };

  0004f	52		 push	 edx
  00050	8b cd		 mov	 ecx, ebp
  00052	50		 push	 eax
  00053	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@MyRandomiz
  00059	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0005e	58		 pop	 eax
  0005f	5a		 pop	 edx
  00060	5e		 pop	 esi
  00061	83 c4 14	 add	 esp, 20			; 00000014H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
  0006f	90		 npad	 1
$LN5@MyRandomiz:
  00070	01 00 00 00	 DD	 1
  00074	00 00 00 00	 DD	 $LN4@MyRandomiz
$LN4@MyRandomiz:
  00078	f0 ff ff ff	 DD	 -16			; fffffff0H
  0007c	08 00 00 00	 DD	 8
  00080	00 00 00 00	 DD	 $LN3@MyRandomiz
$LN3@MyRandomiz:
  00084	66		 DB	 102			; 00000066H
  00085	69		 DB	 105			; 00000069H
  00086	6c		 DB	 108			; 0000006cH
  00087	65		 DB	 101			; 00000065H
  00088	54		 DB	 84			; 00000054H
  00089	69		 DB	 105			; 00000069H
  0008a	6d		 DB	 109			; 0000006dH
  0008b	65		 DB	 101			; 00000065H
  0008c	00		 DB	 0
?MyRandomize@CNewBoxesDoc@@QAEXXZ ENDP			; CNewBoxesDoc::MyRandomize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?MyRandom@CNewBoxesDoc@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?MyRandom@CNewBoxesDoc@@QAEII@Z PROC			; CNewBoxesDoc::MyRandom, COMDAT
; _this$ = ecx

; 161  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  :     m_random = m_random*0xbb40e62d + 11;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	69 88 30 01 00
	00 2d e6 40 bb	 imul	 ecx, DWORD PTR [eax+304], -1153374675
  00014	83 c1 0b	 add	 ecx, 11			; 0000000bH
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 8a 30 01 00
	00		 mov	 DWORD PTR [edx+304], ecx

; 163  :     return (m_random>>13)% n;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [eax+304]
  00029	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0002c	33 d2		 xor	 edx, edx
  0002e	f7 75 08	 div	 DWORD PTR _n$[ebp]
  00031	8b c2		 mov	 eax, edx

; 164  :   }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?MyRandom@CNewBoxesDoc@@QAEII@Z ENDP			; CNewBoxesDoc::MyRandom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?EraseMoveHistory@CNewBoxesDoc@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?EraseMoveHistory@CNewBoxesDoc@@QAEXXZ PROC		; CNewBoxesDoc::EraseMoveHistory, COMDAT
; _this$ = ecx

; 153  :   void EraseMoveHistory(void){m_moveHistory.Erase();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 68 01 00
	00		 add	 ecx, 360		; 00000168H
  00017	e8 00 00 00 00	 call	 ?Erase@MOVE_HISTORY@@QAEXXZ ; MOVE_HISTORY::Erase
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?EraseMoveHistory@CNewBoxesDoc@@QAEXXZ ENDP		; CNewBoxesDoc::EraseMoveHistory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
?HorizontalDivideWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z PROC ; CNewBoxesDoc::HorizontalDivideWeight
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 349  :   return m_pGame->HorizontalDivideWeight(dotNum);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  0001f	e8 00 00 00 00	 call	 ?HorizontalDivideWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ; DOTS_AND_BOXES::HorizontalDivideWeight

; 350  : }

  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?HorizontalDivideWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z ENDP ; CNewBoxesDoc::HorizontalDivideWeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
?VerticalDivideWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z PROC ; CNewBoxesDoc::VerticalDivideWeight
; _this$ = ecx

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :   return m_pGame->VerticalDivideWeight(dotNum);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  0001f	e8 00 00 00 00	 call	 ?VerticalDivideWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ; DOTS_AND_BOXES::VerticalDivideWeight

; 345  : }

  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?VerticalDivideWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z ENDP ; CNewBoxesDoc::VerticalDivideWeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
?HorizontalLoopWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z PROC ; CNewBoxesDoc::HorizontalLoopWeight
; _this$ = ecx

; 338  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 339  :   return m_pGame->HorizontalLoopWeight(dotNum);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  0001f	e8 00 00 00 00	 call	 ?HorizontalLoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ; DOTS_AND_BOXES::HorizontalLoopWeight

; 340  : }

  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?HorizontalLoopWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z ENDP ; CNewBoxesDoc::HorizontalLoopWeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
?VerticalLoopWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z PROC ; CNewBoxesDoc::VerticalLoopWeight
; _this$ = ecx

; 333  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 334  :   return m_pGame->VerticalLoopWeight(dotNum);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  0001f	e8 00 00 00 00	 call	 ?VerticalLoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ; DOTS_AND_BOXES::VerticalLoopWeight

; 335  : }

  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?VerticalLoopWeight@CNewBoxesDoc@@QAEHUtagPOINT@@@Z ENDP ; CNewBoxesDoc::VerticalLoopWeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv90 = -32						; size = 4
$T1 = -28						; size = 8
_score$ = -16						; size = 8
_this$ = -4						; size = 4
?IsMoveAvailable@CNewBoxesDoc@@QBE_NXZ PROC		; CNewBoxesDoc::IsMoveAvailable
; _this$ = ecx

; 392  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000d	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00010	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00013	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00016	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00019	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001c	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001f	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00022	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00025	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 393  :   VECTOR score;

  00028	8d 4d f0	 lea	 ecx, DWORD PTR _score$[ebp]
  0002b	e8 00 00 00 00	 call	 ??0VECTOR@@QAE@XZ	; VECTOR::VECTOR

; 394  :   score = Score();

  00030	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  00033	50		 push	 eax
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	e8 00 00 00 00	 call	 ?Score@CNewBoxesDoc@@QBE?AVVECTOR@@XZ ; CNewBoxesDoc::Score
  0003c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00041	89 4d f0	 mov	 DWORD PTR _score$[ebp], ecx
  00044	89 55 f4	 mov	 DWORD PTR _score$[ebp+4], edx

; 395  :   return score.x + score.y < (m_pGame->Width()-1)*(m_pGame->Height()-1);

  00047	8b 75 f0	 mov	 esi, DWORD PTR _score$[ebp]
  0004a	03 75 f4	 add	 esi, DWORD PTR _score$[ebp+4]
  0004d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 88 28 36 00
	00		 mov	 ecx, DWORD PTR [eax+13864]
  00056	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  0005b	8b f8		 mov	 edi, eax
  0005d	83 ef 01	 sub	 edi, 1
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  00069	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0006e	83 e8 01	 sub	 eax, 1
  00071	0f af f8	 imul	 edi, eax
  00074	3b f7		 cmp	 esi, edi
  00076	7d 09		 jge	 SHORT $LN3@IsMoveAvai
  00078	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  0007f	eb 07		 jmp	 SHORT $LN4@IsMoveAvai
$LN3@IsMoveAvai:
  00081	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv90[ebp], 0
$LN4@IsMoveAvai:
  00088	0f b6 45 e0	 movzx	 eax, BYTE PTR tv90[ebp]

; 396  : }

  0008c	52		 push	 edx
  0008d	8b cd		 mov	 ecx, ebp
  0008f	50		 push	 eax
  00090	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@IsMoveAvai
  00096	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009b	58		 pop	 eax
  0009c	5a		 pop	 edx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	83 c4 20	 add	 esp, 32			; 00000020H
  000a2	3b ec		 cmp	 ebp, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c3		 ret	 0
  000ad	0f 1f 00	 npad	 3
$LN7@IsMoveAvai:
  000b0	01 00 00 00	 DD	 1
  000b4	00 00 00 00	 DD	 $LN6@IsMoveAvai
$LN6@IsMoveAvai:
  000b8	f0 ff ff ff	 DD	 -16			; fffffff0H
  000bc	08 00 00 00	 DD	 8
  000c0	00 00 00 00	 DD	 $LN5@IsMoveAvai
$LN5@IsMoveAvai:
  000c4	73		 DB	 115			; 00000073H
  000c5	63		 DB	 99			; 00000063H
  000c6	6f		 DB	 111			; 0000006fH
  000c7	72		 DB	 114			; 00000072H
  000c8	65		 DB	 101			; 00000065H
  000c9	00		 DB	 0
?IsMoveAvailable@CNewBoxesDoc@@QBE_NXZ ENDP		; CNewBoxesDoc::IsMoveAvailable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?NimstringValueToVerify@CNewBoxesDoc@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_v$ = 8							; size = 4
?NimstringValueToVerify@CNewBoxesDoc@@QAEXH@Z PROC	; CNewBoxesDoc::NimstringValueToVerify, COMDAT
; _this$ = ecx

; 131  :   void NimstringValueToVerify(int v){m_nimstringValueToVerify=v;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _v$[ebp]
  0000d	89 88 3c 01 00
	00		 mov	 DWORD PTR [eax+316], ecx
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?NimstringValueToVerify@CNewBoxesDoc@@QAEXH@Z ENDP	; CNewBoxesDoc::NimstringValueToVerify
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
_mt$ = 8						; size = 4
?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z PROC	; CNewBoxesDoc::AI_Option
; _this$ = ecx

; 371  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 372  :   return (m_aiOptions & (1<<mt)) != 0;

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	8b 4d 08	 mov	 ecx, DWORD PTR _mt$[ebp]
  00011	d3 e0		 shl	 eax, cl
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	23 81 2c 01 00
	00		 and	 eax, DWORD PTR [ecx+300]
  0001c	74 09		 je	 SHORT $LN3@AI_Option
  0001e	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv68[ebp], 1
  00025	eb 07		 jmp	 SHORT $LN4@AI_Option
$LN3@AI_Option:
  00027	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@AI_Option:
  0002e	0f b6 45 f8	 movzx	 eax, BYTE PTR tv68[ebp]

; 373  : }

  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ENDP	; CNewBoxesDoc::AI_Option
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_mt$ = 8						; size = 4
_value$ = 12						; size = 4
?AI_Option@CNewBoxesDoc@@QAEXW4MOVE_TYPE@@H@Z PROC	; CNewBoxesDoc::AI_Option
; _this$ = ecx

; 376  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 377  :   if (value)

  0000f	83 7d 0c 00	 cmp	 DWORD PTR _value$[ebp], 0
  00013	74 56		 je	 SHORT $LN2@AI_Option

; 378  :   {
; 379  :     if ((m_aiOptions & (1 << mt)) != 0) return;

  00015	b8 01 00 00 00	 mov	 eax, 1
  0001a	8b 4d 08	 mov	 ecx, DWORD PTR _mt$[ebp]
  0001d	d3 e0		 shl	 eax, cl
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	23 81 2c 01 00
	00		 and	 eax, DWORD PTR [ecx+300]
  00028	74 05		 je	 SHORT $LN4@AI_Option
  0002a	e9 8f 00 00 00	 jmp	 $LN1@AI_Option
$LN4@AI_Option:

; 380  :     MODIFY

  0002f	8b f4		 mov	 esi, esp
  00031	6a 01		 push	 1
  00033	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00039	8b 02		 mov	 eax, DWORD PTR [edx]
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00041	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00044	ff d2		 call	 edx
  00046	3b f4		 cmp	 esi, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 381  :     m_aiOptions |= (1 << mt);

  0004d	b8 01 00 00 00	 mov	 eax, 1
  00052	8b 4d 08	 mov	 ecx, DWORD PTR _mt$[ebp]
  00055	d3 e0		 shl	 eax, cl
  00057	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005a	0b 81 2c 01 00
	00		 or	 eax, DWORD PTR [ecx+300]
  00060	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00063	89 82 2c 01 00
	00		 mov	 DWORD PTR [edx+300], eax

; 382  :   }

  00069	eb 53		 jmp	 SHORT $LN1@AI_Option
$LN2@AI_Option:

; 383  :   else
; 384  :   {
; 385  :     if ((m_aiOptions & (1 << mt)) == 0) return;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	8b 4d 08	 mov	 ecx, DWORD PTR _mt$[ebp]
  00073	d3 e0		 shl	 eax, cl
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	23 81 2c 01 00
	00		 and	 eax, DWORD PTR [ecx+300]
  0007e	75 02		 jne	 SHORT $LN5@AI_Option
  00080	eb 3c		 jmp	 SHORT $LN1@AI_Option
$LN5@AI_Option:

; 386  :     MODIFY

  00082	8b f4		 mov	 esi, esp
  00084	6a 01		 push	 1
  00086	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0008c	8b 02		 mov	 eax, DWORD PTR [edx]
  0008e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00094	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  00097	ff d2		 call	 edx
  00099	3b f4		 cmp	 esi, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 387  :     m_aiOptions &= ~(1 << mt);

  000a0	b8 01 00 00 00	 mov	 eax, 1
  000a5	8b 4d 08	 mov	 ecx, DWORD PTR _mt$[ebp]
  000a8	d3 e0		 shl	 eax, cl
  000aa	f7 d0		 not	 eax
  000ac	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000af	23 81 2c 01 00
	00		 and	 eax, DWORD PTR [ecx+300]
  000b5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b8	89 82 2c 01 00
	00		 mov	 DWORD PTR [edx+300], eax
$LN1@AI_Option:

; 388  :   };
; 389  : }

  000be	5e		 pop	 esi
  000bf	83 c4 04	 add	 esp, 4
  000c2	3b ec		 cmp	 ebp, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c2 08 00	 ret	 8
?AI_Option@CNewBoxesDoc@@QAEXW4MOVE_TYPE@@H@Z ENDP	; CNewBoxesDoc::AI_Option
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv84 = -32						; size = 4
_result$ = -24						; size = 8
_col$ = -12						; size = 4
_row$ = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Score@CNewBoxesDoc@@QBE?AVVECTOR@@XZ PROC		; CNewBoxesDoc::Score
; _this$ = ecx

; 353  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 354  :   int row, col;
; 355  :   VECTOR result(0,0);

  00026	6a 00		 push	 0
  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR _result$[ebp]
  0002d	e8 00 00 00 00	 call	 ??0VECTOR@@QAE@HH@Z	; VECTOR::VECTOR

; 356  :   for (row=0; row<m_pGame->Height()-1; row++)

  00032	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  00039	eb 09		 jmp	 SHORT $LN4@Score
$LN2@Score:
  0003b	8b 45 f8	 mov	 eax, DWORD PTR _row$[ebp]
  0003e	83 c0 01	 add	 eax, 1
  00041	89 45 f8	 mov	 DWORD PTR _row$[ebp], eax
$LN4@Score:
  00044	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00047	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  0004d	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  00052	83 e8 01	 sub	 eax, 1
  00055	39 45 f8	 cmp	 DWORD PTR _row$[ebp], eax
  00058	7d 6a		 jge	 SHORT $LN3@Score

; 357  :   {
; 358  :     for (col=0; col<m_pGame->Width()-1; col++)

  0005a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  00061	eb 09		 jmp	 SHORT $LN7@Score
$LN5@Score:
  00063	8b 55 f4	 mov	 edx, DWORD PTR _col$[ebp]
  00066	83 c2 01	 add	 edx, 1
  00069	89 55 f4	 mov	 DWORD PTR _col$[ebp], edx
$LN7@Score:
  0006c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 88 28 36 00
	00		 mov	 ecx, DWORD PTR [eax+13864]
  00075	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  0007a	83 e8 01	 sub	 eax, 1
  0007d	39 45 f4	 cmp	 DWORD PTR _col$[ebp], eax
  00080	7d 3d		 jge	 SHORT $LN6@Score

; 359  :     {
; 360  :       switch (m_pGame->BoxOwner(col, row))

  00082	8b 4d f8	 mov	 ecx, DWORD PTR _row$[ebp]
  00085	51		 push	 ecx
  00086	8b 55 f4	 mov	 edx, DWORD PTR _col$[ebp]
  00089	52		 push	 edx
  0008a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0008d	8b 88 28 36 00
	00		 mov	 ecx, DWORD PTR [eax+13864]
  00093	e8 00 00 00 00	 call	 ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z ; DOTS_AND_BOXES::BoxOwner
  00098	89 45 e0	 mov	 DWORD PTR tv84[ebp], eax
  0009b	83 7d e0 01	 cmp	 DWORD PTR tv84[ebp], 1
  0009f	74 13		 je	 SHORT $LN11@Score
  000a1	83 7d e0 02	 cmp	 DWORD PTR tv84[ebp], 2
  000a5	74 02		 je	 SHORT $LN10@Score
  000a7	eb 14		 jmp	 SHORT $LN8@Score
$LN10@Score:

; 361  :       {
; 362  :       case OWNER_COMPUTER: result.y++; break;

  000a9	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp+4]
  000ac	83 c1 01	 add	 ecx, 1
  000af	89 4d ec	 mov	 DWORD PTR _result$[ebp+4], ecx
  000b2	eb 09		 jmp	 SHORT $LN8@Score
$LN11@Score:

; 363  :       case OWNER_HUMAN:    result.x++; break;

  000b4	8b 55 e8	 mov	 edx, DWORD PTR _result$[ebp]
  000b7	83 c2 01	 add	 edx, 1
  000ba	89 55 e8	 mov	 DWORD PTR _result$[ebp], edx
$LN8@Score:

; 364  :       };
; 365  :     };

  000bd	eb a4		 jmp	 SHORT $LN5@Score
$LN6@Score:

; 366  :   };

  000bf	e9 77 ff ff ff	 jmp	 $LN2@Score
$LN3@Score:

; 367  :   return result;

  000c4	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  000c7	8b 4d e8	 mov	 ecx, DWORD PTR _result$[ebp]
  000ca	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp+4]
  000cd	89 08		 mov	 DWORD PTR [eax], ecx
  000cf	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000d2	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 368  : }

  000d5	52		 push	 edx
  000d6	8b cd		 mov	 ecx, ebp
  000d8	50		 push	 eax
  000d9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@Score
  000df	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e4	58		 pop	 eax
  000e5	5a		 pop	 edx
  000e6	83 c4 20	 add	 esp, 32			; 00000020H
  000e9	3b ec		 cmp	 ebp, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 04 00	 ret	 4
  000f6	66 90		 npad	 2
$LN15@Score:
  000f8	01 00 00 00	 DD	 1
  000fc	00 00 00 00	 DD	 $LN14@Score
$LN14@Score:
  00100	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00104	08 00 00 00	 DD	 8
  00108	00 00 00 00	 DD	 $LN13@Score
$LN13@Score:
  0010c	72		 DB	 114			; 00000072H
  0010d	65		 DB	 101			; 00000065H
  0010e	73		 DB	 115			; 00000073H
  0010f	75		 DB	 117			; 00000075H
  00110	6c		 DB	 108			; 0000006cH
  00111	74		 DB	 116			; 00000074H
  00112	00		 DB	 0
?Score@CNewBoxesDoc@@QBE?AVVECTOR@@XZ ENDP		; CNewBoxesDoc::Score
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_numLine$ = -8						; size = 4
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
?IncrementBoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z PROC ; CNewBoxesDoc::IncrementBoxOwner
; _this$ = ecx

; 316  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 317  :   int numLine;
; 318  :   MODIFY

  00018	8b f4		 mov	 esi, esp
  0001a	6a 01		 push	 1
  0001c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00029	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0002c	ff d0		 call	 eax
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 319  :   numLine = m_pGame->CountLines(dotNum);

  00035	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00038	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0003b	52		 push	 edx
  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	50		 push	 eax
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  00048	e8 00 00 00 00	 call	 ?CountLines@DOTS_AND_BOXES@@QBEHUtagPOINT@@@Z ; DOTS_AND_BOXES::CountLines
  0004d	89 45 f8	 mov	 DWORD PTR _numLine$[ebp], eax

; 320  :   if (numLine < 4) 

  00050	83 7d f8 04	 cmp	 DWORD PTR _numLine$[ebp], 4
  00054	7d 16		 jge	 SHORT $LN2@IncrementB

; 321  :   {
; 322  :     m_pGame->SetBoxOwner(dotNum, OWNER_NONE);

  00056	6a 00		 push	 0
  00058	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  0005b	52		 push	 edx
  0005c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005f	8b 88 28 36 00
	00		 mov	 ecx, DWORD PTR [eax+13864]
  00065	e8 00 00 00 00	 call	 ?SetBoxOwner@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; DOTS_AND_BOXES::SetBoxOwner

; 323  :     return;

  0006a	eb 6c		 jmp	 SHORT $LN1@IncrementB
$LN2@IncrementB:

; 324  :   };
; 325  :   m_pGame->SetBoxOwner(dotNum, NextOwnerType(m_pGame->BoxOwner(dotNum)));

  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  0006f	51		 push	 ecx
  00070	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00073	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  00079	e8 00 00 00 00	 call	 ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::BoxOwner
  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ?NextOwnerType@@YA?AW4OWNER_TYPE@@W41@@Z ; NextOwnerType
  00084	83 c4 04	 add	 esp, 4
  00087	50		 push	 eax
  00088	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  0008b	50		 push	 eax
  0008c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008f	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  00095	e8 00 00 00 00	 call	 ?SetBoxOwner@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; DOTS_AND_BOXES::SetBoxOwner

; 326  :   if (BoxOwner(dotNum) == OWNER_NONE)

  0009a	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  0009d	52		 push	 edx
  0009e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	e8 00 00 00 00	 call	 ?BoxOwner@CNewBoxesDoc@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::BoxOwner
  000a6	85 c0		 test	 eax, eax
  000a8	75 2e		 jne	 SHORT $LN1@IncrementB

; 327  :   {
; 328  :     m_pGame->SetBoxOwner(dotNum, NextOwnerType(m_pGame->BoxOwner(dotNum)));

  000aa	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  000ad	50		 push	 eax
  000ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b1	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  000b7	e8 00 00 00 00	 call	 ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::BoxOwner
  000bc	50		 push	 eax
  000bd	e8 00 00 00 00	 call	 ?NextOwnerType@@YA?AW4OWNER_TYPE@@W41@@Z ; NextOwnerType
  000c2	83 c4 04	 add	 esp, 4
  000c5	50		 push	 eax
  000c6	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  000c9	52		 push	 edx
  000ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	8b 88 28 36 00
	00		 mov	 ecx, DWORD PTR [eax+13864]
  000d3	e8 00 00 00 00	 call	 ?SetBoxOwner@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; DOTS_AND_BOXES::SetBoxOwner
$LN1@IncrementB:

; 329  :   };
; 330  : }

  000d8	5e		 pop	 esi
  000d9	83 c4 08	 add	 esp, 8
  000dc	3b ec		 cmp	 ebp, esp
  000de	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e3	8b e5		 mov	 esp, ebp
  000e5	5d		 pop	 ebp
  000e6	c2 04 00	 ret	 4
?IncrementBoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z ENDP ; CNewBoxesDoc::IncrementBoxOwner
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
?IncrementVLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z PROC ; CNewBoxesDoc::IncrementVLineType
; _this$ = ecx

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 299  :   MODIFY

  0000f	8b f4		 mov	 esi, esp
  00011	6a 01		 push	 1
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00020	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00023	ff d0		 call	 eax
  00025	3b f4		 cmp	 esi, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 300  :   m_pGame->SetVLineType(dotNum, NextLineType(m_pGame->VLineType(dotNum)));

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  00039	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::VLineType
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?NextLineType@@YA?AW4LINE_TYPE@@W41@@Z ; NextLineType
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  00055	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType

; 301  : }

  0005a	5e		 pop	 esi
  0005b	83 c4 04	 add	 esp, 4
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?IncrementVLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z ENDP ; CNewBoxesDoc::IncrementVLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
?IncrementHLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z PROC ; CNewBoxesDoc::IncrementHLineType
; _this$ = ecx

; 275  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 276  :   MODIFY

  0000f	8b f4		 mov	 esi, esp
  00011	6a 01		 push	 1
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00018	8b 10		 mov	 edx, DWORD PTR [eax]
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00020	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00023	ff d0		 call	 eax
  00025	3b f4		 cmp	 esi, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 277  :   m_pGame->SetHLineType(dotNum, NextLineType(m_pGame->HLineType(dotNum)));

  0002c	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  00039	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::HLineType
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?NextLineType@@YA?AW4LINE_TYPE@@W41@@Z ; NextLineType
  00044	83 c4 04	 add	 esp, 4
  00047	50		 push	 eax
  00048	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  00055	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType

; 278  : }

  0005a	5e		 pop	 esi
  0005b	83 c4 04	 add	 esp, 4
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?IncrementHLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z ENDP ; CNewBoxesDoc::IncrementHLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_ot$ = 12						; size = 4
?BoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z PROC ; CNewBoxesDoc::BoxOwner
; _this$ = ecx

; 309  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 310  :   if (m_pGame->BoxOwner(p) == ot) return;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  0001c	e8 00 00 00 00	 call	 ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::BoxOwner
  00021	3b 45 0c	 cmp	 eax, DWORD PTR _ot$[ebp]
  00024	75 02		 jne	 SHORT $LN2@BoxOwner
  00026	eb 34		 jmp	 SHORT $LN1@BoxOwner
$LN2@BoxOwner:

; 311  :   MODIFY

  00028	8b f4		 mov	 esi, esp
  0002a	6a 01		 push	 1
  0002c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0003a	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  0003d	ff d2		 call	 edx
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 312  :   m_pGame->SetBoxOwner(p, ot);

  00046	8b 45 0c	 mov	 eax, DWORD PTR _ot$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0004d	51		 push	 ecx
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00051	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  00057	e8 00 00 00 00	 call	 ?SetBoxOwner@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; DOTS_AND_BOXES::SetBoxOwner
$LN1@BoxOwner:

; 313  : }

  0005c	5e		 pop	 esi
  0005d	83 c4 04	 add	 esp, 4
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
?BoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ENDP ; CNewBoxesDoc::BoxOwner
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?BoxOwner@CNewBoxesDoc@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z PROC ; CNewBoxesDoc::BoxOwner
; _this$ = ecx

; 304  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 305  :   return m_pGame->BoxOwner(p);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  0001b	e8 00 00 00 00	 call	 ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::BoxOwner

; 306  : }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?BoxOwner@CNewBoxesDoc@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ENDP ; CNewBoxesDoc::BoxOwner
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_lt$ = 12						; size = 4
?VerticalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z PROC ; CNewBoxesDoc::VerticalLineType
; _this$ = ecx

; 291  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 292  :   if (m_pGame->VLineType(p) == lt) return;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  0001c	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::VLineType
  00021	3b 45 0c	 cmp	 eax, DWORD PTR _lt$[ebp]
  00024	75 02		 jne	 SHORT $LN2@VerticalLi
  00026	eb 34		 jmp	 SHORT $LN1@VerticalLi
$LN2@VerticalLi:

; 293  :   MODIFY

  00028	8b f4		 mov	 esi, esp
  0002a	6a 01		 push	 1
  0002c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0003a	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  0003d	ff d2		 call	 edx
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 294  :   m_pGame->SetVLineType(p, lt);

  00046	8b 45 0c	 mov	 eax, DWORD PTR _lt$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0004d	51		 push	 ecx
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00051	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  00057	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType
$LN1@VerticalLi:

; 295  : }

  0005c	5e		 pop	 esi
  0005d	83 c4 04	 add	 esp, 4
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
?VerticalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ENDP ; CNewBoxesDoc::VerticalLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
_lt$ = 12						; size = 4
?HorizontalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z PROC ; CNewBoxesDoc::HorizontalLineType
; _this$ = ecx

; 268  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 269  :   if (m_pGame->HLineType(p) == lt) return;

  0000f	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00012	50		 push	 eax
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  0001c	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::HLineType
  00021	3b 45 0c	 cmp	 eax, DWORD PTR _lt$[ebp]
  00024	75 02		 jne	 SHORT $LN2@Horizontal
  00026	eb 34		 jmp	 SHORT $LN1@Horizontal
$LN2@Horizontal:

; 270  :   MODIFY

  00028	8b f4		 mov	 esi, esp
  0002a	6a 01		 push	 1
  0002c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00032	8b 02		 mov	 eax, DWORD PTR [edx]
  00034	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0003a	8b 50 6c	 mov	 edx, DWORD PTR [eax+108]
  0003d	ff d2		 call	 edx
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 271  :   m_pGame->SetHLineType(p, lt);

  00046	8b 45 0c	 mov	 eax, DWORD PTR _lt$[ebp]
  00049	50		 push	 eax
  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _p$[ebp]
  0004d	51		 push	 ecx
  0004e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00051	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  00057	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType
$LN1@Horizontal:

; 272  : }

  0005c	5e		 pop	 esi
  0005d	83 c4 04	 add	 esp, 4
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c2 08 00	 ret	 8
?HorizontalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ENDP ; CNewBoxesDoc::HorizontalLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@HH@Z PROC ; CNewBoxesDoc::VerticalLineType
; _this$ = ecx

; 286  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 287  :   return m_pGame->VLineType(x, y);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  0001f	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType

; 288  : }

  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@HH@Z ENDP ; CNewBoxesDoc::VerticalLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z PROC ; CNewBoxesDoc::VerticalLineType
; _this$ = ecx

; 281  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 282  :   return m_pGame->VLineType(dotNum);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  0001b	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::VLineType

; 283  : }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ENDP ; CNewBoxesDoc::VerticalLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@HH@Z PROC ; CNewBoxesDoc::HorizontalLineType
; _this$ = ecx

; 263  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 264  :   return m_pGame->HLineType(x, y);

  0000e	8b 45 0c	 mov	 eax, DWORD PTR _y$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00015	51		 push	 ecx
  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 8a 28 36 00
	00		 mov	 ecx, DWORD PTR [edx+13864]
  0001f	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType

; 265  : }

  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@HH@Z ENDP ; CNewBoxesDoc::HorizontalLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z PROC ; CNewBoxesDoc::HorizontalLineType
; _this$ = ecx

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 259  :   return m_pGame->HLineType(p);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  0001b	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::HLineType

; 260  : }

  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ENDP ; CNewBoxesDoc::HorizontalLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_line$ = 8						; size = 4
?InputParameter@CNewBoxesDoc@@QAEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CNewBoxesDoc::InputParameter
; _this$ = ecx

; 169  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 170  :   if (line.Find("=Analysis ") == 0) InputAnalysisParameter(line.Mid(10));

  00018	8b f4		 mov	 esi, esp
  0001a	6a 00		 push	 0
  0001c	68 00 00 00 00	 push	 OFFSET $SG226135
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Find@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBEHPBDH@Z
  0002a	3b f4		 cmp	 esi, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	85 c0		 test	 eax, eax
  00033	75 23		 jne	 SHORT $LN1@InputParam
  00035	51		 push	 ecx
  00036	8b c4		 mov	 eax, esp
  00038	89 65 f8	 mov	 DWORD PTR $T1[ebp], esp
  0003b	8b f4		 mov	 esi, esp
  0003d	6a 0a		 push	 10			; 0000000aH
  0003f	50		 push	 eax
  00040	8b 4d 08	 mov	 ecx, DWORD PTR _line$[ebp]
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Mid@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QBE?AV12@H@Z
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ; CNewBoxesDoc::InputAnalysisParameter
$LN1@InputParam:

; 171  : }

  00058	5e		 pop	 esi
  00059	83 c4 08	 add	 esp, 8
  0005c	3b ec		 cmp	 ebp, esp
  0005e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00063	8b e5		 mov	 esp, ebp
  00065	5d		 pop	 ebp
  00066	c2 04 00	 ret	 4
?InputParameter@CNewBoxesDoc@@QAEXAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CNewBoxesDoc::InputParameter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_line$ = 8						; size = 4
?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z PROC ; CNewBoxesDoc::InputAnalysisParameter
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  0001b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00020	33 c5		 xor	 eax, ebp
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 157  :   if (CheckAnalysisParameter(line, MT_RANDOM)) return;

  00036	6a 01		 push	 1
  00038	8d 45 08	 lea	 eax, DWORD PTR _line$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; CheckAnalysisParameter
  00041	83 c4 08	 add	 esp, 8
  00044	0f b6 c8	 movzx	 ecx, al
  00047	85 c9		 test	 ecx, ecx
  00049	74 1e		 je	 SHORT $LN2@InputAnaly
  0004b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00052	8b f4		 mov	 esi, esp
  00054	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	e9 a3 01 00 00	 jmp	 $LN1@InputAnaly
$LN2@InputAnaly:

; 158  :   if (CheckAnalysisParameter(line, MT_OBVIOUSCAPTURE)) return;

  00069	6a 02		 push	 2
  0006b	8d 55 08	 lea	 edx, DWORD PTR _line$[ebp]
  0006e	52		 push	 edx
  0006f	e8 00 00 00 00	 call	 ?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; CheckAnalysisParameter
  00074	83 c4 08	 add	 esp, 8
  00077	0f b6 c0	 movzx	 eax, al
  0007a	85 c0		 test	 eax, eax
  0007c	74 1e		 je	 SHORT $LN3@InputAnaly
  0007e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00085	8b f4		 mov	 esi, esp
  00087	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00090	3b f4		 cmp	 esi, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	e9 70 01 00 00	 jmp	 $LN1@InputAnaly
$LN3@InputAnaly:

; 159  :   if (CheckAnalysisParameter(line, MT_GIVENOTHING)) return;

  0009c	6a 03		 push	 3
  0009e	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  000a1	51		 push	 ecx
  000a2	e8 00 00 00 00	 call	 ?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; CheckAnalysisParameter
  000a7	83 c4 08	 add	 esp, 8
  000aa	0f b6 d0	 movzx	 edx, al
  000ad	85 d2		 test	 edx, edx
  000af	74 1e		 je	 SHORT $LN4@InputAnaly
  000b1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b8	8b f4		 mov	 esi, esp
  000ba	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  000bd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000c3	3b f4		 cmp	 esi, esp
  000c5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ca	e9 3d 01 00 00	 jmp	 $LN1@InputAnaly
$LN4@InputAnaly:

; 160  :   if (CheckAnalysisParameter(line, MT_GIVELITTLE)) return;

  000cf	6a 07		 push	 7
  000d1	8d 45 08	 lea	 eax, DWORD PTR _line$[ebp]
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; CheckAnalysisParameter
  000da	83 c4 08	 add	 esp, 8
  000dd	0f b6 c8	 movzx	 ecx, al
  000e0	85 c9		 test	 ecx, ecx
  000e2	74 1e		 je	 SHORT $LN5@InputAnaly
  000e4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000eb	8b f4		 mov	 esi, esp
  000ed	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000f6	3b f4		 cmp	 esi, esp
  000f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fd	e9 0a 01 00 00	 jmp	 $LN1@InputAnaly
$LN5@InputAnaly:

; 161  :   if (CheckAnalysisParameter(line, MT_GRABANYTHING)) return;

  00102	6a 08		 push	 8
  00104	8d 55 08	 lea	 edx, DWORD PTR _line$[ebp]
  00107	52		 push	 edx
  00108	e8 00 00 00 00	 call	 ?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; CheckAnalysisParameter
  0010d	83 c4 08	 add	 esp, 8
  00110	0f b6 c0	 movzx	 eax, al
  00113	85 c0		 test	 eax, eax
  00115	74 1e		 je	 SHORT $LN6@InputAnaly
  00117	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011e	8b f4		 mov	 esi, esp
  00120	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  00123	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00129	3b f4		 cmp	 esi, esp
  0012b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00130	e9 d7 00 00 00	 jmp	 $LN1@InputAnaly
$LN6@InputAnaly:

; 162  :   if (CheckAnalysisParameter(line, MT_SIMPLEWIN)) return;

  00135	6a 09		 push	 9
  00137	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  0013a	51		 push	 ecx
  0013b	e8 00 00 00 00	 call	 ?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; CheckAnalysisParameter
  00140	83 c4 08	 add	 esp, 8
  00143	0f b6 d0	 movzx	 edx, al
  00146	85 d2		 test	 edx, edx
  00148	74 1e		 je	 SHORT $LN7@InputAnaly
  0014a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00151	8b f4		 mov	 esi, esp
  00153	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0015c	3b f4		 cmp	 esi, esp
  0015e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00163	e9 a4 00 00 00	 jmp	 $LN1@InputAnaly
$LN7@InputAnaly:

; 163  :   if (CheckAnalysisParameter(line, MT_VERIFYNIMSTRINGVALUE)) return;

  00168	6a 10		 push	 16			; 00000010H
  0016a	8d 45 08	 lea	 eax, DWORD PTR _line$[ebp]
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; CheckAnalysisParameter
  00173	83 c4 08	 add	 esp, 8
  00176	0f b6 c8	 movzx	 ecx, al
  00179	85 c9		 test	 ecx, ecx
  0017b	74 1b		 je	 SHORT $LN8@InputAnaly
  0017d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00184	8b f4		 mov	 esi, esp
  00186	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  00189	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0018f	3b f4		 cmp	 esi, esp
  00191	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00196	eb 74		 jmp	 SHORT $LN1@InputAnaly
$LN8@InputAnaly:

; 164  :   if (CheckAnalysisParameter(line, MT_NIMVAL)) return;

  00198	6a 0d		 push	 13			; 0000000dH
  0019a	8d 55 08	 lea	 edx, DWORD PTR _line$[ebp]
  0019d	52		 push	 edx
  0019e	e8 00 00 00 00	 call	 ?CheckAnalysisParameter@@YA_NAAV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@W4MOVE_TYPE@@@Z ; CheckAnalysisParameter
  001a3	83 c4 08	 add	 esp, 8
  001a6	0f b6 c0	 movzx	 eax, al
  001a9	85 c0		 test	 eax, eax
  001ab	74 1b		 je	 SHORT $LN9@InputAnaly
  001ad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001b4	8b f4		 mov	 esi, esp
  001b6	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  001b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001bf	3b f4		 cmp	 esi, esp
  001c1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c6	eb 44		 jmp	 SHORT $LN1@InputAnaly
$LN9@InputAnaly:

; 165  :   MessageBox(NULL,"Unknown Analysis Parameter",line,MB_OK);

  001c8	8b f4		 mov	 esi, esp
  001ca	6a 00		 push	 0
  001cc	8b fc		 mov	 edi, esp
  001ce	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  001d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  001d7	3b fc		 cmp	 edi, esp
  001d9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001de	50		 push	 eax
  001df	68 00 00 00 00	 push	 OFFSET $SG226127
  001e4	6a 00		 push	 0
  001e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  001ec	3b f4		 cmp	 esi, esp
  001ee	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 166  : }

  001f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001fa	8b f4		 mov	 esi, esp
  001fc	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  001ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00205	3b f4		 cmp	 esi, esp
  00207	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@InputAnaly:
  0020c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0020f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00216	59		 pop	 ecx
  00217	5f		 pop	 edi
  00218	5e		 pop	 esi
  00219	83 c4 10	 add	 esp, 16			; 00000010H
  0021c	3b ec		 cmp	 ebp, esp
  0021e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00223	8b e5		 mov	 esp, ebp
  00225	5d		 pop	 ebp
  00226	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d 08	 lea	 ecx, DWORD PTR _line$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?InputAnalysisParameter@CNewBoxesDoc@@QAEXV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@@Z ENDP ; CNewBoxesDoc::InputAnalysisParameter
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?SetRandom@CNewBoxesDoc@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 4
?SetRandom@CNewBoxesDoc@@QAEXI@Z PROC			; CNewBoxesDoc::SetRandom, COMDAT
; _this$ = ecx

; 112  :   void SetRandom(ui32 r){m_random = r;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _r$[ebp]
  0000d	89 88 30 01 00
	00		 mov	 DWORD PTR [eax+304], ecx
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?SetRandom@CNewBoxesDoc@@QAEXI@Z ENDP			; CNewBoxesDoc::SetRandom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?CurrentRandomSeed@CNewBoxesDoc@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 4
?CurrentRandomSeed@CNewBoxesDoc@@QAEXI@Z PROC		; CNewBoxesDoc::CurrentRandomSeed, COMDAT
; _this$ = ecx

; 110  :   void CurrentRandomSeed(ui32 r){m_currentRandomSeed = r*1213141517;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	69 45 08 0d 12
	4f 48		 imul	 eax, DWORD PTR _r$[ebp], 1213141517
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
?CurrentRandomSeed@CNewBoxesDoc@@QAEXI@Z ENDP		; CNewBoxesDoc::CurrentRandomSeed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?CurrentRandomize@CNewBoxesDoc@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_r$ = 8							; size = 1
?CurrentRandomize@CNewBoxesDoc@@QAEX_N@Z PROC		; CNewBoxesDoc::CurrentRandomize, COMDAT
; _this$ = ecx

; 108  :   void CurrentRandomize(bool r){m_currentRandomize = r;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8a 4d 08	 mov	 cl, BYTE PTR _r$[ebp]
  0000d	88 88 38 01 00
	00		 mov	 BYTE PTR [eax+312], cl
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
?CurrentRandomize@CNewBoxesDoc@@QAEX_N@Z ENDP		; CNewBoxesDoc::CurrentRandomize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?GameSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ
_TEXT	SEGMENT
_p$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GameSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ PROC		; CNewBoxesDoc::GameSize, COMDAT
; _this$ = ecx

; 75   :   POINT GameSize(void){POINT p={m_pGame->Width(),m_pGame->Height()};return p;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 88 28 36 00
	00		 mov	 ecx, DWORD PTR [eax+13864]
  00026	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  0002b	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  00037	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0003c	89 45 f4	 mov	 DWORD PTR _p$[ebp+4], eax
  0003f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00042	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  00045	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp+4]
  00048	89 02		 mov	 DWORD PTR [edx], eax
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0004d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00050	52		 push	 edx
  00051	8b cd		 mov	 ecx, ebp
  00053	50		 push	 eax
  00054	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@GameSize
  0005a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0005f	58		 pop	 eax
  00060	5a		 pop	 edx
  00061	83 c4 14	 add	 esp, 20			; 00000014H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
  00071	0f 1f 00	 npad	 3
$LN5@GameSize:
  00074	01 00 00 00	 DD	 1
  00078	00 00 00 00	 DD	 $LN4@GameSize
$LN4@GameSize:
  0007c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00080	08 00 00 00	 DD	 8
  00084	00 00 00 00	 DD	 $LN3@GameSize
$LN3@GameSize:
  00088	70		 DB	 112			; 00000070H
  00089	00		 DB	 0
?GameSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ ENDP		; CNewBoxesDoc::GameSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
tv81 = -24						; size = 4
$T2 = -20						; size = 4
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ PROC	; CNewBoxesDoc::CreateObject

; 28   : IMPLEMENT_DYNCREATE(CNewBoxesDoc, CDocument)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	c7 45 e8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-24], -858993460 ; ccccccccH
  0001b	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  00022	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002e	33 c5		 xor	 eax, ebp
  00030	50		 push	 eax
  00031	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00034	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003a	6a 1c		 push	 28			; 0000001cH
  0003c	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00041	68 2c 36 00 00	 push	 13868			; 0000362cH
  00046	e8 00 00 00 00	 call	 ??2CObject@@SGPAXIPBDH@Z ; CObject::operator new
  0004b	89 45 ec	 mov	 DWORD PTR $T2[ebp], eax
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00055	83 7d ec 00	 cmp	 DWORD PTR $T2[ebp], 0
  00059	74 0d		 je	 SHORT $LN3@CreateObje
  0005b	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp]
  0005e	e8 00 00 00 00	 call	 ??0CNewBoxesDoc@@IAE@XZ	; CNewBoxesDoc::CNewBoxesDoc
  00063	89 45 e8	 mov	 DWORD PTR tv81[ebp], eax
  00066	eb 07		 jmp	 SHORT $LN4@CreateObje
$LN3@CreateObje:
  00068	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR tv81[ebp], 0
$LN4@CreateObje:
  0006f	8b 45 e8	 mov	 eax, DWORD PTR tv81[ebp]
  00072	89 45 f0	 mov	 DWORD PTR $T3[ebp], eax
  00075	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007c	8b 45 f0	 mov	 eax, DWORD PTR $T3[ebp]
  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	83 c4 18	 add	 esp, 24			; 00000018H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ$0:
  00000	6a 1c		 push	 28			; 0000001cH
  00002	68 00 00 00 00	 push	 OFFSET ?THIS_FILE@@3PADA
  00007	8b 45 ec	 mov	 eax, DWORD PTR $T2[ebp]
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3CObject@@SGXPAXPBDH@Z ; CObject::operator delete
  00010	c3		 ret	 0
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
__ehhandler$?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ:
  00016	90		 npad	 1
  00017	90		 npad	 1
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ
  0002e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateObject@CNewBoxesDoc@@SGPAVCObject@@XZ ENDP	; CNewBoxesDoc::CreateObject
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRuntimeClass@CNewBoxesDoc@@UBEPAUCRuntimeClass@@XZ PROC ; CNewBoxesDoc::GetRuntimeClass
; _this$ = ecx

; 28   : IMPLEMENT_DYNCREATE(CNewBoxesDoc, CDocument)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 00 00 00 00	 mov	 eax, OFFSET ?classCNewBoxesDoc@CNewBoxesDoc@@2UCRuntimeClass@@B ; CNewBoxesDoc::classCNewBoxesDoc
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?GetRuntimeClass@CNewBoxesDoc@@UBEPAUCRuntimeClass@@XZ ENDP ; CNewBoxesDoc::GetRuntimeClass
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
?GetThisClass@CNewBoxesDoc@@SGPAUCRuntimeClass@@XZ PROC	; CNewBoxesDoc::GetThisClass

; 28   : IMPLEMENT_DYNCREATE(CNewBoxesDoc, CDocument)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?classCNewBoxesDoc@CNewBoxesDoc@@2UCRuntimeClass@@B ; CNewBoxesDoc::classCNewBoxesDoc
  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
?GetThisClass@CNewBoxesDoc@@SGPAUCRuntimeClass@@XZ ENDP	; CNewBoxesDoc::GetThisClass
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
?_GetBaseClass@CNewBoxesDoc@@KGPAUCRuntimeClass@@XZ PROC ; CNewBoxesDoc::_GetBaseClass

; 28   : IMPLEMENT_DYNCREATE(CNewBoxesDoc, CDocument)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	e8 00 00 00 00	 call	 ?GetThisClass@CDocument@@SGPAUCRuntimeClass@@XZ ; CDocument::GetThisClass
  00008	3b ec		 cmp	 ebp, esp
  0000a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?_GetBaseClass@CNewBoxesDoc@@KGPAUCRuntimeClass@@XZ ENDP ; CNewBoxesDoc::_GetBaseClass
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CNewBoxesDoc@@IAE@XZ PROC				; CNewBoxesDoc::CNewBoxesDoc
; _this$ = ecx

; 41   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CNewBoxesDoc@@IAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0CDocument@@QAE@XZ	; CDocument::CDocument
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CNewBoxesDoc@@6B@
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	81 c1 68 01 00
	00		 add	 ecx, 360		; 00000168H
  0004e	e8 00 00 00 00	 call	 ??0MOVE_HISTORY@@QAE@XZ	; MOVE_HISTORY::MOVE_HISTORY

; 42   : 	// TODO: add one-time construction code here
; 43   :   m_pGame = NULL;

  00053	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	c7 81 28 36 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+13864], 0

; 44   :   m_currentDefaultWidth  = DEFAULT_WIDTH;

  00060	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00063	c7 82 d8 00 00
	00 06 00 00 00	 mov	 DWORD PTR [edx+216], 6

; 45   :   m_currentDefaultHeight = DEFAULT_HEIGHT;

  0006d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00070	c7 80 dc 00 00
	00 06 00 00 00	 mov	 DWORD PTR [eax+220], 6

; 46   :   m_currentDotSpaceX     = DEFAULT_DOT_SPACE_X;

  0007a	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007d	c7 81 e0 00 00
	00 4b 00 00 00	 mov	 DWORD PTR [ecx+224], 75	; 0000004bH

; 47   :   m_currentDotSpaceY     = DEFAULT_DOT_SPACE_Y;

  00087	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0008a	c7 82 e4 00 00
	00 4b 00 00 00	 mov	 DWORD PTR [edx+228], 75	; 0000004bH

; 48   :   m_currentDotSizeX      = DEFAULT_DOT_SIZE_X;

  00094	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00097	c7 80 10 01 00
	00 08 00 00 00	 mov	 DWORD PTR [eax+272], 8

; 49   :   m_currentDotSizeY      = DEFAULT_DOT_SIZE_Y;

  000a1	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000a4	c7 81 14 01 00
	00 08 00 00 00	 mov	 DWORD PTR [ecx+276], 8

; 50   :   m_currentScreenOffsetX = DEFAULT_SCREEN_OFFSET_X;

  000ae	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000b1	c7 82 e8 00 00
	00 1e 00 00 00	 mov	 DWORD PTR [edx+232], 30	; 0000001eH

; 51   :   m_currentScreenOffsetY = DEFAULT_SCREEN_OFFSET_Y;

  000bb	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000be	c7 80 ec 00 00
	00 40 00 00 00	 mov	 DWORD PTR [eax+236], 64	; 00000040H

; 52   :   m_backgroundColor      = DEFAULT_BACKGROUND_COLOR;

  000c8	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	c7 81 40 01 00
	00 ff ff ff 00	 mov	 DWORD PTR [ecx+320], 16777215 ; 00ffffffH

; 53   :   m_dotColor             = DEFAULT_DOT_COLOR;

  000d5	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	c7 82 44 01 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+324], 0

; 54   :   m_humanLineColor       = DEFAULT_HUMAN_LINE_COLOR;

  000e2	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000e5	c7 80 4c 01 00
	00 ff 22 fd 00	 mov	 DWORD PTR [eax+332], 16589567 ; 00fd22ffH

; 55   :   m_computerLineColor    = DEFAULT_COMPUTER_LINE_COLOR;

  000ef	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	c7 81 50 01 00
	00 00 ff fa 00	 mov	 DWORD PTR [ecx+336], 16449280 ; 00faff00H

; 56   :   m_humanBoxColor        = DEFAULT_HUMAN_BOX_COLOR;

  000fc	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000ff	c7 82 54 01 00
	00 c8 ff c8 00	 mov	 DWORD PTR [edx+340], 13172680 ; 00c8ffc8H

; 57   :   m_computerBoxColor     = DEFAULT_COMPUTER_BOX_COLOR;

  00109	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	c7 80 58 01 00
	00 ff c8 c8 00	 mov	 DWORD PTR [eax+344], 13158655 ; 00c8c8ffH

; 58   :   m_dotPenWidth          = DEFAULT_DOT_PEN_WIDTH;

  00116	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	c7 81 18 01 00
	00 03 00 00 00	 mov	 DWORD PTR [ecx+280], 3

; 59   :   m_linePenWidth         = DEFAULT_LINE_PEN_WIDTH;

  00123	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00126	c7 82 1c 01 00
	00 03 00 00 00	 mov	 DWORD PTR [edx+284], 3

; 60   :   m_currentMoveFlashCount= DEFAULT_MOVE_FLASH_COUNT;

  00130	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00133	c7 80 20 01 00
	00 96 00 00 00	 mov	 DWORD PTR [eax+288], 150 ; 00000096H

; 61   :   m_computerTextColor    = DEFAULT_COMPUTER_TEXT_COLOR;

  0013d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00140	c7 81 60 01 00
	00 00 ff fa 00	 mov	 DWORD PTR [ecx+352], 16449280 ; 00faff00H

; 62   :   m_humanTextColor       = DEFAULT_HUMAN_TEXT_COLOR;

  0014a	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0014d	c7 82 64 01 00
	00 ff 22 fd 00	 mov	 DWORD PTR [edx+356], 16589567 ; 00fd22ffH

; 63   :   m_humanScoreOffsetX    = DEFAULT_HUMAN_SCORE_X;

  00157	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0015a	c7 80 f0 00 00
	00 0a 00 00 00	 mov	 DWORD PTR [eax+240], 10	; 0000000aH

; 64   :   m_humanScoreOffsetY    = DEFAULT_HUMAN_SCORE_Y;

  00164	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00167	c7 81 f4 00 00
	00 04 00 00 00	 mov	 DWORD PTR [ecx+244], 4

; 65   :   m_computerScoreOffsetX = DEFAULT_COMPUTER_SCORE_X;

  00171	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00174	c7 82 f8 00 00
	00 0a 00 00 00	 mov	 DWORD PTR [edx+248], 10	; 0000000aH

; 66   :   m_computerScoreOffsetY = DEFAULT_COMPUTER_SCORE_Y;

  0017e	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00181	c7 80 fc 00 00
	00 12 00 00 00	 mov	 DWORD PTR [eax+252], 18	; 00000012H

; 67   :   m_statusTextOffsetX    = DEFAULT_STATUS_TEXT_X;

  0018b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0018e	c7 81 00 01 00
	00 64 00 00 00	 mov	 DWORD PTR [ecx+256], 100 ; 00000064H

; 68   :   m_statusTextOffsetY    = DEFAULT_STATUS_TEXT_Y;

  00198	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0019b	c7 82 04 01 00
	00 0a 00 00 00	 mov	 DWORD PTR [edx+260], 10	; 0000000aH

; 69   :   m_moveCountOffsetX     = DEFAULT_MOVECOUNT_X;

  001a5	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001a8	c7 80 08 01 00
	00 0a 00 00 00	 mov	 DWORD PTR [eax+264], 10	; 0000000aH

; 70   :   m_moveCountOffsetY     = DEFAULT_MOVECOUNT_Y;

  001b2	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001b5	c7 81 0c 01 00
	00 20 00 00 00	 mov	 DWORD PTR [ecx+268], 32	; 00000020H

; 71   :   m_currentRandomSeed    = 235;

  001bf	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001c2	c7 82 34 01 00
	00 eb 00 00 00	 mov	 DWORD PTR [edx+308], 235 ; 000000ebH

; 72   :   m_currentRandomize     = DEFAULT_RANDOMIZE;

  001cc	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001cf	c6 80 38 01 00
	00 00		 mov	 BYTE PTR [eax+312], 0

; 73   :   m_aiOptions            =  (1 << MT_RANDOM)

  001d6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001d9	c7 81 2c 01 00
	00 8e 03 01 00	 mov	 DWORD PTR [ecx+300], 66446 ; 0001038eH

; 74   :                           | (1 << MT_OBVIOUSCAPTURE)
; 75   :                           | (1 << MT_GIVENOTHING)
; 76   :                           | (1 << MT_GIVELITTLE)
; 77   :                           | (1 << MT_GRABANYTHING)
; 78   :                           | (1 << MT_SIMPLEWIN)
; 79   :                           | (1 << MT_VERIFYNIMSTRINGVALUE);
; 80   :   m_timeLimit            = DEFAULT_TIMELIMIT;

  001e3	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  001e6	c7 82 24 01 00
	00 14 00 00 00	 mov	 DWORD PTR [edx+292], 20	; 00000014H

; 81   :   m_autoPlay             = true;

  001f0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  001f3	c6 80 28 01 00
	00 01		 mov	 BYTE PTR [eax+296], 1

; 82   :   if (m_currentRandomize) MyRandomize();

  001fa	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  001fd	0f b6 91 38 01
	00 00		 movzx	 edx, BYTE PTR [ecx+312]
  00204	85 d2		 test	 edx, edx
  00206	74 08		 je	 SHORT $LN2@CNewBoxesD
  00208	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0020b	e8 00 00 00 00	 call	 ?MyRandomize@CNewBoxesDoc@@QAEXXZ ; CNewBoxesDoc::MyRandomize
$LN2@CNewBoxesD:

; 83   :   pDoc = this;

  00210	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00213	a3 00 00 00 00	 mov	 DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A, eax ; pDoc

; 84   : }

  00218	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0021f	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00222	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00225	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0022c	59		 pop	 ecx
  0022d	83 c4 10	 add	 esp, 16			; 00000010H
  00230	3b ec		 cmp	 ebp, esp
  00232	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00237	8b e5		 mov	 esp, ebp
  00239	5d		 pop	 ebp
  0023a	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CNewBoxesDoc@@IAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CDocument@@UAE@XZ	; CDocument::~CDocument
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0CNewBoxesDoc@@IAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CNewBoxesDoc@@IAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CNewBoxesDoc@@IAE@XZ ENDP				; CNewBoxesDoc::CNewBoxesDoc
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 8
_size$ = -16						; size = 8
_this$ = -4						; size = 4
_move$ = 8						; size = 4
?AddMove@MOVE_HISTORY@@QAEXABUMOVE@@@Z PROC		; MOVE_HISTORY::AddMove
; _this$ = ecx

; 405  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000d	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00010	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00013	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00016	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00019	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001c	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001f	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00022	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 406  :   VECTOR size;

  00025	8d 4d f0	 lea	 ecx, DWORD PTR _size$[ebp]
  00028	e8 00 00 00 00	 call	 ??0VECTOR@@QAE@XZ	; VECTOR::VECTOR

; 407  :   MODIFY

  0002d	8b f4		 mov	 esi, esp
  0002f	6a 01		 push	 1
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00036	8b 10		 mov	 edx, DWORD PTR [eax]
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0003e	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  00041	ff d0		 call	 eax
  00043	3b f4		 cmp	 esi, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 408  :   size = pDoc->GameSize();

  0004a	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0004d	51		 push	 ecx
  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00054	e8 00 00 00 00	 call	 ?GameSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ ; CNewBoxesDoc::GameSize
  00059	50		 push	 eax
  0005a	8d 4d f0	 lea	 ecx, DWORD PTR _size$[ebp]
  0005d	e8 00 00 00 00	 call	 ??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z ; VECTOR::operator=

; 409  :   m_totalMoves = m_currentMoves;

  00062	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0006b	89 0a		 mov	 DWORD PTR [edx], ecx

; 410  :   if (m_currentMoves >= MAX_MOVE)

  0006d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00070	81 7a 04 f1 00
	00 00		 cmp	 DWORD PTR [edx+4], 241	; 000000f1H
  00077	7c 32		 jl	 SHORT $LN2@AddMove

; 411  :   {
; 412  :     MessageBox(NULL, "Exceeded Move History Limit", "Error", MB_OK);

  00079	8b f4		 mov	 esi, esp
  0007b	6a 00		 push	 0
  0007d	68 00 00 00 00	 push	 OFFSET $SG226314
  00082	68 00 00 00 00	 push	 OFFSET $SG226315
  00087	6a 00		 push	 0
  00089	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 413  :     m_totalMoves = m_currentMoves = 0;

  00096	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00099	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  000a0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000a3	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 414  :     return;

  000a9	eb 2f		 jmp	 SHORT $LN1@AddMove
$LN2@AddMove:

; 415  :   };
; 416  :   this->m_moves[m_totalMoves++] = move;

  000ab	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ae	6b 02 38	 imul	 eax, DWORD PTR [edx], 56
  000b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b4	8d 7c 01 08	 lea	 edi, DWORD PTR [ecx+eax+8]
  000b8	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000bd	8b 75 08	 mov	 esi, DWORD PTR _move$[ebp]
  000c0	f3 a5		 rep movsd
  000c2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c5	8b 02		 mov	 eax, DWORD PTR [edx]
  000c7	83 c0 01	 add	 eax, 1
  000ca	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000cd	89 01		 mov	 DWORD PTR [ecx], eax

; 417  :   m_currentMoves = m_totalMoves;

  000cf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d7	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$LN1@AddMove:

; 418  : }

  000da	52		 push	 edx
  000db	8b cd		 mov	 ecx, ebp
  000dd	50		 push	 eax
  000de	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@AddMove
  000e4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000e9	58		 pop	 eax
  000ea	5a		 pop	 edx
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	83 c4 1c	 add	 esp, 28			; 0000001cH
  000f0	3b ec		 cmp	 ebp, esp
  000f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f7	8b e5		 mov	 esp, ebp
  000f9	5d		 pop	 ebp
  000fa	c2 04 00	 ret	 4
  000fd	0f 1f 00	 npad	 3
$LN6@AddMove:
  00100	01 00 00 00	 DD	 1
  00104	00 00 00 00	 DD	 $LN5@AddMove
$LN5@AddMove:
  00108	f0 ff ff ff	 DD	 -16			; fffffff0H
  0010c	08 00 00 00	 DD	 8
  00110	00 00 00 00	 DD	 $LN4@AddMove
$LN4@AddMove:
  00114	73		 DB	 115			; 00000073H
  00115	69		 DB	 105			; 00000069H
  00116	7a		 DB	 122			; 0000007aH
  00117	65		 DB	 101			; 00000065H
  00118	00		 DB	 0
?AddMove@MOVE_HISTORY@@QAEXABUMOVE@@@Z ENDP		; MOVE_HISTORY::AddMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\BoxDef.h
;	COMDAT ?Erase@MOVE_HISTORY@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Erase@MOVE_HISTORY@@QAEXXZ PROC			; MOVE_HISTORY::Erase, COMDAT
; _this$ = ecx

; 104  :   void Erase(void){m_totalMoves=0;m_currentMoves=0;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
?Erase@MOVE_HISTORY@@QAEXXZ ENDP			; MOVE_HISTORY::Erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MOVE_HISTORY@@QAE@XZ PROC				; MOVE_HISTORY::MOVE_HISTORY
; _this$ = ecx

; 399  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	68 00 00 00 00	 push	 OFFSET ??0MOVE@@QAE@XZ
  00013	68 f1 00 00 00	 push	 241			; 000000f1H
  00018	6a 38		 push	 56			; 00000038H
  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	83 c0 08	 add	 eax, 8
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 400  :   this->m_currentMoves = 0;

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 401  :   this->m_totalMoves   = 0;

  00030	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00033	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 402  : }

  00039	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	83 c4 04	 add	 esp, 4
  0003f	3b ec		 cmp	 ebp, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
??0MOVE_HISTORY@@QAE@XZ ENDP				; MOVE_HISTORY::MOVE_HISTORY
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0MOVE@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MOVE@@QAE@XZ PROC					; MOVE::MOVE, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0VECTOR@@QAE@XZ	; VECTOR::VECTOR
  00016	68 00 00 00 00	 push	 OFFSET ??0VECTOR@@QAE@XZ ; VECTOR::VECTOR
  0001b	6a 02		 push	 2
  0001d	6a 08		 push	 8
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c0 0c	 add	 eax, 12			; 0000000cH
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??0MOVE@@QAE@XZ ENDP					; MOVE::MOVE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GNIMHASHTABLE@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GNIMHASHTABLE@@QAEPAXI@Z PROC			; NIMHASHTABLE::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1NIMHASHTABLE@@QAE@XZ	; NIMHASHTABLE::~NIMHASHTABLE
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GNIMHASHTABLE@@QAEPAXI@Z ENDP			; NIMHASHTABLE::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GSWHASHTABLE@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSWHASHTABLE@@QAEPAXI@Z PROC				; SWHASHTABLE::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1SWHASHTABLE@@QAE@XZ	; SWHASHTABLE::~SWHASHTABLE
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GSWHASHTABLE@@QAEPAXI@Z ENDP				; SWHASHTABLE::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GDOTS_AND_BOXES@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDOTS_AND_BOXES@@QAEPAXI@Z PROC			; DOTS_AND_BOXES::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 30		 push	 48			; 00000030H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GDOTS_AND_BOXES@@QAEPAXI@Z ENDP			; DOTS_AND_BOXES::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?HorizontalDivideWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
?HorizontalDivideWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z PROC ; DOTS_AND_BOXES::HorizontalDivideWeight, COMDAT
; _this$ = ecx

; 137  :   INLINE int HorizontalDivideWeight(POINT dotNum){return m_divideAndConquerWeight[Dot2Line(dotNum,false)];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	6a 00		 push	 0
  00010	8b 45 0c	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00017	51		 push	 ecx
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z ; DOTS_AND_BOXES::Dot2Line
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00025	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00028	83 c4 04	 add	 esp, 4
  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?HorizontalDivideWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ENDP ; DOTS_AND_BOXES::HorizontalDivideWeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?VerticalDivideWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
?VerticalDivideWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z PROC ; DOTS_AND_BOXES::VerticalDivideWeight, COMDAT
; _this$ = ecx

; 136  :   INLINE int VerticalDivideWeight(POINT dotNum){return m_divideAndConquerWeight[Dot2Line(dotNum,true)];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	6a 01		 push	 1
  00010	8b 45 0c	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00017	51		 push	 ecx
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z ; DOTS_AND_BOXES::Dot2Line
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00025	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00028	83 c4 04	 add	 esp, 4
  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 08 00	 ret	 8
?VerticalDivideWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ENDP ; DOTS_AND_BOXES::VerticalDivideWeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?HorizontalLoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
?HorizontalLoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z PROC ; DOTS_AND_BOXES::HorizontalLoopWeight, COMDAT
; _this$ = ecx

; 134  :   INLINE int HorizontalLoopWeight(POINT dotNum){return m_breakUpLoopsWeight[Dot2Line(dotNum,false)];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	6a 00		 push	 0
  00010	8b 45 0c	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00017	51		 push	 ecx
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z ; DOTS_AND_BOXES::Dot2Line
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00026	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?HorizontalLoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ENDP ; DOTS_AND_BOXES::HorizontalLoopWeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?VerticalLoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
?VerticalLoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z PROC ; DOTS_AND_BOXES::VerticalLoopWeight, COMDAT
; _this$ = ecx

; 133  :   INLINE int VerticalLoopWeight(POINT dotNum){return m_breakUpLoopsWeight[Dot2Line(dotNum,true)];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	6a 01		 push	 1
  00010	8b 45 0c	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  00013	50		 push	 eax
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00017	51		 push	 ecx
  00018	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001b	e8 00 00 00 00	 call	 ?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z ; DOTS_AND_BOXES::Dot2Line
  00020	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00023	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00026	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00029	83 c4 04	 add	 esp, 4
  0002c	3b ec		 cmp	 ebp, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
?VerticalLoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@@Z ENDP ; DOTS_AND_BOXES::VerticalLoopWeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
_vertical$ = 16						; size = 1
?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z PROC	; DOTS_AND_BOXES::Dot2Line, COMDAT
; _this$ = ecx

; 116  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 117  :     return Dot2Line(dotNum.x, dotNum.y, vertical);

  0000e	0f b6 45 10	 movzx	 eax, BYTE PTR _vertical$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _dotNum$[ebp+4]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  0001a	52		 push	 edx
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?Dot2Line@DOTS_AND_BOXES@@QBEHHH_N@Z ; DOTS_AND_BOXES::Dot2Line

; 118  :   };

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z ENDP	; DOTS_AND_BOXES::Dot2Line
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Dot2Line@DOTS_AND_BOXES@@QBEHHH_N@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_vertical$ = 16						; size = 1
?Dot2Line@DOTS_AND_BOXES@@QBEHHH_N@Z PROC		; DOTS_AND_BOXES::Dot2Line, COMDAT
; _this$ = ecx

; 112  :          {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 113  :            return y * (2*m_width-1) + x + (vertical?(m_width-1):0);

  00009	0f b6 45 10	 movzx	 eax, BYTE PTR _vertical$[ebp]
  0000d	85 c0		 test	 eax, eax
  0000f	74 0e		 je	 SHORT $LN3@Dot2Line
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00017	83 ea 01	 sub	 edx, 1
  0001a	89 55 f8	 mov	 DWORD PTR tv73[ebp], edx
  0001d	eb 07		 jmp	 SHORT $LN4@Dot2Line
$LN3@Dot2Line:
  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@Dot2Line:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002c	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  00030	8b c2		 mov	 eax, edx
  00032	0f af 45 0c	 imul	 eax, DWORD PTR _y$[ebp]
  00036	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  00039	03 45 f8	 add	 eax, DWORD PTR tv73[ebp]

; 114  :          };

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?Dot2Line@DOTS_AND_BOXES@@QBEHHH_N@Z ENDP		; DOTS_AND_BOXES::Dot2Line
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetBoxOwner@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
_ot$ = 12						; size = 4
?SetBoxOwner@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetBoxOwner, COMDAT
; _this$ = ecx

; 109  :   INLINE void SetBoxOwner(const POINT& dotNum, OWNER_TYPE ot){SetBoxOwner(dotNum.x, dotNum.y, ot);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _ot$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	52		 push	 edx
  00019	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	51		 push	 ecx
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?SetBoxOwner@DOTS_AND_BOXES@@QAEXHHW4OWNER_TYPE@@@Z ; DOTS_AND_BOXES::SetBoxOwner
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?SetBoxOwner@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetBoxOwner
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetBoxOwner@DOTS_AND_BOXES@@QAEXHHW4OWNER_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
_ot$ = 16						; size = 4
?SetBoxOwner@DOTS_AND_BOXES@@QAEXHHW4OWNER_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetBoxOwner, COMDAT
; _this$ = ecx

; 108  :   INLINE void SetBoxOwner(int col, int row, OWNER_TYPE ot){m_owners[row*(m_width-1)+col]=(ui8)ot;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	0f af 4d 0c	 imul	 ecx, DWORD PTR _row$[ebp]
  00014	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001d	8a 55 10	 mov	 dl, BYTE PTR _ot$[ebp]
  00020	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
?SetBoxOwner@DOTS_AND_BOXES@@QAEXHHW4OWNER_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetBoxOwner
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z PROC ; DOTS_AND_BOXES::BoxOwner, COMDAT
; _this$ = ecx

; 107  :   INLINE OWNER_TYPE BoxOwner(const POINT& dotNum)const{return BoxOwner(dotNum.x, dotNum.y);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z ; DOTS_AND_BOXES::BoxOwner
  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ENDP ; DOTS_AND_BOXES::BoxOwner
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z PROC	; DOTS_AND_BOXES::BoxOwner, COMDAT
; _this$ = ecx

; 106  :   INLINE OWNER_TYPE BoxOwner(int col, int row)const{return (OWNER_TYPE)m_owners[row*(m_width-1) + col];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	0f af 4d 0c	 imul	 ecx, DWORD PTR _row$[ebp]
  00014	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001d	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z ENDP	; DOTS_AND_BOXES::BoxOwner
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
_lt$ = 12						; size = 4
?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetHLineType, COMDAT
; _this$ = ecx

; 104  :   INLINE void SetHLineType(const POINT& dotNum, LINE_TYPE lt){SetHLineType(dotNum.x, dotNum.y, lt);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _lt$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	52		 push	 edx
  00019	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	51		 push	 ecx
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetHLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
_lt$ = 16						; size = 4
?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetHLineType, COMDAT
; _this$ = ecx

; 103  :   INLINE void SetHLineType(int col, int row, LINE_TYPE lt){v();m_hlines[row*(m_width-1)+col]=(ui8)lt;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?v@DOTS_AND_BOXES@@AAEXXZ ; DOTS_AND_BOXES::v
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001c	83 e9 01	 sub	 ecx, 1
  0001f	0f af 4d 0c	 imul	 ecx, DWORD PTR _row$[ebp]
  00023	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0002c	8a 55 10	 mov	 dl, BYTE PTR _lt$[ebp]
  0002f	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetHLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z PROC ; DOTS_AND_BOXES::HLineType, COMDAT
; _this$ = ecx

; 102  :   INLINE LINE_TYPE HLineType(const POINT& dotNum)const{return HLineType(dotNum.x, dotNum.y);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ENDP ; DOTS_AND_BOXES::HLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z PROC	; DOTS_AND_BOXES::HLineType, COMDAT
; _this$ = ecx

; 101  :   INLINE LINE_TYPE HLineType(int col, int row)const{return (LINE_TYPE)m_hlines[row*(m_width-1) + col];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	0f af 4d 0c	 imul	 ecx, DWORD PTR _row$[ebp]
  00014	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001d	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ENDP	; DOTS_AND_BOXES::HLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
_lt$ = 12						; size = 4
?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetVLineType, COMDAT
; _this$ = ecx

; 100  :   INLINE void SetVLineType(const POINT& dotNum, LINE_TYPE lt){SetVLineType(dotNum.x, dotNum.y, lt);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _lt$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	52		 push	 edx
  00019	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	51		 push	 ecx
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetVLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
_lt$ = 16						; size = 4
?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetVLineType, COMDAT
; _this$ = ecx

; 99   :   INLINE void SetVLineType(int col, int row, LINE_TYPE lt){v();m_vlines[row*m_width+col]=(ui8)lt;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?v@DOTS_AND_BOXES@@AAEXXZ ; DOTS_AND_BOXES::v
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _row$[ebp]
  0001c	0f af 48 10	 imul	 ecx, DWORD PTR [eax+16]
  00020	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00029	8a 55 10	 mov	 dl, BYTE PTR _lt$[ebp]
  0002c	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetVLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z PROC ; DOTS_AND_BOXES::VLineType, COMDAT
; _this$ = ecx

; 98   :   INLINE LINE_TYPE VLineType(const POINT& dotNum)const{return VLineType(dotNum.x, dotNum.y);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ENDP ; DOTS_AND_BOXES::VLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z PROC	; DOTS_AND_BOXES::VLineType, COMDAT
; _this$ = ecx

; 97   :   INLINE LINE_TYPE VLineType(int col, int row)const{return (LINE_TYPE)m_vlines[row*m_width + col];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _row$[ebp]
  0000d	0f af 48 10	 imul	 ecx, DWORD PTR [eax+16]
  00011	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0001a	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ENDP	; DOTS_AND_BOXES::VLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Height@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::Height, COMDAT
; _this$ = ecx

; 93   :   INLINE int Height(void) const {return m_height;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Height@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::Height
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Width@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::Width, COMDAT
; _this$ = ecx

; 92   :   INLINE int Width(void) const {return m_width;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Width@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::Width
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?v@DOTS_AND_BOXES@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?v@DOTS_AND_BOXES@@AAEXXZ PROC				; DOTS_AND_BOXES::v, COMDAT
; _this$ = ecx

; 80   :   INLINE void v(void){m_loopWeightsValid=false;m_divideWeightsValid=false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?v@DOTS_AND_BOXES@@AAEXXZ ENDP				; DOTS_AND_BOXES::v
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\stdafx.h
;	COMDAT ??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_point$ = 8						; size = 4
??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z PROC			; VECTOR::operator=, COMDAT
; _this$ = ecx

; 63   :   VECTOR& operator =(const POINT& point){x=point.x;y=point.y;return *this;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z ENDP			; VECTOR::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\stdafx.h
;	COMDAT ??0VECTOR@@QAE@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??0VECTOR@@QAE@HH@Z PROC				; VECTOR::VECTOR, COMDAT
; _this$ = ecx

; 62   :   VECTOR(int a, int b){x=a;y=b;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0VECTOR@@QAE@HH@Z ENDP				; VECTOR::VECTOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\stdafx.h
;	COMDAT ??0VECTOR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VECTOR@@QAE@XZ PROC					; VECTOR::VECTOR, COMDAT
; _this$ = ecx

; 61   :   VECTOR(void){};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0VECTOR@@QAE@XZ ENDP					; VECTOR::VECTOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?InitializeSearchContent@CDocument@@UAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
?InitializeSearchContent@CDocument@@UAEXXZ PROC		; CDocument::InitializeSearchContent, COMDAT
; _this$ = ecx

; 6074 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 6075 : 		TRACE0("Override this method in a derived class to initialize chunk list for search filter.\n");

  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_0FF@ECNBNEDM@Override?5this?5method?5in?5a?5deriv@
  00023	68 00 00 00 00	 push	 OFFSET ??_C@_03CGPANDLG@?$CFTs@
  00028	68 bb 17 00 00	 push	 6075			; 000017bbH
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00032	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00035	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH

; 6076 : 	}

  00043	83 c4 0c	 add	 esp, 12			; 0000000cH
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?InitializeSearchContent@CDocument@@UAEXXZ ENDP		; CDocument::InitializeSearchContent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?OnRichPreviewSiteChanged@CDocument@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnRichPreviewSiteChanged@CDocument@@UAEXXZ PROC	; CDocument::OnRichPreviewSiteChanged, COMDAT
; _this$ = ecx

; 6038 : 	virtual void OnRichPreviewSiteChanged(){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?OnRichPreviewSiteChanged@CDocument@@UAEXXZ ENDP	; CDocument::OnRichPreviewSiteChanged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?OnRichPreviewBackColorChanged@CDocument@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnRichPreviewBackColorChanged@CDocument@@UAEXXZ PROC	; CDocument::OnRichPreviewBackColorChanged, COMDAT
; _this$ = ecx

; 6035 : 	virtual void OnRichPreviewBackColorChanged(){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?OnRichPreviewBackColorChanged@CDocument@@UAEXXZ ENDP	; CDocument::OnRichPreviewBackColorChanged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?OnRichPreviewTextColorChanged@CDocument@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnRichPreviewTextColorChanged@CDocument@@UAEXXZ PROC	; CDocument::OnRichPreviewTextColorChanged, COMDAT
; _this$ = ecx

; 6032 : 	virtual void OnRichPreviewTextColorChanged(){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?OnRichPreviewTextColorChanged@CDocument@@UAEXXZ ENDP	; CDocument::OnRichPreviewTextColorChanged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?OnRichPreviewFontChanged@CDocument@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnRichPreviewFontChanged@CDocument@@UAEXXZ PROC	; CDocument::OnRichPreviewFontChanged, COMDAT
; _this$ = ecx

; 6029 : 	virtual void OnRichPreviewFontChanged(){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?OnRichPreviewFontChanged@CDocument@@UAEXXZ ENDP	; CDocument::OnRichPreviewFontChanged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?OnBeforeRichPreviewFontChanged@CDocument@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnBeforeRichPreviewFontChanged@CDocument@@UAEXXZ PROC	; CDocument::OnBeforeRichPreviewFontChanged, COMDAT
; _this$ = ecx

; 6026 : 	virtual void OnBeforeRichPreviewFontChanged(){}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?OnBeforeRichPreviewFontChanged@CDocument@@UAEXXZ ENDP	; CDocument::OnBeforeRichPreviewFontChanged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ
_TEXT	SEGMENT
tv79 = -52						; size = 4
tv134 = -48						; size = 4
tv133 = -44						; size = 4
$T2 = -40						; size = 4
$T3 = -36						; size = 4
_e$4 = -28						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ PROC	; CDocument::GetAdapter, COMDAT
; _this$ = ecx

; 5961 : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	83 ec 24	 sub	 esp, 36			; 00000024H
  00015	53		 push	 ebx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	89 45 cc	 mov	 DWORD PTR [ebp-52], eax
  00020	89 45 d0	 mov	 DWORD PTR [ebp-48], eax
  00023	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  00026	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00029	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0002c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0002f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00032	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00035	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00038	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0003d	33 c5		 xor	 eax, ebp
  0003f	50		 push	 eax
  00040	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00043	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00049	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0004c	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 5962 : 		if (m_pDocumentAdapter == NULL)

  0004f	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00052	83 b8 98 00 00
	00 00		 cmp	 DWORD PTR [eax+152], 0
  00059	75 78		 jne	 SHORT $LN2@GetAdapter

; 5963 : 		{
; 5964 : 			ATLTRY(m_pDocumentAdapter = new CDocumentAdapter(this));

  0005b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00062	6a 0c		 push	 12			; 0000000cH
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	83 c4 04	 add	 esp, 4
  0006c	89 45 d4	 mov	 DWORD PTR tv133[ebp], eax
  0006f	8b 4d d4	 mov	 ecx, DWORD PTR tv133[ebp]
  00072	89 4d d8	 mov	 DWORD PTR $T2[ebp], ecx
  00075	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00079	83 7d d8 00	 cmp	 DWORD PTR $T2[ebp], 0
  0007d	74 17		 je	 SHORT $LN6@GetAdapter
  0007f	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00082	52		 push	 edx
  00083	8b 4d d8	 mov	 ecx, DWORD PTR $T2[ebp]
  00086	e8 00 00 00 00	 call	 ??0CDocumentAdapter@CDocument@@QAE@PAV1@@Z ; CDocument::CDocumentAdapter::CDocumentAdapter
  0008b	89 45 d0	 mov	 DWORD PTR tv134[ebp], eax
  0008e	8b 45 d0	 mov	 eax, DWORD PTR tv134[ebp]
  00091	89 45 cc	 mov	 DWORD PTR tv79[ebp], eax
  00094	eb 07		 jmp	 SHORT $LN7@GetAdapter
$LN6@GetAdapter:
  00096	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv79[ebp], 0
$LN7@GetAdapter:
  0009d	8b 4d cc	 mov	 ecx, DWORD PTR tv79[ebp]
  000a0	89 4d dc	 mov	 DWORD PTR $T3[ebp], ecx
  000a3	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+12], 0
  000a7	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000aa	8b 45 dc	 mov	 eax, DWORD PTR $T3[ebp]
  000ad	89 82 98 00 00
	00		 mov	 DWORD PTR [edx+152], eax
  000b3	eb 0e		 jmp	 SHORT $LN8@GetAdapter
__catch$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ$0:
  000b5	8b 4d e4	 mov	 ecx, DWORD PTR _e$4[ebp]
  000b8	e8 00 00 00 00	 call	 ?Delete@CException@@QAEXXZ ; CException::Delete
  000bd	b8 00 00 00 00	 mov	 eax, $LN12@GetAdapter
  000c2	c3		 ret	 0
$LN8@GetAdapter:
  000c3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  000ca	eb 07		 jmp	 SHORT $LN2@GetAdapter
$LN12@GetAdapter:
  000cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
$LN2@GetAdapter:

; 5965 : 		}
; 5966 : 
; 5967 : 		if (m_pDocumentAdapter != NULL)

  000d3	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d6	83 b9 98 00 00
	00 00		 cmp	 DWORD PTR [ecx+152], 0
  000dd	74 22		 je	 SHORT $LN4@GetAdapter

; 5968 : 		{
; 5969 : 			m_pDocumentAdapter->AddRef();

  000df	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000e2	8b f4		 mov	 esi, esp
  000e4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000e7	8b 88 98 00 00
	00		 mov	 ecx, DWORD PTR [eax+152]
  000ed	8b 01		 mov	 eax, DWORD PTR [ecx]
  000ef	8b 8a 98 00 00
	00		 mov	 ecx, DWORD PTR [edx+152]
  000f5	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000f8	ff d2		 call	 edx
  000fa	3b f4		 cmp	 esi, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@GetAdapter:

; 5970 : 		}
; 5971 : 
; 5972 : 		return m_pDocumentAdapter;

  00101	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00104	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [eax+152]

; 5973 : 	}

  0010a	52		 push	 edx
  0010b	8b cd		 mov	 ecx, ebp
  0010d	50		 push	 eax
  0010e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN16@GetAdapter
  00114	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00119	58		 pop	 eax
  0011a	5a		 pop	 edx
  0011b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0011e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00125	59		 pop	 ecx
  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	83 c4 34	 add	 esp, 52			; 00000034H
  0012c	3b ec		 cmp	 ebp, esp
  0012e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00133	8b e5		 mov	 esp, ebp
  00135	5d		 pop	 ebp
  00136	c3		 ret	 0
  00137	90		 npad	 1
$LN16@GetAdapter:
  00138	01 00 00 00	 DD	 1
  0013c	00 00 00 00	 DD	 $LN15@GetAdapter
$LN15@GetAdapter:
  00140	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00144	04 00 00 00	 DD	 4
  00148	00 00 00 00	 DD	 $LN13@GetAdapter
$LN13@GetAdapter:
  0014c	65		 DB	 101			; 00000065H
  0014d	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ$2:
  00000	6a 0c		 push	 12			; 0000000cH
  00002	8b 45 d8	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetAdapter@CDocument@@UAEPAUIDocument@ATL@@XZ ENDP	; CDocument::GetAdapter
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDocumentAdapter@CDocument@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDocumentAdapter@CDocument@@UAEPAXI@Z PROC		; CDocument::CDocumentAdapter::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CDocumentAdapter@CDocument@@UAE@XZ ; CDocument::CDocumentAdapter::~CDocumentAdapter
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GCDocumentAdapter@CDocument@@UAEPAXI@Z ENDP		; CDocument::CDocumentAdapter::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?GetThumbnail@CDocumentAdapter@CDocument@@UAEHIPAPAUHBITMAP__@@PAW4WTS_ALPHATYPE@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_cx$ = 8						; size = 4
_phbmp$ = 12						; size = 4
_pdwAlpha$ = 16						; size = 4
?GetThumbnail@CDocumentAdapter@CDocument@@UAEHIPAPAUHBITMAP__@@PAW4WTS_ALPHATYPE@@@Z PROC ; CDocument::CDocumentAdapter::GetThumbnail, COMDAT
; _this$ = ecx

; 5938 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5939 : 			ASSERT_VALID(m_pParentDoc);

  0001f	68 33 17 00 00	 push	 5939			; 00001733H
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 5940 : 			if (m_pParentDoc == NULL)

  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0003c	75 29		 jne	 SHORT $LN2@GetThumbna

; 5941 : 			{
; 5942 : 				TRACE0("CDocumentAdapter::GetThumbnail is called, but its CDocument is NULL.\n");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0EG@KNBCAJKP@CDocumentAdapter?3?3GetThumbnail?5@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_03CGPANDLG@?$CFTs@
  00048	68 36 17 00 00	 push	 5942			; 00001736H
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00052	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00055	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5943 : 				return FALSE;

  00063	33 c0		 xor	 eax, eax
  00065	eb 2b		 jmp	 SHORT $LN1@GetThumbna
$LN2@GetThumbna:

; 5944 : 			}
; 5945 : 			return m_pParentDoc->GetThumbnail(cx, phbmp, pdwAlpha);

  00067	8b f4		 mov	 esi, esp
  00069	8b 45 10	 mov	 eax, DWORD PTR _pdwAlpha$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 0c	 mov	 ecx, DWORD PTR _phbmp$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 08	 mov	 edx, DWORD PTR _cx$[ebp]
  00074	52		 push	 edx
  00075	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00078	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00080	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00083	8b 90 b8 00 00
	00		 mov	 edx, DWORD PTR [eax+184]
  00089	ff d2		 call	 edx
  0008b	3b f4		 cmp	 esi, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@GetThumbna:

; 5946 : 		}

  00092	5e		 pop	 esi
  00093	83 c4 0c	 add	 esp, 12			; 0000000cH
  00096	3b ec		 cmp	 ebp, esp
  00098	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009d	8b e5		 mov	 esp, ebp
  0009f	5d		 pop	 ebp
  000a0	c2 0c 00	 ret	 12			; 0000000cH
?GetThumbnail@CDocumentAdapter@CDocument@@UAEHIPAPAUHBITMAP__@@PAW4WTS_ALPHATYPE@@@Z ENDP ; CDocument::CDocumentAdapter::GetThumbnail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?GetContainer@CDocumentAdapter@CDocument@@UBEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetContainer@CDocumentAdapter@CDocument@@UBEPAXXZ PROC	; CDocument::CDocumentAdapter::GetContainer, COMDAT
; _this$ = ecx

; 5927 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5928 : 			return m_pParentDoc;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 5929 : 		}

  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?GetContainer@CDocumentAdapter@CDocument@@UBEPAXXZ ENDP	; CDocument::CDocumentAdapter::GetContainer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?FindChunk@CDocumentAdapter@CDocument@@UAEPAU__POSITION@@ABU_GUID@@K@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_guid$ = 8						; size = 4
_pid$ = 12						; size = 4
?FindChunk@CDocumentAdapter@CDocument@@UAEPAU__POSITION@@ABU_GUID@@K@Z PROC ; CDocument::CDocumentAdapter::FindChunk, COMDAT
; _this$ = ecx

; 5913 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5914 : 			ASSERT_VALID(m_pParentDoc);

  0001f	68 1a 17 00 00	 push	 5914			; 0000171aH
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 5915 : 			if (m_pParentDoc == NULL)

  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0003c	75 29		 jne	 SHORT $LN2@FindChunk

; 5916 : 			{
; 5917 : 				TRACE0("CDocumentAdapter::FindChunk is called, but its CDocument is NULL.\n");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@KIDKKKHO@CDocumentAdapter?3?3FindChunk?5is?5@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_03CGPANDLG@?$CFTs@
  00048	68 1d 17 00 00	 push	 5917			; 0000171dH
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00052	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00055	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5918 : 				return NULL;

  00063	33 c0		 xor	 eax, eax
  00065	eb 27		 jmp	 SHORT $LN1@FindChunk
$LN2@FindChunk:

; 5919 : 			}
; 5920 : 			return m_pParentDoc->FindChunk(guid, pid);

  00067	8b f4		 mov	 esi, esp
  00069	8b 45 0c	 mov	 eax, DWORD PTR _pid$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _guid$[ebp]
  00070	51		 push	 ecx
  00071	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00074	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00077	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	8b 10		 mov	 edx, DWORD PTR [eax]
  0007c	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0007f	8b 82 d4 00 00
	00		 mov	 eax, DWORD PTR [edx+212]
  00085	ff d0		 call	 eax
  00087	3b f4		 cmp	 esi, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@FindChunk:

; 5921 : 		}

  0008e	5e		 pop	 esi
  0008f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00092	3b ec		 cmp	 ebp, esp
  00094	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 08 00	 ret	 8
?FindChunk@CDocumentAdapter@CDocument@@UAEPAU__POSITION@@ABU_GUID@@K@Z ENDP ; CDocument::CDocumentAdapter::FindChunk
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?RemoveChunk@CDocumentAdapter@CDocument@@UAEXABU_GUID@@K@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_guid$ = 8						; size = 4
_pid$ = 12						; size = 4
?RemoveChunk@CDocumentAdapter@CDocument@@UAEXABU_GUID@@K@Z PROC ; CDocument::CDocumentAdapter::RemoveChunk, COMDAT
; _this$ = ecx

; 5896 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5897 : 			ASSERT_VALID(m_pParentDoc);

  0001f	68 09 17 00 00	 push	 5897			; 00001709H
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 5898 : 			if (m_pParentDoc == NULL)

  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0003c	75 27		 jne	 SHORT $LN2@RemoveChun

; 5899 : 			{
; 5900 : 				TRACE0("CDocumentAdapter::RemoveChunk is called, but its CDocument is NULL.\n");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@IDAFELPE@CDocumentAdapter?3?3RemoveChunk?5i@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_03CGPANDLG@?$CFTs@
  00048	68 0c 17 00 00	 push	 5900			; 0000170cH
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00052	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00055	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5901 : 				return;

  00063	eb 27		 jmp	 SHORT $LN1@RemoveChun
$LN2@RemoveChun:

; 5902 : 			}
; 5903 : 			m_pParentDoc->RemoveChunk(guid, pid);

  00065	8b f4		 mov	 esi, esp
  00067	8b 45 0c	 mov	 eax, DWORD PTR _pid$[ebp]
  0006a	50		 push	 eax
  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _guid$[ebp]
  0006e	51		 push	 ecx
  0006f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00072	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	8b 10		 mov	 edx, DWORD PTR [eax]
  0007a	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0007d	8b 82 d0 00 00
	00		 mov	 eax, DWORD PTR [edx+208]
  00083	ff d0		 call	 eax
  00085	3b f4		 cmp	 esi, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@RemoveChun:

; 5904 : 		}

  0008c	5e		 pop	 esi
  0008d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00090	3b ec		 cmp	 ebp, esp
  00092	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c2 08 00	 ret	 8
?RemoveChunk@CDocumentAdapter@CDocument@@UAEXABU_GUID@@K@Z ENDP ; CDocument::CDocumentAdapter::RemoveChunk
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?ReadNextChunkValue@CDocumentAdapter@CDocument@@UAEHPAPAUIFilterChunkValue@ATL@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_ppValue$ = 8						; size = 4
?ReadNextChunkValue@CDocumentAdapter@CDocument@@UAEHPAPAUIFilterChunkValue@ATL@@@Z PROC ; CDocument::CDocumentAdapter::ReadNextChunkValue, COMDAT
; _this$ = ecx

; 5881 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5882 : 			ASSERT_VALID(m_pParentDoc);

  0001f	68 fa 16 00 00	 push	 5882			; 000016faH
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 5883 : 			if (m_pParentDoc == NULL)

  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0003c	75 29		 jne	 SHORT $LN2@ReadNextCh

; 5884 : 			{
; 5885 : 				TRACE0("CDocumentAdapter::ReadNextChunkValue is called, but its CDocument is NULL.\n");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0EM@LNMILABG@CDocumentAdapter?3?3ReadNextChunk@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_03CGPANDLG@?$CFTs@
  00048	68 fd 16 00 00	 push	 5885			; 000016fdH
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00052	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00055	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5886 : 				return FALSE;

  00063	33 c0		 xor	 eax, eax
  00065	eb 23		 jmp	 SHORT $LN1@ReadNextCh
$LN2@ReadNextCh:

; 5887 : 			}
; 5888 : 			return m_pParentDoc->ReadNextChunkValue(ppValue);

  00067	8b f4		 mov	 esi, esp
  00069	8b 45 08	 mov	 eax, DWORD PTR _ppValue$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00073	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 12		 mov	 edx, DWORD PTR [edx]
  00078	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007b	8b 82 cc 00 00
	00		 mov	 eax, DWORD PTR [edx+204]
  00081	ff d0		 call	 eax
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@ReadNextCh:

; 5889 : 		}

  0008a	5e		 pop	 esi
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008e	3b ec		 cmp	 ebp, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
?ReadNextChunkValue@CDocumentAdapter@CDocument@@UAEHPAPAUIFilterChunkValue@ATL@@@Z ENDP ; CDocument::CDocumentAdapter::ReadNextChunkValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?BeginReadChunks@CDocumentAdapter@CDocument@@UAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
?BeginReadChunks@CDocumentAdapter@CDocument@@UAEXXZ PROC ; CDocument::CDocumentAdapter::BeginReadChunks, COMDAT
; _this$ = ecx

; 5865 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5866 : 			ASSERT_VALID(m_pParentDoc);

  0001f	68 ea 16 00 00	 push	 5866			; 000016eaH
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 5867 : 			if (m_pParentDoc == NULL)

  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0003c	75 27		 jne	 SHORT $LN2@BeginReadC

; 5868 : 			{
; 5869 : 				TRACE0("CDocumentAdapter::BeginReadChunks is called, but its CDocument is NULL.\n");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@OPNFODHI@CDocumentAdapter?3?3BeginReadChun@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_03CGPANDLG@?$CFTs@
  00048	68 ed 16 00 00	 push	 5869			; 000016edH
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00052	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00055	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5870 : 				return;

  00063	eb 1f		 jmp	 SHORT $LN1@BeginReadC
$LN2@BeginReadC:

; 5871 : 			}
; 5872 : 			m_pParentDoc->BeginReadChunks();

  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00070	8b f4		 mov	 esi, esp
  00072	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00075	8b 90 c8 00 00
	00		 mov	 edx, DWORD PTR [eax+200]
  0007b	ff d2		 call	 edx
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@BeginReadC:

; 5873 : 		}

  00084	5e		 pop	 esi
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?BeginReadChunks@CDocumentAdapter@CDocument@@UAEXXZ ENDP ; CDocument::CDocumentAdapter::BeginReadChunks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?SetChunkValue@CDocumentAdapter@CDocument@@UAEHPAUIFilterChunkValue@ATL@@@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_pValue$ = 8						; size = 4
?SetChunkValue@CDocumentAdapter@CDocument@@UAEHPAUIFilterChunkValue@ATL@@@Z PROC ; CDocument::CDocumentAdapter::SetChunkValue, COMDAT
; _this$ = ecx

; 5852 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5853 : 			ASSERT_VALID(m_pParentDoc);

  0001f	68 dd 16 00 00	 push	 5853			; 000016ddH
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 5854 : 			if (m_pParentDoc == NULL)

  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0003c	75 29		 jne	 SHORT $LN2@SetChunkVa

; 5855 : 			{
; 5856 : 				TRACE0("CDocumentAdapter::SetChunkValue is called, but its CDocument is NULL.\n");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@MDEFKGNO@CDocumentAdapter?3?3SetChunkValue@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_03CGPANDLG@?$CFTs@
  00048	68 e0 16 00 00	 push	 5856			; 000016e0H
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00052	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00055	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5857 : 				return FALSE;

  00063	33 c0		 xor	 eax, eax
  00065	eb 23		 jmp	 SHORT $LN1@SetChunkVa
$LN2@SetChunkVa:

; 5858 : 			}
; 5859 : 			return m_pParentDoc->SetChunkValue(pValue);

  00067	8b f4		 mov	 esi, esp
  00069	8b 45 08	 mov	 eax, DWORD PTR _pValue$[ebp]
  0006c	50		 push	 eax
  0006d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00070	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00073	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00076	8b 12		 mov	 edx, DWORD PTR [edx]
  00078	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0007b	8b 82 c4 00 00
	00		 mov	 eax, DWORD PTR [edx+196]
  00081	ff d0		 call	 eax
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@SetChunkVa:

; 5860 : 		}

  0008a	5e		 pop	 esi
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008e	3b ec		 cmp	 ebp, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
?SetChunkValue@CDocumentAdapter@CDocument@@UAEHPAUIFilterChunkValue@ATL@@@Z ENDP ; CDocument::CDocumentAdapter::SetChunkValue
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?ClearChunkList@CDocumentAdapter@CDocument@@UAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
?ClearChunkList@CDocumentAdapter@CDocument@@UAEXXZ PROC	; CDocument::CDocumentAdapter::ClearChunkList, COMDAT
; _this$ = ecx

; 5837 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5838 : 			ASSERT_VALID(m_pParentDoc);

  0001f	68 ce 16 00 00	 push	 5838			; 000016ceH
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 5839 : 			if (m_pParentDoc == NULL)

  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0003c	75 27		 jne	 SHORT $LN2@ClearChunk

; 5840 : 			{
; 5841 : 				TRACE0("CDocumentAdapter::ClearChunkList is called, but its CDocument is NULL.\n");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@LDLNHGOL@CDocumentAdapter?3?3ClearChunkLis@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_03CGPANDLG@?$CFTs@
  00048	68 d1 16 00 00	 push	 5841			; 000016d1H
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00052	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00055	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5842 : 				return;

  00063	eb 1f		 jmp	 SHORT $LN1@ClearChunk
$LN2@ClearChunk:

; 5843 : 			}
; 5844 : 			m_pParentDoc->ClearChunkList ();

  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00070	8b f4		 mov	 esi, esp
  00072	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00075	8b 90 c0 00 00
	00		 mov	 edx, DWORD PTR [eax+192]
  0007b	ff d2		 call	 edx
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@ClearChunk:

; 5845 : 		}

  00084	5e		 pop	 esi
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?ClearChunkList@CDocumentAdapter@CDocument@@UAEXXZ ENDP	; CDocument::CDocumentAdapter::ClearChunkList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?InitializeSearchContent@CDocumentAdapter@CDocument@@UAEXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
?InitializeSearchContent@CDocumentAdapter@CDocument@@UAEXXZ PROC ; CDocument::CDocumentAdapter::InitializeSearchContent, COMDAT
; _this$ = ecx

; 5824 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5825 : 			ASSERT_VALID(m_pParentDoc);

  0001f	68 c1 16 00 00	 push	 5825			; 000016c1H
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 5826 : 			if (m_pParentDoc == NULL)

  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0003c	75 27		 jne	 SHORT $LN2@Initialize

; 5827 : 			{
; 5828 : 				TRACE0("CDocumentAdapter::InitializeSearchContent is called, but its CDocument is NULL.\n");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@KEINPFKK@CDocumentAdapter?3?3InitializeSea@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_03CGPANDLG@?$CFTs@
  00048	68 c4 16 00 00	 push	 5828			; 000016c4H
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00052	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00055	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5829 : 				return;

  00063	eb 1f		 jmp	 SHORT $LN1@Initialize
$LN2@Initialize:

; 5830 : 			}
; 5831 : 
; 5832 : 			m_pParentDoc->InitializeSearchContent();

  00065	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00068	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00070	8b f4		 mov	 esi, esp
  00072	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00075	8b 90 bc 00 00
	00		 mov	 edx, DWORD PTR [eax+188]
  0007b	ff d2		 call	 edx
  0007d	3b f4		 cmp	 esi, esp
  0007f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Initialize:

; 5833 : 		}

  00084	5e		 pop	 esi
  00085	83 c4 0c	 add	 esp, 12			; 0000000cH
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
?InitializeSearchContent@CDocumentAdapter@CDocument@@UAEXXZ ENDP ; CDocument::CDocumentAdapter::InitializeSearchContent
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ?LoadFromStream@CDocumentAdapter@CDocument@@UAEJPAUIStream@@K@Z
_TEXT	SEGMENT
$T1 = -12						; size = 8
_this$ = -4						; size = 4
_pStream$ = 8						; size = 4
_grfMode$ = 12						; size = 4
?LoadFromStream@CDocumentAdapter@CDocument@@UAEJPAUIStream@@K@Z PROC ; CDocument::CDocumentAdapter::LoadFromStream, COMDAT
; _this$ = ecx

; 5808 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 5809 : 			ASSERT_VALID(m_pParentDoc);

  0001f	68 b1 16 00 00	 push	 5809			; 000016b1H
  00024	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00029	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002f	51		 push	 ecx
  00030	e8 00 00 00 00	 call	 ?AfxAssertValidObject@@YGXPBVCObject@@PBDH@Z ; AfxAssertValidObject

; 5810 : 			if (m_pParentDoc == NULL)

  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0003c	75 2c		 jne	 SHORT $LN2@LoadFromSt

; 5811 : 			{
; 5812 : 				TRACE0("CDocumentAdapter::LoadFromStream is called, but its CDocument is NULL.\n");

  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@HGKAOJLD@CDocumentAdapter?3?3LoadFromStrea@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_03CGPANDLG@?$CFTs@
  00048	68 b4 16 00 00	 push	 5812			; 000016b4H
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_0FM@NBNLHKPM@G?3?2Microsoft?5Visual?5Studio?22022@
  00052	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00055	e8 00 00 00 00	 call	 ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ; ATL::CTraceFileAndLineInfo::operator()
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 5813 : 				return E_POINTER;

  00063	b8 03 40 00 80	 mov	 eax, -2147467261	; 80004003H
  00068	eb 66		 jmp	 SHORT $LN1@LoadFromSt
$LN2@LoadFromSt:

; 5814 : 			}
; 5815 : 			m_pParentDoc->m_bPreviewHandlerMode = TRUE;

  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00070	c7 81 a8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+168], 1

; 5816 : 			m_pParentDoc->m_bEmbedded = TRUE;

  0007a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00080	c7 80 a0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+160], 1

; 5817 : 			m_pParentDoc->OnNewDocument();

  0008a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00090	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00093	8b 12		 mov	 edx, DWORD PTR [edx]
  00095	8b f4		 mov	 esi, esp
  00097	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0009a	8b 82 80 00 00
	00		 mov	 eax, DWORD PTR [edx+128]
  000a0	ff d0		 call	 eax
  000a2	3b f4		 cmp	 esi, esp
  000a4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 5818 : 			return m_pParentDoc->LoadDocumentFromStream(pStream, grfMode);

  000a9	8b f4		 mov	 esi, esp
  000ab	8b 4d 0c	 mov	 ecx, DWORD PTR _grfMode$[ebp]
  000ae	51		 push	 ecx
  000af	8b 55 08	 mov	 edx, DWORD PTR _pStream$[ebp]
  000b2	52		 push	 edx
  000b3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b6	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000bc	8b 01		 mov	 eax, DWORD PTR [ecx]
  000be	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  000c1	8b 90 b4 00 00
	00		 mov	 edx, DWORD PTR [eax+180]
  000c7	ff d2		 call	 edx
  000c9	3b f4		 cmp	 esi, esp
  000cb	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@LoadFromSt:

; 5819 : 		}

  000d0	5e		 pop	 esi
  000d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 08 00	 ret	 8
?LoadFromStream@CDocumentAdapter@CDocument@@UAEJPAUIStream@@K@Z ENDP ; CDocument::CDocumentAdapter::LoadFromStream
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ??1CDocumentAdapter@CDocument@@UAE@XZ
_TEXT	SEGMENT
tv87 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1CDocumentAdapter@CDocument@@UAE@XZ PROC		; CDocument::CDocumentAdapter::~CDocumentAdapter, COMDAT
; _this$ = ecx

; 5793 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDocumentAdapter@CDocument@@6B@

; 5794 : 			if (m_pParentDoc != NULL)

  00028	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  0002f	74 3d		 je	 SHORT $LN1@CDocumentA

; 5795 : 			{
; 5796 : 				delete m_pParentDoc;

  00031	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00034	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00037	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0003a	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  0003e	74 1d		 je	 SHORT $LN4@CDocumentA
  00040	8b f4		 mov	 esi, esp
  00042	6a 01		 push	 1
  00044	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00047	8b 11		 mov	 edx, DWORD PTR [ecx]
  00049	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0004c	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0004f	ff d0		 call	 eax
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00058	89 45 f4	 mov	 DWORD PTR tv87[ebp], eax
  0005b	eb 07		 jmp	 SHORT $LN5@CDocumentA
$LN4@CDocumentA:
  0005d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
$LN5@CDocumentA:

; 5797 : 				m_pParentDoc = NULL;

  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
$LN1@CDocumentA:

; 5798 : 			}
; 5799 : 		}

  0006e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00071	e8 00 00 00 00	 call	 ??1IDocument@ATL@@UAE@XZ ; ATL::IDocument::~IDocument
  00076	5e		 pop	 esi
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??1CDocumentAdapter@CDocument@@UAE@XZ ENDP		; CDocument::CDocumentAdapter::~CDocumentAdapter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afxwin.h
;	COMDAT ??0CDocumentAdapter@CDocument@@QAE@PAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pParentDoc$ = 8					; size = 4
??0CDocumentAdapter@CDocument@@QAE@PAV1@@Z PROC		; CDocument::CDocumentAdapter::CDocumentAdapter, COMDAT
; _this$ = ecx

; 5787 : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0IDocument@ATL@@IAE@XZ ; ATL::IDocument::IDocument
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CDocumentAdapter@CDocument@@6B@

; 5786 : 		CDocumentAdapter(CDocument* pParentDoc) : m_pParentDoc(pParentDoc)

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 08	 mov	 edx, DWORD PTR _pParentDoc$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 5788 : 
; 5789 : 		}

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??0CDocumentAdapter@CDocument@@QAE@PAV1@@Z ENDP		; CDocument::CDocumentAdapter::CDocumentAdapter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GIDocument@ATL@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GIDocument@ATL@@UAEPAXI@Z PROC			; ATL::IDocument::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1IDocument@ATL@@UAE@XZ ; ATL::IDocument::~IDocument
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 08		 push	 8
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GIDocument@ATL@@UAEPAXI@Z ENDP			; ATL::IDocument::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlhandler.h
;	COMDAT ?Release@IDocument@ATL@@UAEJXZ
_TEXT	SEGMENT
tv82 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?Release@IDocument@ATL@@UAEJXZ PROC			; ATL::IDocument::Release, COMDAT
; _this$ = ecx

; 179  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 180  : #ifdef _AFXDLL
; 181  : 		ASSERT(m_refCount > 0);

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00026	7f 14		 jg	 SHORT $LN4@Release
  00028	68 b5 00 00 00	 push	 181			; 000000b5H
  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0GA@OBEGHEBG@G?3?2Microsoft?5Visual?5Studio?22022@
  00032	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00037	85 c0		 test	 eax, eax
  00039	74 01		 je	 SHORT $LN4@Release
  0003b	cc		 int	 3
$LN4@Release:

; 182  : #else
; 183  : 		ATLASSERT(m_refCount > 0);
; 184  : #endif
; 185  : 		if (InterlockedDecrement(&m_refCount) == 0)

  0003c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003f	83 c2 04	 add	 edx, 4
  00042	83 c8 ff	 or	 eax, -1
  00045	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  00049	48		 dec	 eax
  0004a	75 33		 jne	 SHORT $LN2@Release

; 186  : 		{
; 187  : 			delete this;

  0004c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00052	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00056	74 1c		 je	 SHORT $LN5@Release
  00058	8b f4		 mov	 esi, esp
  0005a	6a 01		 push	 1
  0005c	8b 55 f8	 mov	 edx, DWORD PTR $T1[ebp]
  0005f	8b 02		 mov	 eax, DWORD PTR [edx]
  00061	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  00064	8b 10		 mov	 edx, DWORD PTR [eax]
  00066	ff d2		 call	 edx
  00068	3b f4		 cmp	 esi, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	89 45 f4	 mov	 DWORD PTR tv82[ebp], eax
  00072	eb 07		 jmp	 SHORT $LN6@Release
$LN5@Release:
  00074	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv82[ebp], 0
$LN6@Release:

; 188  : 			return 0;

  0007b	33 c0		 xor	 eax, eax
  0007d	eb 06		 jmp	 SHORT $LN1@Release
$LN2@Release:

; 189  : 		}
; 190  : 
; 191  : 		return m_refCount;

  0007f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00082	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
$LN1@Release:

; 192  : 	}

  00085	5e		 pop	 esi
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH
  00089	3b ec		 cmp	 ebp, esp
  0008b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
?Release@IDocument@ATL@@UAEJXZ ENDP			; ATL::IDocument::Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlhandler.h
;	COMDAT ?AddRef@IDocument@ATL@@UAEJXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AddRef@IDocument@ATL@@UAEJXZ PROC			; ATL::IDocument::AddRef, COMDAT
; _this$ = ecx

; 174  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 175  : 		return InterlockedIncrement(&m_refCount);

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c0 04	 add	 eax, 4
  0000d	b9 01 00 00 00	 mov	 ecx, 1
  00012	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  00016	41		 inc	 ecx
  00017	8b c1		 mov	 eax, ecx

; 176  : 	}

  00019	8b e5		 mov	 esp, ebp
  0001b	5d		 pop	 ebp
  0001c	c3		 ret	 0
?AddRef@IDocument@ATL@@UAEJXZ ENDP			; ATL::IDocument::AddRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlhandler.h
;	COMDAT ??1IDocument@ATL@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1IDocument@ATL@@UAE@XZ PROC				; ATL::IDocument::~IDocument, COMDAT
; _this$ = ecx

; 170  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IDocument@ATL@@6B@

; 171  : 	}

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1IDocument@ATL@@UAE@XZ ENDP				; ATL::IDocument::~IDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlhandler.h
;	COMDAT ??0IDocument@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IDocument@ATL@@IAE@XZ PROC				; ATL::IDocument::IDocument, COMDAT
; _this$ = ecx

; 165  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7IDocument@ATL@@6B@

; 164  : 	IDocument() : m_refCount(0)

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 166  : 	}

  0001a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001d	8b e5		 mov	 esp, ebp
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
??0IDocument@ATL@@IAE@XZ ENDP				; ATL::IDocument::IDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ
_TEXT	SEGMENT
_ptr$ = -28						; size = 4
_ple$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
_pszFmt$ = 12						; size = 4
??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ PROC		; ATL::CTraceFileAndLineInfo::operator(), COMDAT

; 449  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00022	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00025	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002d	33 c5		 xor	 eax, ebp
  0002f	50		 push	 eax
  00030	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00033	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 450  : 		CPreserveLastError ple;

  00039	8d 4d ec	 lea	 ecx, DWORD PTR _ple$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::CPreserveLastError
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 451  : 		va_list ptr; va_start(ptr, pszFmt);

  00048	8d 45 10	 lea	 eax, DWORD PTR _pszFmt$[ebp+4]
  0004b	89 45 e4	 mov	 DWORD PTR _ptr$[ebp], eax

; 452  : 		ATL::CTrace::TraceV(m_pszFileName, m_nLineNo, atlTraceGeneral, 0, pszFmt, ptr);

  0004e	8b 4d e4	 mov	 ecx, DWORD PTR _ptr$[ebp]
  00051	51		 push	 ecx
  00052	8b 55 0c	 mov	 edx, DWORD PTR _pszFmt$[ebp]
  00055	52		 push	 edx
  00056	6a 00		 push	 0
  00058	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
  0005d	e8 00 00 00 00	 call	 ??B?$CTraceCategoryEx@$00$0A@@ATL@@QAEIXZ ; ATL::CTraceCategoryEx<1,0>::operator unsigned int
  00062	50		 push	 eax
  00063	8b 45 08	 mov	 eax, DWORD PTR _this$[ebp]
  00066	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00069	51		 push	 ecx
  0006a	8b 55 08	 mov	 edx, DWORD PTR _this$[ebp]
  0006d	8b 02		 mov	 eax, DWORD PTR [edx]
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z ; ATL::CTrace::TraceV
  00075	83 c4 18	 add	 esp, 24			; 00000018H

; 453  : 		va_end(ptr);

  00078	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _ptr$[ebp], 0

; 454  : 	}

  0007f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00086	8d 4d ec	 lea	 ecx, DWORD PTR _ple$[ebp]
  00089	e8 00 00 00 00	 call	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
  0008e	52		 push	 edx
  0008f	8b cd		 mov	 ecx, ebp
  00091	50		 push	 eax
  00092	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@operator
  00098	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0009d	58		 pop	 eax
  0009e	5a		 pop	 edx
  0009f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a9	59		 pop	 ecx
  000aa	83 c4 20	 add	 esp, 32			; 00000020H
  000ad	3b ec		 cmp	 ebp, esp
  000af	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b4	8b e5		 mov	 esp, ebp
  000b6	5d		 pop	 ebp
  000b7	c3		 ret	 0
$LN7@operator:
  000b8	01 00 00 00	 DD	 1
  000bc	00 00 00 00	 DD	 $LN6@operator
$LN6@operator:
  000c0	ec ff ff ff	 DD	 -20			; ffffffecH
  000c4	04 00 00 00	 DD	 4
  000c8	00 00 00 00	 DD	 $LN4@operator
$LN4@operator:
  000cc	70		 DB	 112			; 00000070H
  000cd	6c		 DB	 108			; 0000006cH
  000ce	65		 DB	 101			; 00000065H
  000cf	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ$0:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _ple$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CPreserveLastError@ATL@@QAE@XZ ; ATL::CPreserveLastError::~CPreserveLastError
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??RCTraceFileAndLineInfo@ATL@@QBAXPBDZZ ENDP		; ATL::CTraceFileAndLineInfo::operator()
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszFileName$ = 8					; size = 4
_nLineNo$ = 12						; size = 4
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z PROC		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo, COMDAT
; _this$ = ecx

; 411  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 410  : 		: m_pszFileName(pszFileName), m_nLineNo(nLineNo)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  0000d	89 08		 mov	 DWORD PTR [eax], ecx
  0000f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00012	8b 45 0c	 mov	 eax, DWORD PTR _nLineNo$[ebp]
  00015	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 412  : 	}

  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
??0CTraceFileAndLineInfo@ATL@@QAE@PBDH@Z ENDP		; ATL::CTraceFileAndLineInfo::CTraceFileAndLineInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??1CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::~CPreserveLastError, COMDAT
; _this$ = ecx

; 396  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 397  : 		SetLastError(m_dwLastError);

  0000f	8b f4		 mov	 esi, esp
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	51		 push	 ecx
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetLastError@4
  0001d	3b f4		 cmp	 esi, esp
  0001f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 398  : 	}

  00024	5e		 pop	 esi
  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
??1CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::~CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??0CPreserveLastError@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPreserveLastError@ATL@@QAE@XZ PROC			; ATL::CPreserveLastError::CPreserveLastError, COMDAT
; _this$ = ecx

; 390  : 	CPreserveLastError()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 391  : 	{
; 392  : 		m_dwLastError = GetLastError();

  0000f	8b f4		 mov	 esi, esp
  00011	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00017	3b f4		 cmp	 esi, esp
  00019	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	89 01		 mov	 DWORD PTR [ecx], eax

; 393  : 	}

  00023	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00026	5e		 pop	 esi
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
??0CPreserveLastError@ATL@@QAE@XZ ENDP			; ATL::CPreserveLastError::CPreserveLastError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::~CHeapPtr<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -12						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 456  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 457  : 		size_t nBytes=0;

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 458  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00021	6a 01		 push	 1
  00023	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00026	50		 push	 eax
  00027	8d 4d f4	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	85 c0		 test	 eax, eax
  00035	7d 04		 jge	 SHORT $LN2@Allocate

; 459  : 		{
; 460  : 			return false;

  00037	32 c0		 xor	 al, al
  00039	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 461  : 		}
; 462  : 		return this->AllocateBytes(nBytes);

  0003b	8b 55 f4	 mov	 edx, DWORD PTR _nBytes$[ebp]
  0003e	52		 push	 edx
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 463  : 	}

  00047	52		 push	 edx
  00048	8b cd		 mov	 ecx, ebp
  0004a	50		 push	 eax
  0004b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Allocate
  00051	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00056	58		 pop	 eax
  00057	5a		 pop	 edx
  00058	83 c4 10	 add	 esp, 16			; 00000010H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN6@Allocate:
  00068	01 00 00 00	 DD	 1
  0006c	00 00 00 00	 DD	 $LN5@Allocate
$LN5@Allocate:
  00070	f4 ff ff ff	 DD	 -12			; fffffff4H
  00074	04 00 00 00	 DD	 4
  00078	00 00 00 00	 DD	 $LN4@Allocate
$LN4@Allocate:
  0007c	6e		 DB	 110			; 0000006eH
  0007d	42		 DB	 66			; 00000042H
  0007e	79		 DB	 121			; 00000079H
  0007f	74		 DB	 116			; 00000074H
  00080	65		 DB	 101			; 00000065H
  00081	73		 DB	 115			; 00000073H
  00082	00		 DB	 0
?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 435  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 436  : 	{

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>

; 437  : 	}

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 408  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 409  : 		Allocator::Free(m_pData);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00019	83 c4 04	 add	 esp, 4

; 410  : 		m_pData = NULL;

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 411  : 	}

  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 382  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 383  : 		ATLASSERT(m_pData == NULL);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 30		 je	 SHORT $LN4@AllocateBy
  00017	8b f4		 mov	 esi, esp
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00023	6a 00		 push	 0
  00025	68 7f 01 00 00	 push	 383			; 0000017fH
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_1LM@NNHIEMFN@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
  0002f	6a 02		 push	 2
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00037	83 c4 18	 add	 esp, 24			; 00000018H
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	83 f8 01	 cmp	 eax, 1
  00044	75 01		 jne	 SHORT $LN4@AllocateBy
  00046	cc		 int	 3
$LN4@AllocateBy:

; 384  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  00047	8b 55 08	 mov	 edx, DWORD PTR _nBytes$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00050	83 c4 04	 add	 esp, 4
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	89 01		 mov	 DWORD PTR [ecx], eax

; 385  : 		if (m_pData == NULL)

  00058	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0005e	75 04		 jne	 SHORT $LN2@AllocateBy

; 386  : 			return false;

  00060	32 c0		 xor	 al, al
  00062	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 387  : 
; 388  : 		return true;

  00064	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 389  : 	}

  00066	5e		 pop	 esi
  00067	83 c4 04	 add	 esp, 4
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *, COMDAT
; _this$ = ecx

; 364  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 365  : 		return m_pData;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]

; 366  : 	}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 350  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 351  : 		Free();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::Free

; 352  : 	}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::~CHeapPtrBase<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 337  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 336  : 		m_pData(NULL)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 338  : 	}

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::CHeapPtrBase<char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = -12						; size = 4
_this$ = -4						; size = 4
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 456  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0000e	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00011	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00014	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00017	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 457  : 		size_t nBytes=0;

  0001a	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nBytes$[ebp], 0

; 458  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))

  00021	6a 02		 push	 2
  00023	8b 45 08	 mov	 eax, DWORD PTR _nElements$[ebp]
  00026	50		 push	 eax
  00027	8d 4d f4	 lea	 ecx, DWORD PTR _nBytes$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ??$AtlMultiply@I@ATL@@YAJPAIII@Z ; ATL::AtlMultiply<unsigned int>
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH
  00033	85 c0		 test	 eax, eax
  00035	7d 04		 jge	 SHORT $LN2@Allocate

; 459  : 		{
; 460  : 			return false;

  00037	32 c0		 xor	 al, al
  00039	eb 0c		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 461  : 		}
; 462  : 		return this->AllocateBytes(nBytes);

  0003b	8b 55 f4	 mov	 edx, DWORD PTR _nBytes$[ebp]
  0003e	52		 push	 edx
  0003f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	e8 00 00 00 00	 call	 ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
$LN1@Allocate:

; 463  : 	}

  00047	52		 push	 edx
  00048	8b cd		 mov	 ecx, ebp
  0004a	50		 push	 eax
  0004b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Allocate
  00051	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00056	58		 pop	 eax
  00057	5a		 pop	 edx
  00058	83 c4 10	 add	 esp, 16			; 00000010H
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c2 04 00	 ret	 4
$LN6@Allocate:
  00068	01 00 00 00	 DD	 1
  0006c	00 00 00 00	 DD	 $LN5@Allocate
$LN5@Allocate:
  00070	f4 ff ff ff	 DD	 -12			; fffffff4H
  00074	04 00 00 00	 DD	 4
  00078	00 00 00 00	 DD	 $LN4@Allocate
$LN4@Allocate:
  0007c	6e		 DB	 110			; 0000006eH
  0007d	42		 DB	 66			; 00000042H
  0007e	79		 DB	 121			; 00000079H
  0007f	74		 DB	 116			; 00000074H
  00080	65		 DB	 101			; 00000065H
  00081	73		 DB	 115			; 00000073H
  00082	00		 DB	 0
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 435  : 	CHeapPtr() throw()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 436  : 	{

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>

; 437  : 	}

  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 408  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 409  : 		Allocator::Free(m_pData);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 08		 mov	 ecx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	e8 00 00 00 00	 call	 ?Free@CCRTAllocator@ATL@@SAXPAX@Z ; ATL::CCRTAllocator::Free
  00019	83 c4 04	 add	 esp, 4

; 410  : 		m_pData = NULL;

  0001c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001f	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0

; 411  : 	}

  00025	83 c4 04	 add	 esp, 4
  00028	3b ec		 cmp	 ebp, esp
  0002a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c3		 ret	 0
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 382  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 383  : 		ATLASSERT(m_pData == NULL);

  0000f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00012	83 38 00	 cmp	 DWORD PTR [eax], 0
  00015	74 30		 je	 SHORT $LN4@AllocateBy
  00017	8b f4		 mov	 esi, esp
  00019	68 00 00 00 00	 push	 OFFSET ??_C@_1BK@NHECDDNK@?$AAm?$AA_?$AAp?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
  0001e	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  00023	6a 00		 push	 0
  00025	68 7f 01 00 00	 push	 383			; 0000017fH
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_1LM@NNHIEMFN@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
  0002f	6a 02		 push	 2
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  00037	83 c4 18	 add	 esp, 24			; 00000018H
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	83 f8 01	 cmp	 eax, 1
  00044	75 01		 jne	 SHORT $LN4@AllocateBy
  00046	cc		 int	 3
$LN4@AllocateBy:

; 384  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

  00047	8b 55 08	 mov	 edx, DWORD PTR _nBytes$[ebp]
  0004a	52		 push	 edx
  0004b	e8 00 00 00 00	 call	 ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ; ATL::CCRTAllocator::Allocate
  00050	83 c4 04	 add	 esp, 4
  00053	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	89 01		 mov	 DWORD PTR [ecx], eax

; 385  : 		if (m_pData == NULL)

  00058	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	83 3a 00	 cmp	 DWORD PTR [edx], 0
  0005e	75 04		 jne	 SHORT $LN2@AllocateBy

; 386  : 			return false;

  00060	32 c0		 xor	 al, al
  00062	eb 02		 jmp	 SHORT $LN1@AllocateBy
$LN2@AllocateBy:

; 387  : 
; 388  : 		return true;

  00064	b0 01		 mov	 al, 1
$LN1@AllocateBy:

; 389  : 	}

  00066	5e		 pop	 esi
  00067	83 c4 04	 add	 esp, 4
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c2 04 00	 ret	 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *, COMDAT
; _this$ = ecx

; 364  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 365  : 		return m_pData;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 00		 mov	 eax, DWORD PTR [eax]

; 366  : 	}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 350  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 351  : 		Free();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free

; 352  : 	}

  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 337  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 336  : 		m_pData(NULL)

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 338  : 	}

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00011	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 330  : 		if (pszCategory == nullptr)

  00027	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0002b	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0002d	e9 bb 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00032	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00039	72 36		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0003b	33 c0		 xor	 eax, eax
  0003d	75 30		 jne	 SHORT $LN5@RegisterCa
  0003f	8b f4		 mov	 esi, esp
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0004b	6a 00		 push	 0
  0004d	68 51 01 00 00	 push	 337			; 00000151H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
  00057	6a 02		 push	 2
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	83 f8 01	 cmp	 eax, 1
  0006c	75 01		 jne	 SHORT $LN5@RegisterCa
  0006e	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  0006f	eb 7c		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00071	69 15 00 00 00
	00 04 01 00 00	 imul	 edx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _nCategory$[ebp]
  0007e	89 82 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[edx], eax

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  00084	68 00 01 00 00	 push	 256			; 00000100H
  00089	6a 00		 push	 0
  0008b	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _memset
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  0009a	8b 55 08	 mov	 edx, DWORD PTR _pszCategory$[ebp]
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  000a3	6a 7f		 push	 127			; 0000007fH
  000a5	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _swprintf_s
  000b1	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  000b4	8b f4		 mov	 esi, esp
  000b6	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000bc	51		 push	 ecx
  000bd	6a 7f		 push	 127			; 0000007fH
  000bf	69 15 00 00 00
	00 04 01 00 00	 imul	 edx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000c9	81 c2 04 00 00
	00		 add	 edx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000cf	52		 push	 edx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000e5	83 c0 01	 add	 eax, 1
  000e8	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ed	52		 push	 edx
  000ee	8b cd		 mov	 ecx, ebp
  000f0	50		 push	 eax
  000f1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@RegisterCa
  000f7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fc	58		 pop	 eax
  000fd	5a		 pop	 edx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00103	33 cd		 xor	 ecx, ebp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
  0011b	90		 npad	 1
$LN8@RegisterCa:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN7@RegisterCa
$LN7@RegisterCa:
  00124	f8 fe ff ff	 DD	 -264			; fffffef8H
  00128	00 01 00 00	 DD	 256			; 00000100H
  0012c	00 00 00 00	 DD	 $LN6@RegisterCa
$LN6@RegisterCa:
  00130	62		 DB	 98			; 00000062H
  00131	75		 DB	 117			; 00000075H
  00132	66		 DB	 102			; 00000066H
  00133	66		 DB	 102			; 00000066H
  00134	65		 DB	 101			; 00000065H
  00135	72		 DB	 114			; 00000072H
  00136	00		 DB	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
_TEXT	SEGMENT
_wszBuf$ = -36						; size = 4
_szBuf$ = -24						; size = 4
_cchNeeded$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pszFmt$ = 24						; size = 4
_args$ = 28						; size = 4
?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 238  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001d	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00020	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00023	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00026	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00029	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002c	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 239  : 		int cchNeeded = _vscprintf(pszFmt, args);

  00040	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  00043	50		 push	 eax
  00044	8b 4d 18	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  00047	51		 push	 ecx
  00048	e8 00 00 00 00	 call	 __vscprintf
  0004d	83 c4 08	 add	 esp, 8
  00050	89 45 f0	 mov	 DWORD PTR _cchNeeded$[ebp], eax

; 240  : 		if (cchNeeded < 0)

  00053	83 7d f0 00	 cmp	 DWORD PTR _cchNeeded$[ebp], 0
  00057	7d 05		 jge	 SHORT $LN2@TraceV

; 241  : 		{
; 242  : 			return;

  00059	e9 6d 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 243  : 		}
; 244  : 
; 245  : 		CHeapPtr<char> szBuf;

  0005e	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00061	e8 00 00 00 00	 call	 ??0?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::CHeapPtr<char,ATL::CCRTAllocator>
  00066	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 246  : 		if (!szBuf.Allocate(cchNeeded + 1))

  0006d	8b 55 f0	 mov	 edx, DWORD PTR _cchNeeded$[ebp]
  00070	83 c2 01	 add	 edx, 1
  00073	52		 push	 edx
  00074	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00077	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<char,ATL::CCRTAllocator>::Allocate
  0007c	0f b6 c0	 movzx	 eax, al
  0007f	85 c0		 test	 eax, eax
  00081	75 14		 jne	 SHORT $LN3@TraceV

; 247  : 		{
; 248  : 			return;

  00083	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008a	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  0008d	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00092	e9 34 01 00 00	 jmp	 $LN1@TraceV
$LN3@TraceV:

; 249  : 		}
; 250  : 
; 251  : 		szBuf[0] = '\0';

  00097	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  0009a	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	6b d1 00	 imul	 edx, ecx, 0
  000a7	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 252  : 
; 253  : 		if (_vsnprintf_s(szBuf, cchNeeded + 1, cchNeeded, pszFmt, args) == -1)

  000ab	8b 45 1c	 mov	 eax, DWORD PTR _args$[ebp]
  000ae	50		 push	 eax
  000af	8b 4d 18	 mov	 ecx, DWORD PTR _pszFmt$[ebp]
  000b2	51		 push	 ecx
  000b3	8b 55 f0	 mov	 edx, DWORD PTR _cchNeeded$[ebp]
  000b6	52		 push	 edx
  000b7	8b 45 f0	 mov	 eax, DWORD PTR _cchNeeded$[ebp]
  000ba	83 c0 01	 add	 eax, 1
  000bd	50		 push	 eax
  000be	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000c1	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 __vsnprintf_s
  000cc	83 c4 14	 add	 esp, 20			; 00000014H
  000cf	83 f8 ff	 cmp	 eax, -1
  000d2	75 14		 jne	 SHORT $LN4@TraceV

; 254  : 		{
; 255  : 			return;

  000d4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000db	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  000de	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  000e3	e9 e3 00 00 00	 jmp	 $LN1@TraceV
$LN4@TraceV:

; 256  : 		}
; 257  : 
; 258  : 		CHeapPtr<wchar_t> wszBuf;

  000e8	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000eb	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
  000f0	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 259  : 		if (!wszBuf.Allocate(cchNeeded + 1))

  000f4	8b 4d f0	 mov	 ecx, DWORD PTR _cchNeeded$[ebp]
  000f7	83 c1 01	 add	 ecx, 1
  000fa	51		 push	 ecx
  000fb	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  000fe	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  00103	0f b6 d0	 movzx	 edx, al
  00106	85 d2		 test	 edx, edx
  00108	75 20		 jne	 SHORT $LN5@TraceV

; 260  : 		{
; 261  : 			return;

  0010a	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0010e	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00111	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00116	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011d	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00120	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00125	e9 a1 00 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 262  : 		}
; 263  : 
; 264  : 		wszBuf[0] = '\0';

  0012a	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0012d	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00132	b9 02 00 00 00	 mov	 ecx, 2
  00137	6b d1 00	 imul	 edx, ecx, 0
  0013a	33 c9		 xor	 ecx, ecx
  0013c	66 89 0c 10	 mov	 WORD PTR [eax+edx], cx

; 265  : 
; 266  : 		if (::MultiByteToWideChar(CP_ACP, 0, szBuf, -1, wszBuf, cchNeeded + 1) == 0)

  00140	8b 55 f0	 mov	 edx, DWORD PTR _cchNeeded$[ebp]
  00143	83 c2 01	 add	 edx, 1
  00146	8b f4		 mov	 esi, esp
  00148	52		 push	 edx
  00149	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0014c	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00151	50		 push	 eax
  00152	6a ff		 push	 -1
  00154	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00157	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@DVCCRTAllocator@ATL@@@ATL@@QBEPADXZ ; ATL::CHeapPtrBase<char,ATL::CCRTAllocator>::operator char *
  0015c	50		 push	 eax
  0015d	6a 00		 push	 0
  0015f	6a 00		 push	 0
  00161	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MultiByteToWideChar@24
  00167	3b f4		 cmp	 esi, esp
  00169	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0016e	85 c0		 test	 eax, eax
  00170	75 1d		 jne	 SHORT $LN6@TraceV

; 267  : 		{
; 268  : 			return;

  00172	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00176	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00179	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0017e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00185	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00188	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0018d	eb 3c		 jmp	 SHORT $LN1@TraceV
$LN6@TraceV:

; 269  : 		}
; 270  : 
; 271  : 		TraceV(pszFileName, nLine, dwCategory, nLevel, wszBuf);

  0018f	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00192	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00197	50		 push	 eax
  00198	8b 45 14	 mov	 eax, DWORD PTR _nLevel$[ebp]
  0019b	50		 push	 eax
  0019c	8b 4d 10	 mov	 ecx, DWORD PTR _dwCategory$[ebp]
  0019f	51		 push	 ecx
  001a0	8b 55 0c	 mov	 edx, DWORD PTR _nLine$[ebp]
  001a3	52		 push	 edx
  001a4	8b 45 08	 mov	 eax, DWORD PTR _pszFileName$[ebp]
  001a7	50		 push	 eax
  001a8	e8 00 00 00 00	 call	 ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ; ATL::CTrace::TraceV
  001ad	83 c4 14	 add	 esp, 20			; 00000014H

; 272  : 	}

  001b0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001b4	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001b7	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  001bc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c3	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  001c6	e8 00 00 00 00	 call	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  001cb	52		 push	 edx
  001cc	8b cd		 mov	 ecx, ebp
  001ce	50		 push	 eax
  001cf	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@TraceV
  001d5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001da	58		 pop	 eax
  001db	5a		 pop	 edx
  001dc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e6	59		 pop	 ecx
  001e7	5e		 pop	 esi
  001e8	83 c4 28	 add	 esp, 40			; 00000028H
  001eb	3b ec		 cmp	 ebp, esp
  001ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f2	8b e5		 mov	 esp, ebp
  001f4	5d		 pop	 ebp
  001f5	c3		 ret	 0
  001f6	66 90		 npad	 2
$LN14@TraceV:
  001f8	02 00 00 00	 DD	 2
  001fc	00 00 00 00	 DD	 $LN13@TraceV
$LN13@TraceV:
  00200	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00204	04 00 00 00	 DD	 4
  00208	00 00 00 00	 DD	 $LN10@TraceV
  0020c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00210	04 00 00 00	 DD	 4
  00214	00 00 00 00	 DD	 $LN11@TraceV
$LN11@TraceV:
  00218	77		 DB	 119			; 00000077H
  00219	73		 DB	 115			; 00000073H
  0021a	7a		 DB	 122			; 0000007aH
  0021b	42		 DB	 66			; 00000042H
  0021c	75		 DB	 117			; 00000075H
  0021d	66		 DB	 102			; 00000066H
  0021e	00		 DB	 0
$LN10@TraceV:
  0021f	73		 DB	 115			; 00000073H
  00220	7a		 DB	 122			; 0000007aH
  00221	42		 DB	 66			; 00000042H
  00222	75		 DB	 117			; 00000075H
  00223	66		 DB	 102			; 00000066H
  00224	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR _szBuf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@DVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__unwindfunclet$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z$1:
  00008	8d 4d dc	 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TraceV@CTrace@ATL@@SAXPBDHII0PAD@Z ENDP		; ATL::CTrace::TraceV
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z
_TEXT	SEGMENT
_fileName$ = -2608					; size = 520
_wszBuf$ = -2080					; size = 4
_chCount$ = -2072					; size = 4
_pwszCategoryName$ = -2068				; size = 4
_categoryLength$ = -2064				; size = 4
_wszCategory$ = -2056					; size = 2048
__$ArrayPad$ = -4					; size = 4
_pszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
_dwCategory$ = 16					; size = 4
_nLevel$ = 20						; size = 4
_pwszMessage$ = 24					; size = 4
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z PROC		; ATL::CTrace::TraceV, COMDAT

; 150  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 0a 00
	00		 sub	 esp, 2612		; 00000a34H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd cc f5 ff
	ff		 lea	 edi, DWORD PTR [ebp-2612]
  00011	b9 8d 02 00 00	 mov	 ecx, 653		; 0000028dH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 151  : 		if (CTrace::m_nLevel == CTrace::DisableTracing || CTrace::m_nLevel < nLevel || (CTrace::m_nCategory & dwCategory) == 0)

  00027	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?m_nLevel@CTrace@ATL@@1IA, -1 ; ATL::CTrace::m_nLevel
  0002e	74 15		 je	 SHORT $LN3@TraceV
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLevel@CTrace@ATL@@1IA ; ATL::CTrace::m_nLevel
  00035	3b 45 14	 cmp	 eax, DWORD PTR _nLevel$[ebp]
  00038	72 0b		 jb	 SHORT $LN3@TraceV
  0003a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_nCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nCategory
  00040	23 4d 10	 and	 ecx, DWORD PTR _dwCategory$[ebp]
  00043	75 05		 jne	 SHORT $LN2@TraceV
$LN3@TraceV:

; 152  : 		{
; 153  : 			return;

  00045	e9 d7 01 00 00	 jmp	 $LN1@TraceV
$LN2@TraceV:

; 154  : 		}
; 155  : 
; 156  : 		wchar_t wszCategory[TraceBufferSize] = {'\0'};

  0004a	68 00 08 00 00	 push	 2048			; 00000800H
  0004f	6a 00		 push	 0
  00051	8d 95 f8 f7 ff
	ff		 lea	 edx, DWORD PTR _wszCategory$[ebp]
  00057	52		 push	 edx
  00058	e8 00 00 00 00	 call	 _memset
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 157  : 		int categoryLength = 0;

  00060	c7 85 f0 f7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _categoryLength$[ebp], 0

; 158  : 		const wchar_t *const pwszCategoryName = GetCategoryName(dwCategory);

  0006a	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ; ATL::CTrace::GetCategoryName
  00073	83 c4 04	 add	 esp, 4
  00076	89 85 ec f7 ff
	ff		 mov	 DWORD PTR _pwszCategoryName$[ebp], eax

; 159  : 		if (pwszCategoryName != nullptr)

  0007c	83 bd ec f7 ff
	ff 00		 cmp	 DWORD PTR _pwszCategoryName$[ebp], 0
  00083	74 36		 je	 SHORT $LN4@TraceV

; 160  : 		{
; 161  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%ls - ", pwszCategoryName)) == -1)

  00085	8b 8d ec f7 ff
	ff		 mov	 ecx, DWORD PTR _pwszCategoryName$[ebp]
  0008b	51		 push	 ecx
  0008c	68 00 00 00 00	 push	 OFFSET ??_C@_1O@LFNDFEBP@?$AA?$CF?$AAl?$AAs?$AA?5?$AA?9?$AA?5@
  00091	68 00 04 00 00	 push	 1024			; 00000400H
  00096	8d 95 f8 f7 ff
	ff		 lea	 edx, DWORD PTR _wszCategory$[ebp]
  0009c	52		 push	 edx
  0009d	e8 00 00 00 00	 call	 _swprintf_s
  000a2	83 c4 10	 add	 esp, 16			; 00000010H
  000a5	89 85 f0 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  000ab	83 bd f0 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000b2	75 05		 jne	 SHORT $LN6@TraceV

; 162  : 			{
; 163  : 				return;

  000b4	e9 68 01 00 00	 jmp	 $LN1@TraceV
$LN6@TraceV:

; 164  : 			}
; 165  : 		}

  000b9	eb 31		 jmp	 SHORT $LN5@TraceV
$LN4@TraceV:

; 166  : 		else
; 167  : 		{
; 168  : 			if ((categoryLength = swprintf_s(wszCategory, TraceBufferSize, L"%u - ", dwCategory)) == -1)

  000bb	8b 45 10	 mov	 eax, DWORD PTR _dwCategory$[ebp]
  000be	50		 push	 eax
  000bf	68 00 00 00 00	 push	 OFFSET ??_C@_1M@PGKOAACE@?$AA?$CF?$AAu?$AA?5?$AA?9?$AA?5@
  000c4	68 00 04 00 00	 push	 1024			; 00000400H
  000c9	8d 8d f8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  000cf	51		 push	 ecx
  000d0	e8 00 00 00 00	 call	 _swprintf_s
  000d5	83 c4 10	 add	 esp, 16			; 00000010H
  000d8	89 85 f0 f7 ff
	ff		 mov	 DWORD PTR _categoryLength$[ebp], eax
  000de	83 bd f0 f7 ff
	ff ff		 cmp	 DWORD PTR _categoryLength$[ebp], -1
  000e5	75 05		 jne	 SHORT $LN5@TraceV

; 169  : 			{
; 170  : 				return;

  000e7	e9 35 01 00 00	 jmp	 $LN1@TraceV
$LN5@TraceV:

; 171  : 			}
; 172  : 		}
; 173  : 
; 174  : 		int chCount = (int)wcslen(pwszMessage) + categoryLength + 1;

  000ec	8b f4		 mov	 esi, esp
  000ee	8b 55 18	 mov	 edx, DWORD PTR _pwszMessage$[ebp]
  000f1	52		 push	 edx
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcslen
  000f8	83 c4 04	 add	 esp, 4
  000fb	3b f4		 cmp	 esi, esp
  000fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00102	8b 8d f0 f7 ff
	ff		 mov	 ecx, DWORD PTR _categoryLength$[ebp]
  00108	8d 54 08 01	 lea	 edx, DWORD PTR [eax+ecx+1]
  0010c	89 95 e8 f7 ff
	ff		 mov	 DWORD PTR _chCount$[ebp], edx

; 175  : 		CHeapPtr<wchar_t> wszBuf;

  00112	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00118	e8 00 00 00 00	 call	 ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>

; 176  : 		if (!wszBuf.Allocate(chCount))

  0011d	8b 85 e8 f7 ff
	ff		 mov	 eax, DWORD PTR _chCount$[ebp]
  00123	50		 push	 eax
  00124	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0012a	e8 00 00 00 00	 call	 ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
  0012f	0f b6 c8	 movzx	 ecx, al
  00132	85 c9		 test	 ecx, ecx
  00134	75 10		 jne	 SHORT $LN8@TraceV

; 177  : 		{
; 178  : 			return;

  00136	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0013c	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  00141	e9 db 00 00 00	 jmp	 $LN1@TraceV
$LN8@TraceV:

; 179  : 		}
; 180  : 
; 181  : 		wszBuf[0] = '\0';

  00146	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0014c	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00151	ba 02 00 00 00	 mov	 edx, 2
  00156	6b ca 00	 imul	 ecx, edx, 0
  00159	33 d2		 xor	 edx, edx
  0015b	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx

; 182  : 
; 183  : 		if (swprintf_s(wszBuf, chCount, L"%ls%ls", wszCategory, pwszMessage) == -1)

  0015f	8b 45 18	 mov	 eax, DWORD PTR _pwszMessage$[ebp]
  00162	50		 push	 eax
  00163	8d 8d f8 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszCategory$[ebp]
  00169	51		 push	 ecx
  0016a	68 00 00 00 00	 push	 OFFSET ??_C@_1O@OAIPCDPO@?$AA?$CF?$AAl?$AAs?$AA?$CF?$AAl?$AAs@
  0016f	8b 95 e8 f7 ff
	ff		 mov	 edx, DWORD PTR _chCount$[ebp]
  00175	52		 push	 edx
  00176	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0017c	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 _swprintf_s
  00187	83 c4 14	 add	 esp, 20			; 00000014H
  0018a	83 f8 ff	 cmp	 eax, -1
  0018d	75 10		 jne	 SHORT $LN9@TraceV

; 184  : 		{
; 185  : 			return;

  0018f	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  00195	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  0019a	e9 82 00 00 00	 jmp	 $LN1@TraceV
$LN9@TraceV:

; 186  : 		}
; 187  : 
; 188  : 		wchar_t fileName[_MAX_PATH] = {'\0'};	

  0019f	68 08 02 00 00	 push	 520			; 00000208H
  001a4	6a 00		 push	 0
  001a6	8d 85 d0 f5 ff
	ff		 lea	 eax, DWORD PTR _fileName$[ebp]
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 _memset
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : #if _MSC_VER < 1900
; 190  : 		if (swprintf_s(fileName, _MAX_PATH, L"%S", pszFileName) == -1)
; 191  : #else
; 192  : 		if (swprintf_s(fileName, _MAX_PATH, L"%hs", pszFileName) == -1)

  001b5	8b 4d 08	 mov	 ecx, DWORD PTR _pszFileName$[ebp]
  001b8	51		 push	 ecx
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  001be	68 04 01 00 00	 push	 260			; 00000104H
  001c3	8d 95 d0 f5 ff
	ff		 lea	 edx, DWORD PTR _fileName$[ebp]
  001c9	52		 push	 edx
  001ca	e8 00 00 00 00	 call	 _swprintf_s
  001cf	83 c4 10	 add	 esp, 16			; 00000010H
  001d2	83 f8 ff	 cmp	 eax, -1
  001d5	75 0d		 jne	 SHORT $LN10@TraceV

; 193  : #endif
; 194  : 		{
; 195  : 			return;

  001d7	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001dd	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
  001e2	eb 3d		 jmp	 SHORT $LN1@TraceV
$LN10@TraceV:

; 196  : 		}
; 197  : 
; 198  : 		_CrtDbgReportW(_CRT_WARN, fileName, nLine, nullptr, L"%ls", static_cast<const wchar_t*>(wszBuf));

  001e4	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  001ea	e8 00 00 00 00	 call	 ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
  001ef	8b f4		 mov	 esi, esp
  001f1	50		 push	 eax
  001f2	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  001f7	6a 00		 push	 0
  001f9	8b 45 0c	 mov	 eax, DWORD PTR _nLine$[ebp]
  001fc	50		 push	 eax
  001fd	8d 8d d0 f5 ff
	ff		 lea	 ecx, DWORD PTR _fileName$[ebp]
  00203	51		 push	 ecx
  00204	6a 00		 push	 0
  00206	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0020c	83 c4 18	 add	 esp, 24			; 00000018H
  0020f	3b f4		 cmp	 esi, esp
  00211	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 199  : 	}

  00216	8d 8d e0 f7 ff
	ff		 lea	 ecx, DWORD PTR _wszBuf$[ebp]
  0021c	e8 00 00 00 00	 call	 ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
$LN1@TraceV:
  00221	52		 push	 edx
  00222	8b cd		 mov	 ecx, ebp
  00224	50		 push	 eax
  00225	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@TraceV
  0022b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00230	58		 pop	 eax
  00231	5a		 pop	 edx
  00232	5f		 pop	 edi
  00233	5e		 pop	 esi
  00234	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00237	33 cd		 xor	 ecx, ebp
  00239	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0023e	81 c4 34 0a 00
	00		 add	 esp, 2612		; 00000a34H
  00244	3b ec		 cmp	 ebp, esp
  00246	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024b	8b e5		 mov	 esp, ebp
  0024d	5d		 pop	 ebp
  0024e	c3		 ret	 0
  0024f	90		 npad	 1
$LN17@TraceV:
  00250	03 00 00 00	 DD	 3
  00254	00 00 00 00	 DD	 $LN16@TraceV
$LN16@TraceV:
  00258	f8 f7 ff ff	 DD	 -2056			; fffff7f8H
  0025c	00 08 00 00	 DD	 2048			; 00000800H
  00260	00 00 00 00	 DD	 $LN13@TraceV
  00264	e0 f7 ff ff	 DD	 -2080			; fffff7e0H
  00268	04 00 00 00	 DD	 4
  0026c	00 00 00 00	 DD	 $LN14@TraceV
  00270	d0 f5 ff ff	 DD	 -2608			; fffff5d0H
  00274	08 02 00 00	 DD	 520			; 00000208H
  00278	00 00 00 00	 DD	 $LN15@TraceV
$LN15@TraceV:
  0027c	66		 DB	 102			; 00000066H
  0027d	69		 DB	 105			; 00000069H
  0027e	6c		 DB	 108			; 0000006cH
  0027f	65		 DB	 101			; 00000065H
  00280	4e		 DB	 78			; 0000004eH
  00281	61		 DB	 97			; 00000061H
  00282	6d		 DB	 109			; 0000006dH
  00283	65		 DB	 101			; 00000065H
  00284	00		 DB	 0
$LN14@TraceV:
  00285	77		 DB	 119			; 00000077H
  00286	73		 DB	 115			; 00000073H
  00287	7a		 DB	 122			; 0000007aH
  00288	42		 DB	 66			; 00000042H
  00289	75		 DB	 117			; 00000075H
  0028a	66		 DB	 102			; 00000066H
  0028b	00		 DB	 0
$LN13@TraceV:
  0028c	77		 DB	 119			; 00000077H
  0028d	73		 DB	 115			; 00000073H
  0028e	7a		 DB	 122			; 0000007aH
  0028f	43		 DB	 67			; 00000043H
  00290	61		 DB	 97			; 00000061H
  00291	74		 DB	 116			; 00000074H
  00292	65		 DB	 101			; 00000065H
  00293	67		 DB	 103			; 00000067H
  00294	6f		 DB	 111			; 0000006fH
  00295	72		 DB	 114			; 00000072H
  00296	79		 DB	 121			; 00000079H
  00297	00		 DB	 0
?TraceV@CTrace@ATL@@CAXPBDHIIPB_W@Z ENDP		; ATL::CTrace::TraceV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ?GetCategoryName@CTrace@ATL@@CAPA_WI@Z
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_nCategory$ = 8						; size = 4
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z PROC		; ATL::CTrace::GetCategoryName, COMDAT

; 132  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 133  : 		for(unsigned int i = 0; i < m_nLastCategory; i++) 

  00004	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0000b	eb 09		 jmp	 SHORT $LN4@GetCategor
$LN2@GetCategor:
  0000d	8b 45 fc	 mov	 eax, DWORD PTR _i$1[ebp]
  00010	83 c0 01	 add	 eax, 1
  00013	89 45 fc	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@GetCategor:
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _i$1[ebp]
  00019	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  0001f	73 22		 jae	 SHORT $LN3@GetCategor

; 134  : 		{
; 135  : 			if (m_nMap[i].nCategory == nCategory)

  00021	69 55 fc 04 01
	00 00		 imul	 edx, DWORD PTR _i$1[ebp], 260
  00028	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[edx]
  0002e	3b 45 08	 cmp	 eax, DWORD PTR _nCategory$[ebp]
  00031	75 0e		 jne	 SHORT $LN5@GetCategor

; 136  : 			{
; 137  : 				return m_nMap[i].categryName;

  00033	69 45 fc 04 01
	00 00		 imul	 eax, DWORD PTR _i$1[ebp], 260
  0003a	05 04 00 00 00	 add	 eax, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  0003f	eb 04		 jmp	 SHORT $LN1@GetCategor
$LN5@GetCategor:

; 138  : 			}
; 139  : 		}

  00041	eb ca		 jmp	 SHORT $LN2@GetCategor
$LN3@GetCategor:

; 140  : 
; 141  : 		return nullptr;

  00043	33 c0		 xor	 eax, eax
$LN1@GetCategor:

; 142  : 	}

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?GetCategoryName@CTrace@ATL@@CAPA_WI@Z ENDP		; ATL::CTrace::GetCategoryName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG74042
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 20 00 00	 push	 8192			; 00002000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceGeneral@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceGeneral@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceGeneral'', COMDAT

; 97   : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceGeneral> atlTraceGeneral(_T("atlTraceGeneral"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG73381
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceGeneral@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceGeneral''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??B?$CTraceCategoryEx@$00$0A@@ATL@@QAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CTraceCategoryEx@$00$0A@@ATL@@QAEIXZ PROC		; ATL::CTraceCategoryEx<1,0>::operator unsigned int, COMDAT
; _this$ = ecx

; 79   : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 80   : #ifdef _DEBUG
; 81   : 		return traceCategory;

  00007	b8 01 00 00 00	 mov	 eax, 1

; 82   : #else
; 83   : 		return 0;
; 84   : #endif
; 85   : 	}

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
??B?$CTraceCategoryEx@$00$0A@@ATL@@QAEIXZ ENDP		; ATL::CTraceCategoryEx<1,0>::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	6a 01		 push	 1
  00010	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  00019	83 c4 08	 add	 esp, 8

; 482  : }

  0001c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001f	83 c4 04	 add	 esp, 4
  00022	3b ec		 cmp	 ebp, esp
  00024	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC			; ATL::CCRTAllocator::Free, COMDAT

; 267  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 268  : 		free(p);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _p$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 269  : 	}

  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC		; ATL::CCRTAllocator::Allocate, COMDAT

; 262  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 263  : 		return malloc(nBytes);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 08	 mov	 eax, DWORD PTR _nBytes$[ebp]
  00009	50		 push	 eax
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00010	83 c4 04	 add	 esp, 4
  00013	3b f4		 cmp	 esi, esp
  00015	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 264  : 	}

  0001a	5e		 pop	 esi
  0001b	3b ec		 cmp	 ebp, esp
  0001d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atlalloc.h
;	COMDAT ??$AtlMultiply@I@ATL@@YAJPAIII@Z
_TEXT	SEGMENT
_i64Result$ = -8					; size = 8
_piResult$ = 8						; size = 4
_iLeft$ = 12						; size = 4
_iRight$ = 16						; size = 4
??$AtlMultiply@I@ATL@@YAJPAIII@Z PROC			; ATL::AtlMultiply<unsigned int>, COMDAT

; 135  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

  00014	8b 45 0c	 mov	 eax, DWORD PTR _iLeft$[ebp]
  00017	f7 65 10	 mul	 DWORD PTR _iRight$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR _i64Result$[ebp], eax
  0001d	89 55 fc	 mov	 DWORD PTR _i64Result$[ebp+4], edx

; 137  : 	if(i64Result>UINT_MAX)

  00020	83 7d fc 00	 cmp	 DWORD PTR _i64Result$[ebp+4], 0
  00024	77 06		 ja	 SHORT $LN4@AtlMultipl
  00026	83 7d f8 ff	 cmp	 DWORD PTR _i64Result$[ebp], -1
  0002a	76 0f		 jbe	 SHORT $LN2@AtlMultipl
$LN4@AtlMultipl:

; 138  : 	{
; 139  : 		return HRESULT_FROM_WIN32(ERROR_ARITHMETIC_OVERFLOW);

  0002c	68 16 02 00 00	 push	 534			; 00000216H
  00031	e8 00 00 00 00	 call	 _HRESULT_FROM_WIN32
  00036	83 c4 04	 add	 esp, 4
  00039	eb 0a		 jmp	 SHORT $LN1@AtlMultipl
$LN2@AtlMultipl:

; 140  : 	}
; 141  : 	*piResult=static_cast<unsigned int>(i64Result);

  0003b	8b 45 f8	 mov	 eax, DWORD PTR _i64Result$[ebp]
  0003e	8b 4d 08	 mov	 ecx, DWORD PTR _piResult$[ebp]
  00041	89 01		 mov	 DWORD PTR [ecx], eax

; 142  : 	return S_OK;

  00043	33 c0		 xor	 eax, eax
$LN1@AtlMultipl:

; 143  : }

  00045	83 c4 08	 add	 esp, 8
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
??$AtlMultiply@I@ATL@@YAJPAIII@Z ENDP			; ATL::AtlMultiply<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -44						; size = 4
_bQuit$ = -40						; size = 4
_msg$ = -32						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000b	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00017	8b f4		 mov	 esi, esp
  00019	6a 01		 push	 1
  0001b	6a 12		 push	 18			; 00000012H
  0001d	6a 12		 push	 18			; 00000012H
  0001f	6a 00		 push	 0
  00021	8d 45 e0	 lea	 eax, DWORD PTR _msg$[ebp]
  00024	50		 push	 eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	89 45 d8	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  00035	8b f4		 mov	 esi, esp
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _nLine$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _lpszFileName$[ebp]
  00042	52		 push	 edx
  00043	6a 02		 push	 2
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0004b	83 c4 14	 add	 esp, 20			; 00000014H
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	89 45 d4	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00058	83 7d d8 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0005c	74 13		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0005e	8b f4		 mov	 esi, esp
  00060	8b 45 e8	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00071	8b 45 d4	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  00074	52		 push	 edx
  00075	8b cd		 mov	 ecx, ebp
  00077	50		 push	 eax
  00078	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@AfxAssertF
  0007e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00083	58		 pop	 eax
  00084	5a		 pop	 edx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 2c	 add	 esp, 44			; 0000002cH
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
  00097	90		 npad	 1
$LN6@AfxAssertF:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN5@AfxAssertF
$LN5@AfxAssertF:
  000a0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000a4	1c 00 00 00	 DD	 28			; 0000001cH
  000a8	00 00 00 00	 DD	 $LN4@AfxAssertF
$LN4@AfxAssertF:
  000ac	6d		 DB	 109			; 0000006dH
  000ad	73		 DB	 115			; 00000073H
  000ae	67		 DB	 103			; 00000067H
  000af	00		 DB	 0
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2247 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  0001b	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 __vsscanf_l
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 2253 :         return _Result;

  00041	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 2254 :     }

  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT

; 2152 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2153 :         return __stdio_common_vsscanf(

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	6a ff		 push	 -1
  00014	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ___local_stdio_scanf_options
  0001d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00020	51		 push	 ecx
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	52		 push	 edx
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsscanf
  0002a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  00034	5e		 pop	 esi
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT __vscprintf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
__ArgList$ = 12						; size = 4
__vscprintf PROC					; COMDAT

; 1668 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1669 :         return _vscprintf_l(_Format, NULL, _ArgList);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 __vscprintf_l
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1670 :     }

  00015	3b ec		 cmp	 ebp, esp
  00017	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
__vscprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT __vscprintf_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
__Locale$ = 12						; size = 4
__ArgList$ = 16						; size = 4
__vscprintf_l PROC					; COMDAT

; 1651 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1652 :         int const _Result = __stdio_common_vsprintf(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 10	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 0c	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 08	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	6a 00		 push	 0
  00025	6a 00		 push	 0
  00027	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0002c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002e	83 c9 02	 or	 ecx, 2
  00031	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00034	52		 push	 edx
  00035	51		 push	 ecx
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  0003c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1653 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1654 :             NULL, 0, _Format, _Locale, _ArgList);
; 1655 : 
; 1656 :         return _Result < 0 ? -1 : _Result;

  00049	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004d	7d 09		 jge	 SHORT $LN3@vscprintf_
  0004f	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  00056	eb 06		 jmp	 SHORT $LN4@vscprintf_
$LN3@vscprintf_:
  00058	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  0005b	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vscprintf_:
  0005e	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1657 :     }

  00061	5e		 pop	 esi
  00062	83 c4 08	 add	 esp, 8
  00065	3b ec		 cmp	 ebp, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
__vscprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_s PROC					; COMDAT

; 1598 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00003	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	8b 4d 14	 mov	 ecx, DWORD PTR __Format$[ebp]
  0000c	51		 push	 ecx
  0000d	8b 55 10	 mov	 edx, DWORD PTR __MaxCount$[ebp]
  00010	52		 push	 edx
  00011	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00014	50		 push	 eax
  00015	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 __vsnprintf_s_l
  0001e	83 c4 18	 add	 esp, 24			; 00000018H

; 1600 :     }

  00021	3b ec		 cmp	 ebp, esp
  00023	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
__vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT __vsnprintf_s_l
_TEXT	SEGMENT
tv74 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__MaxCount$ = 16					; size = 4
__Format$ = 20						; size = 4
__Locale$ = 24						; size = 4
__ArgList$ = 28						; size = 4
__vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 1c	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 18	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 14	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 10	 mov	 eax, DWORD PTR __MaxCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 0c	 mov	 ecx, DWORD PTR __BufferCount$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0002e	52		 push	 edx
  0002f	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00034	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00037	51		 push	 ecx
  00038	8b 10		 mov	 edx, DWORD PTR [eax]
  0003a	52		 push	 edx
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsnprintf_s
  00041	83 c4 20	 add	 esp, 32			; 00000020H
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0004e	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00052	7d 09		 jge	 SHORT $LN3@vsnprintf_
  00054	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv74[ebp], -1
  0005b	eb 06		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0005d	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]
  00060	89 45 f8	 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  00063	8b 45 f8	 mov	 eax, DWORD PTR tv74[ebp]

; 1583 :     }

  00066	5e		 pop	 esi
  00067	83 c4 08	 add	 esp, 8
  0006a	3b ec		 cmp	 ebp, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00071	8b e5		 mov	 esp, ebp
  00073	5d		 pop	 ebp
  00074	c3		 ret	 0
__vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1523 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1524 :             int _Result;
; 1525 :             va_list _ArgList;
; 1526 :             __crt_va_start(_ArgList, _Format);

  0001b	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1527 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 __vswprintf_s_l
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1528 :             __crt_va_end(_ArgList);

  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1529 :             return _Result;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1530 :         }

  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1256 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1257 :         int const _Result = __stdio_common_vswprintf_s(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00030	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00033	52		 push	 edx
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1258 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1259 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1260 : 
; 1261 :         return _Result < 0 ? -1 : _Result;

  0004a	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004e	7d 09		 jge	 SHORT $LN3@vswprintf_
  00050	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00057	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  0005c	89 4d f8	 mov	 DWORD PTR tv73[ebp], ecx
$LN4@vswprintf_:
  0005f	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 1262 :     }

  00062	5e		 pop	 esi
  00063	83 c4 08	 add	 esp, 8
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 100  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\shared\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
tv68 = -4						; size = 4
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 29718: FORCEINLINE _Translates_Win32_to_HRESULT_(x) HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	83 7d 08 00	 cmp	 DWORD PTR _x$[ebp], 0
  00008	7f 08		 jg	 SHORT $LN3@HRESULT_FR
  0000a	8b 45 08	 mov	 eax, DWORD PTR _x$[ebp]
  0000d	89 45 fc	 mov	 DWORD PTR tv68[ebp], eax
  00010	eb 18		 jmp	 SHORT $LN4@HRESULT_FR
$LN3@HRESULT_FR:
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _x$[ebp]
  00015	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  0001b	81 c9 00 00 07
	00		 or	 ecx, 458752		; 00070000H
  00021	81 c9 00 00 00
	80		 or	 ecx, -2147483648	; 80000000H
  00027	89 4d fc	 mov	 DWORD PTR tv68[ebp], ecx
$LN4@HRESULT_FR:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR tv68[ebp]
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
$LN2@vector:
  00015	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00018	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00024	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00028	76 09		 jbe	 SHORT $LN5@vector
  0002a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00031	eb 07		 jmp	 SHORT $LN6@vector
$LN5@vector:
  00033	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN6@vector:
  0003a	83 7d f8 00	 cmp	 DWORD PTR tv67[ebp], 0
  0003e	74 1a		 je	 SHORT $LN1@vector
  00040	8b f4		 mov	 esi, esp
  00042	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00045	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b 55 08	 mov	 edx, DWORD PTR ___t$[ebp]
  00052	03 55 0c	 add	 edx, DWORD PTR ___s$[ebp]
  00055	89 55 08	 mov	 DWORD PTR ___t$[ebp], edx
  00058	eb bb		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0005a	5e		 pop	 esi
  0005b	83 c4 08	 add	 esp, 8
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
