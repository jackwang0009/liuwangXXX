; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

	TITLE	C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Debug\CCD.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?srchDepth@@3HA					; srchDepth
PUBLIC	?started@@3_NA					; started
PUBLIC	?count@@3HA					; count
_BSS	SEGMENT
?srchDepth@@3HA DD 01H DUP (?)				; srchDepth
?started@@3_NA DB 01H DUP (?)				; started
	ALIGN	4

?count@@3HA DD	01H DUP (?)				; count
_BSS	ENDS
CONST	SEGMENT
$SG225634 DB	'%s', 00H
	ORG $+1
$SG225635 DB	0aH, 00H
	ORG $+2
$SG225804 DB	'C:\Users\15485\Desktop\', 0b9H, 0a4H, 0b3H, 0ccH, 0d6H, 0aeH
	DB	0d0H, 0c7H, 0b5H, 0e3H, 0b8H, 0f1H, 0c6H, 0e5H, '\', 0b9H, 0a4H
	DB	0b3H, 0ccH, 0d6H, 0aeH, 0d0H, 0c7H, 0b5H, 0e3H, 0b8H, 0f1H, 0c6H
	DB	0e5H, '\CCD.cpp', 00H
	ORG $+3
$SG225812 DB	'Too Large', 00H
	ORG $+2
$SG225820 DB	'C:\Users\15485\Desktop\', 0b9H, 0a4H, 0b3H, 0ccH, 0d6H, 0aeH
	DB	0d0H, 0c7H, 0b5H, 0e3H, 0b8H, 0f1H, 0c6H, 0e5H, '\', 0b9H, 0a4H
	DB	0b3H, 0ccH, 0d6H, 0aeH, 0d0H, 0c7H, 0b5H, 0e3H, 0b8H, 0f1H, 0c6H
	DB	0e5H, '\CCD.cpp', 00H
	ORG $+3
$SG225854 DB	'Illegal rotation/reflection', 00H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	?Width@DOTS_AND_BOXES@@QBEHXZ			; DOTS_AND_BOXES::Width
PUBLIC	?Height@DOTS_AND_BOXES@@QBEHXZ			; DOTS_AND_BOXES::Height
PUBLIC	?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
PUBLIC	?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::VLineType
PUBLIC	?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
PUBLIC	?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::HLineType
PUBLIC	??0RRCCp@@QAE@HH@Z				; RRCCp::RRCCp
PUBLIC	??1RRCCp@@QAE@XZ				; RRCCp::~RRCCp
PUBLIC	?Rotate@RRCCp@@QAE_K_K@Z			; RRCCp::Rotate
PUBLIC	?Reflect@RRCCp@@QAE_K_K@Z			; RRCCp::Reflect
PUBLIC	?IsCapture@RRCCp@@QAE_N_KH@Z			; RRCCp::IsCapture
PUBLIC	?CornerCanon@RRCCp@@QAE_K_K@Z			; RRCCp::CornerCanon
PUBLIC	?NextRotRef@RRCCp@@QAE_K_KH@Z			; RRCCp::NextRotRef
PUBLIC	??_GRRCCp@@QAEPAXI@Z				; RRCCp::`scalar deleting destructor'
PUBLIC	??0CCDn@@QAE@XZ					; CCDn::CCDn
PUBLIC	??1CCDn@@QAE@XZ					; CCDn::~CCDn
PUBLIC	?Canon@CCDn@@QAEXXZ				; CCDn::Canon
PUBLIC	?LogUiUiUI64@CCDn@@QAEXPADII_K@Z		; CCDn::LogUiUiUI64
PUBLIC	??0CCDp@@QAE@HH@Z				; CCDp::CCDp
PUBLIC	??1CCDp@@QAE@XZ					; CCDp::~CCDp
PUBLIC	??4CCDp@@UAEAAVCCDn@@PBVDOTS_AND_BOXES@@@Z	; CCDp::operator=
PUBLIC	?IsCapture@CCDp@@QAE_NH@Z			; CCDp::IsCapture
PUBLIC	?NumRotRef@CCDp@@UAEHXZ				; CCDp::NumRotRef
PUBLIC	?GoodOpening@CCDp@@QAE_N_K0@Z			; CCDp::GoodOpening
PUBLIC	?CaptureEntry@RRCC@@AAEXHHHPAH@Z		; RRCC::CaptureEntry
PUBLIC	?BuildCapturesTable@RRCC@@AAEXHH@Z		; RRCC::BuildCapturesTable
PUBLIC	?BuildRefRotTables@RRCC@@AAEXHH@Z		; RRCC::BuildRefRotTables
PUBLIC	?AddCorner@RRCC@@AAEXHHHHH@Z			; RRCC::AddCorner
PUBLIC	?BuildCornersTable@RRCC@@AAEXHH@Z		; RRCC::BuildCornersTable
PUBLIC	??0RRCC@@QAE@XZ					; RRCC::RRCC
PUBLIC	??1RRCC@@QAE@XZ					; RRCC::~RRCC
PUBLIC	?IncrementReferenceCount@RRCC@@QAEXHH@Z		; RRCC::IncrementReferenceCount
PUBLIC	?DecrementReferenceCount@RRCC@@QAEXHH@Z		; RRCC::DecrementReferenceCount
PUBLIC	?GetRotTable@RRCC@@QAEPA_KHH@Z			; RRCC::GetRotTable
PUBLIC	?GetRefTable@RRCC@@QAEPA_KHH@Z			; RRCC::GetRefTable
PUBLIC	?GetCapturesTable@RRCC@@QAEPA_KHH@Z		; RRCC::GetCapturesTable
PUBLIC	?GetCornersTable@RRCC@@QAEPA_KHH@Z		; RRCC::GetCornersTable
PUBLIC	?BuildRefTransp@@YAXHHPAH@Z			; BuildRefTransp
PUBLIC	?BuildRotTransp@@YAXHHPAH@Z			; BuildRotTransp
PUBLIC	?dot2HLine@@YAHHH@Z				; dot2HLine
PUBLIC	?dot2VLine@@YAHHH@Z				; dot2VLine
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7CCDn@@6B@					; CCDn::`vftable'
PUBLIC	??_7CCDp@@6B@					; CCDp::`vftable'
PUBLIC	??_R4CCDn@@6B@					; CCDn::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCDn@@@8				; CCDn `RTTI Type Descriptor'
PUBLIC	??_R3CCDn@@8					; CCDn::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCDn@@8					; CCDn::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCDn@@8				; CCDn::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4CCDp@@6B@					; CCDp::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCDp@@@8				; CCDp `RTTI Type Descriptor'
PUBLIC	??_R3CCDp@@8					; CCDp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCDp@@8					; CCDp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCDp@@8				; CCDp::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_memset:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	?die@@YAXPBD@Z:PROC				; die
EXTRN	?ImplementationError@@YAXPBD@Z:PROC		; ImplementationError
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allshl:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?rrcc@@3VRRCC@@A:BYTE				; rrcc
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?f@@3PAU_iobuf@@A DD 01H DUP (?)			; f
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@CCDp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCDp@@8 DD FLAT:??_R0?AVCCDp@@@8		; CCDp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCDp@@8
rdata$r	ENDS
;	COMDAT ??_R2CCDp@@8
rdata$r	SEGMENT
??_R2CCDp@@8 DD	FLAT:??_R1A@?0A@EA@CCDp@@8		; CCDp::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CCDn@@8
rdata$r	ENDS
;	COMDAT ??_R3CCDp@@8
rdata$r	SEGMENT
??_R3CCDp@@8 DD	00H					; CCDp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CCDp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCDp@@@8
data$rs	SEGMENT
??_R0?AVCCDp@@@8 DD FLAT:??_7type_info@@6B@		; CCDp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCDp@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CCDp@@6B@
rdata$r	SEGMENT
??_R4CCDp@@6B@ DD 00H					; CCDp::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCDp@@@8
	DD	FLAT:??_R3CCDp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCDn@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCDn@@8 DD FLAT:??_R0?AVCCDn@@@8		; CCDn::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCDn@@8
rdata$r	ENDS
;	COMDAT ??_R2CCDn@@8
rdata$r	SEGMENT
??_R2CCDn@@8 DD	FLAT:??_R1A@?0A@EA@CCDn@@8		; CCDn::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CCDn@@8
rdata$r	SEGMENT
??_R3CCDn@@8 DD	00H					; CCDn::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CCDn@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCDn@@@8
data$rs	SEGMENT
??_R0?AVCCDn@@@8 DD FLAT:??_7type_info@@6B@		; CCDn `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCDn@@', 00H
data$rs	ENDS
;	COMDAT ??_R4CCDn@@6B@
rdata$r	SEGMENT
??_R4CCDn@@6B@ DD 00H					; CCDn::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCDn@@@8
	DD	FLAT:??_R3CCDn@@8
rdata$r	ENDS
_DATA	SEGMENT
?enableDump@@3HA DD 01H					; enableDump
_DATA	ENDS
;	COMDAT ??_7CCDp@@6B@
CONST	SEGMENT
??_7CCDp@@6B@ DD FLAT:??_R4CCDp@@6B@			; CCDp::`vftable'
	DD	FLAT:??4CCDp@@UAEAAVCCDn@@PBVDOTS_AND_BOXES@@@Z
	DD	FLAT:?NumRotRef@CCDp@@UAEHXZ
CONST	ENDS
;	COMDAT ??_7CCDn@@6B@
CONST	SEGMENT
??_7CCDn@@6B@ DD FLAT:??_R4CCDn@@6B@			; CCDn::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??0CCDp@@QAE@HH@Z$0
	DD	025H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__ehhandler$??1RRCCp@@QAE@XZ
	DD	09H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?BuildRefRotTables@RRCC@@AAEXHH@Z
	DD	026H
	DD	0292H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?BuildCapturesTable@RRCC@@AAEXHH@Z
	DD	020H
	DD	0328H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?LogUiUiUI64@CCDn@@QAEXPADII_K@Z
	DD	01fH
	DD	0d6H
voltbl	ENDS
xdata$x	SEGMENT
__unwindtable$??0CCDp@@QAE@HH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCDp@@QAE@HH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCDp@@QAE@HH@Z$1
__ehfuncinfo$??0CCDp@@QAE@HH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCDp@@QAE@HH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??1RRCCp@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?dot2VLine@@YAHHH@Z PROC				; dot2VLine

; 208  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 209  :   if (row < 0) return -1;

  00003	83 7d 0c 00	 cmp	 DWORD PTR _row$[ebp], 0
  00007	7d 05		 jge	 SHORT $LN2@dot2VLine
  00009	83 c8 ff	 or	 eax, -1
  0000c	eb 2c		 jmp	 SHORT $LN1@dot2VLine
$LN2@dot2VLine:

; 210  :   if (col < 0) return -1;

  0000e	83 7d 08 00	 cmp	 DWORD PTR _col$[ebp], 0
  00012	7d 05		 jge	 SHORT $LN3@dot2VLine
  00014	83 c8 ff	 or	 eax, -1
  00017	eb 21		 jmp	 SHORT $LN1@dot2VLine
$LN3@dot2VLine:

; 211  :   if (row > 3) return -1;

  00019	83 7d 0c 03	 cmp	 DWORD PTR _row$[ebp], 3
  0001d	7e 05		 jle	 SHORT $LN4@dot2VLine
  0001f	83 c8 ff	 or	 eax, -1
  00022	eb 16		 jmp	 SHORT $LN1@dot2VLine
$LN4@dot2VLine:

; 212  :   if (col > 4) return -1;

  00024	83 7d 08 04	 cmp	 DWORD PTR _col$[ebp], 4
  00028	7e 05		 jle	 SHORT $LN5@dot2VLine
  0002a	83 c8 ff	 or	 eax, -1
  0002d	eb 0b		 jmp	 SHORT $LN1@dot2VLine
$LN5@dot2VLine:

; 213  :   return row*9 + col + 4;

  0002f	6b 45 0c 09	 imul	 eax, DWORD PTR _row$[ebp], 9
  00033	8b 4d 08	 mov	 ecx, DWORD PTR _col$[ebp]
  00036	8d 44 08 04	 lea	 eax, DWORD PTR [eax+ecx+4]
$LN1@dot2VLine:

; 214  : }

  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?dot2VLine@@YAHHH@Z ENDP				; dot2VLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?dot2HLine@@YAHHH@Z PROC				; dot2HLine

; 199  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 200  :   if (row < 0) return -1;

  00003	83 7d 0c 00	 cmp	 DWORD PTR _row$[ebp], 0
  00007	7d 05		 jge	 SHORT $LN2@dot2HLine
  00009	83 c8 ff	 or	 eax, -1
  0000c	eb 28		 jmp	 SHORT $LN1@dot2HLine
$LN2@dot2HLine:

; 201  :   if (col < 0) return -1;

  0000e	83 7d 08 00	 cmp	 DWORD PTR _col$[ebp], 0
  00012	7d 05		 jge	 SHORT $LN3@dot2HLine
  00014	83 c8 ff	 or	 eax, -1
  00017	eb 1d		 jmp	 SHORT $LN1@dot2HLine
$LN3@dot2HLine:

; 202  :   if (row > 4) return -1;

  00019	83 7d 0c 04	 cmp	 DWORD PTR _row$[ebp], 4
  0001d	7e 05		 jle	 SHORT $LN4@dot2HLine
  0001f	83 c8 ff	 or	 eax, -1
  00022	eb 12		 jmp	 SHORT $LN1@dot2HLine
$LN4@dot2HLine:

; 203  :   if (col > 3) return -1;

  00024	83 7d 08 03	 cmp	 DWORD PTR _col$[ebp], 3
  00028	7e 05		 jle	 SHORT $LN5@dot2HLine
  0002a	83 c8 ff	 or	 eax, -1
  0002d	eb 07		 jmp	 SHORT $LN1@dot2HLine
$LN5@dot2HLine:

; 204  :   return row*9 + col;

  0002f	6b 45 0c 09	 imul	 eax, DWORD PTR _row$[ebp], 9
  00033	03 45 08	 add	 eax, DWORD PTR _col$[ebp]
$LN1@dot2HLine:

; 205  : }

  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
?dot2HLine@@YAHHH@Z ENDP				; dot2HLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_y$ = -24						; size = 4
_x$ = -20						; size = 4
_row$ = -16						; size = 4
_col$ = -12						; size = 4
_rotatedLineNum$ = -8					; size = 4
_lineNum$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_transp$ = 16						; size = 4
?BuildRotTransp@@YAXHHPAH@Z PROC			; BuildRotTransp

; 94   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 95   :   int lineNum, rotatedLineNum;
; 96   :   int col, row, x, y;
; 97   :   for (col=0; col<width; col++)

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  0000d	eb 09		 jmp	 SHORT $LN4@BuildRotTr
$LN2@BuildRotTr:
  0000f	8b 45 f4	 mov	 eax, DWORD PTR _col$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 f4	 mov	 DWORD PTR _col$[ebp], eax
$LN4@BuildRotTr:
  00018	8b 4d f4	 mov	 ecx, DWORD PTR _col$[ebp]
  0001b	3b 4d 08	 cmp	 ecx, DWORD PTR _width$[ebp]
  0001e	0f 8d 3d 01 00
	00		 jge	 $LN3@BuildRotTr

; 98   :   {
; 99   :     for (row=0; row<height; row++)

  00024	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  0002b	eb 09		 jmp	 SHORT $LN7@BuildRotTr
$LN5@BuildRotTr:
  0002d	8b 55 f0	 mov	 edx, DWORD PTR _row$[ebp]
  00030	83 c2 01	 add	 edx, 1
  00033	89 55 f0	 mov	 DWORD PTR _row$[ebp], edx
$LN7@BuildRotTr:
  00036	8b 45 f0	 mov	 eax, DWORD PTR _row$[ebp]
  00039	3b 45 0c	 cmp	 eax, DWORD PTR _height$[ebp]
  0003c	0f 8d 1a 01 00
	00		 jge	 $LN6@BuildRotTr

; 100  :     {
; 101  :       if (col < width-1) //If horizontal line attached

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00045	83 e9 01	 sub	 ecx, 1
  00048	39 4d f4	 cmp	 DWORD PTR _col$[ebp], ecx
  0004b	7d 7a		 jge	 SHORT $LN8@BuildRotTr

; 102  :       {
; 103  :         lineNum = row*(2*width-1) + col;

  0004d	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00050	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  00054	0f af 45 f0	 imul	 eax, DWORD PTR _row$[ebp]
  00058	03 45 f4	 add	 eax, DWORD PTR _col$[ebp]
  0005b	89 45 fc	 mov	 DWORD PTR _lineNum$[ebp], eax

; 104  :         if (width == height) 

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00061	3b 4d 0c	 cmp	 ecx, DWORD PTR _height$[ebp]
  00064	75 2c		 jne	 SHORT $LN9@BuildRotTr

; 105  :         { // rotate 90 degrees
; 106  :           x=height-row-1;

  00066	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00069	2b 55 f0	 sub	 edx, DWORD PTR _row$[ebp]
  0006c	83 ea 01	 sub	 edx, 1
  0006f	89 55 ec	 mov	 DWORD PTR _x$[ebp], edx

; 107  :           y=col;

  00072	8b 45 f4	 mov	 eax, DWORD PTR _col$[ebp]
  00075	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax

; 108  :           rotatedLineNum = y*(2*width-1)+width-1+x;

  00078	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  0007b	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  0007f	0f af 55 e8	 imul	 edx, DWORD PTR _y$[ebp]
  00083	03 55 08	 add	 edx, DWORD PTR _width$[ebp]
  00086	8b 45 ec	 mov	 eax, DWORD PTR _x$[ebp]
  00089	8d 4c 02 ff	 lea	 ecx, DWORD PTR [edx+eax-1]
  0008d	89 4d f8	 mov	 DWORD PTR _rotatedLineNum$[ebp], ecx

; 109  :         }

  00090	eb 29		 jmp	 SHORT $LN10@BuildRotTr
$LN9@BuildRotTr:

; 110  :         else
; 111  :         { // rotate 180 degrees
; 112  :           x = width-1-col;

  00092	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00095	83 ea 01	 sub	 edx, 1
  00098	2b 55 f4	 sub	 edx, DWORD PTR _col$[ebp]
  0009b	89 55 ec	 mov	 DWORD PTR _x$[ebp], edx

; 113  :           y = height-1-row;

  0009e	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  000a1	83 e8 01	 sub	 eax, 1
  000a4	2b 45 f0	 sub	 eax, DWORD PTR _row$[ebp]
  000a7	89 45 e8	 mov	 DWORD PTR _y$[ebp], eax

; 114  :           rotatedLineNum = y*(2*width-1)+x;

  000aa	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  000ad	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  000b1	0f af 55 e8	 imul	 edx, DWORD PTR _y$[ebp]
  000b5	03 55 ec	 add	 edx, DWORD PTR _x$[ebp]
  000b8	89 55 f8	 mov	 DWORD PTR _rotatedLineNum$[ebp], edx
$LN10@BuildRotTr:

; 115  :         };
; 116  :         transp[lineNum] = rotatedLineNum;

  000bb	8b 45 fc	 mov	 eax, DWORD PTR _lineNum$[ebp]
  000be	8b 4d 10	 mov	 ecx, DWORD PTR _transp$[ebp]
  000c1	8b 55 f8	 mov	 edx, DWORD PTR _rotatedLineNum$[ebp]
  000c4	89 14 81	 mov	 DWORD PTR [ecx+eax*4], edx
$LN8@BuildRotTr:

; 117  :       };
; 118  :       if (row < height-1) //If vertical line attached

  000c7	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  000ca	83 e8 01	 sub	 eax, 1
  000cd	39 45 f0	 cmp	 DWORD PTR _row$[ebp], eax
  000d0	0f 8d 81 00 00
	00		 jge	 $LN11@BuildRotTr

; 119  :       {
; 120  :         lineNum = row*(2*width-1) + width - 1 + col;

  000d6	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  000d9	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  000dd	0f af 55 f0	 imul	 edx, DWORD PTR _row$[ebp]
  000e1	03 55 08	 add	 edx, DWORD PTR _width$[ebp]
  000e4	8b 45 f4	 mov	 eax, DWORD PTR _col$[ebp]
  000e7	8d 4c 02 ff	 lea	 ecx, DWORD PTR [edx+eax-1]
  000eb	89 4d fc	 mov	 DWORD PTR _lineNum$[ebp], ecx

; 121  :         if (width == height) 

  000ee	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  000f1	3b 55 0c	 cmp	 edx, DWORD PTR _height$[ebp]
  000f4	75 25		 jne	 SHORT $LN12@BuildRotTr

; 122  :         { // rotate 90 degrees
; 123  :           x = width-row-2;

  000f6	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  000f9	2b 45 f0	 sub	 eax, DWORD PTR _row$[ebp]
  000fc	83 e8 02	 sub	 eax, 2
  000ff	89 45 ec	 mov	 DWORD PTR _x$[ebp], eax

; 124  :           y = col;

  00102	8b 4d f4	 mov	 ecx, DWORD PTR _col$[ebp]
  00105	89 4d e8	 mov	 DWORD PTR _y$[ebp], ecx

; 125  :           rotatedLineNum = y*(2*width-1) + x;

  00108	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  0010b	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  0010f	0f af 45 e8	 imul	 eax, DWORD PTR _y$[ebp]
  00113	03 45 ec	 add	 eax, DWORD PTR _x$[ebp]
  00116	89 45 f8	 mov	 DWORD PTR _rotatedLineNum$[ebp], eax

; 126  :         }

  00119	eb 30		 jmp	 SHORT $LN13@BuildRotTr
$LN12@BuildRotTr:

; 127  :         else
; 128  :         { // rotate 180 degrees
; 129  :           x = width-1-col;

  0011b	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  0011e	83 e9 01	 sub	 ecx, 1
  00121	2b 4d f4	 sub	 ecx, DWORD PTR _col$[ebp]
  00124	89 4d ec	 mov	 DWORD PTR _x$[ebp], ecx

; 130  :           y = height-1-row;

  00127	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0012a	83 ea 01	 sub	 edx, 1
  0012d	2b 55 f0	 sub	 edx, DWORD PTR _row$[ebp]
  00130	89 55 e8	 mov	 DWORD PTR _y$[ebp], edx

; 131  :           rotatedLineNum = y*(2*width-1) + width-1 + x;

  00133	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00136	8d 4c 00 ff	 lea	 ecx, DWORD PTR [eax+eax-1]
  0013a	0f af 4d e8	 imul	 ecx, DWORD PTR _y$[ebp]
  0013e	03 4d 08	 add	 ecx, DWORD PTR _width$[ebp]
  00141	8b 55 ec	 mov	 edx, DWORD PTR _x$[ebp]
  00144	8d 44 11 ff	 lea	 eax, DWORD PTR [ecx+edx-1]
  00148	89 45 f8	 mov	 DWORD PTR _rotatedLineNum$[ebp], eax
$LN13@BuildRotTr:

; 132  :         };
; 133  :         transp[lineNum] = rotatedLineNum;

  0014b	8b 4d fc	 mov	 ecx, DWORD PTR _lineNum$[ebp]
  0014e	8b 55 10	 mov	 edx, DWORD PTR _transp$[ebp]
  00151	8b 45 f8	 mov	 eax, DWORD PTR _rotatedLineNum$[ebp]
  00154	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
$LN11@BuildRotTr:

; 134  :       };
; 135  :     };

  00157	e9 d1 fe ff ff	 jmp	 $LN5@BuildRotTr
$LN6@BuildRotTr:

; 136  :   };

  0015c	e9 ae fe ff ff	 jmp	 $LN2@BuildRotTr
$LN3@BuildRotTr:

; 137  :   //Fix up the corners
; 138  :   if (width == height)

  00161	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00164	3b 4d 0c	 cmp	 ecx, DWORD PTR _height$[ebp]
  00167	0f 85 82 00 00
	00		 jne	 $LN14@BuildRotTr

; 139  :   {
; 140  :     // 90-degree rotation
; 141  :     transp[0] = width-2;

  0016d	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00170	83 ea 02	 sub	 edx, 2
  00173	b8 04 00 00 00	 mov	 eax, 4
  00178	6b c8 00	 imul	 ecx, eax, 0
  0017b	8b 45 10	 mov	 eax, DWORD PTR _transp$[ebp]
  0017e	89 14 08	 mov	 DWORD PTR [eax+ecx], edx

; 142  :     // transp[width-2] is already OK
; 143  :     transp[width-1] = 2*width-2;

  00181	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00184	8d 54 09 fe	 lea	 edx, DWORD PTR [ecx+ecx-2]
  00188	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0018b	8b 4d 10	 mov	 ecx, DWORD PTR _transp$[ebp]
  0018e	89 54 81 fc	 mov	 DWORD PTR [ecx+eax*4-4], edx

; 144  :     //transp[2*width-2] is already OK
; 145  :     //transp[(height-2)*(2*width-1)+width-2] is already OK
; 146  :     transp[(height-1)*(2*width-1)-1] = (height-2)*(2*width-1)+width-1;

  00192	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00195	83 ea 02	 sub	 edx, 2
  00198	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0019b	8d 4c 00 ff	 lea	 ecx, DWORD PTR [eax+eax-1]
  0019f	0f af d1	 imul	 edx, ecx
  001a2	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  001a5	8d 4c 02 ff	 lea	 ecx, DWORD PTR [edx+eax-1]
  001a9	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  001ac	83 ea 01	 sub	 edx, 1
  001af	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  001b2	8d 44 00 ff	 lea	 eax, DWORD PTR [eax+eax-1]
  001b6	0f af d0	 imul	 edx, eax
  001b9	8b 45 10	 mov	 eax, DWORD PTR _transp$[ebp]
  001bc	89 4c 90 fc	 mov	 DWORD PTR [eax+edx*4-4], ecx

; 147  :     //transp[(height-1)*(2*width-1)] is already OK
; 148  :     transp[(height-1)*(2*width-1)+width-2] = (height-1)*(2*width-1);

  001c0	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  001c3	83 e9 01	 sub	 ecx, 1
  001c6	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  001c9	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  001cd	0f af c8	 imul	 ecx, eax
  001d0	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  001d3	83 ea 01	 sub	 edx, 1
  001d6	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  001d9	8d 44 00 ff	 lea	 eax, DWORD PTR [eax+eax-1]
  001dd	0f af d0	 imul	 edx, eax
  001e0	03 55 08	 add	 edx, DWORD PTR _width$[ebp]
  001e3	8b 45 10	 mov	 eax, DWORD PTR _transp$[ebp]
  001e6	89 4c 90 f8	 mov	 DWORD PTR [eax+edx*4-8], ecx

; 149  :   }

  001ea	e9 f7 00 00 00	 jmp	 $LN1@BuildRotTr
$LN14@BuildRotTr:

; 150  :   else
; 151  :   {
; 152  :     //180-degree rotation
; 153  :     transp[0] = (height-1)*(2*width-1)-1;

  001ef	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  001f2	83 e9 01	 sub	 ecx, 1
  001f5	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  001f8	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  001fc	0f af c8	 imul	 ecx, eax
  001ff	83 e9 01	 sub	 ecx, 1
  00202	ba 04 00 00 00	 mov	 edx, 4
  00207	6b c2 00	 imul	 eax, edx, 0
  0020a	8b 55 10	 mov	 edx, DWORD PTR _transp$[ebp]
  0020d	89 0c 02	 mov	 DWORD PTR [edx+eax], ecx

; 154  :     transp[width-2] = (height-2)*(2*width-1)+width-1;

  00210	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00213	83 e8 02	 sub	 eax, 2
  00216	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00219	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  0021d	0f af c2	 imul	 eax, edx
  00220	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00223	8d 54 08 ff	 lea	 edx, DWORD PTR [eax+ecx-1]
  00227	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0022a	8b 4d 10	 mov	 ecx, DWORD PTR _transp$[ebp]
  0022d	89 54 81 f8	 mov	 DWORD PTR [ecx+eax*4-8], edx

; 155  :     transp[width-1] = (height-1)*(2*width-1)+width-2;

  00231	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00234	83 ea 01	 sub	 edx, 1
  00237	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0023a	8d 4c 00 ff	 lea	 ecx, DWORD PTR [eax+eax-1]
  0023e	0f af d1	 imul	 edx, ecx
  00241	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00244	8d 4c 02 fe	 lea	 ecx, DWORD PTR [edx+eax-2]
  00248	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  0024b	8b 45 10	 mov	 eax, DWORD PTR _transp$[ebp]
  0024e	89 4c 90 fc	 mov	 DWORD PTR [eax+edx*4-4], ecx

; 156  :     transp[2*width-2] = (height-1)*(2*width-1);

  00252	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00255	83 e9 01	 sub	 ecx, 1
  00258	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  0025b	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  0025f	0f af c8	 imul	 ecx, eax
  00262	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00265	d1 e2		 shl	 edx, 1
  00267	8b 45 10	 mov	 eax, DWORD PTR _transp$[ebp]
  0026a	89 4c 90 f8	 mov	 DWORD PTR [eax+edx*4-8], ecx

; 157  :     transp[(height-2)*(2*width-2)+width-1] = width-2;

  0026e	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00271	83 e9 02	 sub	 ecx, 2
  00274	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00277	83 ea 02	 sub	 edx, 2
  0027a	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0027d	8d 44 00 fe	 lea	 eax, DWORD PTR [eax+eax-2]
  00281	0f af d0	 imul	 edx, eax
  00284	03 55 08	 add	 edx, DWORD PTR _width$[ebp]
  00287	8b 45 10	 mov	 eax, DWORD PTR _transp$[ebp]
  0028a	89 4c 90 fc	 mov	 DWORD PTR [eax+edx*4-4], ecx

; 158  :     transp[(height-1)*(2*width-1)-1] = 0;

  0028e	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00291	83 e9 01	 sub	 ecx, 1
  00294	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00297	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  0029b	0f af c8	 imul	 ecx, eax
  0029e	8b 55 10	 mov	 edx, DWORD PTR _transp$[ebp]
  002a1	c7 44 8a fc 00
	00 00 00	 mov	 DWORD PTR [edx+ecx*4-4], 0

; 159  :     transp[(height-1)*(2*width-1)] = 2*width-2;

  002a9	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  002ac	8d 4c 00 fe	 lea	 ecx, DWORD PTR [eax+eax-2]
  002b0	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  002b3	83 ea 01	 sub	 edx, 1
  002b6	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  002b9	8d 44 00 ff	 lea	 eax, DWORD PTR [eax+eax-1]
  002bd	0f af d0	 imul	 edx, eax
  002c0	8b 45 10	 mov	 eax, DWORD PTR _transp$[ebp]
  002c3	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 160  :     transp[(height-1)*(2*width-1)+width-2] = width-1;

  002c6	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  002c9	83 e9 01	 sub	 ecx, 1
  002cc	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  002cf	83 ea 01	 sub	 edx, 1
  002d2	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  002d5	8d 44 00 ff	 lea	 eax, DWORD PTR [eax+eax-1]
  002d9	0f af d0	 imul	 edx, eax
  002dc	03 55 08	 add	 edx, DWORD PTR _width$[ebp]
  002df	8b 45 10	 mov	 eax, DWORD PTR _transp$[ebp]
  002e2	89 4c 90 f8	 mov	 DWORD PTR [eax+edx*4-8], ecx
$LN1@BuildRotTr:

; 161  :   };
; 162  : }

  002e6	8b e5		 mov	 esp, ebp
  002e8	5d		 pop	 ebp
  002e9	c3		 ret	 0
?BuildRotTransp@@YAXHHPAH@Z ENDP			; BuildRotTransp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_row$ = -16						; size = 4
_col$ = -12						; size = 4
_reflectedLineNum$ = -8					; size = 4
_lineNum$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_transp$ = 16						; size = 4
?BuildRefTransp@@YAXHHPAH@Z PROC			; BuildRefTransp

; 70   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H

; 71   :   int lineNum, reflectedLineNum;
; 72   :   int col, row;
; 73   :   for (col=0; col<width; col++)

  00006	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  0000d	eb 09		 jmp	 SHORT $LN4@BuildRefTr
$LN2@BuildRefTr:
  0000f	8b 45 f4	 mov	 eax, DWORD PTR _col$[ebp]
  00012	83 c0 01	 add	 eax, 1
  00015	89 45 f4	 mov	 DWORD PTR _col$[ebp], eax
$LN4@BuildRefTr:
  00018	8b 4d f4	 mov	 ecx, DWORD PTR _col$[ebp]
  0001b	3b 4d 08	 cmp	 ecx, DWORD PTR _width$[ebp]
  0001e	0f 8d b0 00 00
	00		 jge	 $LN1@BuildRefTr

; 74   :   {
; 75   :     for (row=0; row<height; row++)

  00024	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  0002b	eb 09		 jmp	 SHORT $LN7@BuildRefTr
$LN5@BuildRefTr:
  0002d	8b 55 f0	 mov	 edx, DWORD PTR _row$[ebp]
  00030	83 c2 01	 add	 edx, 1
  00033	89 55 f0	 mov	 DWORD PTR _row$[ebp], edx
$LN7@BuildRefTr:
  00036	8b 45 f0	 mov	 eax, DWORD PTR _row$[ebp]
  00039	3b 45 0c	 cmp	 eax, DWORD PTR _height$[ebp]
  0003c	0f 8d 8d 00 00
	00		 jge	 $LN6@BuildRefTr

; 76   :     {
; 77   :       if (col < width-1) //If horizontal line attached

  00042	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00045	83 e9 01	 sub	 ecx, 1
  00048	39 4d f4	 cmp	 DWORD PTR _col$[ebp], ecx
  0004b	7d 35		 jge	 SHORT $LN8@BuildRefTr

; 78   :       {
; 79   :         lineNum = row*(2*width-1) + col;

  0004d	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00050	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  00054	0f af 45 f0	 imul	 eax, DWORD PTR _row$[ebp]
  00058	03 45 f4	 add	 eax, DWORD PTR _col$[ebp]
  0005b	89 45 fc	 mov	 DWORD PTR _lineNum$[ebp], eax

; 80   :         reflectedLineNum = row*(2*width-1) + width - 2 - col;

  0005e	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00061	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  00065	0f af 55 f0	 imul	 edx, DWORD PTR _row$[ebp]
  00069	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0006c	8d 4c 02 fe	 lea	 ecx, DWORD PTR [edx+eax-2]
  00070	2b 4d f4	 sub	 ecx, DWORD PTR _col$[ebp]
  00073	89 4d f8	 mov	 DWORD PTR _reflectedLineNum$[ebp], ecx

; 81   :         transp[lineNum] = reflectedLineNum;

  00076	8b 55 fc	 mov	 edx, DWORD PTR _lineNum$[ebp]
  00079	8b 45 10	 mov	 eax, DWORD PTR _transp$[ebp]
  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _reflectedLineNum$[ebp]
  0007f	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx
$LN8@BuildRefTr:

; 82   :       };
; 83   :       if (row < height-1) //If vertical line attached

  00082	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00085	83 ea 01	 sub	 edx, 1
  00088	39 55 f0	 cmp	 DWORD PTR _row$[ebp], edx
  0008b	7d 3d		 jge	 SHORT $LN9@BuildRefTr

; 84   :       {
; 85   :         lineNum = row*(2*width-1) + width - 1 + col;

  0008d	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00090	8d 4c 00 ff	 lea	 ecx, DWORD PTR [eax+eax-1]
  00094	0f af 4d f0	 imul	 ecx, DWORD PTR _row$[ebp]
  00098	03 4d 08	 add	 ecx, DWORD PTR _width$[ebp]
  0009b	8b 55 f4	 mov	 edx, DWORD PTR _col$[ebp]
  0009e	8d 44 11 ff	 lea	 eax, DWORD PTR [ecx+edx-1]
  000a2	89 45 fc	 mov	 DWORD PTR _lineNum$[ebp], eax

; 86   :         reflectedLineNum = (row+1)*(2*width-1) - 1 - col;

  000a5	8b 4d f0	 mov	 ecx, DWORD PTR _row$[ebp]
  000a8	83 c1 01	 add	 ecx, 1
  000ab	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  000ae	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  000b2	0f af c8	 imul	 ecx, eax
  000b5	83 e9 01	 sub	 ecx, 1
  000b8	2b 4d f4	 sub	 ecx, DWORD PTR _col$[ebp]
  000bb	89 4d f8	 mov	 DWORD PTR _reflectedLineNum$[ebp], ecx

; 87   :         transp[lineNum] = reflectedLineNum;

  000be	8b 4d fc	 mov	 ecx, DWORD PTR _lineNum$[ebp]
  000c1	8b 55 10	 mov	 edx, DWORD PTR _transp$[ebp]
  000c4	8b 45 f8	 mov	 eax, DWORD PTR _reflectedLineNum$[ebp]
  000c7	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax
$LN9@BuildRefTr:

; 88   :       };
; 89   :     };

  000ca	e9 5e ff ff ff	 jmp	 $LN5@BuildRefTr
$LN6@BuildRefTr:

; 90   :   };

  000cf	e9 3b ff ff ff	 jmp	 $LN2@BuildRefTr
$LN1@BuildRefTr:

; 91   : }

  000d4	8b e5		 mov	 esp, ebp
  000d6	5d		 pop	 ebp
  000d7	c3		 ret	 0
?BuildRefTransp@@YAXHHPAH@Z ENDP			; BuildRefTransp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?GetCornersTable@RRCC@@QAEPA_KHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?GetCornersTable@RRCC@@QAEPA_KHH@Z PROC			; RRCC::GetCornersTable, COMDAT
; _this$ = ecx

; 298  :   inline ui64 *GetCornersTable(int width, int height) {return cornersTable[width][height];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8d 94 01 b0 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+432]
  00015	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00018	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?GetCornersTable@RRCC@@QAEPA_KHH@Z ENDP			; RRCC::GetCornersTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?GetCapturesTable@RRCC@@QAEPA_KHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?GetCapturesTable@RRCC@@QAEPA_KHH@Z PROC		; RRCC::GetCapturesTable, COMDAT
; _this$ = ecx

; 297  :   inline ui64 *GetCapturesTable(int width, int height){return capturesTable[width][height];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8d 94 01 20 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+288]
  00015	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00018	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?GetCapturesTable@RRCC@@QAEPA_KHH@Z ENDP		; RRCC::GetCapturesTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?GetRefTable@RRCC@@QAEPA_KHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?GetRefTable@RRCC@@QAEPA_KHH@Z PROC			; RRCC::GetRefTable, COMDAT
; _this$ = ecx

; 296  :   inline ui64 *GetRefTable(int width, int height)     {return refTable[width][height];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  0000b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	8d 94 01 90 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+144]
  00015	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00018	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?GetRefTable@RRCC@@QAEPA_KHH@Z ENDP			; RRCC::GetRefTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?GetRotTable@RRCC@@QAEPA_KHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?GetRotTable@RRCC@@QAEPA_KHH@Z PROC			; RRCC::GetRotTable, COMDAT
; _this$ = ecx

; 295  :   inline ui64 *GetRotTable(int width, int height)     {return rotTable[width][height];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  0000b	03 45 fc	 add	 eax, DWORD PTR _this$[ebp]
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00011	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  00014	8b e5		 mov	 esp, ebp
  00016	5d		 pop	 ebp
  00017	c2 08 00	 ret	 8
?GetRotTable@RRCC@@QAEPA_KHH@Z ENDP			; RRCC::GetRotTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?DecrementReferenceCount@RRCC@@QAEXHH@Z PROC		; RRCC::DecrementReferenceCount
; _this$ = ecx

; 314  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 315  :   ASSERT(refCount[width][height] > 0);

  0000f	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	8d 94 01 40 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+576]
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00020	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00024	7f 14		 jg	 SHORT $LN4@DecrementR
  00026	68 3b 01 00 00	 push	 315			; 0000013bH
  0002b	68 00 00 00 00	 push	 OFFSET $SG225820
  00030	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00035	85 c0		 test	 eax, eax
  00037	74 01		 je	 SHORT $LN4@DecrementR
  00039	cc		 int	 3
$LN4@DecrementR:

; 316  :   refCount[width][height]--;

  0003a	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  0003e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00041	8d 8c 10 40 02
	00 00		 lea	 ecx, DWORD PTR [eax+edx+576]
  00048	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0004b	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0004e	83 e8 01	 sub	 eax, 1
  00051	6b 4d 08 18	 imul	 ecx, DWORD PTR _width$[ebp], 24
  00055	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00058	8d 8c 0a 40 02
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+576]
  0005f	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00062	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 317  :   if (refCount[width][height] == 0)

  00065	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  00069	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0006c	8d 94 01 40 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+576]
  00073	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00076	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  0007a	0f 85 ee 00 00
	00		 jne	 $LN1@DecrementR

; 318  :   {
; 319  :     free(rotTable[width][height]);      rotTable[width][height] = NULL;

  00080	6b 4d 08 18	 imul	 ecx, DWORD PTR _width$[ebp], 24
  00084	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  00087	8b f4		 mov	 esi, esp
  00089	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0008c	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0008f	50		 push	 eax
  00090	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00096	83 c4 04	 add	 esp, 4
  00099	3b f4		 cmp	 esi, esp
  0009b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a0	6b 4d 08 18	 imul	 ecx, DWORD PTR _width$[ebp], 24
  000a4	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  000a7	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  000aa	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0

; 320  :     free(refTable[width][height]);      refTable[width][height] = NULL;

  000b1	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	8d 94 01 90 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+144]
  000bf	8b f4		 mov	 esi, esp
  000c1	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  000c4	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  000c7	51		 push	 ecx
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000ce	83 c4 04	 add	 esp, 4
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  000dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000df	8d 8c 10 90 00
	00 00		 lea	 ecx, DWORD PTR [eax+edx+144]
  000e6	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  000e9	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0

; 321  :     free(capturesTable[width][height]); capturesTable[width][height] = NULL;

  000f0	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  000f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	8d 94 01 20 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+288]
  000fe	8b f4		 mov	 esi, esp
  00100	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00103	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00106	51		 push	 ecx
  00107	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0010d	83 c4 04	 add	 esp, 4
  00110	3b f4		 cmp	 esi, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  0011b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	8d 8c 10 20 01
	00 00		 lea	 ecx, DWORD PTR [eax+edx+288]
  00125	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00128	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0

; 322  :     free(cornersTable[width][height]);  cornersTable[width][height] = NULL;

  0012f	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  00133	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	8d 94 01 b0 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+432]
  0013d	8b f4		 mov	 esi, esp
  0013f	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00142	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00145	51		 push	 ecx
  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0014c	83 c4 04	 add	 esp, 4
  0014f	3b f4		 cmp	 esi, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  0015a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0015d	8d 8c 10 b0 01
	00 00		 lea	 ecx, DWORD PTR [eax+edx+432]
  00164	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00167	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0
$LN1@DecrementR:

; 323  :   };
; 324  : }

  0016e	5e		 pop	 esi
  0016f	83 c4 04	 add	 esp, 4
  00172	3b ec		 cmp	 ebp, esp
  00174	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00179	8b e5		 mov	 esp, ebp
  0017b	5d		 pop	 ebp
  0017c	c2 08 00	 ret	 8
?DecrementReferenceCount@RRCC@@QAEXHH@Z ENDP		; RRCC::DecrementReferenceCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?IncrementReferenceCount@RRCC@@QAEXHH@Z PROC		; RRCC::IncrementReferenceCount
; _this$ = ecx

; 299  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 300  :   if (   (width > RRCC_MaxWidth)
; 301  :       || (height > RRCC_MaxHeight))

  0000e	83 7d 08 06	 cmp	 DWORD PTR _width$[ebp], 6
  00012	7f 06		 jg	 SHORT $LN3@IncrementR
  00014	83 7d 0c 06	 cmp	 DWORD PTR _height$[ebp], 6
  00018	7e 0d		 jle	 SHORT $LN2@IncrementR
$LN3@IncrementR:

; 302  :   {
; 303  :     die("Too Large");

  0001a	68 00 00 00 00	 push	 OFFSET $SG225812
  0001f	e8 00 00 00 00	 call	 ?die@@YAXPBD@Z		; die
  00024	83 c4 04	 add	 esp, 4
$LN2@IncrementR:

; 304  :   };
; 305  :   refCount[width][height]++;

  00027	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	8d 94 01 40 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+576]
  00035	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00038	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  0003b	83 c1 01	 add	 ecx, 1
  0003e	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8d 94 10 40 02
	00 00		 lea	 edx, DWORD PTR [eax+edx+576]
  0004c	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0004f	89 0c 82	 mov	 DWORD PTR [edx+eax*4], ecx

; 306  :   if (refCount[width][height] != 1) return;;

  00052	6b 4d 08 18	 imul	 ecx, DWORD PTR _width$[ebp], 24
  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8d 84 0a 40 02
	00 00		 lea	 eax, DWORD PTR [edx+ecx+576]
  00060	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00063	83 3c 88 01	 cmp	 DWORD PTR [eax+ecx*4], 1
  00067	74 02		 je	 SHORT $LN4@IncrementR
  00069	eb 30		 jmp	 SHORT $LN1@IncrementR
$LN4@IncrementR:

; 307  :   BuildCapturesTable(width, height);

  0006b	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0006e	52		 push	 edx
  0006f	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00072	50		 push	 eax
  00073	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	e8 00 00 00 00	 call	 ?BuildCapturesTable@RRCC@@AAEXHH@Z ; RRCC::BuildCapturesTable

; 308  :   BuildCornersTable(width, height);

  0007b	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  0007e	51		 push	 ecx
  0007f	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00082	52		 push	 edx
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00086	e8 00 00 00 00	 call	 ?BuildCornersTable@RRCC@@AAEXHH@Z ; RRCC::BuildCornersTable

; 309  :   BuildRefRotTables(width, height);

  0008b	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0008e	50		 push	 eax
  0008f	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00092	51		 push	 ecx
  00093	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?BuildRefRotTables@RRCC@@AAEXHH@Z ; RRCC::BuildRefRotTables
$LN1@IncrementR:

; 310  :   return;
; 311  : }

  0009b	83 c4 04	 add	 esp, 4
  0009e	3b ec		 cmp	 ebp, esp
  000a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c2 08 00	 ret	 8
?IncrementReferenceCount@RRCC@@QAEXHH@Z ENDP		; RRCC::IncrementReferenceCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
??1RRCC@@QAE@XZ PROC					; RRCC::~RRCC
; _this$ = ecx

; 49   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	56		 push	 esi
  00007	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000e	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00015	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 50   :   int i, j;
; 51   :   for (i=0; i<RRCC_MaxWidth; i++)

  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00026	eb 09		 jmp	 SHORT $LN4@RRCC
$LN2@RRCC:
  00028	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0002b	83 c0 01	 add	 eax, 1
  0002e	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@RRCC:
  00031	83 7d f8 06	 cmp	 DWORD PTR _i$[ebp], 6
  00035	0f 8d 81 01 00
	00		 jge	 $LN12@RRCC

; 52   :   {
; 53   :     for (j=0; j<RRCC_MaxHeight; j++)

  0003b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  00042	eb 09		 jmp	 SHORT $LN7@RRCC
$LN5@RRCC:
  00044	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  00047	83 c1 01	 add	 ecx, 1
  0004a	89 4d f4	 mov	 DWORD PTR _j$[ebp], ecx
$LN7@RRCC:
  0004d	83 7d f4 06	 cmp	 DWORD PTR _j$[ebp], 6
  00051	0f 8d 60 01 00
	00		 jge	 $LN6@RRCC

; 54   :     {
; 55   :       if (rotTable[i][j] != NULL) free(rotTable[i][j]);

  00057	6b 55 f8 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  0005b	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  0005e	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00061	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00065	74 20		 je	 SHORT $LN8@RRCC
  00067	6b 4d f8 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  0006b	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  0006e	8b f4		 mov	 esi, esp
  00070	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  00073	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  00076	50		 push	 eax
  00077	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0007d	83 c4 04	 add	 esp, 4
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@RRCC:

; 56   :       rotTable[i][j] = NULL;

  00087	6b 4d f8 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  0008b	03 4d fc	 add	 ecx, DWORD PTR _this$[ebp]
  0008e	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  00091	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0

; 57   :       if (refTable[i][j] != NULL) free(refTable[i][j]);

  00098	6b 45 f8 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0009c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	8d 94 01 90 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+144]
  000a6	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000a9	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  000ad	74 27		 je	 SHORT $LN9@RRCC
  000af	6b 4d f8 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  000b3	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b6	8d 84 0a 90 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+144]
  000bd	8b f4		 mov	 esi, esp
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  000c2	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  000c5	52		 push	 edx
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000cc	83 c4 04	 add	 esp, 4
  000cf	3b f4		 cmp	 esi, esp
  000d1	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@RRCC:

; 58   :       refTable[i][j] = NULL;

  000d6	6b 45 f8 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  000da	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000dd	8d 94 01 90 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+144]
  000e4	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  000e7	c7 04 82 00 00
	00 00		 mov	 DWORD PTR [edx+eax*4], 0

; 59   :       if (capturesTable[i][j] != NULL) free(capturesTable[i][j]);

  000ee	6b 4d f8 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  000f2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f5	8d 84 0a 20 01
	00 00		 lea	 eax, DWORD PTR [edx+ecx+288]
  000fc	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  000ff	83 3c 88 00	 cmp	 DWORD PTR [eax+ecx*4], 0
  00103	74 27		 je	 SHORT $LN10@RRCC
  00105	6b 55 f8 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  00109	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010c	8d 8c 10 20 01
	00 00		 lea	 ecx, DWORD PTR [eax+edx+288]
  00113	8b f4		 mov	 esi, esp
  00115	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  00118	8b 04 91	 mov	 eax, DWORD PTR [ecx+edx*4]
  0011b	50		 push	 eax
  0011c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00122	83 c4 04	 add	 esp, 4
  00125	3b f4		 cmp	 esi, esp
  00127	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN10@RRCC:

; 60   :       capturesTable[i][j] = NULL;

  0012c	6b 4d f8 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  00130	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00133	8d 84 0a 20 01
	00 00		 lea	 eax, DWORD PTR [edx+ecx+288]
  0013a	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  0013d	c7 04 88 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*4], 0

; 61   :       if (cornersTable[i][j] != NULL) free(cornersTable[i][j]);

  00144	6b 55 f8 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  00148	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014b	8d 8c 10 b0 01
	00 00		 lea	 ecx, DWORD PTR [eax+edx+432]
  00152	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  00155	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  00159	74 27		 je	 SHORT $LN11@RRCC
  0015b	6b 45 f8 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0015f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00162	8d 94 01 b0 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+432]
  00169	8b f4		 mov	 esi, esp
  0016b	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  0016e	8b 0c 82	 mov	 ecx, DWORD PTR [edx+eax*4]
  00171	51		 push	 ecx
  00172	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00178	83 c4 04	 add	 esp, 4
  0017b	3b f4		 cmp	 esi, esp
  0017d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN11@RRCC:

; 62   :       cornersTable[i][j] = NULL;

  00182	6b 55 f8 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  00186	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00189	8d 8c 10 b0 01
	00 00		 lea	 ecx, DWORD PTR [eax+edx+432]
  00190	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  00193	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0

; 63   :       refCount[i][j] = 0;

  0019a	6b 45 f8 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	8d 94 01 40 02
	00 00		 lea	 edx, DWORD PTR [ecx+eax+576]
  001a8	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  001ab	c7 04 82 00 00
	00 00		 mov	 DWORD PTR [edx+eax*4], 0

; 64   :     };

  001b2	e9 8d fe ff ff	 jmp	 $LN5@RRCC
$LN6@RRCC:

; 65   :   };

  001b7	e9 6c fe ff ff	 jmp	 $LN2@RRCC
$LN12@RRCC:

; 66   : }

  001bc	5e		 pop	 esi
  001bd	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c0	3b ec		 cmp	 ebp, esp
  001c2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001c7	8b e5		 mov	 esp, ebp
  001c9	5d		 pop	 ebp
  001ca	c3		 ret	 0
??1RRCC@@QAE@XZ ENDP					; RRCC::~RRCC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_j$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
??0RRCC@@QAE@XZ PROC					; RRCC::RRCC
; _this$ = ecx

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 34   :   int i, j;
; 35   :   for (i=0; i<RRCC_MaxWidth; i++)

  00009	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00010	eb 09		 jmp	 SHORT $LN4@RRCC
$LN2@RRCC:
  00012	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00015	83 c0 01	 add	 eax, 1
  00018	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@RRCC:
  0001b	83 7d f8 06	 cmp	 DWORD PTR _i$[ebp], 6
  0001f	0f 8d 93 00 00
	00		 jge	 $LN1@RRCC

; 36   :   {
; 37   :     for (j=0; j<RRCC_MaxHeight; j++)

  00025	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0002c	eb 09		 jmp	 SHORT $LN7@RRCC
$LN5@RRCC:
  0002e	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  00031	83 c1 01	 add	 ecx, 1
  00034	89 4d f4	 mov	 DWORD PTR _j$[ebp], ecx
$LN7@RRCC:
  00037	83 7d f4 06	 cmp	 DWORD PTR _j$[ebp], 6
  0003b	7d 76		 jge	 SHORT $LN6@RRCC

; 38   :     {
; 39   :       rotTable[i][j] = NULL;

  0003d	6b 55 f8 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  00041	03 55 fc	 add	 edx, DWORD PTR _this$[ebp]
  00044	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  00047	c7 04 82 00 00
	00 00		 mov	 DWORD PTR [edx+eax*4], 0

; 40   :       refTable[i][j] = NULL;

  0004e	6b 4d f8 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  00052	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00055	8d 84 0a 90 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+144]
  0005c	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  0005f	c7 04 88 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*4], 0

; 41   :       capturesTable[i][j] = NULL;

  00066	6b 55 f8 18	 imul	 edx, DWORD PTR _i$[ebp], 24
  0006a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006d	8d 8c 10 20 01
	00 00		 lea	 ecx, DWORD PTR [eax+edx+288]
  00074	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  00077	c7 04 91 00 00
	00 00		 mov	 DWORD PTR [ecx+edx*4], 0

; 42   :       cornersTable[i][j] = NULL;

  0007e	6b 45 f8 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	8d 94 01 b0 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+432]
  0008c	8b 45 f4	 mov	 eax, DWORD PTR _j$[ebp]
  0008f	c7 04 82 00 00
	00 00		 mov	 DWORD PTR [edx+eax*4], 0

; 43   :       refCount[i][j] = 0;

  00096	6b 4d f8 18	 imul	 ecx, DWORD PTR _i$[ebp], 24
  0009a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009d	8d 84 0a 40 02
	00 00		 lea	 eax, DWORD PTR [edx+ecx+576]
  000a4	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  000a7	c7 04 88 00 00
	00 00		 mov	 DWORD PTR [eax+ecx*4], 0

; 44   :     };

  000ae	e9 7b ff ff ff	 jmp	 $LN5@RRCC
$LN6@RRCC:

; 45   :   };

  000b3	e9 5a ff ff ff	 jmp	 $LN2@RRCC
$LN1@RRCC:

; 46   : }

  000b8	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c3		 ret	 0
??0RRCC@@QAE@XZ ENDP					; RRCC::RRCC
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?BuildCornersTable@RRCC@@AAEXHH@Z PROC			; RRCC::BuildCornersTable
; _this$ = ecx

; 289  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 290  :   ASSERT(cornersTable[width][height] == NULL);

  0000f	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  00013	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	8d 94 01 b0 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+432]
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00020	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  00024	74 14		 je	 SHORT $LN3@BuildCorne
  00026	68 22 01 00 00	 push	 290			; 00000122H
  0002b	68 00 00 00 00	 push	 OFFSET $SG225804
  00030	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  00035	85 c0		 test	 eax, eax
  00037	74 01		 je	 SHORT $LN3@BuildCorne
  00039	cc		 int	 3
$LN3@BuildCorne:

; 291  :   cornersTable[width][height] = (ui64 *)malloc(8 * sizeof (ui64));

  0003a	8b f4		 mov	 esi, esp
  0003c	6a 40		 push	 64			; 00000040H
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00044	83 c4 04	 add	 esp, 4
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	8d 94 11 b0 01
	00 00		 lea	 edx, DWORD PTR [ecx+edx+432]
  0005c	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  0005f	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 292  :   AddCorner(width, height, 0, 0,                              width-1); // Line numbers

  00062	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00065	83 ea 01	 sub	 edx, 1
  00068	52		 push	 edx
  00069	6a 00		 push	 0
  0006b	6a 00		 push	 0
  0006d	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00070	50		 push	 eax
  00071	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00074	51		 push	 ecx
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?AddCorner@RRCC@@AAEXHHHHH@Z ; RRCC::AddCorner

; 293  :   AddCorner(width, height, 1, width-2,                        2*width-2);

  0007d	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00080	8d 44 12 fe	 lea	 eax, DWORD PTR [edx+edx-2]
  00084	50		 push	 eax
  00085	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00088	83 e9 02	 sub	 ecx, 2
  0008b	51		 push	 ecx
  0008c	6a 01		 push	 1
  0008e	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00091	52		 push	 edx
  00092	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00095	50		 push	 eax
  00096	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00099	e8 00 00 00 00	 call	 ?AddCorner@RRCC@@AAEXHHHHH@Z ; RRCC::AddCorner

; 294  :   AddCorner(width, height, 2, (height-2)*(2*width-1)+width-1, (height-1)*(2*width-1));

  0009e	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  000a1	83 e9 01	 sub	 ecx, 1
  000a4	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  000a7	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  000ab	0f af c8	 imul	 ecx, eax
  000ae	51		 push	 ecx
  000af	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  000b2	83 e9 02	 sub	 ecx, 2
  000b5	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  000b8	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  000bc	0f af c8	 imul	 ecx, eax
  000bf	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  000c2	8d 44 11 ff	 lea	 eax, DWORD PTR [ecx+edx-1]
  000c6	50		 push	 eax
  000c7	6a 02		 push	 2
  000c9	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  000cc	51		 push	 ecx
  000cd	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  000d0	52		 push	 edx
  000d1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000d4	e8 00 00 00 00	 call	 ?AddCorner@RRCC@@AAEXHHHHH@Z ; RRCC::AddCorner

; 295  :   AddCorner(width, height, 3, (height-1)*(2*width-1)-1,       (height-1)*(2*width-1)+width-2);

  000d9	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  000dc	83 e8 01	 sub	 eax, 1
  000df	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  000e2	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  000e6	0f af c2	 imul	 eax, edx
  000e9	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  000ec	8d 54 08 fe	 lea	 edx, DWORD PTR [eax+ecx-2]
  000f0	52		 push	 edx
  000f1	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  000f4	83 e8 01	 sub	 eax, 1
  000f7	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  000fa	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  000fe	0f af c2	 imul	 eax, edx
  00101	83 e8 01	 sub	 eax, 1
  00104	50		 push	 eax
  00105	6a 03		 push	 3
  00107	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0010a	50		 push	 eax
  0010b	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  0010e	51		 push	 ecx
  0010f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00112	e8 00 00 00 00	 call	 ?AddCorner@RRCC@@AAEXHHHHH@Z ; RRCC::AddCorner

; 296  : }

  00117	5e		 pop	 esi
  00118	83 c4 04	 add	 esp, 4
  0011b	3b ec		 cmp	 ebp, esp
  0011d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c2 08 00	 ret	 8
?BuildCornersTable@RRCC@@AAEXHH@Z ENDP			; RRCC::BuildCornersTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_corner$ = 16						; size = 4
_line1$ = 20						; size = 4
_line2$ = 24						; size = 4
?AddCorner@RRCC@@AAEXHHHHH@Z PROC			; RRCC::AddCorner
; _this$ = ecx

; 283  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000d	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 284  :   cornersTable[width][height][2*corner+0] = 1I64 << line2;

  00010	b8 01 00 00 00	 mov	 eax, 1
  00015	33 d2		 xor	 edx, edx
  00017	8b 4d 18	 mov	 ecx, DWORD PTR _line2$[ebp]
  0001a	e8 00 00 00 00	 call	 __allshl
  0001f	6b 4d 08 18	 imul	 ecx, DWORD PTR _width$[ebp], 24
  00023	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00026	8d 8c 0e b0 01
	00 00		 lea	 ecx, DWORD PTR [esi+ecx+432]
  0002d	8b 75 10	 mov	 esi, DWORD PTR _corner$[ebp]
  00030	d1 e6		 shl	 esi, 1
  00032	8b 7d 0c	 mov	 edi, DWORD PTR _height$[ebp]
  00035	8b 0c b9	 mov	 ecx, DWORD PTR [ecx+edi*4]
  00038	89 04 f1	 mov	 DWORD PTR [ecx+esi*8], eax
  0003b	89 54 f1 04	 mov	 DWORD PTR [ecx+esi*8+4], edx

; 285  :   cornersTable[width][height][2*corner+1] = (1I64 << line1) | (1I64 << line2);

  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	33 d2		 xor	 edx, edx
  00046	8b 4d 14	 mov	 ecx, DWORD PTR _line1$[ebp]
  00049	e8 00 00 00 00	 call	 __allshl
  0004e	8b f0		 mov	 esi, eax
  00050	8b fa		 mov	 edi, edx
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	33 d2		 xor	 edx, edx
  00059	8b 4d 18	 mov	 ecx, DWORD PTR _line2$[ebp]
  0005c	e8 00 00 00 00	 call	 __allshl
  00061	0b f0		 or	 esi, eax
  00063	0b fa		 or	 edi, edx
  00065	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  00069	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	8d 8c 10 b0 01
	00 00		 lea	 ecx, DWORD PTR [eax+edx+432]
  00073	8b 55 10	 mov	 edx, DWORD PTR _corner$[ebp]
  00076	d1 e2		 shl	 edx, 1
  00078	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0007b	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  0007e	89 74 d1 08	 mov	 DWORD PTR [ecx+edx*8+8], esi
  00082	89 7c d1 0c	 mov	 DWORD PTR [ecx+edx*8+12], edi

; 286  : }

  00086	5f		 pop	 edi
  00087	5e		 pop	 esi
  00088	83 c4 04	 add	 esp, 4
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 14 00	 ret	 20			; 00000014H
?AddCorner@RRCC@@AAEXHHHHH@Z ENDP			; RRCC::AddCorner
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_k$1 = -572						; size = 4
_j1$2 = -568						; size = 4
_ref$3 = -564						; size = 8
_rot$4 = -556						; size = 8
_j$ = -548						; size = 4
_i$ = -544						; size = 4
_numLine$ = -540					; size = 4
_reflectTransp$ = -532					; size = 256
_rotateTransp$ = -268					; size = 256
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?BuildRefRotTables@RRCC@@AAEXHH@Z PROC			; RRCC::BuildRefRotTables
; _this$ = ecx

; 166  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 3c 02 00
	00		 sub	 esp, 572		; 0000023cH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd c4 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-572]
  00012	b9 8f 00 00 00	 mov	 ecx, 143		; 0000008fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 167  :   int rotateTransp[64]; //rotate transpositions
; 168  :   int reflectTransp[64]; //reflection transpositions
; 169  :   int numLine = (width-1)*height + (height-1)*width;

  0002c	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  0002f	83 e8 01	 sub	 eax, 1
  00032	0f af 45 0c	 imul	 eax, DWORD PTR _height$[ebp]
  00036	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00039	83 e9 01	 sub	 ecx, 1
  0003c	0f af 4d 08	 imul	 ecx, DWORD PTR _width$[ebp]
  00040	03 c1		 add	 eax, ecx
  00042	89 85 e4 fd ff
	ff		 mov	 DWORD PTR _numLine$[ebp], eax

; 170  :   int i, j;
; 171  :   BuildRefTransp(width, height, reflectTransp);

  00048	8d 95 ec fd ff
	ff		 lea	 edx, DWORD PTR _reflectTransp$[ebp]
  0004e	52		 push	 edx
  0004f	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00052	50		 push	 eax
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00056	51		 push	 ecx
  00057	e8 00 00 00 00	 call	 ?BuildRefTransp@@YAXHHPAH@Z ; BuildRefTransp
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 172  :   BuildRotTransp(width, height, rotateTransp);

  0005f	8d 95 f4 fe ff
	ff		 lea	 edx, DWORD PTR _rotateTransp$[ebp]
  00065	52		 push	 edx
  00066	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00069	50		 push	 eax
  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  0006d	51		 push	 ecx
  0006e	e8 00 00 00 00	 call	 ?BuildRotTransp@@YAXHHPAH@Z ; BuildRotTransp
  00073	83 c4 0c	 add	 esp, 12			; 0000000cH

; 173  :   rotTable[width][height] = (ui64 *)malloc(4*65536*sizeof(ui64));

  00076	8b f4		 mov	 esi, esp
  00078	68 00 00 20 00	 push	 2097152			; 00200000H
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00083	83 c4 04	 add	 esp, 4
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  00091	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  00094	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00097	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 174  :   refTable[width][height] = (ui64 *)malloc(4*65536*sizeof(ui64));

  0009a	8b f4		 mov	 esi, esp
  0009c	68 00 00 20 00	 push	 2097152			; 00200000H
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  000a7	83 c4 04	 add	 esp, 4
  000aa	3b f4		 cmp	 esi, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  000b5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	8d 94 11 90 00
	00 00		 lea	 edx, DWORD PTR [ecx+edx+144]
  000bf	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  000c2	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 175  :   for (i=0; i<4; i++)

  000c5	c7 85 e0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$[ebp], 0
  000cf	eb 0f		 jmp	 SHORT $LN4@BuildRefRo
$LN2@BuildRefRo:
  000d1	8b 95 e0 fd ff
	ff		 mov	 edx, DWORD PTR _i$[ebp]
  000d7	83 c2 01	 add	 edx, 1
  000da	89 95 e0 fd ff
	ff		 mov	 DWORD PTR _i$[ebp], edx
$LN4@BuildRefRo:
  000e0	83 bd e0 fd ff
	ff 04		 cmp	 DWORD PTR _i$[ebp], 4
  000e7	0f 8d 92 01 00
	00		 jge	 $LN1@BuildRefRo

; 176  :   { 
; 177  :     for (j=0; j<65536; j++)

  000ed	c7 85 dc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$[ebp], 0
  000f7	eb 0f		 jmp	 SHORT $LN7@BuildRefRo
$LN5@BuildRefRo:
  000f9	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  000ff	83 c0 01	 add	 eax, 1
  00102	89 85 dc fd ff
	ff		 mov	 DWORD PTR _j$[ebp], eax
$LN7@BuildRefRo:
  00108	81 bd dc fd ff
	ff 00 00 01 00	 cmp	 DWORD PTR _j$[ebp], 65536 ; 00010000H
  00112	0f 8d 62 01 00
	00		 jge	 $LN6@BuildRefRo

; 178  :     {
; 179  :       ui64 rot = 0;

  00118	0f 57 c0	 xorps	 xmm0, xmm0
  0011b	66 0f 13 85 d4
	fd ff ff	 movlpd	 QWORD PTR _rot$4[ebp], xmm0

; 180  :       ui64 ref = 0;

  00123	0f 57 c0	 xorps	 xmm0, xmm0
  00126	66 0f 13 85 cc
	fd ff ff	 movlpd	 QWORD PTR _ref$3[ebp], xmm0

; 181  :       int j1 = j;

  0012e	8b 8d dc fd ff
	ff		 mov	 ecx, DWORD PTR _j$[ebp]
  00134	89 8d c8 fd ff
	ff		 mov	 DWORD PTR _j1$2[ebp], ecx

; 182  :       for (int k=0; k<16; k++, j1>>=1)

  0013a	c7 85 c4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _k$1[ebp], 0
  00144	eb 1d		 jmp	 SHORT $LN10@BuildRefRo
$LN8@BuildRefRo:
  00146	8b 95 c4 fd ff
	ff		 mov	 edx, DWORD PTR _k$1[ebp]
  0014c	83 c2 01	 add	 edx, 1
  0014f	89 95 c4 fd ff
	ff		 mov	 DWORD PTR _k$1[ebp], edx
  00155	8b 85 c8 fd ff
	ff		 mov	 eax, DWORD PTR _j1$2[ebp]
  0015b	d1 f8		 sar	 eax, 1
  0015d	89 85 c8 fd ff
	ff		 mov	 DWORD PTR _j1$2[ebp], eax
$LN10@BuildRefRo:
  00163	83 bd c4 fd ff
	ff 10		 cmp	 DWORD PTR _k$1[ebp], 16	; 00000010H
  0016a	0f 8d a0 00 00
	00		 jge	 $LN9@BuildRefRo

; 183  :       {
; 184  :         if (16*i+k >= numLine) break;

  00170	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00176	c1 e1 04	 shl	 ecx, 4
  00179	03 8d c4 fd ff
	ff		 add	 ecx, DWORD PTR _k$1[ebp]
  0017f	3b 8d e4 fd ff
	ff		 cmp	 ecx, DWORD PTR _numLine$[ebp]
  00185	7c 05		 jl	 SHORT $LN11@BuildRefRo
  00187	e9 84 00 00 00	 jmp	 $LN9@BuildRefRo
$LN11@BuildRefRo:

; 185  :         if (j1 & 1)

  0018c	8b 95 c8 fd ff
	ff		 mov	 edx, DWORD PTR _j1$2[ebp]
  00192	83 e2 01	 and	 edx, 1
  00195	74 74		 je	 SHORT $LN12@BuildRefRo

; 186  :         {
; 187  :           rot |= 1I64<<rotateTransp[16*i+k];

  00197	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  0019d	c1 e1 04	 shl	 ecx, 4
  001a0	03 8d c4 fd ff
	ff		 add	 ecx, DWORD PTR _k$1[ebp]
  001a6	b8 01 00 00 00	 mov	 eax, 1
  001ab	33 d2		 xor	 edx, edx
  001ad	8b 8c 8d f4 fe
	ff ff		 mov	 ecx, DWORD PTR _rotateTransp$[ebp+ecx*4]
  001b4	e8 00 00 00 00	 call	 __allshl
  001b9	0b 85 d4 fd ff
	ff		 or	 eax, DWORD PTR _rot$4[ebp]
  001bf	0b 95 d8 fd ff
	ff		 or	 edx, DWORD PTR _rot$4[ebp+4]
  001c5	89 85 d4 fd ff
	ff		 mov	 DWORD PTR _rot$4[ebp], eax
  001cb	89 95 d8 fd ff
	ff		 mov	 DWORD PTR _rot$4[ebp+4], edx

; 188  :           ref |= 1I64<<reflectTransp[16*i+k];

  001d1	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  001d7	c1 e1 04	 shl	 ecx, 4
  001da	03 8d c4 fd ff
	ff		 add	 ecx, DWORD PTR _k$1[ebp]
  001e0	b8 01 00 00 00	 mov	 eax, 1
  001e5	33 d2		 xor	 edx, edx
  001e7	8b 8c 8d ec fd
	ff ff		 mov	 ecx, DWORD PTR _reflectTransp$[ebp+ecx*4]
  001ee	e8 00 00 00 00	 call	 __allshl
  001f3	0b 85 cc fd ff
	ff		 or	 eax, DWORD PTR _ref$3[ebp]
  001f9	0b 95 d0 fd ff
	ff		 or	 edx, DWORD PTR _ref$3[ebp+4]
  001ff	89 85 cc fd ff
	ff		 mov	 DWORD PTR _ref$3[ebp], eax
  00205	89 95 d0 fd ff
	ff		 mov	 DWORD PTR _ref$3[ebp+4], edx
$LN12@BuildRefRo:

; 189  :         };
; 190  :       };

  0020b	e9 36 ff ff ff	 jmp	 $LN8@BuildRefRo
$LN9@BuildRefRo:

; 191  :       rotTable[width][height][4*j+i] = rot;

  00210	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  00214	03 55 f8	 add	 edx, DWORD PTR _this$[ebp]
  00217	8b 85 dc fd ff
	ff		 mov	 eax, DWORD PTR _j$[ebp]
  0021d	8b 8d e0 fd ff
	ff		 mov	 ecx, DWORD PTR _i$[ebp]
  00223	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00226	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00229	8b 14 8a	 mov	 edx, DWORD PTR [edx+ecx*4]
  0022c	8b 8d d4 fd ff
	ff		 mov	 ecx, DWORD PTR _rot$4[ebp]
  00232	8b b5 d8 fd ff
	ff		 mov	 esi, DWORD PTR _rot$4[ebp+4]
  00238	89 0c c2	 mov	 DWORD PTR [edx+eax*8], ecx
  0023b	89 74 c2 04	 mov	 DWORD PTR [edx+eax*8+4], esi

; 192  :       refTable[width][height][4*j+i] = ref;

  0023f	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  00243	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00246	8d 8c 10 90 00
	00 00		 lea	 ecx, DWORD PTR [eax+edx+144]
  0024d	8b 95 dc fd ff
	ff		 mov	 edx, DWORD PTR _j$[ebp]
  00253	8b 85 e0 fd ff
	ff		 mov	 eax, DWORD PTR _i$[ebp]
  00259	8d 14 90	 lea	 edx, DWORD PTR [eax+edx*4]
  0025c	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0025f	8b 0c 81	 mov	 ecx, DWORD PTR [ecx+eax*4]
  00262	8b 85 cc fd ff
	ff		 mov	 eax, DWORD PTR _ref$3[ebp]
  00268	8b b5 d0 fd ff
	ff		 mov	 esi, DWORD PTR _ref$3[ebp+4]
  0026e	89 04 d1	 mov	 DWORD PTR [ecx+edx*8], eax
  00271	89 74 d1 04	 mov	 DWORD PTR [ecx+edx*8+4], esi

; 193  :     };

  00275	e9 7f fe ff ff	 jmp	 $LN5@BuildRefRo
$LN6@BuildRefRo:

; 194  :   };

  0027a	e9 52 fe ff ff	 jmp	 $LN2@BuildRefRo
$LN1@BuildRefRo:

; 195  : }

  0027f	52		 push	 edx
  00280	8b cd		 mov	 ecx, ebp
  00282	50		 push	 eax
  00283	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@BuildRefRo
  00289	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0028e	58		 pop	 eax
  0028f	5a		 pop	 edx
  00290	5f		 pop	 edi
  00291	5e		 pop	 esi
  00292	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00295	33 cd		 xor	 ecx, ebp
  00297	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0029c	81 c4 3c 02 00
	00		 add	 esp, 572		; 0000023cH
  002a2	3b ec		 cmp	 ebp, esp
  002a4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002a9	8b e5		 mov	 esp, ebp
  002ab	5d		 pop	 ebp
  002ac	c2 08 00	 ret	 8
  002af	90		 npad	 1
$LN17@BuildRefRo:
  002b0	02 00 00 00	 DD	 2
  002b4	00 00 00 00	 DD	 $LN16@BuildRefRo
$LN16@BuildRefRo:
  002b8	f4 fe ff ff	 DD	 -268			; fffffef4H
  002bc	00 01 00 00	 DD	 256			; 00000100H
  002c0	00 00 00 00	 DD	 $LN14@BuildRefRo
  002c4	ec fd ff ff	 DD	 -532			; fffffdecH
  002c8	00 01 00 00	 DD	 256			; 00000100H
  002cc	00 00 00 00	 DD	 $LN15@BuildRefRo
$LN15@BuildRefRo:
  002d0	72		 DB	 114			; 00000072H
  002d1	65		 DB	 101			; 00000065H
  002d2	66		 DB	 102			; 00000066H
  002d3	6c		 DB	 108			; 0000006cH
  002d4	65		 DB	 101			; 00000065H
  002d5	63		 DB	 99			; 00000063H
  002d6	74		 DB	 116			; 00000074H
  002d7	54		 DB	 84			; 00000054H
  002d8	72		 DB	 114			; 00000072H
  002d9	61		 DB	 97			; 00000061H
  002da	6e		 DB	 110			; 0000006eH
  002db	73		 DB	 115			; 00000073H
  002dc	70		 DB	 112			; 00000070H
  002dd	00		 DB	 0
$LN14@BuildRefRo:
  002de	72		 DB	 114			; 00000072H
  002df	6f		 DB	 111			; 0000006fH
  002e0	74		 DB	 116			; 00000074H
  002e1	61		 DB	 97			; 00000061H
  002e2	74		 DB	 116			; 00000074H
  002e3	65		 DB	 101			; 00000065H
  002e4	54		 DB	 84			; 00000054H
  002e5	72		 DB	 114			; 00000072H
  002e6	61		 DB	 97			; 00000061H
  002e7	6e		 DB	 110			; 0000006eH
  002e8	73		 DB	 115			; 00000073H
  002e9	70		 DB	 112			; 00000070H
  002ea	00		 DB	 0
?BuildRefRotTables@RRCC@@AAEXHH@Z ENDP			; RRCC::BuildRefRotTables
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_numLine$ = -52						; size = 4
_line$ = -44						; size = 16
_col$ = -24						; size = 4
_row$ = -20						; size = 4
_j$ = -16						; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?BuildCapturesTable@RRCC@@AAEXHH@Z PROC			; RRCC::BuildCapturesTable
; _this$ = ecx

; 242  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000c	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 243  :   int i, j, row, col, line[4], numLine;
; 244  :   numLine = (width-1)*height + (height-1)*width;

  00026	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00029	83 e8 01	 sub	 eax, 1
  0002c	0f af 45 0c	 imul	 eax, DWORD PTR _height$[ebp]
  00030	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00033	83 e9 01	 sub	 ecx, 1
  00036	0f af 4d 08	 imul	 ecx, DWORD PTR _width$[ebp]
  0003a	03 c1		 add	 eax, ecx
  0003c	89 45 cc	 mov	 DWORD PTR _numLine$[ebp], eax

; 245  :   capturesTable[width][height] = (ui64 *)malloc(2*numLine*sizeof(ui64));

  0003f	8b 55 cc	 mov	 edx, DWORD PTR _numLine$[ebp]
  00042	d1 e2		 shl	 edx, 1
  00044	c1 e2 03	 shl	 edx, 3
  00047	8b f4		 mov	 esi, esp
  00049	52		 push	 edx
  0004a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00050	83 c4 04	 add	 esp, 4
  00053	3b f4		 cmp	 esi, esp
  00055	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005a	6b 4d 08 18	 imul	 ecx, DWORD PTR _width$[ebp], 24
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8d 8c 0a 20 01
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+288]
  00068	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0006b	89 04 91	 mov	 DWORD PTR [ecx+edx*4], eax

; 246  :   for (i=0; i<numLine; i++)

  0006e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00075	eb 09		 jmp	 SHORT $LN4@BuildCaptu
$LN2@BuildCaptu:
  00077	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  0007a	83 c0 01	 add	 eax, 1
  0007d	89 45 f4	 mov	 DWORD PTR _i$[ebp], eax
$LN4@BuildCaptu:
  00080	8b 4d f4	 mov	 ecx, DWORD PTR _i$[ebp]
  00083	3b 4d cc	 cmp	 ecx, DWORD PTR _numLine$[ebp]
  00086	7d 47		 jge	 SHORT $LN3@BuildCaptu

; 247  :   {
; 248  :     for (j=0; j<2; j++)

  00088	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
  0008f	eb 09		 jmp	 SHORT $LN7@BuildCaptu
$LN5@BuildCaptu:
  00091	8b 55 f0	 mov	 edx, DWORD PTR _j$[ebp]
  00094	83 c2 01	 add	 edx, 1
  00097	89 55 f0	 mov	 DWORD PTR _j$[ebp], edx
$LN7@BuildCaptu:
  0009a	83 7d f0 02	 cmp	 DWORD PTR _j$[ebp], 2
  0009e	7d 2d		 jge	 SHORT $LN6@BuildCaptu

; 249  :     {
; 250  :       capturesTable[width][height][i*2 + j] = 0xffffffffffffffff;

  000a0	6b 45 08 18	 imul	 eax, DWORD PTR _width$[ebp], 24
  000a4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a7	8d 94 01 20 01
	00 00		 lea	 edx, DWORD PTR [ecx+eax+288]
  000ae	8b 45 f4	 mov	 eax, DWORD PTR _i$[ebp]
  000b1	8b 4d f0	 mov	 ecx, DWORD PTR _j$[ebp]
  000b4	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  000b7	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  000ba	8b 14 8a	 mov	 edx, DWORD PTR [edx+ecx*4]
  000bd	83 c9 ff	 or	 ecx, -1
  000c0	c7 04 c2 ff ff
	ff ff		 mov	 DWORD PTR [edx+eax*8], -1
  000c7	89 4c c2 04	 mov	 DWORD PTR [edx+eax*8+4], ecx

; 251  :     };

  000cb	eb c4		 jmp	 SHORT $LN5@BuildCaptu
$LN6@BuildCaptu:

; 252  :   };

  000cd	eb a8		 jmp	 SHORT $LN2@BuildCaptu
$LN3@BuildCaptu:

; 253  :   for (row=0; row<height; row++)

  000cf	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  000d6	eb 09		 jmp	 SHORT $LN10@BuildCaptu
$LN8@BuildCaptu:
  000d8	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  000db	83 c2 01	 add	 edx, 1
  000de	89 55 ec	 mov	 DWORD PTR _row$[ebp], edx
$LN10@BuildCaptu:
  000e1	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  000e4	3b 45 0c	 cmp	 eax, DWORD PTR _height$[ebp]
  000e7	0f 8d 28 02 00
	00		 jge	 $LN1@BuildCaptu

; 254  :   {
; 255  :     for (col=0; col<width; col++)

  000ed	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  000f4	eb 09		 jmp	 SHORT $LN13@BuildCaptu
$LN11@BuildCaptu:
  000f6	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  000f9	83 c1 01	 add	 ecx, 1
  000fc	89 4d e8	 mov	 DWORD PTR _col$[ebp], ecx
$LN13@BuildCaptu:
  000ff	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  00102	3b 55 08	 cmp	 edx, DWORD PTR _width$[ebp]
  00105	0f 8d 05 02 00
	00		 jge	 $LN12@BuildCaptu

; 256  :     {
; 257  :       //The two boxes associate with the horizontal line at (col, row);
; 258  :       line[0] = dot2HLine(col, row);

  0010b	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  0010e	50		 push	 eax
  0010f	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  00112	51		 push	 ecx
  00113	e8 00 00 00 00	 call	 ?dot2HLine@@YAHHH@Z	; dot2HLine
  00118	83 c4 08	 add	 esp, 8
  0011b	ba 04 00 00 00	 mov	 edx, 4
  00120	6b ca 00	 imul	 ecx, edx, 0
  00123	89 44 0d d4	 mov	 DWORD PTR _line$[ebp+ecx], eax

; 259  :       line[1] = dot2VLine(col, row-1);

  00127	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  0012a	83 ea 01	 sub	 edx, 1
  0012d	52		 push	 edx
  0012e	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ?dot2VLine@@YAHHH@Z	; dot2VLine
  00137	83 c4 08	 add	 esp, 8
  0013a	b9 04 00 00 00	 mov	 ecx, 4
  0013f	c1 e1 00	 shl	 ecx, 0
  00142	89 44 0d d4	 mov	 DWORD PTR _line$[ebp+ecx], eax

; 260  :       line[2] = dot2HLine(col, row-1);

  00146	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00149	83 ea 01	 sub	 edx, 1
  0014c	52		 push	 edx
  0014d	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ?dot2HLine@@YAHHH@Z	; dot2HLine
  00156	83 c4 08	 add	 esp, 8
  00159	b9 04 00 00 00	 mov	 ecx, 4
  0015e	d1 e1		 shl	 ecx, 1
  00160	89 44 0d d4	 mov	 DWORD PTR _line$[ebp+ecx], eax

; 261  :       line[3] = dot2VLine(col+1, row-1);

  00164	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00167	83 ea 01	 sub	 edx, 1
  0016a	52		 push	 edx
  0016b	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  0016e	83 c0 01	 add	 eax, 1
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ?dot2VLine@@YAHHH@Z	; dot2VLine
  00177	83 c4 08	 add	 esp, 8
  0017a	b9 04 00 00 00	 mov	 ecx, 4
  0017f	6b d1 03	 imul	 edx, ecx, 3
  00182	89 44 15 d4	 mov	 DWORD PTR _line$[ebp+edx], eax

; 262  :       CaptureEntry(width, height, 0, line);

  00186	8d 45 d4	 lea	 eax, DWORD PTR _line$[ebp]
  00189	50		 push	 eax
  0018a	6a 00		 push	 0
  0018c	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  0018f	51		 push	 ecx
  00190	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00193	52		 push	 edx
  00194	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00197	e8 00 00 00 00	 call	 ?CaptureEntry@RRCC@@AAEXHHHPAH@Z ; RRCC::CaptureEntry

; 263  :       line[1] = dot2VLine(col, row);

  0019c	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  0019f	50		 push	 eax
  001a0	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  001a3	51		 push	 ecx
  001a4	e8 00 00 00 00	 call	 ?dot2VLine@@YAHHH@Z	; dot2VLine
  001a9	83 c4 08	 add	 esp, 8
  001ac	ba 04 00 00 00	 mov	 edx, 4
  001b1	c1 e2 00	 shl	 edx, 0
  001b4	89 44 15 d4	 mov	 DWORD PTR _line$[ebp+edx], eax

; 264  :       line[2] = dot2HLine(col, row+1);

  001b8	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  001bb	83 c0 01	 add	 eax, 1
  001be	50		 push	 eax
  001bf	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  001c2	51		 push	 ecx
  001c3	e8 00 00 00 00	 call	 ?dot2HLine@@YAHHH@Z	; dot2HLine
  001c8	83 c4 08	 add	 esp, 8
  001cb	ba 04 00 00 00	 mov	 edx, 4
  001d0	d1 e2		 shl	 edx, 1
  001d2	89 44 15 d4	 mov	 DWORD PTR _line$[ebp+edx], eax

; 265  :       line[3] = dot2VLine(col+1, row);

  001d6	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  001d9	50		 push	 eax
  001da	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  001dd	83 c1 01	 add	 ecx, 1
  001e0	51		 push	 ecx
  001e1	e8 00 00 00 00	 call	 ?dot2VLine@@YAHHH@Z	; dot2VLine
  001e6	83 c4 08	 add	 esp, 8
  001e9	ba 04 00 00 00	 mov	 edx, 4
  001ee	6b ca 03	 imul	 ecx, edx, 3
  001f1	89 44 0d d4	 mov	 DWORD PTR _line$[ebp+ecx], eax

; 266  :       CaptureEntry(width, height, 1, line);

  001f5	8d 55 d4	 lea	 edx, DWORD PTR _line$[ebp]
  001f8	52		 push	 edx
  001f9	6a 01		 push	 1
  001fb	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  001fe	50		 push	 eax
  001ff	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00202	51		 push	 ecx
  00203	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00206	e8 00 00 00 00	 call	 ?CaptureEntry@RRCC@@AAEXHHHPAH@Z ; RRCC::CaptureEntry

; 267  :       //The two boxes associate with the vertical line at (col, row);
; 268  :       line[0] = dot2VLine(col, row);

  0020b	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  0020e	52		 push	 edx
  0020f	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00212	50		 push	 eax
  00213	e8 00 00 00 00	 call	 ?dot2VLine@@YAHHH@Z	; dot2VLine
  00218	83 c4 08	 add	 esp, 8
  0021b	b9 04 00 00 00	 mov	 ecx, 4
  00220	6b d1 00	 imul	 edx, ecx, 0
  00223	89 44 15 d4	 mov	 DWORD PTR _line$[ebp+edx], eax

; 269  :       line[1] = dot2HLine(col-1, row);

  00227	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  0022a	50		 push	 eax
  0022b	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  0022e	83 e9 01	 sub	 ecx, 1
  00231	51		 push	 ecx
  00232	e8 00 00 00 00	 call	 ?dot2HLine@@YAHHH@Z	; dot2HLine
  00237	83 c4 08	 add	 esp, 8
  0023a	ba 04 00 00 00	 mov	 edx, 4
  0023f	c1 e2 00	 shl	 edx, 0
  00242	89 44 15 d4	 mov	 DWORD PTR _line$[ebp+edx], eax

; 270  :       line[2] = dot2VLine(col-1, row);

  00246	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  00249	50		 push	 eax
  0024a	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  0024d	83 e9 01	 sub	 ecx, 1
  00250	51		 push	 ecx
  00251	e8 00 00 00 00	 call	 ?dot2VLine@@YAHHH@Z	; dot2VLine
  00256	83 c4 08	 add	 esp, 8
  00259	ba 04 00 00 00	 mov	 edx, 4
  0025e	d1 e2		 shl	 edx, 1
  00260	89 44 15 d4	 mov	 DWORD PTR _line$[ebp+edx], eax

; 271  :       line[3] = dot2HLine(col-1, row+1);

  00264	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  00267	83 c0 01	 add	 eax, 1
  0026a	50		 push	 eax
  0026b	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  0026e	83 e9 01	 sub	 ecx, 1
  00271	51		 push	 ecx
  00272	e8 00 00 00 00	 call	 ?dot2HLine@@YAHHH@Z	; dot2HLine
  00277	83 c4 08	 add	 esp, 8
  0027a	ba 04 00 00 00	 mov	 edx, 4
  0027f	6b ca 03	 imul	 ecx, edx, 3
  00282	89 44 0d d4	 mov	 DWORD PTR _line$[ebp+ecx], eax

; 272  :       CaptureEntry(width, height, 0, line);

  00286	8d 55 d4	 lea	 edx, DWORD PTR _line$[ebp]
  00289	52		 push	 edx
  0028a	6a 00		 push	 0
  0028c	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0028f	50		 push	 eax
  00290	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00293	51		 push	 ecx
  00294	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00297	e8 00 00 00 00	 call	 ?CaptureEntry@RRCC@@AAEXHHHPAH@Z ; RRCC::CaptureEntry

; 273  :       line[1] = dot2HLine(col, row);

  0029c	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  0029f	52		 push	 edx
  002a0	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  002a3	50		 push	 eax
  002a4	e8 00 00 00 00	 call	 ?dot2HLine@@YAHHH@Z	; dot2HLine
  002a9	83 c4 08	 add	 esp, 8
  002ac	b9 04 00 00 00	 mov	 ecx, 4
  002b1	c1 e1 00	 shl	 ecx, 0
  002b4	89 44 0d d4	 mov	 DWORD PTR _line$[ebp+ecx], eax

; 274  :       line[2] = dot2VLine(col+1, row);

  002b8	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  002bb	52		 push	 edx
  002bc	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  002bf	83 c0 01	 add	 eax, 1
  002c2	50		 push	 eax
  002c3	e8 00 00 00 00	 call	 ?dot2VLine@@YAHHH@Z	; dot2VLine
  002c8	83 c4 08	 add	 esp, 8
  002cb	b9 04 00 00 00	 mov	 ecx, 4
  002d0	d1 e1		 shl	 ecx, 1
  002d2	89 44 0d d4	 mov	 DWORD PTR _line$[ebp+ecx], eax

; 275  :       line[3] = dot2HLine(col, row+1);

  002d6	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  002d9	83 c2 01	 add	 edx, 1
  002dc	52		 push	 edx
  002dd	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  002e0	50		 push	 eax
  002e1	e8 00 00 00 00	 call	 ?dot2HLine@@YAHHH@Z	; dot2HLine
  002e6	83 c4 08	 add	 esp, 8
  002e9	b9 04 00 00 00	 mov	 ecx, 4
  002ee	6b d1 03	 imul	 edx, ecx, 3
  002f1	89 44 15 d4	 mov	 DWORD PTR _line$[ebp+edx], eax

; 276  :       CaptureEntry(width, height, 1, line);

  002f5	8d 45 d4	 lea	 eax, DWORD PTR _line$[ebp]
  002f8	50		 push	 eax
  002f9	6a 01		 push	 1
  002fb	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  002fe	51		 push	 ecx
  002ff	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00302	52		 push	 edx
  00303	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00306	e8 00 00 00 00	 call	 ?CaptureEntry@RRCC@@AAEXHHHPAH@Z ; RRCC::CaptureEntry

; 277  :     };

  0030b	e9 e6 fd ff ff	 jmp	 $LN11@BuildCaptu
$LN12@BuildCaptu:

; 278  :   };

  00310	e9 c3 fd ff ff	 jmp	 $LN8@BuildCaptu
$LN1@BuildCaptu:

; 279  : }

  00315	52		 push	 edx
  00316	8b cd		 mov	 ecx, ebp
  00318	50		 push	 eax
  00319	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@BuildCaptu
  0031f	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00324	58		 pop	 eax
  00325	5a		 pop	 edx
  00326	5f		 pop	 edi
  00327	5e		 pop	 esi
  00328	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0032b	33 cd		 xor	 ecx, ebp
  0032d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00332	83 c4 34	 add	 esp, 52			; 00000034H
  00335	3b ec		 cmp	 ebp, esp
  00337	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0033c	8b e5		 mov	 esp, ebp
  0033e	5d		 pop	 ebp
  0033f	c2 08 00	 ret	 8
  00342	66 90		 npad	 2
$LN17@BuildCaptu:
  00344	01 00 00 00	 DD	 1
  00348	00 00 00 00	 DD	 $LN16@BuildCaptu
$LN16@BuildCaptu:
  0034c	d4 ff ff ff	 DD	 -44			; ffffffd4H
  00350	10 00 00 00	 DD	 16			; 00000010H
  00354	00 00 00 00	 DD	 $LN15@BuildCaptu
$LN15@BuildCaptu:
  00358	6c		 DB	 108			; 0000006cH
  00359	69		 DB	 105			; 00000069H
  0035a	6e		 DB	 110			; 0000006eH
  0035b	65		 DB	 101			; 00000065H
  0035c	00		 DB	 0
?BuildCapturesTable@RRCC@@AAEXHH@Z ENDP			; RRCC::BuildCapturesTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_m$ = -12						; size = 8
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_dir$ = 16						; size = 4
_line$ = 20						; size = 4
?CaptureEntry@RRCC@@AAEXHHHPAH@Z PROC			; RRCC::CaptureEntry
; _this$ = ecx

; 226  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  00010	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00017	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 227  :   ui64 m;
; 228  :   if (line[0] < 0) return;

  00021	b8 04 00 00 00	 mov	 eax, 4
  00026	6b c8 00	 imul	 ecx, eax, 0
  00029	8b 55 14	 mov	 edx, DWORD PTR _line$[ebp]
  0002c	83 3c 0a 00	 cmp	 DWORD PTR [edx+ecx], 0
  00030	7d 05		 jge	 SHORT $LN2@CaptureEnt
  00032	e9 f3 00 00 00	 jmp	 $LN1@CaptureEnt
$LN2@CaptureEnt:

; 229  :   if (line[1] < 0) return;

  00037	b8 04 00 00 00	 mov	 eax, 4
  0003c	c1 e0 00	 shl	 eax, 0
  0003f	8b 4d 14	 mov	 ecx, DWORD PTR _line$[ebp]
  00042	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00046	7d 05		 jge	 SHORT $LN3@CaptureEnt
  00048	e9 dd 00 00 00	 jmp	 $LN1@CaptureEnt
$LN3@CaptureEnt:

; 230  :   if (line[2] < 0) return;

  0004d	ba 04 00 00 00	 mov	 edx, 4
  00052	d1 e2		 shl	 edx, 1
  00054	8b 45 14	 mov	 eax, DWORD PTR _line$[ebp]
  00057	83 3c 10 00	 cmp	 DWORD PTR [eax+edx], 0
  0005b	7d 05		 jge	 SHORT $LN4@CaptureEnt
  0005d	e9 c8 00 00 00	 jmp	 $LN1@CaptureEnt
$LN4@CaptureEnt:

; 231  :   if (line[3] < 0) return;

  00062	b9 04 00 00 00	 mov	 ecx, 4
  00067	6b d1 03	 imul	 edx, ecx, 3
  0006a	8b 45 14	 mov	 eax, DWORD PTR _line$[ebp]
  0006d	83 3c 10 00	 cmp	 DWORD PTR [eax+edx], 0
  00071	7d 05		 jge	 SHORT $LN5@CaptureEnt
  00073	e9 b2 00 00 00	 jmp	 $LN1@CaptureEnt
$LN5@CaptureEnt:

; 232  :   m =   (1I64 << line[0])

  00078	b9 04 00 00 00	 mov	 ecx, 4
  0007d	6b c9 00	 imul	 ecx, ecx, 0
  00080	8b 75 14	 mov	 esi, DWORD PTR _line$[ebp]
  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	33 d2		 xor	 edx, edx
  0008a	8b 0c 0e	 mov	 ecx, DWORD PTR [esi+ecx]
  0008d	e8 00 00 00 00	 call	 __allshl
  00092	8b f0		 mov	 esi, eax
  00094	8b fa		 mov	 edi, edx
  00096	b9 04 00 00 00	 mov	 ecx, 4
  0009b	c1 e1 00	 shl	 ecx, 0
  0009e	8b 5d 14	 mov	 ebx, DWORD PTR _line$[ebp]
  000a1	b8 01 00 00 00	 mov	 eax, 1
  000a6	33 d2		 xor	 edx, edx
  000a8	8b 0c 0b	 mov	 ecx, DWORD PTR [ebx+ecx]
  000ab	e8 00 00 00 00	 call	 __allshl
  000b0	0b f0		 or	 esi, eax
  000b2	0b fa		 or	 edi, edx
  000b4	b9 04 00 00 00	 mov	 ecx, 4
  000b9	d1 e1		 shl	 ecx, 1
  000bb	8b 5d 14	 mov	 ebx, DWORD PTR _line$[ebp]
  000be	b8 01 00 00 00	 mov	 eax, 1
  000c3	33 d2		 xor	 edx, edx
  000c5	8b 0c 0b	 mov	 ecx, DWORD PTR [ebx+ecx]
  000c8	e8 00 00 00 00	 call	 __allshl
  000cd	0b f0		 or	 esi, eax
  000cf	0b fa		 or	 edi, edx
  000d1	ba 04 00 00 00	 mov	 edx, 4
  000d6	6b ca 03	 imul	 ecx, edx, 3
  000d9	8b 5d 14	 mov	 ebx, DWORD PTR _line$[ebp]
  000dc	b8 01 00 00 00	 mov	 eax, 1
  000e1	33 d2		 xor	 edx, edx
  000e3	8b 0c 0b	 mov	 ecx, DWORD PTR [ebx+ecx]
  000e6	e8 00 00 00 00	 call	 __allshl
  000eb	0b f0		 or	 esi, eax
  000ed	0b fa		 or	 edi, edx
  000ef	89 75 f4	 mov	 DWORD PTR _m$[ebp], esi
  000f2	89 7d f8	 mov	 DWORD PTR _m$[ebp+4], edi

; 233  :       | (1I64 << line[1])
; 234  :       | (1I64 << line[2])
; 235  :       | (1I64 << line[3]);
; 236  :   capturesTable[width][height][line[0]*2 + dir] = m;

  000f5	6b 55 08 18	 imul	 edx, DWORD PTR _width$[ebp], 24
  000f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	8d 8c 10 20 01
	00 00		 lea	 ecx, DWORD PTR [eax+edx+288]
  00103	ba 04 00 00 00	 mov	 edx, 4
  00108	6b c2 00	 imul	 eax, edx, 0
  0010b	8b 55 14	 mov	 edx, DWORD PTR _line$[ebp]
  0010e	8b 04 02	 mov	 eax, DWORD PTR [edx+eax]
  00111	8b 55 10	 mov	 edx, DWORD PTR _dir$[ebp]
  00114	8d 04 42	 lea	 eax, DWORD PTR [edx+eax*2]
  00117	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0011a	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  0011d	8b 55 f4	 mov	 edx, DWORD PTR _m$[ebp]
  00120	8b 75 f8	 mov	 esi, DWORD PTR _m$[ebp+4]
  00123	89 14 c1	 mov	 DWORD PTR [ecx+eax*8], edx
  00126	89 74 c1 04	 mov	 DWORD PTR [ecx+eax*8+4], esi
$LN1@CaptureEnt:

; 237  : }

  0012a	5f		 pop	 edi
  0012b	5e		 pop	 esi
  0012c	5b		 pop	 ebx
  0012d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00130	3b ec		 cmp	 ebp, esp
  00132	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00137	8b e5		 mov	 esp, ebp
  00139	5d		 pop	 ebp
  0013a	c2 10 00	 ret	 16			; 00000010H
?CaptureEntry@RRCC@@AAEXHHHPAH@Z ENDP			; RRCC::CaptureEntry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_newPos$ = -20						; size = 8
_n$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_openingPosition$ = 8					; size = 8
_move$ = 16						; size = 8
?GoodOpening@CCDp@@QAE_N_K0@Z PROC			; CCDp::GoodOpening
; _this$ = ecx

; 478  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 479  :   int i, n = NumRotRef();

  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	8b f4		 mov	 esi, esp
  00025	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00028	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002b	ff d0		 call	 eax
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 480  :   ui64 newPos = m_pos | move;

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0003d	0b 55 10	 or	 edx, DWORD PTR _move$[ebp]
  00040	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00043	0b 45 14	 or	 eax, DWORD PTR _move$[ebp+4]
  00046	89 55 ec	 mov	 DWORD PTR _newPos$[ebp], edx
  00049	89 45 f0	 mov	 DWORD PTR _newPos$[ebp+4], eax

; 481  :   if (newPos == openingPosition) 

  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _newPos$[ebp]
  0004f	3b 4d 08	 cmp	 ecx, DWORD PTR _openingPosition$[ebp]
  00052	75 0c		 jne	 SHORT $LN5@GoodOpenin
  00054	8b 55 f0	 mov	 edx, DWORD PTR _newPos$[ebp+4]
  00057	3b 55 0c	 cmp	 edx, DWORD PTR _openingPosition$[ebp+4]
  0005a	75 04		 jne	 SHORT $LN5@GoodOpenin

; 482  :   {
; 483  :     return true;

  0005c	b0 01		 mov	 al, 1
  0005e	eb 4f		 jmp	 SHORT $LN1@GoodOpenin
$LN5@GoodOpenin:

; 484  :   };
; 485  :   for (i=1; i<n; i++)

  00060	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  00067	eb 09		 jmp	 SHORT $LN4@GoodOpenin
$LN2@GoodOpenin:
  00069	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0006c	83 c0 01	 add	 eax, 1
  0006f	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@GoodOpenin:
  00072	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00075	3b 4d f4	 cmp	 ecx, DWORD PTR _n$[ebp]
  00078	7d 33		 jge	 SHORT $LN3@GoodOpenin

; 486  :   {
; 487  :     newPos = m_prar->NextRotRef(newPos, i);

  0007a	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0007d	52		 push	 edx
  0007e	8b 45 f0	 mov	 eax, DWORD PTR _newPos$[ebp+4]
  00081	50		 push	 eax
  00082	8b 4d ec	 mov	 ecx, DWORD PTR _newPos$[ebp]
  00085	51		 push	 ecx
  00086	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00089	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0008c	e8 00 00 00 00	 call	 ?NextRotRef@RRCCp@@QAE_K_KH@Z ; RRCCp::NextRotRef
  00091	89 45 ec	 mov	 DWORD PTR _newPos$[ebp], eax
  00094	89 55 f0	 mov	 DWORD PTR _newPos$[ebp+4], edx

; 488  :     if (newPos == openingPosition) 

  00097	8b 45 ec	 mov	 eax, DWORD PTR _newPos$[ebp]
  0009a	3b 45 08	 cmp	 eax, DWORD PTR _openingPosition$[ebp]
  0009d	75 0c		 jne	 SHORT $LN6@GoodOpenin
  0009f	8b 4d f0	 mov	 ecx, DWORD PTR _newPos$[ebp+4]
  000a2	3b 4d 0c	 cmp	 ecx, DWORD PTR _openingPosition$[ebp+4]
  000a5	75 04		 jne	 SHORT $LN6@GoodOpenin

; 489  :     {
; 490  :       return true;

  000a7	b0 01		 mov	 al, 1
  000a9	eb 04		 jmp	 SHORT $LN1@GoodOpenin
$LN6@GoodOpenin:

; 491  :     };
; 492  :   };

  000ab	eb bc		 jmp	 SHORT $LN2@GoodOpenin
$LN3@GoodOpenin:

; 493  :   return false;

  000ad	32 c0		 xor	 al, al
$LN1@GoodOpenin:

; 494  : }

  000af	5e		 pop	 esi
  000b0	83 c4 14	 add	 esp, 20			; 00000014H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 10 00	 ret	 16			; 00000010H
?GoodOpening@CCDp@@QAE_N_K0@Z ENDP			; CCDp::GoodOpening
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?NumRotRef@CCDp@@UAEHXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?NumRotRef@CCDp@@UAEHXZ PROC				; CCDp::NumRotRef, COMDAT
; _this$ = ecx

; 272  :   inline int NumRotRef(void){return (m_width==m_height)?8:4;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 50 18	 mov	 edx, DWORD PTR [eax+24]
  00012	3b 51 1c	 cmp	 edx, DWORD PTR [ecx+28]
  00015	75 09		 jne	 SHORT $LN3@NumRotRef
  00017	c7 45 f8 08 00
	00 00		 mov	 DWORD PTR tv67[ebp], 8
  0001e	eb 07		 jmp	 SHORT $LN4@NumRotRef
$LN3@NumRotRef:
  00020	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR tv67[ebp], 4
$LN4@NumRotRef:
  00027	8b 45 f8	 mov	 eax, DWORD PTR tv67[ebp]
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?NumRotRef@CCDp@@UAEHXZ ENDP				; CCDp::NumRotRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lineNum$ = 8						; size = 4
?IsCapture@CCDp@@QAE_NH@Z PROC				; CCDp::IsCapture
; _this$ = ecx

; 473  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 474  :   return m_prar->IsCapture(m_pos, lineNum);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _lineNum$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00018	52		 push	 edx
  00019	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0001c	50		 push	 eax
  0001d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00023	e8 00 00 00 00	 call	 ?IsCapture@RRCCp@@QAE_N_KH@Z ; RRCCp::IsCapture

; 475  : }

  00028	83 c4 04	 add	 esp, 4
  0002b	3b ec		 cmp	 ebp, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	8b e5		 mov	 esp, ebp
  00034	5d		 pop	 ebp
  00035	c2 04 00	 ret	 4
?IsCapture@CCDp@@QAE_NH@Z ENDP				; CCDp::IsCapture
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_dotnum$ = -32						; size = 4
_height$ = -28						; size = 4
_width$ = -24						; size = 4
_dot$ = -16						; size = 8
_this$ = -4						; size = 4
_db$ = 8						; size = 4
??4CCDp@@UAEAAVCCDn@@PBVDOTS_AND_BOXES@@@Z PROC		; CCDp::operator=
; _this$ = ecx

; 446  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 447  :   POINT dot;
; 448  :   int width, height, dotnum;
; 449  :   height = db->Height();

  00026	8b 4d 08	 mov	 ecx, DWORD PTR _db$[ebp]
  00029	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0002e	89 45 e4	 mov	 DWORD PTR _height$[ebp], eax

; 450  :   width = db->Width();

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _db$[ebp]
  00034	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00039	89 45 e8	 mov	 DWORD PTR _width$[ebp], eax

; 451  :   dotnum = 0;

  0003c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _dotnum$[ebp], 0

; 452  :   m_pos = 0;

  00043	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00046	33 c9		 xor	 ecx, ecx
  00048	33 d2		 xor	 edx, edx
  0004a	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0004d	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 453  :   for (dot.y=0; dot.y<height; dot.y++)

  00050	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _dot$[ebp+4], 0
  00057	eb 09		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00059	8b 45 f4	 mov	 eax, DWORD PTR _dot$[ebp+4]
  0005c	83 c0 01	 add	 eax, 1
  0005f	89 45 f4	 mov	 DWORD PTR _dot$[ebp+4], eax
$LN4@operator:
  00062	8b 4d f4	 mov	 ecx, DWORD PTR _dot$[ebp+4]
  00065	3b 4d e4	 cmp	 ecx, DWORD PTR _height$[ebp]
  00068	0f 8d bd 00 00
	00		 jge	 $LN3@operator

; 454  :   {
; 455  :     for (dot.x=0; dot.x<width; dot.x++)

  0006e	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _dot$[ebp], 0
  00075	eb 09		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00077	8b 55 f0	 mov	 edx, DWORD PTR _dot$[ebp]
  0007a	83 c2 01	 add	 edx, 1
  0007d	89 55 f0	 mov	 DWORD PTR _dot$[ebp], edx
$LN7@operator:
  00080	8b 45 f0	 mov	 eax, DWORD PTR _dot$[ebp]
  00083	3b 45 e8	 cmp	 eax, DWORD PTR _width$[ebp]
  00086	0f 8d 8d 00 00
	00		 jge	 $LN6@operator

; 456  :     {
; 457  :       if ((dot.x < width-1) && (db->HLineType(dot) != LINE_NONE))

  0008c	8b 4d e8	 mov	 ecx, DWORD PTR _width$[ebp]
  0008f	83 e9 01	 sub	 ecx, 1
  00092	39 4d f0	 cmp	 DWORD PTR _dot$[ebp], ecx
  00095	7d 31		 jge	 SHORT $LN8@operator
  00097	8d 55 f0	 lea	 edx, DWORD PTR _dot$[ebp]
  0009a	52		 push	 edx
  0009b	8b 4d 08	 mov	 ecx, DWORD PTR _db$[ebp]
  0009e	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::HLineType
  000a3	85 c0		 test	 eax, eax
  000a5	74 21		 je	 SHORT $LN8@operator

; 458  :       {
; 459  :         m_pos ^= 1I64 << dotnum;

  000a7	b8 01 00 00 00	 mov	 eax, 1
  000ac	33 d2		 xor	 edx, edx
  000ae	8b 4d e0	 mov	 ecx, DWORD PTR _dotnum$[ebp]
  000b1	e8 00 00 00 00	 call	 __allshl
  000b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	33 41 10	 xor	 eax, DWORD PTR [ecx+16]
  000bc	33 51 14	 xor	 edx, DWORD PTR [ecx+20]
  000bf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000c2	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  000c5	89 51 14	 mov	 DWORD PTR [ecx+20], edx
$LN8@operator:

; 460  :       };
; 461  :       if ((dot.y < height-1) && (db->VLineType(dot) != LINE_NONE))

  000c8	8b 55 e4	 mov	 edx, DWORD PTR _height$[ebp]
  000cb	83 ea 01	 sub	 edx, 1
  000ce	39 55 f4	 cmp	 DWORD PTR _dot$[ebp+4], edx
  000d1	7d 38		 jge	 SHORT $LN9@operator
  000d3	8d 45 f0	 lea	 eax, DWORD PTR _dot$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _db$[ebp]
  000da	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; DOTS_AND_BOXES::VLineType
  000df	85 c0		 test	 eax, eax
  000e1	74 28		 je	 SHORT $LN9@operator

; 462  :       {
; 463  :         m_pos ^= 1I64 << (dotnum + width - 1);

  000e3	8b 4d e8	 mov	 ecx, DWORD PTR _width$[ebp]
  000e6	8b 55 e0	 mov	 edx, DWORD PTR _dotnum$[ebp]
  000e9	8d 4c 0a ff	 lea	 ecx, DWORD PTR [edx+ecx-1]
  000ed	b8 01 00 00 00	 mov	 eax, 1
  000f2	33 d2		 xor	 edx, edx
  000f4	e8 00 00 00 00	 call	 __allshl
  000f9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	33 41 10	 xor	 eax, DWORD PTR [ecx+16]
  000ff	33 51 14	 xor	 edx, DWORD PTR [ecx+20]
  00102	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00105	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00108	89 51 14	 mov	 DWORD PTR [ecx+20], edx
$LN9@operator:

; 464  :       };
; 465  :       dotnum++;

  0010b	8b 55 e0	 mov	 edx, DWORD PTR _dotnum$[ebp]
  0010e	83 c2 01	 add	 edx, 1
  00111	89 55 e0	 mov	 DWORD PTR _dotnum$[ebp], edx

; 466  :     };

  00114	e9 5e ff ff ff	 jmp	 $LN5@operator
$LN6@operator:

; 467  :     dotnum += width - 1;

  00119	8b 45 e8	 mov	 eax, DWORD PTR _width$[ebp]
  0011c	8b 4d e0	 mov	 ecx, DWORD PTR _dotnum$[ebp]
  0011f	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  00123	89 55 e0	 mov	 DWORD PTR _dotnum$[ebp], edx

; 468  :   };

  00126	e9 2e ff ff ff	 jmp	 $LN2@operator
$LN3@operator:

; 469  :   return *this;

  0012b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]

; 470  : }

  0012e	52		 push	 edx
  0012f	8b cd		 mov	 ecx, ebp
  00131	50		 push	 eax
  00132	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@operator
  00138	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0013d	58		 pop	 eax
  0013e	5a		 pop	 edx
  0013f	83 c4 20	 add	 esp, 32			; 00000020H
  00142	3b ec		 cmp	 ebp, esp
  00144	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 04 00	 ret	 4
  0014f	90		 npad	 1
$LN13@operator:
  00150	01 00 00 00	 DD	 1
  00154	00 00 00 00	 DD	 $LN12@operator
$LN12@operator:
  00158	f0 ff ff ff	 DD	 -16			; fffffff0H
  0015c	08 00 00 00	 DD	 8
  00160	00 00 00 00	 DD	 $LN11@operator
$LN11@operator:
  00164	64		 DB	 100			; 00000064H
  00165	6f		 DB	 111			; 0000006fH
  00166	74		 DB	 116			; 00000074H
  00167	00		 DB	 0
??4CCDp@@UAEAAVCCDn@@PBVDOTS_AND_BOXES@@@Z ENDP		; CCDp::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
tv83 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
??1CCDp@@QAE@XZ PROC					; CCDp::~CCDp
; _this$ = ecx

; 440  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00021	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCDp@@6B@

; 441  :   delete m_prar;

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0002d	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  00030	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00034	74 0f		 je	 SHORT $LN3@CCDp
  00036	6a 01		 push	 1
  00038	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003b	e8 00 00 00 00	 call	 ??_GRRCCp@@QAEPAXI@Z
  00040	89 45 f4	 mov	 DWORD PTR tv83[ebp], eax
  00043	eb 07		 jmp	 SHORT $LN4@CCDp
$LN3@CCDp:
  00045	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN4@CCDp:

; 442  :   m_prar = NULL;

  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0

; 443  : }

  00056	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00059	e8 00 00 00 00	 call	 ??1CCDn@@QAE@XZ		; CCDn::~CCDn
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??1CCDp@@QAE@XZ ENDP					; CCDp::~CCDp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
tv132 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_width$ = 8						; size = 4
_height$ = 12						; size = 4
??0CCDp@@QAE@HH@Z PROC					; CCDp::CCDp
; _this$ = ecx

; 433  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0CCDp@@QAE@HH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003c	e8 00 00 00 00	 call	 ??0CCDn@@QAE@XZ		; CCDn::CCDn
  00041	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00048	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCDp@@6B@

; 434  :   m_width = width;

  00051	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00057	89 51 18	 mov	 DWORD PTR [ecx+24], edx

; 435  :   m_height = height;

  0005a	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00060	89 48 1c	 mov	 DWORD PTR [eax+28], ecx

; 436  :   m_prar = new RRCCp(width, height);

  00063	6a 18		 push	 24			; 00000018H
  00065	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0006a	83 c4 04	 add	 esp, 4
  0006d	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00070	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00074	83 7d e8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00078	74 15		 je	 SHORT $LN3@CCDp
  0007a	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0007d	52		 push	 edx
  0007e	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  00081	50		 push	 eax
  00082	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00085	e8 00 00 00 00	 call	 ??0RRCCp@@QAE@HH@Z	; RRCCp::RRCCp
  0008a	89 45 e4	 mov	 DWORD PTR tv132[ebp], eax
  0008d	eb 07		 jmp	 SHORT $LN4@CCDp
$LN3@CCDp:
  0008f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv132[ebp], 0
$LN4@CCDp:
  00096	8b 4d e4	 mov	 ecx, DWORD PTR tv132[ebp]
  00099	89 4d ec	 mov	 DWORD PTR $T3[ebp], ecx
  0009c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000a0	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  000a3	8b 45 ec	 mov	 eax, DWORD PTR $T3[ebp]
  000a6	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 437  : }

  000a9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000bd	59		 pop	 ecx
  000be	83 c4 1c	 add	 esp, 28			; 0000001cH
  000c1	3b ec		 cmp	 ebp, esp
  000c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 08 00	 ret	 8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0CCDp@@QAE@HH@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCDn@@QAE@XZ		; CCDn::~CCDn
__unwindfunclet$??0CCDp@@QAE@HH@Z$1:
  00008	6a 18		 push	 24			; 00000018H
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
__ehhandler$??0CCDp@@QAE@HH@Z:
  0001c	90		 npad	 1
  0001d	90		 npad	 1
  0001e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00022	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00025	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0CCDp@@QAE@HH@Z
  00034	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0CCDp@@QAE@HH@Z ENDP					; CCDp::CCDp
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
$T1 = -108						; size = 4
_numPrefix$ = -104					; size = 4
_prefix$ = -96						; size = 81
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_format$ = 8						; size = 4
_i1$ = 12						; size = 4
_i2$ = 16						; size = 4
_i3$ = 20						; size = 8
?LogUiUiUI64@CCDn@@QAEXPADII_K@Z PROC			; CCDn::LogUiUiUI64
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 6c	 sub	 esp, 108		; 0000006cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d 94	 lea	 edi, DWORD PTR [ebp-108]
  0000b	b9 1b 00 00 00	 mov	 ecx, 27			; 0000001bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 18   :   if (enableDump == 0) return;

  00025	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?enableDump@@3HA, 0
  0002c	75 05		 jne	 SHORT $LN2@LogUiUiUI6
  0002e	e9 91 00 00 00	 jmp	 $LN4@LogUiUiUI6
$LN2@LogUiUiUI6:

; 19   : //  FILE *f;
; 20   :   char prefix[81];
; 21   :   int numPrefix;
; 22   :   numPrefix = srchDepth*5;

  00033	6b 05 00 00 00
	00 05		 imul	 eax, DWORD PTR ?srchDepth@@3HA, 5 ; srchDepth
  0003a	89 45 98	 mov	 DWORD PTR _numPrefix$[ebp], eax

; 23   :   if (numPrefix >80) numPrefix = 80;

  0003d	83 7d 98 50	 cmp	 DWORD PTR _numPrefix$[ebp], 80 ; 00000050H
  00041	7e 07		 jle	 SHORT $LN3@LogUiUiUI6
  00043	c7 45 98 50 00
	00 00		 mov	 DWORD PTR _numPrefix$[ebp], 80 ; 00000050H
$LN3@LogUiUiUI6:

; 24   :   memset(prefix, ' ', numPrefix);

  0004a	8b 4d 98	 mov	 ecx, DWORD PTR _numPrefix$[ebp]
  0004d	51		 push	 ecx
  0004e	6a 20		 push	 32			; 00000020H
  00050	8d 55 a0	 lea	 edx, DWORD PTR _prefix$[ebp]
  00053	52		 push	 edx
  00054	e8 00 00 00 00	 call	 _memset
  00059	83 c4 0c	 add	 esp, 12			; 0000000cH

; 25   :   prefix[numPrefix] = 0;

  0005c	8b 45 98	 mov	 eax, DWORD PTR _numPrefix$[ebp]
  0005f	89 45 94	 mov	 DWORD PTR $T1[ebp], eax
  00062	83 7d 94 51	 cmp	 DWORD PTR $T1[ebp], 81	; 00000051H
  00066	73 02		 jae	 SHORT $LN5@LogUiUiUI6
  00068	eb 05		 jmp	 SHORT $LN6@LogUiUiUI6
$LN5@LogUiUiUI6:
  0006a	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN6@LogUiUiUI6:
  0006f	8b 4d 94	 mov	 ecx, DWORD PTR $T1[ebp]
  00072	c6 44 0d a0 00	 mov	 BYTE PTR _prefix$[ebp+ecx], 0

; 26   :   fprintf(f, "%s", prefix);

  00077	8d 55 a0	 lea	 edx, DWORD PTR _prefix$[ebp]
  0007a	52		 push	 edx
  0007b	68 00 00 00 00	 push	 OFFSET $SG225634
  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR ?f@@3PAU_iobuf@@A
  00085	50		 push	 eax
  00086	e8 00 00 00 00	 call	 _fprintf
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 27   :   fprintf(f, format, i1, i2, i3);

  0008e	8b 4d 18	 mov	 ecx, DWORD PTR _i3$[ebp+4]
  00091	51		 push	 ecx
  00092	8b 55 14	 mov	 edx, DWORD PTR _i3$[ebp]
  00095	52		 push	 edx
  00096	8b 45 10	 mov	 eax, DWORD PTR _i2$[ebp]
  00099	50		 push	 eax
  0009a	8b 4d 0c	 mov	 ecx, DWORD PTR _i1$[ebp]
  0009d	51		 push	 ecx
  0009e	8b 55 08	 mov	 edx, DWORD PTR _format$[ebp]
  000a1	52		 push	 edx
  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?f@@3PAU_iobuf@@A
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 _fprintf
  000ad	83 c4 18	 add	 esp, 24			; 00000018H

; 28   :   fprintf(f,"\n");

  000b0	68 00 00 00 00	 push	 OFFSET $SG225635
  000b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?f@@3PAU_iobuf@@A
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _fprintf
  000c1	83 c4 08	 add	 esp, 8
$LN4@LogUiUiUI6:

; 29   : }

  000c4	52		 push	 edx
  000c5	8b cd		 mov	 ecx, ebp
  000c7	50		 push	 eax
  000c8	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@LogUiUiUI6
  000ce	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000d3	58		 pop	 eax
  000d4	5a		 pop	 edx
  000d5	5f		 pop	 edi
  000d6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d9	33 cd		 xor	 ecx, ebp
  000db	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e0	83 c4 6c	 add	 esp, 108		; 0000006cH
  000e3	3b ec		 cmp	 ebp, esp
  000e5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ea	8b e5		 mov	 esp, ebp
  000ec	5d		 pop	 ebp
  000ed	c2 14 00	 ret	 20			; 00000014H
$LN9@LogUiUiUI6:
  000f0	01 00 00 00	 DD	 1
  000f4	00 00 00 00	 DD	 $LN8@LogUiUiUI6
$LN8@LogUiUiUI6:
  000f8	a0 ff ff ff	 DD	 -96			; ffffffa0H
  000fc	51 00 00 00	 DD	 81			; 00000051H
  00100	00 00 00 00	 DD	 $LN7@LogUiUiUI6
$LN7@LogUiUiUI6:
  00104	70		 DB	 112			; 00000070H
  00105	72		 DB	 114			; 00000072H
  00106	65		 DB	 101			; 00000065H
  00107	66		 DB	 102			; 00000066H
  00108	69		 DB	 105			; 00000069H
  00109	78		 DB	 120			; 00000078H
  0010a	00		 DB	 0
?LogUiUiUI64@CCDn@@QAEXPADII_K@Z ENDP			; CCDn::LogUiUiUI64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
tv156 = -24						; size = 4
_v$ = -20						; size = 8
_n$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?Canon@CCDn@@QAEXXZ PROC				; CCDn::Canon
; _this$ = ecx

; 410  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 411  :   int i, n;
; 412  :     ui64 v;
; 413  :   m_pos = m_prar->CornerCanon(m_pos);

  00021	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00024	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00027	51		 push	 ecx
  00028	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0002b	52		 push	 edx
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00032	e8 00 00 00 00	 call	 ?CornerCanon@RRCCp@@QAE_K_K@Z ; RRCCp::CornerCanon
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0003d	89 51 14	 mov	 DWORD PTR [ecx+20], edx

; 414  :   n = NumRotRef();

  00040	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00043	8b 02		 mov	 eax, DWORD PTR [edx]
  00045	8b f4		 mov	 esi, esp
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0004d	ff d2		 call	 edx
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00056	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 415  :   v = m_pos;

  00059	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0005f	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  00062	89 4d ec	 mov	 DWORD PTR _v$[ebp], ecx
  00065	89 55 f0	 mov	 DWORD PTR _v$[ebp+4], edx

; 416  :   for (i=1; i<n; i++)

  00068	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _i$[ebp], 1
  0006f	eb 09		 jmp	 SHORT $LN4@Canon
$LN2@Canon:
  00071	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00074	83 c0 01	 add	 eax, 1
  00077	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@Canon:
  0007a	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0007d	3b 4d f4	 cmp	 ecx, DWORD PTR _n$[ebp]
  00080	7d 4c		 jge	 SHORT $LN1@Canon

; 417  :   {
; 418  :     v = m_prar->NextRotRef(v, i);

  00082	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00085	52		 push	 edx
  00086	8b 45 f0	 mov	 eax, DWORD PTR _v$[ebp+4]
  00089	50		 push	 eax
  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _v$[ebp]
  0008d	51		 push	 ecx
  0008e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00091	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00094	e8 00 00 00 00	 call	 ?NextRotRef@RRCCp@@QAE_K_KH@Z ; RRCCp::NextRotRef
  00099	89 45 ec	 mov	 DWORD PTR _v$[ebp], eax
  0009c	89 55 f0	 mov	 DWORD PTR _v$[ebp+4], edx

; 419  :     if (v < m_pos) m_pos = v;

  0009f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	89 45 e8	 mov	 DWORD PTR tv156[ebp], eax
  000a5	8b 4d e8	 mov	 ecx, DWORD PTR tv156[ebp]
  000a8	8b 55 f0	 mov	 edx, DWORD PTR _v$[ebp+4]
  000ab	3b 51 14	 cmp	 edx, DWORD PTR [ecx+20]
  000ae	77 1c		 ja	 SHORT $LN5@Canon
  000b0	72 0b		 jb	 SHORT $LN7@Canon
  000b2	8b 45 e8	 mov	 eax, DWORD PTR tv156[ebp]
  000b5	8b 4d ec	 mov	 ecx, DWORD PTR _v$[ebp]
  000b8	3b 48 10	 cmp	 ecx, DWORD PTR [eax+16]
  000bb	73 0f		 jae	 SHORT $LN5@Canon
$LN7@Canon:
  000bd	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c0	8b 45 ec	 mov	 eax, DWORD PTR _v$[ebp]
  000c3	8b 4d f0	 mov	 ecx, DWORD PTR _v$[ebp+4]
  000c6	89 42 10	 mov	 DWORD PTR [edx+16], eax
  000c9	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
$LN5@Canon:

; 420  :   };

  000cc	eb a3		 jmp	 SHORT $LN2@Canon
$LN1@Canon:

; 421  : }

  000ce	5e		 pop	 esi
  000cf	83 c4 18	 add	 esp, 24			; 00000018H
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
?Canon@CCDn@@QAEXXZ ENDP				; CCDn::Canon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCDn@@QAE@XZ PROC					; CCDn::~CCDn
; _this$ = ecx

; 428  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCDn@@6B@

; 429  : }

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
??1CCDn@@QAE@XZ ENDP					; CCDn::~CCDn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCDn@@QAE@XZ PROC					; CCDn::CCDn
; _this$ = ecx

; 424  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7CCDn@@6B@

; 425  : }

  00010	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
??0CCDn@@QAE@XZ ENDP					; CCDn::CCDn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GRRCCp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GRRCCp@@QAEPAXI@Z PROC				; RRCCp::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1RRCCp@@QAE@XZ	; RRCCp::~RRCCp
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 18		 push	 24			; 00000018H
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GRRCCp@@QAEPAXI@Z ENDP				; RRCCp::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 8
_n$ = 16						; size = 4
?NextRotRef@RRCCp@@QAE_K_KH@Z PROC			; RRCCp::NextRotRef
; _this$ = ecx

; 368  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 369  :   if (m_width == m_height)

  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001d	8b 10		 mov	 edx, DWORD PTR [eax]
  0001f	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00022	75 38		 jne	 SHORT $LN4@NextRotRef

; 370  :   {
; 371  :     switch(n)

  00024	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  00027	89 45 f8	 mov	 DWORD PTR tv67[ebp], eax
  0002a	83 7d f8 00	 cmp	 DWORD PTR tv67[ebp], 0
  0002e	74 08		 je	 SHORT $LN6@NextRotRef
  00030	83 7d f8 04	 cmp	 DWORD PTR tv67[ebp], 4
  00034	74 02		 je	 SHORT $LN6@NextRotRef
  00036	eb 12		 jmp	 SHORT $LN7@NextRotRef
$LN6@NextRotRef:

; 372  :     {
; 373  :     case 0:
; 374  :     case 4:
; 375  :       return Reflect(pos);

  00038	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp+4]
  0003b	51		 push	 ecx
  0003c	8b 55 08	 mov	 edx, DWORD PTR _pos$[ebp]
  0003f	52		 push	 edx
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	e8 00 00 00 00	 call	 ?Reflect@RRCCp@@QAE_K_K@Z ; RRCCp::Reflect
  00048	eb 23		 jmp	 SHORT $LN1@NextRotRef
$LN7@NextRotRef:

; 376  :     default:
; 377  :       return Rotate(pos);

  0004a	8b 45 0c	 mov	 eax, DWORD PTR _pos$[ebp+4]
  0004d	50		 push	 eax
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _pos$[ebp]
  00051	51		 push	 ecx
  00052	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00055	e8 00 00 00 00	 call	 ?Rotate@RRCCp@@QAE_K_K@Z ; RRCCp::Rotate
  0005a	eb 11		 jmp	 SHORT $LN1@NextRotRef
$LN4@NextRotRef:

; 378  :     };
; 379  :   };
; 380  :   ImplementationError("Illegal rotation/reflection");

  0005c	68 00 00 00 00	 push	 OFFSET $SG225854
  00061	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  00066	83 c4 04	 add	 esp, 4

; 381  :   return 0;

  00069	33 c0		 xor	 eax, eax
  0006b	33 d2		 xor	 edx, edx
$LN1@NextRotRef:

; 382  : }

  0006d	83 c4 08	 add	 esp, 8
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c2 0c 00	 ret	 12			; 0000000cH
?NextRotRef@RRCCp@@QAE_K_KH@Z ENDP			; RRCCp::NextRotRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
tv136 = -32						; size = 4
tv135 = -28						; size = 4
tv132 = -24						; size = 8
_v$ = -16						; size = 8
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 8
?CornerCanon@RRCCp@@QAE_K_K@Z PROC			; RRCCp::CornerCanon
; _this$ = ecx

; 385  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 386  :   int i;
; 387  :   ui64 v = pos;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _pos$[ebp]
  0000d	8b 4d 0c	 mov	 ecx, DWORD PTR _pos$[ebp+4]
  00010	89 45 f0	 mov	 DWORD PTR _v$[ebp], eax
  00013	89 4d f4	 mov	 DWORD PTR _v$[ebp+4], ecx

; 388  :   for (i=0; i<4; i++)

  00016	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN4@CornerCano
$LN2@CornerCano:
  0001f	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00022	83 c2 01	 add	 edx, 1
  00025	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$LN4@CornerCano:
  00028	83 7d f8 04	 cmp	 DWORD PTR _i$[ebp], 4
  0002c	7d 6e		 jge	 SHORT $LN3@CornerCano

; 389  :   {
; 390  :     if ((v & m_cornersTable[2*i+1]) == m_cornersTable[2*i])

  0002e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00031	d1 e0		 shl	 eax, 1
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00036	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00039	8b 4d f0	 mov	 ecx, DWORD PTR _v$[ebp]
  0003c	23 4c c2 08	 and	 ecx, DWORD PTR [edx+eax*8+8]
  00040	8b 75 f4	 mov	 esi, DWORD PTR _v$[ebp+4]
  00043	23 74 c2 0c	 and	 esi, DWORD PTR [edx+eax*8+12]
  00047	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  0004a	d1 e2		 shl	 edx, 1
  0004c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00052	89 4d e8	 mov	 DWORD PTR tv132[ebp], ecx
  00055	89 75 ec	 mov	 DWORD PTR tv132[ebp+4], esi
  00058	89 45 e4	 mov	 DWORD PTR tv135[ebp], eax
  0005b	89 55 e0	 mov	 DWORD PTR tv136[ebp], edx
  0005e	8b 4d e0	 mov	 ecx, DWORD PTR tv136[ebp]
  00061	8b 55 e4	 mov	 edx, DWORD PTR tv135[ebp]
  00064	8b 45 e8	 mov	 eax, DWORD PTR tv132[ebp]
  00067	3b 04 ca	 cmp	 eax, DWORD PTR [edx+ecx*8]
  0006a	75 2e		 jne	 SHORT $LN5@CornerCano
  0006c	8b 4d e0	 mov	 ecx, DWORD PTR tv136[ebp]
  0006f	8b 55 e4	 mov	 edx, DWORD PTR tv135[ebp]
  00072	8b 45 ec	 mov	 eax, DWORD PTR tv132[ebp+4]
  00075	3b 44 ca 04	 cmp	 eax, DWORD PTR [edx+ecx*8+4]
  00079	75 1f		 jne	 SHORT $LN5@CornerCano

; 391  :     {
; 392  :       v ^= m_cornersTable[2*i+1];

  0007b	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  0007e	d1 e1		 shl	 ecx, 1
  00080	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00083	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00086	8b 55 f0	 mov	 edx, DWORD PTR _v$[ebp]
  00089	33 54 c8 08	 xor	 edx, DWORD PTR [eax+ecx*8+8]
  0008d	8b 75 f4	 mov	 esi, DWORD PTR _v$[ebp+4]
  00090	33 74 c8 0c	 xor	 esi, DWORD PTR [eax+ecx*8+12]
  00094	89 55 f0	 mov	 DWORD PTR _v$[ebp], edx
  00097	89 75 f4	 mov	 DWORD PTR _v$[ebp+4], esi
$LN5@CornerCano:

; 393  :     };
; 394  :   };

  0009a	eb 83		 jmp	 SHORT $LN2@CornerCano
$LN3@CornerCano:

; 395  :   return v;

  0009c	8b 45 f0	 mov	 eax, DWORD PTR _v$[ebp]
  0009f	8b 55 f4	 mov	 edx, DWORD PTR _v$[ebp+4]

; 396  : }

  000a2	5e		 pop	 esi
  000a3	8b e5		 mov	 esp, ebp
  000a5	5d		 pop	 ebp
  000a6	c2 08 00	 ret	 8
?CornerCanon@RRCCp@@QAE_K_K@Z ENDP			; RRCCp::CornerCanon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
tv174 = -44						; size = 4
tv173 = -40						; size = 4
tv170 = -36						; size = 8
tv151 = -28						; size = 4
tv150 = -24						; size = 4
tv147 = -20						; size = 8
_newPos$ = -12						; size = 8
_this$ = -4						; size = 4
_pos$ = 8						; size = 8
_line$ = 16						; size = 4
?IsCapture@RRCCp@@QAE_N_KH@Z PROC			; RRCCp::IsCapture
; _this$ = ecx

; 400  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000c	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 401  :   ui64 newPos;
; 402  :   newPos = pos | (1I64 << line);

  0001c	b8 01 00 00 00	 mov	 eax, 1
  00021	33 d2		 xor	 edx, edx
  00023	8b 4d 10	 mov	 ecx, DWORD PTR _line$[ebp]
  00026	e8 00 00 00 00	 call	 __allshl
  0002b	0b 45 08	 or	 eax, DWORD PTR _pos$[ebp]
  0002e	0b 55 0c	 or	 edx, DWORD PTR _pos$[ebp+4]
  00031	89 45 f4	 mov	 DWORD PTR _newPos$[ebp], eax
  00034	89 55 f8	 mov	 DWORD PTR _newPos$[ebp+4], edx

; 403  :   if ((m_capturesTable[2*line+0] & newPos) == m_capturesTable[2*line+0]) return true;

  00037	8b 45 10	 mov	 eax, DWORD PTR _line$[ebp]
  0003a	d1 e0		 shl	 eax, 1
  0003c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00042	8b 0c c2	 mov	 ecx, DWORD PTR [edx+eax*8]
  00045	23 4d f4	 and	 ecx, DWORD PTR _newPos$[ebp]
  00048	8b 54 c2 04	 mov	 edx, DWORD PTR [edx+eax*8+4]
  0004c	23 55 f8	 and	 edx, DWORD PTR _newPos$[ebp+4]
  0004f	8b 45 10	 mov	 eax, DWORD PTR _line$[ebp]
  00052	d1 e0		 shl	 eax, 1
  00054	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00057	8b 76 10	 mov	 esi, DWORD PTR [esi+16]
  0005a	89 4d ec	 mov	 DWORD PTR tv147[ebp], ecx
  0005d	89 55 f0	 mov	 DWORD PTR tv147[ebp+4], edx
  00060	89 75 e8	 mov	 DWORD PTR tv150[ebp], esi
  00063	89 45 e4	 mov	 DWORD PTR tv151[ebp], eax
  00066	8b 4d e4	 mov	 ecx, DWORD PTR tv151[ebp]
  00069	8b 55 e8	 mov	 edx, DWORD PTR tv150[ebp]
  0006c	8b 45 ec	 mov	 eax, DWORD PTR tv147[ebp]
  0006f	3b 04 ca	 cmp	 eax, DWORD PTR [edx+ecx*8]
  00072	75 13		 jne	 SHORT $LN2@IsCapture
  00074	8b 4d e4	 mov	 ecx, DWORD PTR tv151[ebp]
  00077	8b 55 e8	 mov	 edx, DWORD PTR tv150[ebp]
  0007a	8b 45 f0	 mov	 eax, DWORD PTR tv147[ebp+4]
  0007d	3b 44 ca 04	 cmp	 eax, DWORD PTR [edx+ecx*8+4]
  00081	75 04		 jne	 SHORT $LN2@IsCapture
  00083	b0 01		 mov	 al, 1
  00085	eb 54		 jmp	 SHORT $LN1@IsCapture
$LN2@IsCapture:

; 404  :   if ((m_capturesTable[2*line+1] & newPos) == m_capturesTable[2*line+1]) return true;

  00087	8b 4d 10	 mov	 ecx, DWORD PTR _line$[ebp]
  0008a	d1 e1		 shl	 ecx, 1
  0008c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008f	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00092	8b 54 c8 08	 mov	 edx, DWORD PTR [eax+ecx*8+8]
  00096	23 55 f4	 and	 edx, DWORD PTR _newPos$[ebp]
  00099	8b 44 c8 0c	 mov	 eax, DWORD PTR [eax+ecx*8+12]
  0009d	23 45 f8	 and	 eax, DWORD PTR _newPos$[ebp+4]
  000a0	8b 4d 10	 mov	 ecx, DWORD PTR _line$[ebp]
  000a3	d1 e1		 shl	 ecx, 1
  000a5	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  000a8	8b 76 10	 mov	 esi, DWORD PTR [esi+16]
  000ab	89 55 dc	 mov	 DWORD PTR tv170[ebp], edx
  000ae	89 45 e0	 mov	 DWORD PTR tv170[ebp+4], eax
  000b1	89 75 d8	 mov	 DWORD PTR tv173[ebp], esi
  000b4	89 4d d4	 mov	 DWORD PTR tv174[ebp], ecx
  000b7	8b 55 d4	 mov	 edx, DWORD PTR tv174[ebp]
  000ba	8b 45 d8	 mov	 eax, DWORD PTR tv173[ebp]
  000bd	8b 4d dc	 mov	 ecx, DWORD PTR tv170[ebp]
  000c0	3b 4c d0 08	 cmp	 ecx, DWORD PTR [eax+edx*8+8]
  000c4	75 13		 jne	 SHORT $LN3@IsCapture
  000c6	8b 55 d4	 mov	 edx, DWORD PTR tv174[ebp]
  000c9	8b 45 d8	 mov	 eax, DWORD PTR tv173[ebp]
  000cc	8b 4d e0	 mov	 ecx, DWORD PTR tv170[ebp+4]
  000cf	3b 4c d0 0c	 cmp	 ecx, DWORD PTR [eax+edx*8+12]
  000d3	75 04		 jne	 SHORT $LN3@IsCapture
  000d5	b0 01		 mov	 al, 1
  000d7	eb 02		 jmp	 SHORT $LN1@IsCapture
$LN3@IsCapture:

; 405  :   return false;

  000d9	32 c0		 xor	 al, al
$LN1@IsCapture:

; 406  : }

  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	83 c4 2c	 add	 esp, 44			; 0000002cH
  000e0	3b ec		 cmp	 ebp, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e7	8b e5		 mov	 esp, ebp
  000e9	5d		 pop	 ebp
  000ea	c2 0c 00	 ret	 12			; 0000000cH
?IsCapture@RRCCp@@QAE_N_KH@Z ENDP			; RRCCp::IsCapture
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 8
?Reflect@RRCCp@@QAE_K_K@Z PROC				; RRCCp::Reflect
; _this$ = ecx

; 358  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 359  :   ui16 *p;
; 360  :   p = (ui16 *)&v;

  0000b	8d 45 08	 lea	 eax, DWORD PTR _v$[ebp]
  0000e	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 361  :   return   m_refTable[4*p[0]+0]

  00011	b9 02 00 00 00	 mov	 ecx, 2
  00016	6b d1 00	 imul	 edx, ecx, 0
  00019	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0001c	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00020	c1 e1 02	 shl	 ecx, 2
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00029	ba 02 00 00 00	 mov	 edx, 2
  0002e	c1 e2 00	 shl	 edx, 0
  00031	8b 75 f8	 mov	 esi, DWORD PTR _p$[ebp]
  00034	0f b7 14 16	 movzx	 edx, WORD PTR [esi+edx]
  00038	c1 e2 02	 shl	 edx, 2
  0003b	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0003e	8b 76 0c	 mov	 esi, DWORD PTR [esi+12]
  00041	8b 3c c8	 mov	 edi, DWORD PTR [eax+ecx*8]
  00044	0b 7c d6 08	 or	 edi, DWORD PTR [esi+edx*8+8]
  00048	8b 4c c8 04	 mov	 ecx, DWORD PTR [eax+ecx*8+4]
  0004c	0b 4c d6 0c	 or	 ecx, DWORD PTR [esi+edx*8+12]
  00050	ba 02 00 00 00	 mov	 edx, 2
  00055	d1 e2		 shl	 edx, 1
  00057	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0005a	0f b7 14 10	 movzx	 edx, WORD PTR [eax+edx]
  0005e	c1 e2 02	 shl	 edx, 2
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00067	0b 7c d0 10	 or	 edi, DWORD PTR [eax+edx*8+16]
  0006b	0b 4c d0 14	 or	 ecx, DWORD PTR [eax+edx*8+20]
  0006f	ba 02 00 00 00	 mov	 edx, 2
  00074	6b c2 03	 imul	 eax, edx, 3
  00077	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  0007a	0f b7 04 02	 movzx	 eax, WORD PTR [edx+eax]
  0007e	c1 e0 02	 shl	 eax, 2
  00081	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00084	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00087	0b 7c c2 18	 or	 edi, DWORD PTR [edx+eax*8+24]
  0008b	0b 4c c2 1c	 or	 ecx, DWORD PTR [edx+eax*8+28]
  0008f	8b c7		 mov	 eax, edi
  00091	8b d1		 mov	 edx, ecx

; 362  :          | m_refTable[4*p[1]+1]
; 363  :          | m_refTable[4*p[2]+2]
; 364  :          | m_refTable[4*p[3]+3];
; 365  : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 08 00	 ret	 8
?Reflect@RRCCp@@QAE_K_K@Z ENDP				; RRCCp::Reflect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 8
?Rotate@RRCCp@@QAE_K_K@Z PROC				; RRCCp::Rotate
; _this$ = ecx

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 349  :   ui16 *p;
; 350  :   p = (ui16 *)&v;

  0000b	8d 45 08	 lea	 eax, DWORD PTR _v$[ebp]
  0000e	89 45 f8	 mov	 DWORD PTR _p$[ebp], eax

; 351  :   return   m_rotTable[4*p[0]+0]

  00011	b9 02 00 00 00	 mov	 ecx, 2
  00016	6b d1 00	 imul	 edx, ecx, 0
  00019	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0001c	0f b7 0c 10	 movzx	 ecx, WORD PTR [eax+edx]
  00020	c1 e1 02	 shl	 ecx, 2
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00029	ba 02 00 00 00	 mov	 edx, 2
  0002e	c1 e2 00	 shl	 edx, 0
  00031	8b 75 f8	 mov	 esi, DWORD PTR _p$[ebp]
  00034	0f b7 14 16	 movzx	 edx, WORD PTR [esi+edx]
  00038	c1 e2 02	 shl	 edx, 2
  0003b	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0003e	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00041	8b 3c c8	 mov	 edi, DWORD PTR [eax+ecx*8]
  00044	0b 7c d6 08	 or	 edi, DWORD PTR [esi+edx*8+8]
  00048	8b 4c c8 04	 mov	 ecx, DWORD PTR [eax+ecx*8+4]
  0004c	0b 4c d6 0c	 or	 ecx, DWORD PTR [esi+edx*8+12]
  00050	ba 02 00 00 00	 mov	 edx, 2
  00055	d1 e2		 shl	 edx, 1
  00057	8b 45 f8	 mov	 eax, DWORD PTR _p$[ebp]
  0005a	0f b7 14 10	 movzx	 edx, WORD PTR [eax+edx]
  0005e	c1 e2 02	 shl	 edx, 2
  00061	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00064	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00067	0b 7c d0 10	 or	 edi, DWORD PTR [eax+edx*8+16]
  0006b	0b 4c d0 14	 or	 ecx, DWORD PTR [eax+edx*8+20]
  0006f	ba 02 00 00 00	 mov	 edx, 2
  00074	6b c2 03	 imul	 eax, edx, 3
  00077	8b 55 f8	 mov	 edx, DWORD PTR _p$[ebp]
  0007a	0f b7 04 02	 movzx	 eax, WORD PTR [edx+eax]
  0007e	c1 e0 02	 shl	 eax, 2
  00081	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00084	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00087	0b 7c c2 18	 or	 edi, DWORD PTR [edx+eax*8+24]
  0008b	0b 4c c2 1c	 or	 ecx, DWORD PTR [edx+eax*8+28]
  0008f	8b c7		 mov	 eax, edi
  00091	8b d1		 mov	 edx, ecx

; 352  :          | m_rotTable[4*p[1]+1]
; 353  :          | m_rotTable[4*p[2]+2]
; 354  :          | m_rotTable[4*p[3]+3];
; 355  : }

  00093	5f		 pop	 edi
  00094	5e		 pop	 esi
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c2 08 00	 ret	 8
?Rotate@RRCCp@@QAE_K_K@Z ENDP				; RRCCp::Rotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1RRCCp@@QAE@XZ PROC					; RRCCp::~RRCCp
; _this$ = ecx

; 343  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1RRCCp@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 344  :   rrcc.DecrementReferenceCount(m_width, m_height);

  0002d	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00033	51		 push	 ecx
  00034	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00037	8b 02		 mov	 eax, DWORD PTR [edx]
  00039	50		 push	 eax
  0003a	b9 00 00 00 00	 mov	 ecx, OFFSET ?rrcc@@3VRRCC@@A ; rrcc
  0003f	e8 00 00 00 00	 call	 ?DecrementReferenceCount@RRCC@@QAEXHH@Z ; RRCC::DecrementReferenceCount

; 345  : }

  00044	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00047	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004e	59		 pop	 ecx
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
  0005d	cc		 int	 3
  0005e	cc		 int	 3
  0005f	cc		 int	 3
  00060	cc		 int	 3
  00061	cc		 int	 3
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$??1RRCCp@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1RRCCp@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1RRCCp@@QAE@XZ ENDP					; RRCCp::~RRCCp
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
??0RRCCp@@QAE@HH@Z PROC					; RRCCp::RRCCp
; _this$ = ecx

; 332  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 333  :   m_width = width;

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 334  :   m_height = height;

  00016	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00019	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0001c	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 335  :   rrcc.IncrementReferenceCount(width, height);

  0001f	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  00022	51		 push	 ecx
  00023	8b 55 08	 mov	 edx, DWORD PTR _width$[ebp]
  00026	52		 push	 edx
  00027	b9 00 00 00 00	 mov	 ecx, OFFSET ?rrcc@@3VRRCC@@A ; rrcc
  0002c	e8 00 00 00 00	 call	 ?IncrementReferenceCount@RRCC@@QAEXHH@Z ; RRCC::IncrementReferenceCount

; 336  :   m_rotTable = rrcc.GetRotTable(width, height);

  00031	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00034	50		 push	 eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00038	51		 push	 ecx
  00039	b9 00 00 00 00	 mov	 ecx, OFFSET ?rrcc@@3VRRCC@@A ; rrcc
  0003e	e8 00 00 00 00	 call	 ?GetRotTable@RRCC@@QAEPA_KHH@Z ; RRCC::GetRotTable
  00043	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00046	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 337  :   m_refTable = rrcc.GetRefTable(width, height);

  00049	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0004c	50		 push	 eax
  0004d	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00050	51		 push	 ecx
  00051	b9 00 00 00 00	 mov	 ecx, OFFSET ?rrcc@@3VRRCC@@A ; rrcc
  00056	e8 00 00 00 00	 call	 ?GetRefTable@RRCC@@QAEPA_KHH@Z ; RRCC::GetRefTable
  0005b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	89 42 0c	 mov	 DWORD PTR [edx+12], eax

; 338  :   m_capturesTable = rrcc.GetCapturesTable(width, height);

  00061	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  00064	50		 push	 eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00068	51		 push	 ecx
  00069	b9 00 00 00 00	 mov	 ecx, OFFSET ?rrcc@@3VRRCC@@A ; rrcc
  0006e	e8 00 00 00 00	 call	 ?GetCapturesTable@RRCC@@QAEPA_KHH@Z ; RRCC::GetCapturesTable
  00073	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00076	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 339  :   m_cornersTable = rrcc.GetCornersTable(width, height);

  00079	8b 45 0c	 mov	 eax, DWORD PTR _height$[ebp]
  0007c	50		 push	 eax
  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00080	51		 push	 ecx
  00081	b9 00 00 00 00	 mov	 ecx, OFFSET ?rrcc@@3VRRCC@@A ; rrcc
  00086	e8 00 00 00 00	 call	 ?GetCornersTable@RRCC@@QAEPA_KHH@Z ; RRCC::GetCornersTable
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 340  : }

  00091	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00094	83 c4 04	 add	 esp, 4
  00097	3b ec		 cmp	 ebp, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 08 00	 ret	 8
??0RRCCp@@QAE@HH@Z ENDP					; RRCCp::RRCCp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z PROC ; DOTS_AND_BOXES::HLineType, COMDAT
; _this$ = ecx

; 102  :   INLINE LINE_TYPE HLineType(const POINT& dotNum)const{return HLineType(dotNum.x, dotNum.y);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ENDP ; DOTS_AND_BOXES::HLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z PROC	; DOTS_AND_BOXES::HLineType, COMDAT
; _this$ = ecx

; 101  :   INLINE LINE_TYPE HLineType(int col, int row)const{return (LINE_TYPE)m_hlines[row*(m_width-1) + col];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	0f af 4d 0c	 imul	 ecx, DWORD PTR _row$[ebp]
  00014	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001d	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ENDP	; DOTS_AND_BOXES::HLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z PROC ; DOTS_AND_BOXES::VLineType, COMDAT
; _this$ = ecx

; 98   :   INLINE LINE_TYPE VLineType(const POINT& dotNum)const{return VLineType(dotNum.x, dotNum.y);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  00011	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00014	51		 push	 ecx
  00015	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  00018	8b 02		 mov	 eax, DWORD PTR [edx]
  0001a	50		 push	 eax
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ENDP ; DOTS_AND_BOXES::VLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z PROC	; DOTS_AND_BOXES::VLineType, COMDAT
; _this$ = ecx

; 97   :   INLINE LINE_TYPE VLineType(int col, int row)const{return (LINE_TYPE)m_vlines[row*m_width + col];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _row$[ebp]
  0000d	0f af 48 10	 imul	 ecx, DWORD PTR [eax+16]
  00011	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0001a	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ENDP	; DOTS_AND_BOXES::VLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Height@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::Height, COMDAT
; _this$ = ecx

; 93   :   INLINE int Height(void) const {return m_height;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Height@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::Height
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Width@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::Width, COMDAT
; _this$ = ecx

; 92   :   INLINE int Width(void) const {return m_width;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Width@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::Width
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -44						; size = 4
_bQuit$ = -40						; size = 4
_msg$ = -32						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000b	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00017	8b f4		 mov	 esi, esp
  00019	6a 01		 push	 1
  0001b	6a 12		 push	 18			; 00000012H
  0001d	6a 12		 push	 18			; 00000012H
  0001f	6a 00		 push	 0
  00021	8d 45 e0	 lea	 eax, DWORD PTR _msg$[ebp]
  00024	50		 push	 eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	89 45 d8	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  00035	8b f4		 mov	 esi, esp
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _nLine$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _lpszFileName$[ebp]
  00042	52		 push	 edx
  00043	6a 02		 push	 2
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0004b	83 c4 14	 add	 esp, 20			; 00000014H
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	89 45 d4	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00058	83 7d d8 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0005c	74 13		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0005e	8b f4		 mov	 esi, esp
  00060	8b 45 e8	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00071	8b 45 d4	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  00074	52		 push	 edx
  00075	8b cd		 mov	 ecx, ebp
  00077	50		 push	 eax
  00078	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@AfxAssertF
  0007e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00083	58		 pop	 eax
  00084	5a		 pop	 edx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 2c	 add	 esp, 44			; 0000002cH
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
  00097	90		 npad	 1
$LN6@AfxAssertF:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN5@AfxAssertF
$LN5@AfxAssertF:
  000a0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000a4	1c 00 00 00	 DD	 28			; 0000001cH
  000a8	00 00 00 00	 DD	 $LN4@AfxAssertF
$LN4@AfxAssertF:
  000ac	6d		 DB	 109			; 0000006dH
  000ad	73		 DB	 115			; 00000073H
  000ae	67		 DB	 103			; 00000067H
  000af	00		 DB	 0
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 837  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 838  :         int _Result;
; 839  :         va_list _ArgList;
; 840  :         __crt_va_start(_ArgList, _Format);

  0001b	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 841  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 __vfprintf_l
  00034	83 c4 10	 add	 esp, 16			; 00000010H
  00037	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 842  :         __crt_va_end(_ArgList);

  0003a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 843  :         return _Result;

  00041	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 844  :     }

  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
  00047	3b ec		 cmp	 ebp, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b e5		 mov	 esp, ebp
  00050	5d		 pop	 ebp
  00051	c3		 ret	 0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 644  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00004	8b f4		 mov	 esi, esp
  00006	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00009	50		 push	 eax
  0000a	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0000d	51		 push	 ecx
  0000e	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00011	52		 push	 edx
  00012	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  0001b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001e	51		 push	 ecx
  0001f	8b 10		 mov	 edx, DWORD PTR [eax]
  00021	52		 push	 edx
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00028	83 c4 18	 add	 esp, 24			; 00000018H
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 646  :     }

  00032	5e		 pop	 esi
  00033	3b ec		 cmp	 ebp, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\CCD.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
