; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

	TITLE	C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Debug\Simplify.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?sumOfLinks@@3PAHA				; sumOfLinks
CONST	SEGMENT
$SG225430 DB	'No Room for Additional Node', 00H
$SG225458 DB	'Deleting looping edge', 00H
	ORG $+2
$SG225500 DB	'DE_DE length 1', 00H
	ORG $+1
$SG225503 DB	'Not DEADEND or GROUND', 00H
	ORG $+2
$SG225505 DB	'CombineNodes ec!=2', 00H
	ORG $+1
$SG225556 DB	'Expected connection to GROUND', 00H
CONST	ENDS
_DATA	SEGMENT
?sumOfLinks@@3PAHA DD 00H				; sumOfLinks
	DD	01H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
_DATA	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??4EDGE@@QAEXABU0@@Z				; EDGE::operator=
PUBLIC	?Clear@EDGE@@QAEXXZ				; EDGE::Clear
PUBLIC	?Clear@EDGEDATA@@QAEXXZ				; EDGEDATA::Clear
PUBLIC	?Clear@STOPDATA@@QAEXXZ				; STOPDATA::Clear
PUBLIC	?DeleteEdge@CON@@QAEXHH@Z			; CON::DeleteEdge
PUBLIC	?MoveEdge@CON@@QAEXHHH@Z			; CON::MoveEdge
PUBLIC	?DeleteNode@CON@@QAEXH@Z			; CON::DeleteNode
PUBLIC	?AddNode@CON@@QAEXXZ				; CON::AddNode
PUBLIC	?CombineEdges@CON@@QAE_NH@Z			; CON::CombineEdges
PUBLIC	?_FormChains@CON@@QAEXXZ			; CON::_FormChains
PUBLIC	?Simplify@NIMCON@@QAE_NHH@Z			; NIMCON::Simplify
EXTRN	?ImplementationError@@YAXPBD@Z:PROC		; ImplementationError
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Simplify.cpp
_TEXT	SEGMENT
_en$ = -32						; size = 4
_ec$ = -28						; size = 4
_edgeB$ = -24						; size = 4
_nnB$ = -20						; size = 4
_nnA$ = -16						; size = 4
_nn$ = -12						; size = 4
_result$ = -5						; size = 1
_this$ = -4						; size = 4
_nnFirst$ = 8						; size = 4
_nnLast$ = 12						; size = 4
?Simplify@NIMCON@@QAE_NHH@Z PROC			; NIMCON::Simplify
; _this$ = ecx

; 354  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000e	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00011	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00014	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00017	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001a	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001d	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00020	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00023	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 355  :   bool result = false;

  00026	c6 45 fb 00	 mov	 BYTE PTR _result$[ebp], 0

; 356  :   int nn, nnA, nnB, edgeB, ec, en;
; 357  :   for (nn=nnFirst; nn<nnLast; nn++)

  0002a	8b 45 08	 mov	 eax, DWORD PTR _nnFirst$[ebp]
  0002d	89 45 f4	 mov	 DWORD PTR _nn$[ebp], eax
  00030	eb 09		 jmp	 SHORT $LN4@Simplify
$LN2@Simplify:
  00032	8b 4d f4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00035	83 c1 01	 add	 ecx, 1
  00038	89 4d f4	 mov	 DWORD PTR _nn$[ebp], ecx
$LN4@Simplify:
  0003b	8b 55 f4	 mov	 edx, DWORD PTR _nn$[ebp]
  0003e	3b 55 0c	 cmp	 edx, DWORD PTR _nnLast$[ebp]
  00041	0f 8d cd 01 00
	00		 jge	 $LN3@Simplify

; 358  :   {
; 359  :     nnA = nd[nn].ix;

  00047	8b 45 f4	 mov	 eax, DWORD PTR _nn$[ebp]
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  00055	89 55 f0	 mov	 DWORD PTR _nnA$[ebp], edx

; 360  :     if (IS_ISOLATED(sd[nnA][0].ns)) continue;

  00058	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  0005b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005e	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00065	b8 02 00 00 00	 mov	 eax, 2
  0006a	6b c8 00	 imul	 ecx, eax, 0
  0006d	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00071	81 fa fa 00 00
	00		 cmp	 edx, 250		; 000000faH
  00077	7e 02		 jle	 SHORT $LN8@Simplify
  00079	eb b7		 jmp	 SHORT $LN2@Simplify
$LN8@Simplify:

; 361  :     ec = nd[nnA].ec;

  0007b	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  0007e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00081	0f b6 94 81 10
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4112]
  00089	89 55 e4	 mov	 DWORD PTR _ec$[ebp], edx

; 362  :     for (en=0; en<ec; en++)

  0008c	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _en$[ebp], 0
  00093	eb 09		 jmp	 SHORT $LN7@Simplify
$LN5@Simplify:
  00095	8b 45 e0	 mov	 eax, DWORD PTR _en$[ebp]
  00098	83 c0 01	 add	 eax, 1
  0009b	89 45 e0	 mov	 DWORD PTR _en$[ebp], eax
$LN7@Simplify:
  0009e	8b 4d e0	 mov	 ecx, DWORD PTR _en$[ebp]
  000a1	3b 4d e4	 cmp	 ecx, DWORD PTR _ec$[ebp]
  000a4	0f 8d 65 01 00
	00		 jge	 $LN6@Simplify

; 363  :     {
; 364  :       if (ed[nnA].e[en].el >= 3)

  000aa	8b 55 f0	 mov	 edx, DWORD PTR _nnA$[ebp]
  000ad	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b0	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  000b4	8b 55 e0	 mov	 edx, DWORD PTR _en$[ebp]
  000b7	0f b6 44 51 01	 movzx	 eax, BYTE PTR [ecx+edx*2+1]
  000bc	83 f8 03	 cmp	 eax, 3
  000bf	0f 8c 45 01 00
	00		 jl	 $LN9@Simplify

; 365  :       {
; 366  :         if (IS_A_NODE(sd[nnA][en].ns))

  000c5	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  000c8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000cb	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  000d2	8b 4d e0	 mov	 ecx, DWORD PTR _en$[ebp]
  000d5	0f b6 14 48	 movzx	 edx, BYTE PTR [eax+ecx*2]
  000d9	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  000df	0f 8d cd 00 00
	00		 jge	 $LN10@Simplify

; 367  :         {
; 368  :           //A long chain that we can snap.
; 369  :           result = true;

  000e5	c6 45 fb 01	 mov	 BYTE PTR _result$[ebp], 1

; 370  :           nnB = sd[nnA][en].ns;

  000e9	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  000ec	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ef	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  000f6	8b 45 e0	 mov	 eax, DWORD PTR _en$[ebp]
  000f9	0f b6 0c 42	 movzx	 ecx, BYTE PTR [edx+eax*2]
  000fd	89 4d ec	 mov	 DWORD PTR _nnB$[ebp], ecx

; 371  :           edgeB = sd[nnA][en].ne;

  00100	8b 55 f0	 mov	 edx, DWORD PTR _nnA$[ebp]
  00103	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00106	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  0010d	8b 55 e0	 mov	 edx, DWORD PTR _en$[ebp]
  00110	0f b6 44 51 01	 movzx	 eax, BYTE PTR [ecx+edx*2+1]
  00115	89 45 e8	 mov	 DWORD PTR _edgeB$[ebp], eax

; 372  :           sd[nnB][edgeB].ne = UNUSED;

  00118	8b 4d ec	 mov	 ecx, DWORD PTR _nnB$[ebp]
  0011b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011e	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00125	8b 4d e8	 mov	 ecx, DWORD PTR _edgeB$[ebp]
  00128	c6 44 48 01 ff	 mov	 BYTE PTR [eax+ecx*2+1], 255 ; 000000ffH

; 373  :           sd[nnB][edgeB].ns = GROUND;

  0012d	8b 55 ec	 mov	 edx, DWORD PTR _nnB$[ebp]
  00130	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00133	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  0013a	8b 55 e8	 mov	 edx, DWORD PTR _edgeB$[ebp]
  0013d	c6 04 51 fa	 mov	 BYTE PTR [ecx+edx*2], 250 ; 000000faH

; 374  :           ed[nnB].e[edgeB].ng = GROUND;

  00141	8b 45 ec	 mov	 eax, DWORD PTR _nnB$[ebp]
  00144	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00147	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  0014b	8b 45 e8	 mov	 eax, DWORD PTR _edgeB$[ebp]
  0014e	c6 04 42 fa	 mov	 BYTE PTR [edx+eax*2], 250 ; 000000faH

; 375  :           ed[nnB].e[edgeB].el = 3;

  00152	8b 4d ec	 mov	 ecx, DWORD PTR _nnB$[ebp]
  00155	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00158	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  0015c	8b 4d e8	 mov	 ecx, DWORD PTR _edgeB$[ebp]
  0015f	c6 44 48 01 03	 mov	 BYTE PTR [eax+ecx*2+1], 3

; 376  :           sd[nnA][en].ne = UNUSED;

  00164	8b 55 f0	 mov	 edx, DWORD PTR _nnA$[ebp]
  00167	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016a	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00171	8b 55 e0	 mov	 edx, DWORD PTR _en$[ebp]
  00174	c6 44 51 01 ff	 mov	 BYTE PTR [ecx+edx*2+1], 255 ; 000000ffH

; 377  :           sd[nnA][en].ns = GROUND;

  00179	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  0017c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0017f	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00186	8b 45 e0	 mov	 eax, DWORD PTR _en$[ebp]
  00189	c6 04 42 fa	 mov	 BYTE PTR [edx+eax*2], 250 ; 000000faH

; 378  :           ed[nnA].e[en].ng = GROUND;

  0018d	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00190	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00193	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00197	8b 4d e0	 mov	 ecx, DWORD PTR _en$[ebp]
  0019a	c6 04 48 fa	 mov	 BYTE PTR [eax+ecx*2], 250 ; 000000faH

; 379  :           ed[nnA].e[en].el = 3;

  0019e	8b 55 f0	 mov	 edx, DWORD PTR _nnA$[ebp]
  001a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a4	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  001a8	8b 55 e0	 mov	 edx, DWORD PTR _en$[ebp]
  001ab	c6 44 51 01 03	 mov	 BYTE PTR [ecx+edx*2+1], 3

; 380  :         }

  001b0	eb 58		 jmp	 SHORT $LN9@Simplify
$LN10@Simplify:

; 381  :         else
; 382  :         {
; 383  :           if (sd[nnA][en].ns != GROUND)

  001b2	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  001b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b8	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  001bf	8b 45 e0	 mov	 eax, DWORD PTR _en$[ebp]
  001c2	0f b6 0c 42	 movzx	 ecx, BYTE PTR [edx+eax*2]
  001c6	81 f9 fa 00 00
	00		 cmp	 ecx, 250		; 000000faH
  001cc	74 0f		 je	 SHORT $LN12@Simplify

; 384  :           {
; 385  :             ImplementationError("Expected connection to GROUND");

  001ce	68 00 00 00 00	 push	 OFFSET $SG225556
  001d3	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  001d8	83 c4 04	 add	 esp, 4

; 386  :           }

  001db	eb 2d		 jmp	 SHORT $LN9@Simplify
$LN12@Simplify:

; 387  :           else
; 388  :           {
; 389  :             if (ed[nnA].e[en].el > 3)

  001dd	8b 55 f0	 mov	 edx, DWORD PTR _nnA$[ebp]
  001e0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001e3	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  001e7	8b 55 e0	 mov	 edx, DWORD PTR _en$[ebp]
  001ea	0f b6 44 51 01	 movzx	 eax, BYTE PTR [ecx+edx*2+1]
  001ef	83 f8 03	 cmp	 eax, 3
  001f2	7e 16		 jle	 SHORT $LN9@Simplify

; 390  :             {
; 391  :               result = true;

  001f4	c6 45 fb 01	 mov	 BYTE PTR _result$[ebp], 1

; 392  :               ed[nnA].e[en].el = 3;

  001f8	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  001fb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001fe	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00202	8b 4d e0	 mov	 ecx, DWORD PTR _en$[ebp]
  00205	c6 44 48 01 03	 mov	 BYTE PTR [eax+ecx*2+1], 3
$LN9@Simplify:

; 393  :             };
; 394  :           };
; 395  :         };
; 396  :       };
; 397  :     };

  0020a	e9 86 fe ff ff	 jmp	 $LN5@Simplify
$LN6@Simplify:

; 398  :   };

  0020f	e9 1e fe ff ff	 jmp	 $LN2@Simplify
$LN3@Simplify:

; 399  :   return result;

  00214	0f b6 45 fb	 movzx	 eax, BYTE PTR _result$[ebp]

; 400  : }

  00218	83 c4 20	 add	 esp, 32			; 00000020H
  0021b	3b ec		 cmp	 ebp, esp
  0021d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00222	8b e5		 mov	 esp, ebp
  00224	5d		 pop	 ebp
  00225	c2 08 00	 ret	 8
?Simplify@NIMCON@@QAE_NHH@Z ENDP			; NIMCON::Simplify
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Simplify.cpp
_TEXT	SEGMENT
_nn$ = -12						; size = 4
_nodeCenterA$ = -8					; size = 4
_this$ = -4						; size = 4
?_FormChains@CON@@QAEXXZ PROC				; CON::_FormChains
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 337  :   // Get rid of any joints with two links.
; 338  :   int nodeCenterA, nn;
; 339  :   for (nn=0; nn<m_numNode; nn++)

  0001e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nn$[ebp], 0
  00025	eb 09		 jmp	 SHORT $LN4@FormChains
$LN2@FormChains:
  00027	8b 45 f4	 mov	 eax, DWORD PTR _nn$[ebp]
  0002a	83 c0 01	 add	 eax, 1
  0002d	89 45 f4	 mov	 DWORD PTR _nn$[ebp], eax
$LN4@FormChains:
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 55 f4	 mov	 edx, DWORD PTR _nn$[ebp]
  00036	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00038	7d 4e		 jge	 SHORT $LN1@FormChains

; 340  :   {
; 341  :     nodeCenterA = nd[nn].ix;

  0003a	8b 45 f4	 mov	 eax, DWORD PTR _nn$[ebp]
  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  00048	89 55 f8	 mov	 DWORD PTR _nodeCenterA$[ebp], edx

; 342  :     if (nd[nodeCenterA].ec < 3)

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  0004e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00051	0f b6 94 81 10
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4112]
  00059	83 fa 03	 cmp	 edx, 3
  0005c	7d 28		 jge	 SHORT $LN5@FormChains

; 343  :     {
; 344  :       if (CombineEdges(nn)) 

  0005e	8b 45 f4	 mov	 eax, DWORD PTR _nn$[ebp]
  00061	50		 push	 eax
  00062	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00065	e8 00 00 00 00	 call	 ?CombineEdges@CON@@QAE_NH@Z ; CON::CombineEdges
  0006a	0f b6 c8	 movzx	 ecx, al
  0006d	85 c9		 test	 ecx, ecx
  0006f	74 15		 je	 SHORT $LN5@FormChains

; 345  :       {
; 346  :         DeleteNode(nn);

  00071	8b 55 f4	 mov	 edx, DWORD PTR _nn$[ebp]
  00074	52		 push	 edx
  00075	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	e8 00 00 00 00	 call	 ?DeleteNode@CON@@QAEXH@Z ; CON::DeleteNode

; 347  :         nn--;

  0007d	8b 45 f4	 mov	 eax, DWORD PTR _nn$[ebp]
  00080	83 e8 01	 sub	 eax, 1
  00083	89 45 f4	 mov	 DWORD PTR _nn$[ebp], eax
$LN5@FormChains:

; 348  :       };
; 349  :     };
; 350  :   };

  00086	eb 9f		 jmp	 SHORT $LN2@FormChains
$LN1@FormChains:

; 351  : }

  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c3		 ret	 0
?_FormChains@CON@@QAEXXZ ENDP				; CON::_FormChains
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Simplify.cpp
_TEXT	SEGMENT
_length$1 = -40						; size = 4
_length$2 = -36						; size = 4
_length$3 = -32						; size = 4
_length$4 = -28						; size = 4
_nodeCenterA$ = -24					; size = 4
_edgeRight$ = -20					; size = 4
_edgeLeft$ = -16					; size = 4
_nodeRightA$ = -12					; size = 4
_nodeLeftA$ = -8					; size = 4
_this$ = -4						; size = 4
_nn$ = 8						; size = 4
?CombineEdges@CON@@QAE_NH@Z PROC			; CON::CombineEdges
; _this$ = ecx

; 158  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000c	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 159  :   //Return true if the node is deleted.
; 160  :   int nodeLeftA, nodeRightA, edgeLeft, edgeRight;
; 161  :   int nodeCenterA;
; 162  :   nodeCenterA = nd[nn].ix;

  0001c	8b 45 08	 mov	 eax, DWORD PTR _nn$[ebp]
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  0002a	89 55 e8	 mov	 DWORD PTR _nodeCenterA$[ebp], edx

; 163  :   if (nd[nodeCenterA].ec == 1)

  0002d	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  00030	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	0f b6 94 81 10
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4112]
  0003b	83 fa 01	 cmp	 edx, 1
  0003e	0f 85 28 02 00
	00		 jne	 $LN2@CombineEdg

; 164  :   {
; 165  :     nodeLeftA = sd[nodeCenterA][0].ns;

  00044	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  00047	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004a	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00051	b8 02 00 00 00	 mov	 eax, 2
  00056	6b c8 00	 imul	 ecx, eax, 0
  00059	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  0005d	89 55 f8	 mov	 DWORD PTR _nodeLeftA$[ebp], edx

; 166  :     if (IS_A_NODE(nodeLeftA))

  00060	81 7d f8 f9 00
	00 00		 cmp	 DWORD PTR _nodeLeftA$[ebp], 249 ; 000000f9H
  00067	0f 8d 88 00 00
	00		 jge	 $LN3@CombineEdg

; 167  :     {
; 168  :       //Simply set the left node to a DEADEND length +1.
; 169  :       edgeLeft  = sd[nodeCenterA][0].ne;

  0006d	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  00070	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0007a	b8 02 00 00 00	 mov	 eax, 2
  0007f	6b c8 00	 imul	 ecx, eax, 0
  00082	0f b6 54 0a 01	 movzx	 edx, BYTE PTR [edx+ecx+1]
  00087	89 55 f0	 mov	 DWORD PTR _edgeLeft$[ebp], edx

; 170  :       ed[nodeLeftA].e[edgeLeft].el++;

  0008a	8b 45 f8	 mov	 eax, DWORD PTR _nodeLeftA$[ebp]
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00094	8b 45 f0	 mov	 eax, DWORD PTR _edgeLeft$[ebp]
  00097	8a 4c 42 01	 mov	 cl, BYTE PTR [edx+eax*2+1]
  0009b	80 c1 01	 add	 cl, 1
  0009e	8b 55 f8	 mov	 edx, DWORD PTR _nodeLeftA$[ebp]
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	8d 54 d0 10	 lea	 edx, DWORD PTR [eax+edx*8+16]
  000a8	8b 45 f0	 mov	 eax, DWORD PTR _edgeLeft$[ebp]
  000ab	88 4c 42 01	 mov	 BYTE PTR [edx+eax*2+1], cl

; 171  :       ed[nodeLeftA].e[edgeLeft].ng = DEADEND;

  000af	8b 4d f8	 mov	 ecx, DWORD PTR _nodeLeftA$[ebp]
  000b2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b5	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  000b9	8b 4d f0	 mov	 ecx, DWORD PTR _edgeLeft$[ebp]
  000bc	c6 04 48 f9	 mov	 BYTE PTR [eax+ecx*2], 249 ; 000000f9H

; 172  :       sd[nodeLeftA][edgeLeft].ns = DEADEND;

  000c0	8b 55 f8	 mov	 edx, DWORD PTR _nodeLeftA$[ebp]
  000c3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c6	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  000cd	8b 55 f0	 mov	 edx, DWORD PTR _edgeLeft$[ebp]
  000d0	c6 04 51 f9	 mov	 BYTE PTR [ecx+edx*2], 249 ; 000000f9H

; 173  :       sd[nodeLeftA][edgeLeft].ne = UNUSED;

  000d4	8b 45 f8	 mov	 eax, DWORD PTR _nodeLeftA$[ebp]
  000d7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000da	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  000e1	8b 45 f0	 mov	 eax, DWORD PTR _edgeLeft$[ebp]
  000e4	c6 44 42 01 ff	 mov	 BYTE PTR [edx+eax*2+1], 255 ; 000000ffH

; 174  :       //DeleteNode(nn);
; 175  :       return true;

  000e9	b0 01		 mov	 al, 1
  000eb	e9 0a 08 00 00	 jmp	 $LN1@CombineEdg

; 176  :     }

  000f0	e9 77 01 00 00	 jmp	 $LN2@CombineEdg
$LN3@CombineEdg:

; 177  :     else
; 178  :     {
; 179  :       if (nodeLeftA == DEADEND)

  000f5	81 7d f8 f9 00
	00 00		 cmp	 DWORD PTR _nodeLeftA$[ebp], 249 ; 000000f9H
  000fc	0f 85 ba 00 00
	00		 jne	 $LN5@CombineEdg

; 180  :       {
; 181  :         if (ed[nodeCenterA].e[0].el < 1) ImplementationError("DE_DE length 1");

  00102	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  00105	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00108	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  0010c	b9 02 00 00 00	 mov	 ecx, 2
  00111	6b d1 00	 imul	 edx, ecx, 0
  00114	0f b6 44 10 01	 movzx	 eax, BYTE PTR [eax+edx+1]
  00119	83 f8 01	 cmp	 eax, 1
  0011c	7d 0d		 jge	 SHORT $LN7@CombineEdg
  0011e	68 00 00 00 00	 push	 OFFSET $SG225500
  00123	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  00128	83 c4 04	 add	 esp, 4
$LN7@CombineEdg:

; 182  :         ed[nodeCenterA].e[0].ng = DE_DE;

  0012b	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  0012e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00131	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00135	b9 02 00 00 00	 mov	 ecx, 2
  0013a	6b d1 00	 imul	 edx, ecx, 0
  0013d	c6 04 10 fb	 mov	 BYTE PTR [eax+edx], 251	; 000000fbH

; 183  :         ed[nodeCenterA].e[0].el++;

  00141	b8 02 00 00 00	 mov	 eax, 2
  00146	6b c8 00	 imul	 ecx, eax, 0
  00149	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  0014c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014f	8d 54 d0 10	 lea	 edx, DWORD PTR [eax+edx*8+16]
  00153	8a 44 0a 01	 mov	 al, BYTE PTR [edx+ecx+1]
  00157	04 01		 add	 al, 1
  00159	b9 02 00 00 00	 mov	 ecx, 2
  0015e	6b d1 00	 imul	 edx, ecx, 0
  00161	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  00164	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00167	8d 4c ce 10	 lea	 ecx, DWORD PTR [esi+ecx*8+16]
  0016b	88 44 11 01	 mov	 BYTE PTR [ecx+edx+1], al

; 184  :         sd[nodeCenterA][0].ns = DE_DE;

  0016f	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  00172	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00175	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  0017c	ba 02 00 00 00	 mov	 edx, 2
  00181	6b c2 00	 imul	 eax, edx, 0
  00184	c6 04 01 fb	 mov	 BYTE PTR [ecx+eax], 251	; 000000fbH

; 185  :         sd[nodeCenterA][0].ne = UNUSED;

  00188	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  0018b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0018e	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00195	b9 02 00 00 00	 mov	 ecx, 2
  0019a	6b d1 00	 imul	 edx, ecx, 0
  0019d	c6 44 10 01 ff	 mov	 BYTE PTR [eax+edx+1], 255 ; 000000ffH

; 186  :         nd[nodeCenterA].ec = 0;

  001a2	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  001a5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a8	c6 84 81 10 10
	00 00 00	 mov	 BYTE PTR [ecx+eax*4+4112], 0

; 187  :         return false;

  001b0	32 c0		 xor	 al, al
  001b2	e9 43 07 00 00	 jmp	 $LN1@CombineEdg

; 188  :       }

  001b7	e9 b0 00 00 00	 jmp	 $LN2@CombineEdg
$LN5@CombineEdg:

; 189  :       else if (nodeLeftA == GROUND)

  001bc	81 7d f8 fa 00
	00 00		 cmp	 DWORD PTR _nodeLeftA$[ebp], 250 ; 000000faH
  001c3	0f 85 8f 00 00
	00		 jne	 $LN8@CombineEdg

; 190  :       {
; 191  :         ed[nodeCenterA].e[0].el++;

  001c9	ba 02 00 00 00	 mov	 edx, 2
  001ce	6b c2 00	 imul	 eax, edx, 0
  001d1	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  001d4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001d7	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  001db	8a 54 01 01	 mov	 dl, BYTE PTR [ecx+eax+1]
  001df	80 c2 01	 add	 dl, 1
  001e2	b8 02 00 00 00	 mov	 eax, 2
  001e7	6b c8 00	 imul	 ecx, eax, 0
  001ea	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  001ed	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  001f0	8d 44 c6 10	 lea	 eax, DWORD PTR [esi+eax*8+16]
  001f4	88 54 08 01	 mov	 BYTE PTR [eax+ecx+1], dl

; 192  :         ed[nodeCenterA].e[0].ng = GND_DE;

  001f8	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  001fb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001fe	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00202	b9 02 00 00 00	 mov	 ecx, 2
  00207	6b d1 00	 imul	 edx, ecx, 0
  0020a	c6 04 10 fc	 mov	 BYTE PTR [eax+edx], 252	; 000000fcH

; 193  :         sd[nodeCenterA][0].ns = GND_DE;

  0020e	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  00211	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00214	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0021b	b8 02 00 00 00	 mov	 eax, 2
  00220	6b c8 00	 imul	 ecx, eax, 0
  00223	c6 04 0a fc	 mov	 BYTE PTR [edx+ecx], 252	; 000000fcH

; 194  :         sd[nodeCenterA][0].ne = UNUSED;

  00227	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  0022a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0022d	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00234	ba 02 00 00 00	 mov	 edx, 2
  00239	6b c2 00	 imul	 eax, edx, 0
  0023c	c6 44 01 01 ff	 mov	 BYTE PTR [ecx+eax+1], 255 ; 000000ffH

; 195  :         nd[nodeCenterA].ec = 0;

  00241	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  00244	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00247	c6 84 8a 10 10
	00 00 00	 mov	 BYTE PTR [edx+ecx*4+4112], 0

; 196  :         return false;

  0024f	32 c0		 xor	 al, al
  00251	e9 a4 06 00 00	 jmp	 $LN1@CombineEdg

; 197  :       }

  00256	eb 14		 jmp	 SHORT $LN2@CombineEdg
$LN8@CombineEdg:

; 198  :       else
; 199  :       {
; 200  :         ImplementationError("Not DEADEND or GROUND");

  00258	68 00 00 00 00	 push	 OFFSET $SG225503
  0025d	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  00262	83 c4 04	 add	 esp, 4

; 201  :         return false;

  00265	32 c0		 xor	 al, al
  00267	e9 8e 06 00 00	 jmp	 $LN1@CombineEdg
$LN2@CombineEdg:

; 202  :       };
; 203  :     };
; 204  :   };
; 205  :   if (nd[nodeCenterA].ec != 2) ImplementationError("CombineNodes ec!=2");

  0026c	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  0026f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00272	0f b6 94 81 10
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4112]
  0027a	83 fa 02	 cmp	 edx, 2
  0027d	74 0d		 je	 SHORT $LN10@CombineEdg
  0027f	68 00 00 00 00	 push	 OFFSET $SG225505
  00284	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  00289	83 c4 04	 add	 esp, 4
$LN10@CombineEdg:

; 206  :   nodeLeftA  = sd[nodeCenterA][0].ns;

  0028c	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  0028f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00292	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00299	b8 02 00 00 00	 mov	 eax, 2
  0029e	6b c8 00	 imul	 ecx, eax, 0
  002a1	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  002a5	89 55 f8	 mov	 DWORD PTR _nodeLeftA$[ebp], edx

; 207  :   nodeRightA = sd[nodeCenterA][1].ns;

  002a8	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  002ab	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ae	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  002b5	b8 02 00 00 00	 mov	 eax, 2
  002ba	c1 e0 00	 shl	 eax, 0
  002bd	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  002c1	89 4d f4	 mov	 DWORD PTR _nodeRightA$[ebp], ecx

; 208  :   edgeLeft   = sd[nodeCenterA][0].ne;

  002c4	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  002c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002ca	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  002d1	ba 02 00 00 00	 mov	 edx, 2
  002d6	6b c2 00	 imul	 eax, edx, 0
  002d9	0f b6 4c 01 01	 movzx	 ecx, BYTE PTR [ecx+eax+1]
  002de	89 4d f0	 mov	 DWORD PTR _edgeLeft$[ebp], ecx

; 209  :   edgeRight  = sd[nodeCenterA][1].ne;

  002e1	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  002e4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002e7	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  002ee	ba 02 00 00 00	 mov	 edx, 2
  002f3	c1 e2 00	 shl	 edx, 0
  002f6	0f b6 44 11 01	 movzx	 eax, BYTE PTR [ecx+edx+1]
  002fb	89 45 ec	 mov	 DWORD PTR _edgeRight$[ebp], eax

; 210  :   if (!IS_A_NODE(nodeLeftA))

  002fe	81 7d f8 f9 00
	00 00		 cmp	 DWORD PTR _nodeLeftA$[ebp], 249 ; 000000f9H
  00305	0f 8c 8d 03 00
	00		 jl	 $LN11@CombineEdg

; 211  :   {
; 212  :     if (IS_A_NODE(nodeRightA))

  0030b	81 7d f4 f9 00
	00 00		 cmp	 DWORD PTR _nodeRightA$[ebp], 249 ; 000000f9H
  00312	0f 8d 88 00 00
	00		 jge	 $LN13@CombineEdg

; 213  :     {
; 214  :       //Left connected to ground or deadend.
; 215  :       //Right side connected to a node.
; 216  :       //Connect the node on the right side to the left stop
; 217  :       //and add 1 to the sum of the lengths.
; 218  :       //Discard this node.
; 219  : 
; 220  :       sd[nodeRightA][edgeRight].ns = (STOPNUM)nodeLeftA;

  00318	8b 4d f4	 mov	 ecx, DWORD PTR _nodeRightA$[ebp]
  0031b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0031e	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00325	8b 4d ec	 mov	 ecx, DWORD PTR _edgeRight$[ebp]
  00328	8a 55 f8	 mov	 dl, BYTE PTR _nodeLeftA$[ebp]
  0032b	88 14 48	 mov	 BYTE PTR [eax+ecx*2], dl

; 221  :       ed[nodeRightA].e[edgeRight].ng = (STOPNUM)nodeLeftA;

  0032e	8b 45 f4	 mov	 eax, DWORD PTR _nodeRightA$[ebp]
  00331	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00334	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00338	8b 45 ec	 mov	 eax, DWORD PTR _edgeRight$[ebp]
  0033b	8a 4d f8	 mov	 cl, BYTE PTR _nodeLeftA$[ebp]
  0033e	88 0c 42	 mov	 BYTE PTR [edx+eax*2], cl

; 222  :       sd[nodeRightA][edgeRight].ne = UNUSED;

  00341	8b 55 f4	 mov	 edx, DWORD PTR _nodeRightA$[ebp]
  00344	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00347	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  0034e	8b 55 ec	 mov	 edx, DWORD PTR _edgeRight$[ebp]
  00351	c6 44 51 01 ff	 mov	 BYTE PTR [ecx+edx*2+1], 255 ; 000000ffH

; 223  :       ed[nodeRightA].e[edgeRight].el 

  00356	8b 45 f4	 mov	 eax, DWORD PTR _nodeRightA$[ebp]
  00359	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0035c	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00360	8b 45 ec	 mov	 eax, DWORD PTR _edgeRight$[ebp]
  00363	0f b6 4c 42 01	 movzx	 ecx, BYTE PTR [edx+eax*2+1]
  00368	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  0036b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0036e	8d 54 d0 10	 lea	 edx, DWORD PTR [eax+edx*8+16]
  00372	b8 02 00 00 00	 mov	 eax, 2
  00377	6b c0 00	 imul	 eax, eax, 0
  0037a	0f b6 54 02 01	 movzx	 edx, BYTE PTR [edx+eax+1]
  0037f	8d 44 11 01	 lea	 eax, DWORD PTR [ecx+edx+1]
  00383	8b 4d f4	 mov	 ecx, DWORD PTR _nodeRightA$[ebp]
  00386	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00389	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  0038d	8b 55 ec	 mov	 edx, DWORD PTR _edgeRight$[ebp]
  00390	88 44 51 01	 mov	 BYTE PTR [ecx+edx*2+1], al

; 224  :         = (EDGELEN)(ed[nodeRightA].e[edgeRight].el + ed[nodeCenterA].e[0].el + 1);
; 225  :       //DeleteNode(nn);
; 226  :       return true;

  00394	b0 01		 mov	 al, 1
  00396	e9 5f 05 00 00	 jmp	 $LN1@CombineEdg

; 227  :     }

  0039b	e9 f3 02 00 00	 jmp	 $LN14@CombineEdg
$LN13@CombineEdg:

; 228  :     else
; 229  :     {
; 230  :       //Both Left and right are non-nodes.  So this is an isolated
; 231  :       //chain from GROUND-GROUND, DEADEND-GROUND, or DEADEND-DEADEND.
; 232  :       if ((nodeLeftA==GROUND)&&(nodeRightA==GROUND))

  003a0	81 7d f8 fa 00
	00 00		 cmp	 DWORD PTR _nodeLeftA$[ebp], 250 ; 000000faH
  003a7	0f 85 f3 00 00
	00		 jne	 $LN15@CombineEdg
  003ad	81 7d f4 fa 00
	00 00		 cmp	 DWORD PTR _nodeRightA$[ebp], 250 ; 000000faH
  003b4	0f 85 e6 00 00
	00		 jne	 $LN15@CombineEdg

; 233  :       {
; 234  :         int length;
; 235  :         ed[nodeCenterA].e[0].ng = GND_GND;

  003ba	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  003bd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003c0	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  003c4	b8 02 00 00 00	 mov	 eax, 2
  003c9	6b c8 00	 imul	 ecx, eax, 0
  003cc	c6 04 0a fd	 mov	 BYTE PTR [edx+ecx], 253	; 000000fdH

; 236  :         length = ed[nodeCenterA].e[0].el + ed[nodeCenterA].e[1].el + 1;

  003d0	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  003d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003d6	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  003da	ba 02 00 00 00	 mov	 edx, 2
  003df	6b c2 00	 imul	 eax, edx, 0
  003e2	0f b6 4c 01 01	 movzx	 ecx, BYTE PTR [ecx+eax+1]
  003e7	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  003ea	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003ed	8d 54 d0 10	 lea	 edx, DWORD PTR [eax+edx*8+16]
  003f1	b8 02 00 00 00	 mov	 eax, 2
  003f6	c1 e0 00	 shl	 eax, 0
  003f9	0f b6 54 02 01	 movzx	 edx, BYTE PTR [edx+eax+1]
  003fe	8d 44 11 01	 lea	 eax, DWORD PTR [ecx+edx+1]
  00402	89 45 e4	 mov	 DWORD PTR _length$4[ebp], eax

; 237  :         ed[nodeCenterA].e[0].el = (EDGELEN)length;

  00405	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  00408	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0040b	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  0040f	b9 02 00 00 00	 mov	 ecx, 2
  00414	6b d1 00	 imul	 edx, ecx, 0
  00417	8a 4d e4	 mov	 cl, BYTE PTR _length$4[ebp]
  0041a	88 4c 10 01	 mov	 BYTE PTR [eax+edx+1], cl

; 238  :         ed[nodeCenterA].e[1].Clear();

  0041e	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  00421	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00424	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00428	ba 02 00 00 00	 mov	 edx, 2
  0042d	c1 e2 00	 shl	 edx, 0
  00430	03 ca		 add	 ecx, edx
  00432	e8 00 00 00 00	 call	 ?Clear@EDGE@@QAEXXZ	; EDGE::Clear

; 239  :         sd[nodeCenterA][0].ne = UNUSED;

  00437	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  0043a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0043d	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00444	b8 02 00 00 00	 mov	 eax, 2
  00449	6b c8 00	 imul	 ecx, eax, 0
  0044c	c6 44 0a 01 ff	 mov	 BYTE PTR [edx+ecx+1], 255 ; 000000ffH

; 240  :         sd[nodeCenterA][0].ns = GND_GND;

  00451	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  00454	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00457	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  0045e	ba 02 00 00 00	 mov	 edx, 2
  00463	6b c2 00	 imul	 eax, edx, 0
  00466	c6 04 01 fd	 mov	 BYTE PTR [ecx+eax], 253	; 000000fdH

; 241  :         sd[nodeCenterA][1].Clear();

  0046a	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  0046d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00470	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  00477	b8 02 00 00 00	 mov	 eax, 2
  0047c	c1 e0 00	 shl	 eax, 0
  0047f	03 c8		 add	 ecx, eax
  00481	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 242  :         nd[nodeCenterA].ec = 0;

  00486	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  00489	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0048c	c6 84 8a 10 10
	00 00 00	 mov	 BYTE PTR [edx+ecx*4+4112], 0

; 243  :         return false;

  00494	32 c0		 xor	 al, al
  00496	e9 5f 04 00 00	 jmp	 $LN1@CombineEdg

; 244  :       }

  0049b	e9 f3 01 00 00	 jmp	 $LN14@CombineEdg
$LN15@CombineEdg:

; 245  :       else if(   (nodeLeftA==DEADEND)&&(nodeRightA==GROUND)
; 246  :               || (nodeLeftA==GROUND)&&(nodeRightA==DEADEND) )

  004a0	81 7d f8 f9 00
	00 00		 cmp	 DWORD PTR _nodeLeftA$[ebp], 249 ; 000000f9H
  004a7	75 09		 jne	 SHORT $LN20@CombineEdg
  004a9	81 7d f4 fa 00
	00 00		 cmp	 DWORD PTR _nodeRightA$[ebp], 250 ; 000000faH
  004b0	74 1a		 je	 SHORT $LN19@CombineEdg
$LN20@CombineEdg:
  004b2	81 7d f8 fa 00
	00 00		 cmp	 DWORD PTR _nodeLeftA$[ebp], 250 ; 000000faH
  004b9	0f 85 f3 00 00
	00		 jne	 $LN17@CombineEdg
  004bf	81 7d f4 f9 00
	00 00		 cmp	 DWORD PTR _nodeRightA$[ebp], 249 ; 000000f9H
  004c6	0f 85 e6 00 00
	00		 jne	 $LN17@CombineEdg
$LN19@CombineEdg:

; 247  :       {
; 248  :         // A Node between GROUND and DEADEND
; 249  :         int length;
; 250  :         ed[nodeCenterA].e[0].ng = GND_DE;

  004cc	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  004cf	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004d2	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  004d6	b8 02 00 00 00	 mov	 eax, 2
  004db	6b c8 00	 imul	 ecx, eax, 0
  004de	c6 04 0a fc	 mov	 BYTE PTR [edx+ecx], 252	; 000000fcH

; 251  :         length = ed[nodeCenterA].e[0].el + ed[nodeCenterA].e[1].el + 1;

  004e2	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  004e5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004e8	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  004ec	ba 02 00 00 00	 mov	 edx, 2
  004f1	6b c2 00	 imul	 eax, edx, 0
  004f4	0f b6 4c 01 01	 movzx	 ecx, BYTE PTR [ecx+eax+1]
  004f9	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  004fc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004ff	8d 54 d0 10	 lea	 edx, DWORD PTR [eax+edx*8+16]
  00503	b8 02 00 00 00	 mov	 eax, 2
  00508	c1 e0 00	 shl	 eax, 0
  0050b	0f b6 54 02 01	 movzx	 edx, BYTE PTR [edx+eax+1]
  00510	8d 44 11 01	 lea	 eax, DWORD PTR [ecx+edx+1]
  00514	89 45 e0	 mov	 DWORD PTR _length$3[ebp], eax

; 252  :         ed[nodeCenterA].e[0].el = (EDGELEN)length;

  00517	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  0051a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0051d	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00521	b9 02 00 00 00	 mov	 ecx, 2
  00526	6b d1 00	 imul	 edx, ecx, 0
  00529	8a 4d e0	 mov	 cl, BYTE PTR _length$3[ebp]
  0052c	88 4c 10 01	 mov	 BYTE PTR [eax+edx+1], cl

; 253  :         sd[nodeCenterA][0].ne = UNUSED;

  00530	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  00533	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00536	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  0053d	ba 02 00 00 00	 mov	 edx, 2
  00542	6b c2 00	 imul	 eax, edx, 0
  00545	c6 44 01 01 ff	 mov	 BYTE PTR [ecx+eax+1], 255 ; 000000ffH

; 254  :         sd[nodeCenterA][0].ns = GND_DE;

  0054a	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  0054d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00550	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00557	b9 02 00 00 00	 mov	 ecx, 2
  0055c	6b d1 00	 imul	 edx, ecx, 0
  0055f	c6 04 10 fc	 mov	 BYTE PTR [eax+edx], 252	; 000000fcH

; 255  :         nd[nodeCenterA].ec = 0;

  00563	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  00566	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00569	c6 84 81 10 10
	00 00 00	 mov	 BYTE PTR [ecx+eax*4+4112], 0

; 256  :         ed[nodeCenterA].e[1].Clear();

  00571	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  00574	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00577	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  0057b	ba 02 00 00 00	 mov	 edx, 2
  00580	c1 e2 00	 shl	 edx, 0
  00583	03 ca		 add	 ecx, edx
  00585	e8 00 00 00 00	 call	 ?Clear@EDGE@@QAEXXZ	; EDGE::Clear

; 257  :         sd[nodeCenterA][1].Clear();

  0058a	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  0058d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00590	8d 8c c1 10 08
	00 00		 lea	 ecx, DWORD PTR [ecx+eax*8+2064]
  00597	ba 02 00 00 00	 mov	 edx, 2
  0059c	c1 e2 00	 shl	 edx, 0
  0059f	03 ca		 add	 ecx, edx
  005a1	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 258  :         return false;

  005a6	32 c0		 xor	 al, al
  005a8	e9 4d 03 00 00	 jmp	 $LN1@CombineEdg

; 259  :       }

  005ad	e9 e1 00 00 00	 jmp	 $LN14@CombineEdg
$LN17@CombineEdg:

; 260  :       else
; 261  :       {
; 262  :         int length;
; 263  :         ed[nodeCenterA].e[0].ng = DE_DE;

  005b2	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  005b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005b8	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  005bc	b8 02 00 00 00	 mov	 eax, 2
  005c1	6b c8 00	 imul	 ecx, eax, 0
  005c4	c6 04 0a fb	 mov	 BYTE PTR [edx+ecx], 251	; 000000fbH

; 264  :         length = ed[nodeCenterA].e[0].el + ed[nodeCenterA].e[1].el + 1;

  005c8	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  005cb	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005ce	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  005d2	ba 02 00 00 00	 mov	 edx, 2
  005d7	6b c2 00	 imul	 eax, edx, 0
  005da	0f b6 4c 01 01	 movzx	 ecx, BYTE PTR [ecx+eax+1]
  005df	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  005e2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  005e5	8d 54 d0 10	 lea	 edx, DWORD PTR [eax+edx*8+16]
  005e9	b8 02 00 00 00	 mov	 eax, 2
  005ee	c1 e0 00	 shl	 eax, 0
  005f1	0f b6 54 02 01	 movzx	 edx, BYTE PTR [edx+eax+1]
  005f6	8d 44 11 01	 lea	 eax, DWORD PTR [ecx+edx+1]
  005fa	89 45 dc	 mov	 DWORD PTR _length$2[ebp], eax

; 265  :         ed[nodeCenterA].e[0].el = (EDGELEN)length;

  005fd	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  00600	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00603	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00607	b9 02 00 00 00	 mov	 ecx, 2
  0060c	6b d1 00	 imul	 edx, ecx, 0
  0060f	8a 4d dc	 mov	 cl, BYTE PTR _length$2[ebp]
  00612	88 4c 10 01	 mov	 BYTE PTR [eax+edx+1], cl

; 266  :         ed[nodeCenterA].e[1].Clear();

  00616	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  00619	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0061c	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00620	ba 02 00 00 00	 mov	 edx, 2
  00625	c1 e2 00	 shl	 edx, 0
  00628	03 ca		 add	 ecx, edx
  0062a	e8 00 00 00 00	 call	 ?Clear@EDGE@@QAEXXZ	; EDGE::Clear

; 267  :         sd[nodeCenterA][0].ne = UNUSED;

  0062f	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  00632	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00635	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0063c	b8 02 00 00 00	 mov	 eax, 2
  00641	6b c8 00	 imul	 ecx, eax, 0
  00644	c6 44 0a 01 ff	 mov	 BYTE PTR [edx+ecx+1], 255 ; 000000ffH

; 268  :         sd[nodeCenterA][0].ns = DE_DE;

  00649	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  0064c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0064f	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00656	ba 02 00 00 00	 mov	 edx, 2
  0065b	6b c2 00	 imul	 eax, edx, 0
  0065e	c6 04 01 fb	 mov	 BYTE PTR [ecx+eax], 251	; 000000fbH

; 269  :         sd[nodeCenterA][1].Clear();

  00662	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  00665	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00668	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  0066f	b8 02 00 00 00	 mov	 eax, 2
  00674	c1 e0 00	 shl	 eax, 0
  00677	03 c8		 add	 ecx, eax
  00679	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 270  :         nd[nodeCenterA].ec = 0;

  0067e	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  00681	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00684	c6 84 8a 10 10
	00 00 00	 mov	 BYTE PTR [edx+ecx*4+4112], 0

; 271  :         return false;

  0068c	32 c0		 xor	 al, al
  0068e	e9 67 02 00 00	 jmp	 $LN1@CombineEdg
$LN14@CombineEdg:

; 272  :       };
; 273  :     };
; 274  :   }

  00693	e9 60 02 00 00	 jmp	 $LN12@CombineEdg
$LN11@CombineEdg:

; 275  :   else
; 276  :   {
; 277  :     if (  (nodeRightA == GROUND)
; 278  :         ||(nodeRightA == DEADEND) )

  00698	81 7d f4 fa 00
	00 00		 cmp	 DWORD PTR _nodeRightA$[ebp], 250 ; 000000faH
  0069f	74 0d		 je	 SHORT $LN23@CombineEdg
  006a1	81 7d f4 f9 00
	00 00		 cmp	 DWORD PTR _nodeRightA$[ebp], 249 ; 000000f9H
  006a8	0f 85 88 00 00
	00		 jne	 $LN21@CombineEdg
$LN23@CombineEdg:

; 279  :     {
; 280  :       //Left connected to another node, right to ground.
; 281  :       //Use the Left link to connect the left joint to ground.
; 282  :       //Then we can delete ourselves.
; 283  :       sd[nodeLeftA][edgeLeft].ns = (STOPNUM)nodeRightA;

  006ae	8b 45 f8	 mov	 eax, DWORD PTR _nodeLeftA$[ebp]
  006b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006b4	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  006bb	8b 45 f0	 mov	 eax, DWORD PTR _edgeLeft$[ebp]
  006be	8a 4d f4	 mov	 cl, BYTE PTR _nodeRightA$[ebp]
  006c1	88 0c 42	 mov	 BYTE PTR [edx+eax*2], cl

; 284  :       sd[nodeLeftA][edgeLeft].ne = UNUSED;

  006c4	8b 55 f8	 mov	 edx, DWORD PTR _nodeLeftA$[ebp]
  006c7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006ca	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  006d1	8b 55 f0	 mov	 edx, DWORD PTR _edgeLeft$[ebp]
  006d4	c6 44 51 01 ff	 mov	 BYTE PTR [ecx+edx*2+1], 255 ; 000000ffH

; 285  :       ed[nodeLeftA].e[edgeLeft].el 

  006d9	8b 45 f8	 mov	 eax, DWORD PTR _nodeLeftA$[ebp]
  006dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006df	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  006e3	8b 45 f0	 mov	 eax, DWORD PTR _edgeLeft$[ebp]
  006e6	0f b6 4c 42 01	 movzx	 ecx, BYTE PTR [edx+eax*2+1]
  006eb	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  006ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006f1	8d 54 d0 10	 lea	 edx, DWORD PTR [eax+edx*8+16]
  006f5	b8 02 00 00 00	 mov	 eax, 2
  006fa	c1 e0 00	 shl	 eax, 0
  006fd	0f b6 54 02 01	 movzx	 edx, BYTE PTR [edx+eax+1]
  00702	8d 44 11 01	 lea	 eax, DWORD PTR [ecx+edx+1]
  00706	8b 4d f8	 mov	 ecx, DWORD PTR _nodeLeftA$[ebp]
  00709	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0070c	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  00710	8b 55 f0	 mov	 edx, DWORD PTR _edgeLeft$[ebp]
  00713	88 44 51 01	 mov	 BYTE PTR [ecx+edx*2+1], al

; 286  :          = (EDGELEN)(ed[nodeLeftA].e[edgeLeft].el + ed[nodeCenterA].e[1].el + 1);
; 287  :       ed[nodeLeftA].e[edgeLeft].ng = (STOPNUM)nodeRightA;

  00717	8b 45 f8	 mov	 eax, DWORD PTR _nodeLeftA$[ebp]
  0071a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0071d	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00721	8b 45 f0	 mov	 eax, DWORD PTR _edgeLeft$[ebp]
  00724	8a 4d f4	 mov	 cl, BYTE PTR _nodeRightA$[ebp]
  00727	88 0c 42	 mov	 BYTE PTR [edx+eax*2], cl

; 288  :       //DeleteNode(nn);
; 289  :       return true;

  0072a	b0 01		 mov	 al, 1
  0072c	e9 c9 01 00 00	 jmp	 $LN1@CombineEdg

; 290  :     }

  00731	e9 c2 01 00 00	 jmp	 $LN12@CombineEdg
$LN21@CombineEdg:

; 291  :     else
; 292  :     {
; 293  :       //Both sides connected to another node.
; 294  :       //Connect the node on the right side to the node on the left.
; 295  :       //Discard this node and the left link.
; 296  :       if (nodeRightA != nodeCenterA)

  00736	8b 55 f4	 mov	 edx, DWORD PTR _nodeRightA$[ebp]
  00739	3b 55 e8	 cmp	 edx, DWORD PTR _nodeCenterA$[ebp]
  0073c	0f 84 e9 00 00
	00		 je	 $LN24@CombineEdg

; 297  :       {
; 298  :         int length;
; 299  :         //The two edges go to another node (not ourselves)..
; 300  :         //m_links[indexLinkRight] = (LINKTYPE)indexJointLeft;
; 301  :         sd[nodeRightA][edgeRight].ns = (STOPNUM)nodeLeftA;

  00742	8b 45 f4	 mov	 eax, DWORD PTR _nodeRightA$[ebp]
  00745	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00748	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0074f	8b 45 ec	 mov	 eax, DWORD PTR _edgeRight$[ebp]
  00752	8a 4d f8	 mov	 cl, BYTE PTR _nodeLeftA$[ebp]
  00755	88 0c 42	 mov	 BYTE PTR [edx+eax*2], cl

; 302  :         ed[nodeRightA].e[edgeRight].ng = (STOPNUM)nodeLeftA;

  00758	8b 55 f4	 mov	 edx, DWORD PTR _nodeRightA$[ebp]
  0075b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0075e	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00762	8b 55 ec	 mov	 edx, DWORD PTR _edgeRight$[ebp]
  00765	8a 45 f8	 mov	 al, BYTE PTR _nodeLeftA$[ebp]
  00768	88 04 51	 mov	 BYTE PTR [ecx+edx*2], al

; 303  :         sd[nodeRightA][edgeRight].ne = (EDGENUM)edgeLeft;

  0076b	8b 4d f4	 mov	 ecx, DWORD PTR _nodeRightA$[ebp]
  0076e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00771	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00778	8b 4d ec	 mov	 ecx, DWORD PTR _edgeRight$[ebp]
  0077b	8a 55 f0	 mov	 dl, BYTE PTR _edgeLeft$[ebp]
  0077e	88 54 48 01	 mov	 BYTE PTR [eax+ecx*2+1], dl

; 304  :         sd[nodeLeftA][edgeLeft].ns   = (STOPNUM)nodeRightA;

  00782	8b 45 f8	 mov	 eax, DWORD PTR _nodeLeftA$[ebp]
  00785	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00788	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0078f	8b 45 f0	 mov	 eax, DWORD PTR _edgeLeft$[ebp]
  00792	8a 4d f4	 mov	 cl, BYTE PTR _nodeRightA$[ebp]
  00795	88 0c 42	 mov	 BYTE PTR [edx+eax*2], cl

; 305  :         ed[nodeLeftA].e[edgeLeft].ng = (STOPNUM)nodeRightA;

  00798	8b 55 f8	 mov	 edx, DWORD PTR _nodeLeftA$[ebp]
  0079b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0079e	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  007a2	8b 55 f0	 mov	 edx, DWORD PTR _edgeLeft$[ebp]
  007a5	8a 45 f4	 mov	 al, BYTE PTR _nodeRightA$[ebp]
  007a8	88 04 51	 mov	 BYTE PTR [ecx+edx*2], al

; 306  :         sd[nodeLeftA][edgeLeft].ne   = (EDGENUM)edgeRight;

  007ab	8b 4d f8	 mov	 ecx, DWORD PTR _nodeLeftA$[ebp]
  007ae	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007b1	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  007b8	8b 4d f0	 mov	 ecx, DWORD PTR _edgeLeft$[ebp]
  007bb	8a 55 ec	 mov	 dl, BYTE PTR _edgeRight$[ebp]
  007be	88 54 48 01	 mov	 BYTE PTR [eax+ecx*2+1], dl

; 307  :         length = ed[nodeCenterA].e[0].el + ed[nodeCenterA].e[1].el + 1;

  007c2	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  007c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007c8	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  007cc	b8 02 00 00 00	 mov	 eax, 2
  007d1	6b c8 00	 imul	 ecx, eax, 0
  007d4	0f b6 54 0a 01	 movzx	 edx, BYTE PTR [edx+ecx+1]
  007d9	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  007dc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007df	8d 44 c1 10	 lea	 eax, DWORD PTR [ecx+eax*8+16]
  007e3	b9 02 00 00 00	 mov	 ecx, 2
  007e8	c1 e1 00	 shl	 ecx, 0
  007eb	0f b6 44 08 01	 movzx	 eax, BYTE PTR [eax+ecx+1]
  007f0	8d 4c 02 01	 lea	 ecx, DWORD PTR [edx+eax+1]
  007f4	89 4d d8	 mov	 DWORD PTR _length$1[ebp], ecx

; 308  :         ed[nodeLeftA].e[edgeLeft].el   = (EDGELEN)length;

  007f7	8b 55 f8	 mov	 edx, DWORD PTR _nodeLeftA$[ebp]
  007fa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007fd	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00801	8b 55 f0	 mov	 edx, DWORD PTR _edgeLeft$[ebp]
  00804	8a 45 d8	 mov	 al, BYTE PTR _length$1[ebp]
  00807	88 44 51 01	 mov	 BYTE PTR [ecx+edx*2+1], al

; 309  :         ed[nodeRightA].e[edgeRight].el = (EDGELEN)length;

  0080b	8b 4d f4	 mov	 ecx, DWORD PTR _nodeRightA$[ebp]
  0080e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00811	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00815	8b 4d ec	 mov	 ecx, DWORD PTR _edgeRight$[ebp]
  00818	8a 55 d8	 mov	 dl, BYTE PTR _length$1[ebp]
  0081b	88 54 48 01	 mov	 BYTE PTR [eax+ecx*2+1], dl

; 310  :         //DeleteNode(nn);
; 311  :         return true;

  0081f	b0 01		 mov	 al, 1
  00821	e9 d4 00 00 00	 jmp	 $LN1@CombineEdg

; 312  :       }

  00826	e9 cd 00 00 00	 jmp	 $LN12@CombineEdg
$LN24@CombineEdg:

; 313  :       else
; 314  :       { // What we have here is a loop.  And we are the only node on the loop.
; 315  :         // An isolated loop
; 316  :         nd[nodeCenterA].ec = UNUSED;

  0082b	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  0082e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00831	c6 84 81 10 10
	00 00 ff	 mov	 BYTE PTR [ecx+eax*4+4112], 255 ; 000000ffH

; 317  :         sd[nodeCenterA][0].ns = LOOP;

  00839	8b 55 e8	 mov	 edx, DWORD PTR _nodeCenterA$[ebp]
  0083c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0083f	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00846	ba 02 00 00 00	 mov	 edx, 2
  0084b	6b c2 00	 imul	 eax, edx, 0
  0084e	c6 04 01 fe	 mov	 BYTE PTR [ecx+eax], 254	; 000000feH

; 318  :         sd[nodeCenterA][0].ne = UNUSED;

  00852	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  00855	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00858	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0085f	b9 02 00 00 00	 mov	 ecx, 2
  00864	6b d1 00	 imul	 edx, ecx, 0
  00867	c6 44 10 01 ff	 mov	 BYTE PTR [eax+edx+1], 255 ; 000000ffH

; 319  :         sd[nodeCenterA][1].Clear();

  0086c	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  0086f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00872	8d 8c c1 10 08
	00 00		 lea	 ecx, DWORD PTR [ecx+eax*8+2064]
  00879	ba 02 00 00 00	 mov	 edx, 2
  0087e	c1 e2 00	 shl	 edx, 0
  00881	03 ca		 add	 ecx, edx
  00883	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 320  :         ed[nodeCenterA].e[0].ng = LOOP;

  00888	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  0088b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0088e	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00892	b8 02 00 00 00	 mov	 eax, 2
  00897	6b c8 00	 imul	 ecx, eax, 0
  0089a	c6 04 0a fe	 mov	 BYTE PTR [edx+ecx], 254	; 000000feH

; 321  :         ed[nodeCenterA].e[0].el++;

  0089e	ba 02 00 00 00	 mov	 edx, 2
  008a3	6b c2 00	 imul	 eax, edx, 0
  008a6	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  008a9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  008ac	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  008b0	8a 54 01 01	 mov	 dl, BYTE PTR [ecx+eax+1]
  008b4	80 c2 01	 add	 dl, 1
  008b7	b8 02 00 00 00	 mov	 eax, 2
  008bc	6b c8 00	 imul	 ecx, eax, 0
  008bf	8b 45 e8	 mov	 eax, DWORD PTR _nodeCenterA$[ebp]
  008c2	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  008c5	8d 44 c6 10	 lea	 eax, DWORD PTR [esi+eax*8+16]
  008c9	88 54 08 01	 mov	 BYTE PTR [eax+ecx+1], dl

; 322  :         ed[nodeCenterA].e[1].Clear();

  008cd	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  008d0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  008d3	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  008d7	b8 02 00 00 00	 mov	 eax, 2
  008dc	c1 e0 00	 shl	 eax, 0
  008df	03 c8		 add	 ecx, eax
  008e1	e8 00 00 00 00	 call	 ?Clear@EDGE@@QAEXXZ	; EDGE::Clear

; 323  :         nd[nodeCenterA].ec = 0;

  008e6	8b 4d e8	 mov	 ecx, DWORD PTR _nodeCenterA$[ebp]
  008e9	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  008ec	c6 84 8a 10 10
	00 00 00	 mov	 BYTE PTR [edx+ecx*4+4112], 0

; 324  :         return false;

  008f4	32 c0		 xor	 al, al
  008f6	eb 02		 jmp	 SHORT $LN1@CombineEdg
$LN12@CombineEdg:

; 325  :       };
; 326  :     };
; 327  :   };
; 328  :   return true;

  008f8	b0 01		 mov	 al, 1
$LN1@CombineEdg:

; 329  : }

  008fa	5f		 pop	 edi
  008fb	5e		 pop	 esi
  008fc	83 c4 28	 add	 esp, 40			; 00000028H
  008ff	3b ec		 cmp	 ebp, esp
  00901	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00906	8b e5		 mov	 esp, ebp
  00908	5d		 pop	 ebp
  00909	c2 04 00	 ret	 4
?CombineEdges@CON@@QAE_NH@Z ENDP			; CON::CombineEdges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Simplify.cpp
_TEXT	SEGMENT
_nnA$ = -8						; size = 4
_this$ = -4						; size = 4
?AddNode@CON@@QAEXXZ PROC				; CON::AddNode
; _this$ = ecx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 27   :   //This is not something we do very often.
; 28   :   //We have to search for a place to put the new node.
; 29   :   int nnA;
; 30   :   for (nnA=0; nnA<MAX_NODES; nnA++)

  00017	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _nnA$[ebp], 0
  0001e	eb 09		 jmp	 SHORT $LN4@AddNode
$LN2@AddNode:
  00020	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  00023	83 c0 01	 add	 eax, 1
  00026	89 45 f8	 mov	 DWORD PTR _nnA$[ebp], eax
$LN4@AddNode:
  00029	83 7d f8 6e	 cmp	 DWORD PTR _nnA$[ebp], 110 ; 0000006eH
  0002d	0f 8d 07 01 00
	00		 jge	 $LN3@AddNode

; 31   :   {
; 32   :     if (   (nd[nnA].os >= m_numNode)
; 33   :         || (nd[nd[nnA].os].ix != nnA))

  00033	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00036	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00039	0f b6 84 8a 12
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4114]
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00046	7d 22		 jge	 SHORT $LN6@AddNode
  00048	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  0004b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	0f b6 8c 90 12
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4114]
  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	0f b6 84 8a 13
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4115]
  00061	3b 45 f8	 cmp	 eax, DWORD PTR _nnA$[ebp]
  00064	0f 84 cb 00 00
	00		 je	 $LN5@AddNode
$LN6@AddNode:

; 34   :     {
; 35   :       ed[nnA].Clear();

  0006a	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0006d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00070	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  00074	e8 00 00 00 00	 call	 ?Clear@EDGEDATA@@QAEXXZ	; EDGEDATA::Clear

; 36   :       sd[nnA][0].Clear();

  00079	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  0007c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007f	8d 8c c1 10 08
	00 00		 lea	 ecx, DWORD PTR [ecx+eax*8+2064]
  00086	ba 02 00 00 00	 mov	 edx, 2
  0008b	6b c2 00	 imul	 eax, edx, 0
  0008e	03 c8		 add	 ecx, eax
  00090	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 37   :       sd[nnA][1].Clear();

  00095	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  000a2	b8 02 00 00 00	 mov	 eax, 2
  000a7	c1 e0 00	 shl	 eax, 0
  000aa	03 c8		 add	 ecx, eax
  000ac	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 38   :       sd[nnA][2].Clear();

  000b1	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000b7	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  000be	b8 02 00 00 00	 mov	 eax, 2
  000c3	d1 e0		 shl	 eax, 1
  000c5	03 c8		 add	 ecx, eax
  000c7	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 39   :       sd[nnA][3].Clear();

  000cc	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  000cf	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d2	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  000d9	b8 02 00 00 00	 mov	 eax, 2
  000de	6b d0 03	 imul	 edx, eax, 3
  000e1	03 ca		 add	 ecx, edx
  000e3	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 40   :       nd[nnA].ec = UNUSED;

  000e8	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  000eb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ee	c6 84 81 10 10
	00 00 ff	 mov	 BYTE PTR [ecx+eax*4+4112], 255 ; 000000ffH

; 41   :       nd[nnA].gn = UNUSED;

  000f6	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  000f9	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000fc	c6 84 90 11 10
	00 00 ff	 mov	 BYTE PTR [eax+edx*4+4113], 255 ; 000000ffH

; 42   :       nd[nnA].os = (STOPNUM)m_numNode;

  00104	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00107	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0010a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0010d	8a 00		 mov	 al, BYTE PTR [eax]
  0010f	88 84 8a 12 10
	00 00		 mov	 BYTE PTR [edx+ecx*4+4114], al

; 43   :       nd[m_numNode].ix = (STOPNUM)nnA;

  00116	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00119	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011e	8a 4d f8	 mov	 cl, BYTE PTR _nnA$[ebp]
  00121	88 8c 90 13 10
	00 00		 mov	 BYTE PTR [eax+edx*4+4115], cl

; 44   :       m_numNode++;

  00128	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0012b	8b 02		 mov	 eax, DWORD PTR [edx]
  0012d	83 c0 01	 add	 eax, 1
  00130	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00133	89 01		 mov	 DWORD PTR [ecx], eax
$LN5@AddNode:

; 45   :     };
; 46   :   };

  00135	e9 e6 fe ff ff	 jmp	 $LN2@AddNode
$LN3@AddNode:

; 47   :   ImplementationError("No Room for Additional Node");

  0013a	68 00 00 00 00	 push	 OFFSET $SG225430
  0013f	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  00144	83 c4 04	 add	 esp, 4

; 48   : }

  00147	83 c4 08	 add	 esp, 8
  0014a	3b ec		 cmp	 ebp, esp
  0014c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c3		 ret	 0
?AddNode@CON@@QAEXXZ ENDP				; CON::AddNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Simplify.cpp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_nn$ = 8						; size = 4
?DeleteNode@CON@@QAEXH@Z PROC				; CON::DeleteNode
; _this$ = ecx

; 14   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 15   :   // You better have arranged that nothing points to
; 16   :   // the node being deleted.
; 17   :   m_numNode--;

  0000a	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	83 e9 01	 sub	 ecx, 1
  00012	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00015	89 0a		 mov	 DWORD PTR [edx], ecx

; 18   :   for (int i=nn; i<m_numNode; i++)

  00017	8b 45 08	 mov	 eax, DWORD PTR _nn$[ebp]
  0001a	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
  0001d	eb 09		 jmp	 SHORT $LN4@DeleteNode
$LN2@DeleteNode:
  0001f	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  00022	83 c1 01	 add	 ecx, 1
  00025	89 4d f8	 mov	 DWORD PTR _i$1[ebp], ecx
$LN4@DeleteNode:
  00028	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  0002e	3b 02		 cmp	 eax, DWORD PTR [edx]
  00030	7d 37		 jge	 SHORT $LN1@DeleteNode

; 19   :   {
; 20   :     nd[i].ix = nd[i+1].ix;

  00032	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  00035	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00038	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  0003b	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0003e	8a 84 86 17 10
	00 00		 mov	 al, BYTE PTR [esi+eax*4+4119]
  00045	88 84 8a 13 10
	00 00		 mov	 BYTE PTR [edx+ecx*4+4115], al

; 21   :     nd[nd[i].ix].os = (STOPNUM)i;

  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0004f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00052	0f b6 84 8a 13
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4115]
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8a 55 f8	 mov	 dl, BYTE PTR _i$1[ebp]
  00060	88 94 81 12 10
	00 00		 mov	 BYTE PTR [ecx+eax*4+4114], dl

; 22   :   };

  00067	eb b6		 jmp	 SHORT $LN2@DeleteNode
$LN1@DeleteNode:

; 23   : }

  00069	5e		 pop	 esi
  0006a	8b e5		 mov	 esp, ebp
  0006c	5d		 pop	 ebp
  0006d	c2 04 00	 ret	 4
?DeleteNode@CON@@QAEXH@Z ENDP				; CON::DeleteNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ?MoveEdge@CON@@QAEXHHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nnA$ = 8						; size = 4
_edgeFrom$ = 12						; size = 4
_edgeTo$ = 16						; size = 4
?MoveEdge@CON@@QAEXHHH@Z PROC				; CON::MoveEdge, COMDAT
; _this$ = ecx

; 250  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 251  :     sd[nnA][edgeTo]=sd[nnA][edgeFrom];

  0000e	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _edgeFrom$[ebp]
  0001e	66 8b 0c 42	 mov	 cx, WORD PTR [edx+eax*2]
  00022	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00025	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00028	8d 94 d0 10 08
	00 00		 lea	 edx, DWORD PTR [eax+edx*8+2064]
  0002f	8b 45 10	 mov	 eax, DWORD PTR _edgeTo$[ebp]
  00032	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx

; 252  :     ed[nnA].e[edgeTo]=ed[nnA].e[edgeFrom];

  00036	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00039	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0003c	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00040	8b 4d 0c	 mov	 ecx, DWORD PTR _edgeFrom$[ebp]
  00043	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00046	52		 push	 edx
  00047	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00051	8b 45 10	 mov	 eax, DWORD PTR _edgeTo$[ebp]
  00054	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  00057	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=

; 253  :     if (IS_A_NODE(sd[nnA][edgeTo].ns))

  0005c	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0005f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00062	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00069	8b 4d 10	 mov	 ecx, DWORD PTR _edgeTo$[ebp]
  0006c	0f b6 14 48	 movzx	 edx, BYTE PTR [eax+ecx*2]
  00070	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  00076	7d 3a		 jge	 SHORT $LN1@MoveEdge

; 254  :     {
; 255  :       sd[sd[nnA][edgeTo].ns][sd[nnA][edgeTo].ne].ne=(EDGENUM)edgeTo;

  00078	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  0007b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0007e	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00085	8b 45 10	 mov	 eax, DWORD PTR _edgeTo$[ebp]
  00088	0f b6 0c 42	 movzx	 ecx, BYTE PTR [edx+eax*2]
  0008c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008f	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00096	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00099	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009c	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  000a3	8b 55 10	 mov	 edx, DWORD PTR _edgeTo$[ebp]
  000a6	0f b6 4c 51 01	 movzx	 ecx, BYTE PTR [ecx+edx*2+1]
  000ab	8a 55 10	 mov	 dl, BYTE PTR _edgeTo$[ebp]
  000ae	88 54 48 01	 mov	 BYTE PTR [eax+ecx*2+1], dl
$LN1@MoveEdge:

; 256  :     };
; 257  :   };

  000b2	83 c4 04	 add	 esp, 4
  000b5	3b ec		 cmp	 ebp, esp
  000b7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 0c 00	 ret	 12			; 0000000cH
?MoveEdge@CON@@QAEXHHH@Z ENDP				; CON::MoveEdge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Simplify.cpp
_TEXT	SEGMENT
tv368 = -42						; size = 1
tv320 = -41						; size = 1
tv217 = -40						; size = 4
_enB$1 = -36						; size = 4
_e2$2 = -32						; size = 4
_e1$3 = -28						; size = 4
_ecB$ = -24						; size = 4
_ecA$ = -20						; size = 4
_edgeB$ = -16						; size = 4
_nnB$ = -12						; size = 4
_nnA$ = -8						; size = 4
_this$ = -4						; size = 4
_nn$ = 8						; size = 4
_en$ = 12						; size = 4
?DeleteEdge@CON@@QAEXHH@Z PROC				; CON::DeleteEdge
; _this$ = ecx

; 51   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000b	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 52   :   //The edge originates at node nn and may terminate
; 53   :   //anywhere: GROUND, DEADEND, another node, or even this node.
; 54   :   int nnA, nnB, edgeB, ecA, ecB;
; 55   :   nnA = nd[nn].ix;

  0001b	8b 45 08	 mov	 eax, DWORD PTR _nn$[ebp]
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  00029	89 55 f8	 mov	 DWORD PTR _nnA$[ebp], edx

; 56   :   nnB = sd[nnA][en].ns;

  0002c	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00039	8b 45 0c	 mov	 eax, DWORD PTR _en$[ebp]
  0003c	0f b6 0c 42	 movzx	 ecx, BYTE PTR [edx+eax*2]
  00040	89 4d f4	 mov	 DWORD PTR _nnB$[ebp], ecx

; 57   :   if (IS_A_NODE(nnB))

  00043	81 7d f4 f9 00
	00 00		 cmp	 DWORD PTR _nnB$[ebp], 249 ; 000000f9H
  0004a	0f 8d f0 03 00
	00		 jge	 $LN8@DeleteEdge

; 58   :   {
; 59   :     //We will delete it from the far node first.
; 60   :     edgeB = sd[nnA][en].ne;

  00050	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  00053	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00056	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  0005d	8b 55 0c	 mov	 edx, DWORD PTR _en$[ebp]
  00060	0f b6 44 51 01	 movzx	 eax, BYTE PTR [ecx+edx*2+1]
  00065	89 45 f0	 mov	 DWORD PTR _edgeB$[ebp], eax

; 61   :     if (nnB == nnA)

  00068	8b 4d f4	 mov	 ecx, DWORD PTR _nnB$[ebp]
  0006b	3b 4d f8	 cmp	 ecx, DWORD PTR _nnA$[ebp]
  0006e	0f 85 10 03 00
	00		 jne	 $LN9@DeleteEdge

; 62   :     {
; 63   :       if (nd[nnA].ec < 4)

  00074	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  00077	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0007a	0f b6 8c 90 10
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4112]
  00082	83 f9 04	 cmp	 ecx, 4
  00085	0f 8d d3 02 00
	00		 jge	 $LN10@DeleteEdge

; 64   :       {
; 65   :         if (nd[nnA].ec == 3)

  0008b	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  0008e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00091	0f b6 8c 90 10
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4112]
  00099	83 f9 03	 cmp	 ecx, 3
  0009c	0f 85 af 02 00
	00		 jne	 $LN11@DeleteEdge

; 66   :         {
; 67   :           int e1, e2, enB;
; 68   :           e1 = en;

  000a2	8b 55 0c	 mov	 edx, DWORD PTR _en$[ebp]
  000a5	89 55 e4	 mov	 DWORD PTR _e1$3[ebp], edx

; 69   :           e2 = edgeB;

  000a8	8b 45 f0	 mov	 eax, DWORD PTR _edgeB$[ebp]
  000ab	89 45 e0	 mov	 DWORD PTR _e2$2[ebp], eax

; 70   :           if (e1 > e2)

  000ae	8b 4d e4	 mov	 ecx, DWORD PTR _e1$3[ebp]
  000b1	3b 4d e0	 cmp	 ecx, DWORD PTR _e2$2[ebp]
  000b4	7e 0c		 jle	 SHORT $LN12@DeleteEdge

; 71   :           {
; 72   :             e1 = e2;

  000b6	8b 55 e0	 mov	 edx, DWORD PTR _e2$2[ebp]
  000b9	89 55 e4	 mov	 DWORD PTR _e1$3[ebp], edx

; 73   :             e2 = en;

  000bc	8b 45 0c	 mov	 eax, DWORD PTR _en$[ebp]
  000bf	89 45 e0	 mov	 DWORD PTR _e2$2[ebp], eax
$LN12@DeleteEdge:

; 74   :           };
; 75   :           sd[nnA][e2] = sd[nnA][2];

  000c2	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  000c5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000c8	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  000cf	b9 02 00 00 00	 mov	 ecx, 2
  000d4	d1 e1		 shl	 ecx, 1
  000d6	66 8b 14 08	 mov	 dx, WORD PTR [eax+ecx]
  000da	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  000dd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e0	8d 84 c1 10 08
	00 00		 lea	 eax, DWORD PTR [ecx+eax*8+2064]
  000e7	8b 4d e0	 mov	 ecx, DWORD PTR _e2$2[ebp]
  000ea	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 76   :           sd[nnA][2].Clear();

  000ee	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  000f1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f4	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  000fb	ba 02 00 00 00	 mov	 edx, 2
  00100	d1 e2		 shl	 edx, 1
  00102	03 ca		 add	 ecx, edx
  00104	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 77   :           ed[nnA].e[e2] = ed[nnA].e[2];

  00109	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00113	b8 02 00 00 00	 mov	 eax, 2
  00118	d1 e0		 shl	 eax, 1
  0011a	03 d0		 add	 edx, eax
  0011c	52		 push	 edx
  0011d	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00120	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00123	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00127	8b 4d e0	 mov	 ecx, DWORD PTR _e2$2[ebp]
  0012a	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  0012d	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=

; 78   :           ed[nnA].e[2].Clear();

  00132	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  00135	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00138	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  0013c	ba 02 00 00 00	 mov	 edx, 2
  00141	d1 e2		 shl	 edx, 1
  00143	03 ca		 add	 ecx, edx
  00145	e8 00 00 00 00	 call	 ?Clear@EDGE@@QAEXXZ	; EDGE::Clear

; 79   :           sd[nnA][e1] = sd[nnA][1];

  0014a	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  0014d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00157	b8 02 00 00 00	 mov	 eax, 2
  0015c	c1 e0 00	 shl	 eax, 0
  0015f	66 8b 0c 02	 mov	 cx, WORD PTR [edx+eax]
  00163	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  00166	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00169	8d 94 d0 10 08
	00 00		 lea	 edx, DWORD PTR [eax+edx*8+2064]
  00170	8b 45 e4	 mov	 eax, DWORD PTR _e1$3[ebp]
  00173	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx

; 80   :           sd[nnA][1].Clear();

  00177	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0017a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0017d	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  00184	b8 02 00 00 00	 mov	 eax, 2
  00189	c1 e0 00	 shl	 eax, 0
  0018c	03 c8		 add	 ecx, eax
  0018e	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 81   :           ed[nnA].e[e1] = ed[nnA].e[1];

  00193	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00196	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00199	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  0019d	b9 02 00 00 00	 mov	 ecx, 2
  001a2	c1 e1 00	 shl	 ecx, 0
  001a5	03 c1		 add	 eax, ecx
  001a7	50		 push	 eax
  001a8	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  001ab	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ae	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  001b2	8b 55 e4	 mov	 edx, DWORD PTR _e1$3[ebp]
  001b5	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  001b8	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=

; 82   :           ed[nnA].e[1].Clear();

  001bd	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	8d 4c c1 10	 lea	 ecx, DWORD PTR [ecx+eax*8+16]
  001c7	ba 02 00 00 00	 mov	 edx, 2
  001cc	c1 e2 00	 shl	 edx, 0
  001cf	03 ca		 add	 ecx, edx
  001d1	e8 00 00 00 00	 call	 ?Clear@EDGE@@QAEXXZ	; EDGE::Clear

; 83   :           nd[nnA].ec = 0;

  001d6	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  001d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001dc	c6 84 81 10 10
	00 00 00	 mov	 BYTE PTR [ecx+eax*4+4112], 0

; 84   :           // only edge 0 remains.
; 85   :           switch (sd[nnA][0].ns)

  001e4	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  001e7	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ea	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  001f1	ba 02 00 00 00	 mov	 edx, 2
  001f6	6b c2 00	 imul	 eax, edx, 0
  001f9	8a 0c 01	 mov	 cl, BYTE PTR [ecx+eax]
  001fc	88 4d d8	 mov	 BYTE PTR tv217[ebp], cl
  001ff	80 7d d8 f9	 cmp	 BYTE PTR tv217[ebp], 249 ; 000000f9H
  00203	74 0b		 je	 SHORT $LN13@DeleteEdge
  00205	80 7d d8 fa	 cmp	 BYTE PTR tv217[ebp], 250 ; 000000faH
  00209	74 61		 je	 SHORT $LN14@DeleteEdge
  0020b	e9 b8 00 00 00	 jmp	 $LN15@DeleteEdge
$LN13@DeleteEdge:

; 86   :           {
; 87   :           case DEADEND:
; 88   :             sd[nnA][0].ns = DE_DE;

  00210	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  00213	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00216	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  0021d	ba 02 00 00 00	 mov	 edx, 2
  00222	6b c2 00	 imul	 eax, edx, 0
  00225	c6 04 01 fb	 mov	 BYTE PTR [ecx+eax], 251	; 000000fbH

; 89   :             sd[nnA][0].ne = UNUSED;

  00229	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0022c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0022f	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00236	b9 02 00 00 00	 mov	 ecx, 2
  0023b	6b d1 00	 imul	 edx, ecx, 0
  0023e	c6 44 10 01 ff	 mov	 BYTE PTR [eax+edx+1], 255 ; 000000ffH

; 90   :             ed[nnA].e[0].ng = DE_DE;

  00243	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  00246	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00249	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  0024d	b8 02 00 00 00	 mov	 eax, 2
  00252	6b c8 00	 imul	 ecx, eax, 0
  00255	c6 04 0a fb	 mov	 BYTE PTR [edx+ecx], 251	; 000000fbH

; 91   :             nd[nnA].gn = UNUSED;

  00259	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  0025c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0025f	c6 84 90 11 10
	00 00 ff	 mov	 BYTE PTR [eax+edx*4+4113], 255 ; 000000ffH

; 92   :             break;

  00267	e9 e0 00 00 00	 jmp	 $LN2@DeleteEdge
$LN14@DeleteEdge:

; 93   :           case GROUND:
; 94   :             sd[nnA][0].ns = GND_GND;

  0026c	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0026f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00272	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00279	b9 02 00 00 00	 mov	 ecx, 2
  0027e	6b d1 00	 imul	 edx, ecx, 0
  00281	c6 04 10 fd	 mov	 BYTE PTR [eax+edx], 253	; 000000fdH

; 95   :             sd[nnA][0].ne = UNUSED;

  00285	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  00288	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0028b	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00292	b8 02 00 00 00	 mov	 eax, 2
  00297	6b c8 00	 imul	 ecx, eax, 0
  0029a	c6 44 0a 01 ff	 mov	 BYTE PTR [edx+ecx+1], 255 ; 000000ffH

; 96   :             ed[nnA].e[0].ng = GND_GND;

  0029f	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  002a2	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002a5	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  002a9	ba 02 00 00 00	 mov	 edx, 2
  002ae	6b c2 00	 imul	 eax, edx, 0
  002b1	c6 04 01 fd	 mov	 BYTE PTR [ecx+eax], 253	; 000000fdH

; 97   :             nd[nnA].gn = UNUSED;

  002b5	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  002b8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002bb	c6 84 8a 11 10
	00 00 ff	 mov	 BYTE PTR [edx+ecx*4+4113], 255 ; 000000ffH

; 98   :             break;

  002c3	e9 84 00 00 00	 jmp	 $LN2@DeleteEdge
$LN15@DeleteEdge:

; 99   :           default: //Must be a node out there.
; 100  :             //Change far node to point to dead-end and delete us.
; 101  :             nnB = sd[nnA][0].ns;

  002c8	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  002cb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ce	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  002d5	b8 02 00 00 00	 mov	 eax, 2
  002da	6b c8 00	 imul	 ecx, eax, 0
  002dd	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  002e1	89 55 f4	 mov	 DWORD PTR _nnB$[ebp], edx

; 102  :             enB = sd[nnA][0].ne;

  002e4	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  002e7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ea	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  002f1	b8 02 00 00 00	 mov	 eax, 2
  002f6	6b c8 00	 imul	 ecx, eax, 0
  002f9	0f b6 54 0a 01	 movzx	 edx, BYTE PTR [edx+ecx+1]
  002fe	89 55 dc	 mov	 DWORD PTR _enB$1[ebp], edx

; 103  :             sd[nnB][enB].ns = DEADEND;

  00301	8b 45 f4	 mov	 eax, DWORD PTR _nnB$[ebp]
  00304	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00307	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0030e	8b 45 dc	 mov	 eax, DWORD PTR _enB$1[ebp]
  00311	c6 04 42 f9	 mov	 BYTE PTR [edx+eax*2], 249 ; 000000f9H

; 104  :             sd[nnB][enB].ne = UNUSED;

  00315	8b 4d f4	 mov	 ecx, DWORD PTR _nnB$[ebp]
  00318	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0031b	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00322	8b 4d dc	 mov	 ecx, DWORD PTR _enB$1[ebp]
  00325	c6 44 48 01 ff	 mov	 BYTE PTR [eax+ecx*2+1], 255 ; 000000ffH

; 105  :             ed[nnB].e[0].ng = DEADEND;

  0032a	8b 55 f4	 mov	 edx, DWORD PTR _nnB$[ebp]
  0032d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00330	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00334	ba 02 00 00 00	 mov	 edx, 2
  00339	6b c2 00	 imul	 eax, edx, 0
  0033c	c6 04 01 f9	 mov	 BYTE PTR [ecx+eax], 249	; 000000f9H

; 106  :             DeleteNode(nn);

  00340	8b 4d 08	 mov	 ecx, DWORD PTR _nn$[ebp]
  00343	51		 push	 ecx
  00344	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00347	e8 00 00 00 00	 call	 ?DeleteNode@CON@@QAEXH@Z ; CON::DeleteNode
$LN2@DeleteEdge:

; 107  :           };
; 108  : #ifdef _CHECK
; 109  :           CheckEverything(0,m_numNode,false);
; 110  : #endif
; 111  :           return;

  0034c	e9 ab 01 00 00	 jmp	 $LN1@DeleteEdge
$LN11@DeleteEdge:

; 112  :         };
; 113  :         ImplementationError("Deleting looping edge");

  00351	68 00 00 00 00	 push	 OFFSET $SG225458
  00356	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  0035b	83 c4 04	 add	 esp, 4
$LN10@DeleteEdge:

; 114  :       };
; 115  :       if (edgeB < en)

  0035e	8b 55 f0	 mov	 edx, DWORD PTR _edgeB$[ebp]
  00361	3b 55 0c	 cmp	 edx, DWORD PTR _en$[ebp]
  00364	7d 1e		 jge	 SHORT $LN9@DeleteEdge

; 116  :       {
; 117  :         //swap so the larger edge is deleted first
; 118  :         edgeB = en;

  00366	8b 45 0c	 mov	 eax, DWORD PTR _en$[ebp]
  00369	89 45 f0	 mov	 DWORD PTR _edgeB$[ebp], eax

; 119  :         en = sd[nnA][en].ne;

  0036c	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0036f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00372	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00379	8b 4d 0c	 mov	 ecx, DWORD PTR _en$[ebp]
  0037c	0f b6 54 48 01	 movzx	 edx, BYTE PTR [eax+ecx*2+1]
  00381	89 55 0c	 mov	 DWORD PTR _en$[ebp], edx
$LN9@DeleteEdge:

; 120  :       };
; 121  :     };
; 122  :     ecB = --nd[nnB].ec;

  00384	8b 45 f4	 mov	 eax, DWORD PTR _nnB$[ebp]
  00387	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0038a	8a 94 81 10 10
	00 00		 mov	 dl, BYTE PTR [ecx+eax*4+4112]
  00391	80 ea 01	 sub	 dl, 1
  00394	88 55 d7	 mov	 BYTE PTR tv320[ebp], dl
  00397	8b 45 f4	 mov	 eax, DWORD PTR _nnB$[ebp]
  0039a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0039d	8a 55 d7	 mov	 dl, BYTE PTR tv320[ebp]
  003a0	88 94 81 10 10
	00 00		 mov	 BYTE PTR [ecx+eax*4+4112], dl
  003a7	0f b6 45 d7	 movzx	 eax, BYTE PTR tv320[ebp]
  003ab	89 45 e8	 mov	 DWORD PTR _ecB$[ebp], eax
$LN4@DeleteEdge:

; 123  :     while (edgeB < ecB) 

  003ae	8b 4d f0	 mov	 ecx, DWORD PTR _edgeB$[ebp]
  003b1	3b 4d e8	 cmp	 ecx, DWORD PTR _ecB$[ebp]
  003b4	7d 22		 jge	 SHORT $LN5@DeleteEdge

; 124  :     {
; 125  :       MoveEdge(nnB,edgeB+1,edgeB);

  003b6	8b 55 f0	 mov	 edx, DWORD PTR _edgeB$[ebp]
  003b9	52		 push	 edx
  003ba	8b 45 f0	 mov	 eax, DWORD PTR _edgeB$[ebp]
  003bd	83 c0 01	 add	 eax, 1
  003c0	50		 push	 eax
  003c1	8b 4d f4	 mov	 ecx, DWORD PTR _nnB$[ebp]
  003c4	51		 push	 ecx
  003c5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003c8	e8 00 00 00 00	 call	 ?MoveEdge@CON@@QAEXHHH@Z ; CON::MoveEdge

; 126  :       edgeB++;

  003cd	8b 55 f0	 mov	 edx, DWORD PTR _edgeB$[ebp]
  003d0	83 c2 01	 add	 edx, 1
  003d3	89 55 f0	 mov	 DWORD PTR _edgeB$[ebp], edx

; 127  :     };

  003d6	eb d6		 jmp	 SHORT $LN4@DeleteEdge
$LN5@DeleteEdge:

; 128  :     ed[nnB].e[ecB].Clear();

  003d8	8b 45 f4	 mov	 eax, DWORD PTR _nnB$[ebp]
  003db	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003de	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  003e2	8b 45 e8	 mov	 eax, DWORD PTR _ecB$[ebp]
  003e5	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  003e8	e8 00 00 00 00	 call	 ?Clear@EDGE@@QAEXXZ	; EDGE::Clear

; 129  :     sd[nnB][ecB].Clear();

  003ed	8b 4d f4	 mov	 ecx, DWORD PTR _nnB$[ebp]
  003f0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003f3	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  003fa	8b 4d e8	 mov	 ecx, DWORD PTR _ecB$[ebp]
  003fd	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  00400	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 130  :     if (ecB < 3) 

  00405	83 7d e8 03	 cmp	 DWORD PTR _ecB$[ebp], 3
  00409	7d 35		 jge	 SHORT $LN8@DeleteEdge

; 131  :     {
; 132  :       if (CombineEdges(nd[nnB].os))

  0040b	8b 55 f4	 mov	 edx, DWORD PTR _nnB$[ebp]
  0040e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00411	0f b6 8c 90 12
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4114]
  00419	51		 push	 ecx
  0041a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0041d	e8 00 00 00 00	 call	 ?CombineEdges@CON@@QAE_NH@Z ; CON::CombineEdges
  00422	0f b6 d0	 movzx	 edx, al
  00425	85 d2		 test	 edx, edx
  00427	74 17		 je	 SHORT $LN8@DeleteEdge

; 133  :       {
; 134  :         DeleteNode(nd[nnB].os);

  00429	8b 45 f4	 mov	 eax, DWORD PTR _nnB$[ebp]
  0042c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0042f	0f b6 94 81 12
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4114]
  00437	52		 push	 edx
  00438	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0043b	e8 00 00 00 00	 call	 ?DeleteNode@CON@@QAEXH@Z ; CON::DeleteNode
$LN8@DeleteEdge:

; 135  :       };
; 136  :     };
; 137  :   };
; 138  :   //Now delete the edge from the near node.
; 139  :   ecA = --nd[nnA].ec;

  00440	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  00443	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00446	8a 94 81 10 10
	00 00		 mov	 dl, BYTE PTR [ecx+eax*4+4112]
  0044d	80 ea 01	 sub	 dl, 1
  00450	88 55 d6	 mov	 BYTE PTR tv368[ebp], dl
  00453	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  00456	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00459	8a 55 d6	 mov	 dl, BYTE PTR tv368[ebp]
  0045c	88 94 81 10 10
	00 00		 mov	 BYTE PTR [ecx+eax*4+4112], dl
  00463	0f b6 45 d6	 movzx	 eax, BYTE PTR tv368[ebp]
  00467	89 45 ec	 mov	 DWORD PTR _ecA$[ebp], eax
$LN6@DeleteEdge:

; 140  :   while (en < ecA) 

  0046a	8b 4d 0c	 mov	 ecx, DWORD PTR _en$[ebp]
  0046d	3b 4d ec	 cmp	 ecx, DWORD PTR _ecA$[ebp]
  00470	7d 22		 jge	 SHORT $LN7@DeleteEdge

; 141  :   {
; 142  :     MoveEdge(nnA,en+1,en);

  00472	8b 55 0c	 mov	 edx, DWORD PTR _en$[ebp]
  00475	52		 push	 edx
  00476	8b 45 0c	 mov	 eax, DWORD PTR _en$[ebp]
  00479	83 c0 01	 add	 eax, 1
  0047c	50		 push	 eax
  0047d	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00480	51		 push	 ecx
  00481	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00484	e8 00 00 00 00	 call	 ?MoveEdge@CON@@QAEXHHH@Z ; CON::MoveEdge

; 143  :     en++;

  00489	8b 55 0c	 mov	 edx, DWORD PTR _en$[ebp]
  0048c	83 c2 01	 add	 edx, 1
  0048f	89 55 0c	 mov	 DWORD PTR _en$[ebp], edx

; 144  :   };

  00492	eb d6		 jmp	 SHORT $LN6@DeleteEdge
$LN7@DeleteEdge:

; 145  :   ed[nnA].e[ecA].Clear();

  00494	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  00497	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0049a	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  0049e	8b 45 ec	 mov	 eax, DWORD PTR _ecA$[ebp]
  004a1	8d 0c 42	 lea	 ecx, DWORD PTR [edx+eax*2]
  004a4	e8 00 00 00 00	 call	 ?Clear@EDGE@@QAEXXZ	; EDGE::Clear

; 146  :   sd[nnA][ecA].Clear();

  004a9	8b 4d f8	 mov	 ecx, DWORD PTR _nnA$[ebp]
  004ac	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004af	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  004b6	8b 4d ec	 mov	 ecx, DWORD PTR _ecA$[ebp]
  004b9	8d 0c 48	 lea	 ecx, DWORD PTR [eax+ecx*2]
  004bc	e8 00 00 00 00	 call	 ?Clear@STOPDATA@@QAEXXZ	; STOPDATA::Clear

; 147  :   if (ecA < 3) 

  004c1	83 7d ec 03	 cmp	 DWORD PTR _ecA$[ebp], 3
  004c5	7d 35		 jge	 SHORT $LN1@DeleteEdge

; 148  :   {
; 149  :     if (CombineEdges(nd[nnA].os))

  004c7	8b 55 f8	 mov	 edx, DWORD PTR _nnA$[ebp]
  004ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004cd	0f b6 8c 90 12
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4114]
  004d5	51		 push	 ecx
  004d6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004d9	e8 00 00 00 00	 call	 ?CombineEdges@CON@@QAE_NH@Z ; CON::CombineEdges
  004de	0f b6 d0	 movzx	 edx, al
  004e1	85 d2		 test	 edx, edx
  004e3	74 17		 je	 SHORT $LN1@DeleteEdge

; 150  :     {
; 151  :       DeleteNode(nd[nnA].os);

  004e5	8b 45 f8	 mov	 eax, DWORD PTR _nnA$[ebp]
  004e8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004eb	0f b6 94 81 12
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4114]
  004f3	52		 push	 edx
  004f4	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f7	e8 00 00 00 00	 call	 ?DeleteNode@CON@@QAEXH@Z ; CON::DeleteNode
$LN1@DeleteEdge:

; 152  :     };
; 153  :   };
; 154  : }

  004fc	5f		 pop	 edi
  004fd	83 c4 2c	 add	 esp, 44			; 0000002cH
  00500	3b ec		 cmp	 ebp, esp
  00502	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00507	8b e5		 mov	 esp, ebp
  00509	5d		 pop	 ebp
  0050a	c2 08 00	 ret	 8
?DeleteEdge@CON@@QAEXHH@Z ENDP				; CON::DeleteEdge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ?Clear@STOPDATA@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@STOPDATA@@QAEXXZ PROC				; STOPDATA::Clear, COMDAT
; _this$ = ecx

; 186  :   inline void Clear(void){*((ui16 *)this)=UNUSED2;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	66 89 01	 mov	 WORD PTR [ecx], ax
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Clear@STOPDATA@@QAEXXZ ENDP				; STOPDATA::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ?Clear@EDGEDATA@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@EDGEDATA@@QAEXXZ PROC				; EDGEDATA::Clear, COMDAT
; _this$ = ecx

; 175  :   inline void Clear(void){*((ui64 *)this)=UNUSED8;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	83 c9 ff	 or	 ecx, -1
  0000d	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c3		 ret	 0
?Clear@EDGEDATA@@QAEXXZ ENDP				; EDGEDATA::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ?Clear@EDGE@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@EDGE@@QAEXXZ PROC				; EDGE::Clear, COMDAT
; _this$ = ecx

; 156  :   inline void Clear(void){*((ui16 *)this)=UNUSED2;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	66 89 01	 mov	 WORD PTR [ecx], ax
  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?Clear@EDGE@@QAEXXZ ENDP				; EDGE::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ??4EDGE@@QAEXABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??4EDGE@@QAEXABU0@@Z PROC				; EDGE::operator=, COMDAT
; _this$ = ecx

; 153  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  :     *((ui16 *)(this)) = *((ui16 *)(&e));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _e$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 155  :   };

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4EDGE@@QAEXABU0@@Z ENDP				; EDGE::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Simplify.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Simplify.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
