; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

	TITLE	C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Debug\Canon.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??OEDGE@@QBE_NABU0@@Z				; EDGE::operator>
PUBLIC	??4EDGE@@QAEXABU0@@Z				; EDGE::operator=
PUBLIC	??MEDGEDATA@@QBE_NABU0@@Z			; EDGEDATA::operator<
PUBLIC	?SortEdgesByGroup@CON@@QAEXH@Z			; CON::SortEdgesByGroup
PUBLIC	?FixNeighborGroups@CON@@QAEXHH@Z		; CON::FixNeighborGroups
PUBLIC	?DoubleCheck@CON@@QAEXXZ			; CON::DoubleCheck
PUBLIC	?Canon@CON@@QAEXHH@Z				; CON::Canon
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?Canon@CON@@QAEXHH@Z
	DD	026H
	DD	0859H
voltbl	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Canon.cpp
_TEXT	SEGMENT
_l$1 = -3192						; size = 4
_f$2 = -3188						; size = 4
_gn0$3 = -3184						; size = 4
_gn$4 = -3180						; size = 4
_largestGroup$5 = -3176					; size = 4
_ts$6 = -3169						; size = 1
_ns$7 = -3168						; size = 4
_n$8 = -3164						; size = 4
_k$9 = -3160						; size = 4
_j$10 = -3156						; size = 4
_i$11 = -3152						; size = 4
_currentGroupNum$12 = -3148				; size = 4
_nn$13 = -3144						; size = 4
_l1$14 = -3140						; size = 4
_l$15 = -3136						; size = 4
_f$16 = -3132						; size = 4
_gn$17 = -3128						; size = 4
_groupNumbers$18 = -3120				; size = 1024
_lastNodeInGroup$19 = -2088				; size = 1024
_firstNodeInGroup$20 = -1056				; size = 1024
_numGroup$21 = -28					; size = 4
_arbitraryGn$22 = -24					; size = 4
_arbitrary$23 = -18					; size = 1
_brokenGroup$24 = -17					; size = 1
_nnA$ = -16						; size = 4
_nn$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_nnFirst$ = 8						; size = 4
_nnLast$ = 12						; size = 4
?Canon@CON@@QAEXHH@Z PROC				; CON::Canon
; _this$ = ecx

; 156  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 0c 00
	00		 sub	 esp, 3192		; 00000c78H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	51		 push	 ecx
  0000c	8d bd 88 f3 ff
	ff		 lea	 edi, DWORD PTR [ebp-3192]
  00012	b9 1e 03 00 00	 mov	 ecx, 798		; 0000031eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	59		 pop	 ecx
  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00024	33 c5		 xor	 eax, ebp
  00026	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00029	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 157  :   int nn, nnA;
; 158  : //  DUMP("Enter Canon",0,0,0,nnFirst,nnLast);
; 159  :   for (nn=nnFirst; nn<nnLast; nn++) 

  0002c	8b 45 08	 mov	 eax, DWORD PTR _nnFirst$[ebp]
  0002f	89 45 f4	 mov	 DWORD PTR _nn$[ebp], eax
  00032	eb 09		 jmp	 SHORT $LN4@Canon
$LN2@Canon:
  00034	8b 4d f4	 mov	 ecx, DWORD PTR _nn$[ebp]
  00037	83 c1 01	 add	 ecx, 1
  0003a	89 4d f4	 mov	 DWORD PTR _nn$[ebp], ecx
$LN4@Canon:
  0003d	8b 55 f4	 mov	 edx, DWORD PTR _nn$[ebp]
  00040	3b 55 0c	 cmp	 edx, DWORD PTR _nnLast$[ebp]
  00043	0f 8d 09 01 00
	00		 jge	 $LN3@Canon

; 160  :   {
; 161  :     nnA = nd[nn].ix;

  00049	8b 45 f4	 mov	 eax, DWORD PTR _nn$[ebp]
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  00057	89 55 f0	 mov	 DWORD PTR _nnA$[ebp], edx

; 162  :     nd[nnA].gn = 0;

  0005a	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  0005d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00060	c6 84 81 11 10
	00 00 00	 mov	 BYTE PTR [ecx+eax*4+4113], 0

; 163  :     if (IS_A_NODE(sd[nnA][0].ns)) ed[nnA].e[0].ng = 0; 

  00068	8b 55 f0	 mov	 edx, DWORD PTR _nnA$[ebp]
  0006b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00075	ba 02 00 00 00	 mov	 edx, 2
  0007a	6b c2 00	 imul	 eax, edx, 0
  0007d	0f b6 0c 01	 movzx	 ecx, BYTE PTR [ecx+eax]
  00081	81 f9 f9 00 00
	00		 cmp	 ecx, 249		; 000000f9H
  00087	7d 16		 jge	 SHORT $LN35@Canon
  00089	8b 55 f0	 mov	 edx, DWORD PTR _nnA$[ebp]
  0008c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008f	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00093	ba 02 00 00 00	 mov	 edx, 2
  00098	6b c2 00	 imul	 eax, edx, 0
  0009b	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
$LN35@Canon:

; 164  :     if (IS_A_NODE(sd[nnA][1].ns)) ed[nnA].e[1].ng = 0; 

  0009f	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  000a2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000a5	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  000ac	b9 02 00 00 00	 mov	 ecx, 2
  000b1	c1 e1 00	 shl	 ecx, 0
  000b4	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  000b8	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  000be	7d 16		 jge	 SHORT $LN36@Canon
  000c0	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  000c3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c6	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  000ca	b8 02 00 00 00	 mov	 eax, 2
  000cf	c1 e0 00	 shl	 eax, 0
  000d2	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
$LN36@Canon:

; 165  :     if (IS_A_NODE(sd[nnA][2].ns)) ed[nnA].e[2].ng = 0; 

  000d6	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  000d9	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000dc	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  000e3	b9 02 00 00 00	 mov	 ecx, 2
  000e8	d1 e1		 shl	 ecx, 1
  000ea	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  000ee	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  000f4	7d 15		 jge	 SHORT $LN37@Canon
  000f6	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  000f9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000fc	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00100	b8 02 00 00 00	 mov	 eax, 2
  00105	d1 e0		 shl	 eax, 1
  00107	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
$LN37@Canon:

; 166  :     if (IS_A_NODE(sd[nnA][3].ns)) ed[nnA].e[3].ng = 0; 

  0010b	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0010e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00111	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00118	b9 02 00 00 00	 mov	 ecx, 2
  0011d	6b d1 03	 imul	 edx, ecx, 3
  00120	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00124	3d f9 00 00 00	 cmp	 eax, 249		; 000000f9H
  00129	7d 16		 jge	 SHORT $LN38@Canon
  0012b	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0012e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00131	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00135	b9 02 00 00 00	 mov	 ecx, 2
  0013a	6b d1 03	 imul	 edx, ecx, 3
  0013d	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0
$LN38@Canon:

; 167  :     SortEdgesByGroup(nnA);

  00141	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  00144	50		 push	 eax
  00145	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00148	e8 00 00 00 00	 call	 ?SortEdgesByGroup@CON@@QAEXH@Z ; CON::SortEdgesByGroup

; 168  :   };

  0014d	e9 e2 fe ff ff	 jmp	 $LN2@Canon
$LN3@Canon:

; 169  : //  DUMP("After Sorting Edges",0,0,0,nnFirst,nnLast);
; 170  :   {
; 171  :     bool brokenGroup, arbitrary;
; 172  :     int arbitraryGn;
; 173  :     int numGroup;
; 174  :     unsigned int firstNodeInGroup[256];
; 175  :     unsigned int lastNodeInGroup[256];
; 176  :     int groupNumbers[256];
; 177  :     firstNodeInGroup[0] = nnFirst;

  00152	b9 04 00 00 00	 mov	 ecx, 4
  00157	6b d1 00	 imul	 edx, ecx, 0
  0015a	8b 45 08	 mov	 eax, DWORD PTR _nnFirst$[ebp]
  0015d	89 84 15 e0 fb
	ff ff		 mov	 DWORD PTR _firstNodeInGroup$20[ebp+edx], eax

; 178  :     lastNodeInGroup[0] = nnLast-1;

  00164	8b 4d 0c	 mov	 ecx, DWORD PTR _nnLast$[ebp]
  00167	83 e9 01	 sub	 ecx, 1
  0016a	ba 04 00 00 00	 mov	 edx, 4
  0016f	6b c2 00	 imul	 eax, edx, 0
  00172	89 8c 05 d8 f7
	ff ff		 mov	 DWORD PTR _lastNodeInGroup$19[ebp+eax], ecx

; 179  :     numGroup = 1;

  00179	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR _numGroup$21[ebp], 1

; 180  :     //There.  Everything initialized.  Now repeat for 
; 181  :     //each group in an attempt to break the groups into
; 182  :     //smaller groups.
; 183  :     for (arbitrary=false, arbitraryGn=-1; numGroup>0; arbitrary=true)

  00180	c6 45 ee 00	 mov	 BYTE PTR _arbitrary$23[ebp], 0
  00184	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _arbitraryGn$22[ebp], -1
  0018b	eb 04		 jmp	 SHORT $LN7@Canon
$LN5@Canon:
  0018d	c6 45 ee 01	 mov	 BYTE PTR _arbitrary$23[ebp], 1
$LN7@Canon:
  00191	83 7d e4 00	 cmp	 DWORD PTR _numGroup$21[ebp], 0
  00195	0f 8e ab 06 00
	00		 jle	 $LN1@Canon
$LN10@Canon:

; 184  :     {
; 185  :       do
; 186  :       {
; 187  :         brokenGroup = false;

  0019b	c6 45 ef 00	 mov	 BYTE PTR _brokenGroup$24[ebp], 0

; 188  :         for (int gn=0; gn<numGroup; gn++)

  0019f	c7 85 c8 f3 ff
	ff 00 00 00 00	 mov	 DWORD PTR _gn$17[ebp], 0
  001a9	eb 0f		 jmp	 SHORT $LN13@Canon
$LN11@Canon:
  001ab	8b 8d c8 f3 ff
	ff		 mov	 ecx, DWORD PTR _gn$17[ebp]
  001b1	83 c1 01	 add	 ecx, 1
  001b4	89 8d c8 f3 ff
	ff		 mov	 DWORD PTR _gn$17[ebp], ecx
$LN13@Canon:
  001ba	8b 95 c8 f3 ff
	ff		 mov	 edx, DWORD PTR _gn$17[ebp]
  001c0	3b 55 e4	 cmp	 edx, DWORD PTR _numGroup$21[ebp]
  001c3	0f 8d 05 05 00
	00		 jge	 $LN8@Canon

; 189  :         {
; 190  :           // Process one group.  See if we can break it into
; 191  :           // two or more parts.
; 192  :           //
; 193  :           int f, l, l1, nn, currentGroupNum;
; 194  :           f = firstNodeInGroup[gn];

  001c9	8b 85 c8 f3 ff
	ff		 mov	 eax, DWORD PTR _gn$17[ebp]
  001cf	8b 8c 85 e0 fb
	ff ff		 mov	 ecx, DWORD PTR _firstNodeInGroup$20[ebp+eax*4]
  001d6	89 8d c4 f3 ff
	ff		 mov	 DWORD PTR _f$16[ebp], ecx

; 195  :           l = lastNodeInGroup[gn];

  001dc	8b 95 c8 f3 ff
	ff		 mov	 edx, DWORD PTR _gn$17[ebp]
  001e2	8b 84 95 d8 f7
	ff ff		 mov	 eax, DWORD PTR _lastNodeInGroup$19[ebp+edx*4]
  001e9	89 85 c0 f3 ff
	ff		 mov	 DWORD PTR _l$15[ebp], eax

; 196  :           if (f == l)

  001ef	8b 8d c4 f3 ff
	ff		 mov	 ecx, DWORD PTR _f$16[ebp]
  001f5	3b 8d c0 f3 ff
	ff		 cmp	 ecx, DWORD PTR _l$15[ebp]
  001fb	75 52		 jne	 SHORT $LN39@Canon

; 197  :           {
; 198  :             numGroup--;

  001fd	8b 55 e4	 mov	 edx, DWORD PTR _numGroup$21[ebp]
  00200	83 ea 01	 sub	 edx, 1
  00203	89 55 e4	 mov	 DWORD PTR _numGroup$21[ebp], edx

; 199  :             firstNodeInGroup[gn] = firstNodeInGroup[numGroup];

  00206	8b 85 c8 f3 ff
	ff		 mov	 eax, DWORD PTR _gn$17[ebp]
  0020c	8b 4d e4	 mov	 ecx, DWORD PTR _numGroup$21[ebp]
  0020f	8b 94 8d e0 fb
	ff ff		 mov	 edx, DWORD PTR _firstNodeInGroup$20[ebp+ecx*4]
  00216	89 94 85 e0 fb
	ff ff		 mov	 DWORD PTR _firstNodeInGroup$20[ebp+eax*4], edx

; 200  :             lastNodeInGroup[gn] = lastNodeInGroup[numGroup];

  0021d	8b 85 c8 f3 ff
	ff		 mov	 eax, DWORD PTR _gn$17[ebp]
  00223	8b 4d e4	 mov	 ecx, DWORD PTR _numGroup$21[ebp]
  00226	8b 94 8d d8 f7
	ff ff		 mov	 edx, DWORD PTR _lastNodeInGroup$19[ebp+ecx*4]
  0022d	89 94 85 d8 f7
	ff ff		 mov	 DWORD PTR _lastNodeInGroup$19[ebp+eax*4], edx

; 201  :             gn--;

  00234	8b 85 c8 f3 ff
	ff		 mov	 eax, DWORD PTR _gn$17[ebp]
  0023a	83 e8 01	 sub	 eax, 1
  0023d	89 85 c8 f3 ff
	ff		 mov	 DWORD PTR _gn$17[ebp], eax

; 202  :             arbitraryGn = -1;

  00243	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _arbitraryGn$22[ebp], -1

; 203  :             continue;

  0024a	e9 5c ff ff ff	 jmp	 $LN11@Canon
$LN39@Canon:

; 204  :           };
; 205  :           l1 = l+1;

  0024f	8b 8d c0 f3 ff
	ff		 mov	 ecx, DWORD PTR _l$15[ebp]
  00255	83 c1 01	 add	 ecx, 1
  00258	89 8d bc f3 ff
	ff		 mov	 DWORD PTR _l1$14[ebp], ecx

; 206  :           //First we need to sort the nodes in this group. 
; 207  :           {
; 208  :             int i, j, k, n, ns;
; 209  :             n = l + 1 - f;

  0025e	8b 95 c0 f3 ff
	ff		 mov	 edx, DWORD PTR _l$15[ebp]
  00264	83 c2 01	 add	 edx, 1
  00267	2b 95 c4 f3 ff
	ff		 sub	 edx, DWORD PTR _f$16[ebp]
  0026d	89 95 a4 f3 ff
	ff		 mov	 DWORD PTR _n$8[ebp], edx

; 210  :             for (ns = n/2; ns>0; ns/=2)

  00273	8b 85 a4 f3 ff
	ff		 mov	 eax, DWORD PTR _n$8[ebp]
  00279	99		 cdq
  0027a	2b c2		 sub	 eax, edx
  0027c	d1 f8		 sar	 eax, 1
  0027e	89 85 a0 f3 ff
	ff		 mov	 DWORD PTR _ns$7[ebp], eax
  00284	eb 11		 jmp	 SHORT $LN16@Canon
$LN14@Canon:
  00286	8b 85 a0 f3 ff
	ff		 mov	 eax, DWORD PTR _ns$7[ebp]
  0028c	99		 cdq
  0028d	2b c2		 sub	 eax, edx
  0028f	d1 f8		 sar	 eax, 1
  00291	89 85 a0 f3 ff
	ff		 mov	 DWORD PTR _ns$7[ebp], eax
$LN16@Canon:
  00297	83 bd a0 f3 ff
	ff 00		 cmp	 DWORD PTR _ns$7[ebp], 0
  0029e	0f 8e dc 01 00
	00		 jle	 $LN15@Canon

; 211  :             {
; 212  :               for (i=f; i<f+ns; i++)

  002a4	8b 85 c4 f3 ff
	ff		 mov	 eax, DWORD PTR _f$16[ebp]
  002aa	89 85 b0 f3 ff
	ff		 mov	 DWORD PTR _i$11[ebp], eax
  002b0	eb 0f		 jmp	 SHORT $LN19@Canon
$LN17@Canon:
  002b2	8b 8d b0 f3 ff
	ff		 mov	 ecx, DWORD PTR _i$11[ebp]
  002b8	83 c1 01	 add	 ecx, 1
  002bb	89 8d b0 f3 ff
	ff		 mov	 DWORD PTR _i$11[ebp], ecx
$LN19@Canon:
  002c1	8b 95 c4 f3 ff
	ff		 mov	 edx, DWORD PTR _f$16[ebp]
  002c7	03 95 a0 f3 ff
	ff		 add	 edx, DWORD PTR _ns$7[ebp]
  002cd	39 95 b0 f3 ff
	ff		 cmp	 DWORD PTR _i$11[ebp], edx
  002d3	0f 8d a2 01 00
	00		 jge	 $LN18@Canon

; 213  :               {
; 214  :                 for (j=i; j<=l-ns; j+=ns)

  002d9	8b 85 b0 f3 ff
	ff		 mov	 eax, DWORD PTR _i$11[ebp]
  002df	89 85 ac f3 ff
	ff		 mov	 DWORD PTR _j$10[ebp], eax
  002e5	eb 12		 jmp	 SHORT $LN22@Canon
$LN20@Canon:
  002e7	8b 8d ac f3 ff
	ff		 mov	 ecx, DWORD PTR _j$10[ebp]
  002ed	03 8d a0 f3 ff
	ff		 add	 ecx, DWORD PTR _ns$7[ebp]
  002f3	89 8d ac f3 ff
	ff		 mov	 DWORD PTR _j$10[ebp], ecx
$LN22@Canon:
  002f9	8b 95 c0 f3 ff
	ff		 mov	 edx, DWORD PTR _l$15[ebp]
  002ff	2b 95 a0 f3 ff
	ff		 sub	 edx, DWORD PTR _ns$7[ebp]
  00305	39 95 ac f3 ff
	ff		 cmp	 DWORD PTR _j$10[ebp], edx
  0030b	0f 8f 65 01 00
	00		 jg	 $LN21@Canon

; 215  :                 {
; 216  :                   if (ed[nd[j].ix] < ed[nd[j+ns].ix])

  00311	8b 85 ac f3 ff
	ff		 mov	 eax, DWORD PTR _j$10[ebp]
  00317	03 85 a0 f3 ff
	ff		 add	 eax, DWORD PTR _ns$7[ebp]
  0031d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00320	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  00328	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0032b	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  0032f	51		 push	 ecx
  00330	8b 95 ac f3 ff
	ff		 mov	 edx, DWORD PTR _j$10[ebp]
  00336	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00339	0f b6 8c 90 13
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4115]
  00341	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00344	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  00348	e8 00 00 00 00	 call	 ??MEDGEDATA@@QBE_NABU0@@Z ; EDGEDATA::operator<
  0034d	0f b6 c0	 movzx	 eax, al
  00350	85 c0		 test	 eax, eax
  00352	0f 84 19 01 00
	00		 je	 $LN40@Canon

; 217  :                   {
; 218  :                     k=j;

  00358	8b 8d ac f3 ff
	ff		 mov	 ecx, DWORD PTR _j$10[ebp]
  0035e	89 8d a8 f3 ff
	ff		 mov	 DWORD PTR _k$9[ebp], ecx
$LN25@Canon:

; 219  :                     do
; 220  :                     {
; 221  :                       SwapNode(k, k+ns);

  00364	8b 95 a8 f3 ff
	ff		 mov	 edx, DWORD PTR _k$9[ebp]
  0036a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0036d	8a 8c 90 13 10
	00 00		 mov	 cl, BYTE PTR [eax+edx*4+4115]
  00374	88 8d 9f f3 ff
	ff		 mov	 BYTE PTR _ts$6[ebp], cl
  0037a	8b 95 a8 f3 ff
	ff		 mov	 edx, DWORD PTR _k$9[ebp]
  00380	03 95 a0 f3 ff
	ff		 add	 edx, DWORD PTR _ns$7[ebp]
  00386	8b 85 a8 f3 ff
	ff		 mov	 eax, DWORD PTR _k$9[ebp]
  0038c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0038f	8b 75 f8	 mov	 esi, DWORD PTR _this$[ebp]
  00392	8a 94 96 13 10
	00 00		 mov	 dl, BYTE PTR [esi+edx*4+4115]
  00399	88 94 81 13 10
	00 00		 mov	 BYTE PTR [ecx+eax*4+4115], dl
  003a0	8b 85 a8 f3 ff
	ff		 mov	 eax, DWORD PTR _k$9[ebp]
  003a6	03 85 a0 f3 ff
	ff		 add	 eax, DWORD PTR _ns$7[ebp]
  003ac	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003af	8a 95 9f f3 ff
	ff		 mov	 dl, BYTE PTR _ts$6[ebp]
  003b5	88 94 81 13 10
	00 00		 mov	 BYTE PTR [ecx+eax*4+4115], dl
  003bc	8b 85 a8 f3 ff
	ff		 mov	 eax, DWORD PTR _k$9[ebp]
  003c2	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003c5	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  003cd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003d0	8a 8d a8 f3 ff
	ff		 mov	 cl, BYTE PTR _k$9[ebp]
  003d6	88 8c 90 12 10
	00 00		 mov	 BYTE PTR [eax+edx*4+4114], cl
  003dd	8b 95 a8 f3 ff
	ff		 mov	 edx, DWORD PTR _k$9[ebp]
  003e3	03 95 a0 f3 ff
	ff		 add	 edx, DWORD PTR _ns$7[ebp]
  003e9	8b 85 a8 f3 ff
	ff		 mov	 eax, DWORD PTR _k$9[ebp]
  003ef	03 85 a0 f3 ff
	ff		 add	 eax, DWORD PTR _ns$7[ebp]
  003f5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003f8	0f b6 84 81 13
	10 00 00	 movzx	 eax, BYTE PTR [ecx+eax*4+4115]
  00400	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00403	88 94 81 12 10
	00 00		 mov	 BYTE PTR [ecx+eax*4+4114], dl

; 222  :                       k-=ns;

  0040a	8b 95 a8 f3 ff
	ff		 mov	 edx, DWORD PTR _k$9[ebp]
  00410	2b 95 a0 f3 ff
	ff		 sub	 edx, DWORD PTR _ns$7[ebp]
  00416	89 95 a8 f3 ff
	ff		 mov	 DWORD PTR _k$9[ebp], edx

; 223  :                     } while ((k>=(signed)i) && (ed[nd[k].ix] < ed[nd[k+ns].ix]));

  0041c	8b 85 a8 f3 ff
	ff		 mov	 eax, DWORD PTR _k$9[ebp]
  00422	3b 85 b0 f3 ff
	ff		 cmp	 eax, DWORD PTR _i$11[ebp]
  00428	7c 47		 jl	 SHORT $LN40@Canon
  0042a	8b 8d a8 f3 ff
	ff		 mov	 ecx, DWORD PTR _k$9[ebp]
  00430	03 8d a0 f3 ff
	ff		 add	 ecx, DWORD PTR _ns$7[ebp]
  00436	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00439	0f b6 84 8a 13
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4115]
  00441	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00444	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00448	52		 push	 edx
  00449	8b 85 a8 f3 ff
	ff		 mov	 eax, DWORD PTR _k$9[ebp]
  0044f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00452	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  0045a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0045d	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00461	e8 00 00 00 00	 call	 ??MEDGEDATA@@QBE_NABU0@@Z ; EDGEDATA::operator<
  00466	0f b6 c8	 movzx	 ecx, al
  00469	85 c9		 test	 ecx, ecx
  0046b	0f 85 f3 fe ff
	ff		 jne	 $LN25@Canon
$LN40@Canon:

; 224  :                   };
; 225  :                 };

  00471	e9 71 fe ff ff	 jmp	 $LN20@Canon
$LN21@Canon:

; 226  :               };

  00476	e9 37 fe ff ff	 jmp	 $LN17@Canon
$LN18@Canon:

; 227  :             };

  0047b	e9 06 fe ff ff	 jmp	 $LN14@Canon
$LN15@Canon:

; 228  :           };
; 229  : 
; 230  : //          DUMP("Canon process sorted group",gn,0,0,firstNodeInGroup[gn],lastNodeInGroup[gn]+1);
; 231  :           // Assign new group numbers.
; 232  :           currentGroupNum = f-nnFirst;

  00480	8b 95 c4 f3 ff
	ff		 mov	 edx, DWORD PTR _f$16[ebp]
  00486	2b 55 08	 sub	 edx, DWORD PTR _nnFirst$[ebp]
  00489	89 95 b4 f3 ff
	ff		 mov	 DWORD PTR _currentGroupNum$12[ebp], edx

; 233  :           for (nn=f+1; nn<=l; nn++)

  0048f	8b 85 c4 f3 ff
	ff		 mov	 eax, DWORD PTR _f$16[ebp]
  00495	83 c0 01	 add	 eax, 1
  00498	89 85 b8 f3 ff
	ff		 mov	 DWORD PTR _nn$13[ebp], eax
  0049e	eb 0f		 jmp	 SHORT $LN28@Canon
$LN26@Canon:
  004a0	8b 8d b8 f3 ff
	ff		 mov	 ecx, DWORD PTR _nn$13[ebp]
  004a6	83 c1 01	 add	 ecx, 1
  004a9	89 8d b8 f3 ff
	ff		 mov	 DWORD PTR _nn$13[ebp], ecx
$LN28@Canon:
  004af	8b 95 b8 f3 ff
	ff		 mov	 edx, DWORD PTR _nn$13[ebp]
  004b5	3b 95 c0 f3 ff
	ff		 cmp	 edx, DWORD PTR _l$15[ebp]
  004bb	0f 8f 90 00 00
	00		 jg	 $LN27@Canon

; 234  :           {
; 235  :             if (ed[nd[nn].ix] < ed[nd[currentGroupNum+nnFirst].ix]) 

  004c1	8b 85 b4 f3 ff
	ff		 mov	 eax, DWORD PTR _currentGroupNum$12[ebp]
  004c7	03 45 08	 add	 eax, DWORD PTR _nnFirst$[ebp]
  004ca	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  004cd	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  004d5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004d8	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  004dc	51		 push	 ecx
  004dd	8b 95 b8 f3 ff
	ff		 mov	 edx, DWORD PTR _nn$13[ebp]
  004e3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004e6	0f b6 8c 90 13
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4115]
  004ee	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  004f1	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  004f5	e8 00 00 00 00	 call	 ??MEDGEDATA@@QBE_NABU0@@Z ; EDGEDATA::operator<
  004fa	0f b6 c0	 movzx	 eax, al
  004fd	85 c0		 test	 eax, eax
  004ff	74 0f		 je	 SHORT $LN42@Canon

; 236  :             {
; 237  :               currentGroupNum = nn-nnFirst; 

  00501	8b 8d b8 f3 ff
	ff		 mov	 ecx, DWORD PTR _nn$13[ebp]
  00507	2b 4d 08	 sub	 ecx, DWORD PTR _nnFirst$[ebp]
  0050a	89 8d b4 f3 ff
	ff		 mov	 DWORD PTR _currentGroupNum$12[ebp], ecx
$LN42@Canon:

; 238  :               //brokenGroup = true;
; 239  :             };
; 240  :             groupNumbers[nn] = currentGroupNum;

  00510	8b 95 b8 f3 ff
	ff		 mov	 edx, DWORD PTR _nn$13[ebp]
  00516	8b 85 b4 f3 ff
	ff		 mov	 eax, DWORD PTR _currentGroupNum$12[ebp]
  0051c	89 84 95 d0 f3
	ff ff		 mov	 DWORD PTR _groupNumbers$18[ebp+edx*4], eax

; 241  :             if (!arbitrary) nd[nd[nn].ix].gn = (GROUPNUM)currentGroupNum;

  00523	0f b6 4d ee	 movzx	 ecx, BYTE PTR _arbitrary$23[ebp]
  00527	85 c9		 test	 ecx, ecx
  00529	75 21		 jne	 SHORT $LN43@Canon
  0052b	8b 95 b8 f3 ff
	ff		 mov	 edx, DWORD PTR _nn$13[ebp]
  00531	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00534	0f b6 8c 90 13
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4115]
  0053c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0053f	8a 85 b4 f3 ff
	ff		 mov	 al, BYTE PTR _currentGroupNum$12[ebp]
  00545	88 84 8a 11 10
	00 00		 mov	 BYTE PTR [edx+ecx*4+4113], al
$LN43@Canon:

; 242  :           };

  0054c	e9 4f ff ff ff	 jmp	 $LN26@Canon
$LN27@Canon:

; 243  :           // Now we update our neighbors and create new groups
; 244  :           currentGroupNum = f-nnFirst;

  00551	8b 8d c4 f3 ff
	ff		 mov	 ecx, DWORD PTR _f$16[ebp]
  00557	2b 4d 08	 sub	 ecx, DWORD PTR _nnFirst$[ebp]
  0055a	89 8d b4 f3 ff
	ff		 mov	 DWORD PTR _currentGroupNum$12[ebp], ecx

; 245  :           for (nn=f+1; nn<=l; nn++)

  00560	8b 95 c4 f3 ff
	ff		 mov	 edx, DWORD PTR _f$16[ebp]
  00566	83 c2 01	 add	 edx, 1
  00569	89 95 b8 f3 ff
	ff		 mov	 DWORD PTR _nn$13[ebp], edx
  0056f	eb 0f		 jmp	 SHORT $LN31@Canon
$LN29@Canon:
  00571	8b 85 b8 f3 ff
	ff		 mov	 eax, DWORD PTR _nn$13[ebp]
  00577	83 c0 01	 add	 eax, 1
  0057a	89 85 b8 f3 ff
	ff		 mov	 DWORD PTR _nn$13[ebp], eax
$LN31@Canon:
  00580	8b 8d b8 f3 ff
	ff		 mov	 ecx, DWORD PTR _nn$13[ebp]
  00586	3b 8d c0 f3 ff
	ff		 cmp	 ecx, DWORD PTR _l$15[ebp]
  0058c	0f 8f ce 00 00
	00		 jg	 $LN30@Canon

; 246  :           {
; 247  :             if (groupNumbers[nn] != currentGroupNum)

  00592	8b 95 b8 f3 ff
	ff		 mov	 edx, DWORD PTR _nn$13[ebp]
  00598	8b 84 95 d0 f3
	ff ff		 mov	 eax, DWORD PTR _groupNumbers$18[ebp+edx*4]
  0059f	3b 85 b4 f3 ff
	ff		 cmp	 eax, DWORD PTR _currentGroupNum$12[ebp]
  005a5	74 74		 je	 SHORT $LN44@Canon

; 248  :             {
; 249  :               //Move the previous group to a new group unless it
; 250  :               //consists of a single node;
; 251  :               if (currentGroupNum != nn-nnFirst-1)

  005a7	8b 8d b8 f3 ff
	ff		 mov	 ecx, DWORD PTR _nn$13[ebp]
  005ad	2b 4d 08	 sub	 ecx, DWORD PTR _nnFirst$[ebp]
  005b0	83 e9 01	 sub	 ecx, 1
  005b3	39 8d b4 f3 ff
	ff		 cmp	 DWORD PTR _currentGroupNum$12[ebp], ecx
  005b9	74 33		 je	 SHORT $LN45@Canon

; 252  :               {
; 253  :                 firstNodeInGroup[numGroup] = firstNodeInGroup[gn];

  005bb	8b 55 e4	 mov	 edx, DWORD PTR _numGroup$21[ebp]
  005be	8b 85 c8 f3 ff
	ff		 mov	 eax, DWORD PTR _gn$17[ebp]
  005c4	8b 8c 85 e0 fb
	ff ff		 mov	 ecx, DWORD PTR _firstNodeInGroup$20[ebp+eax*4]
  005cb	89 8c 95 e0 fb
	ff ff		 mov	 DWORD PTR _firstNodeInGroup$20[ebp+edx*4], ecx

; 254  :                 lastNodeInGroup[numGroup] = nn-1;

  005d2	8b 95 b8 f3 ff
	ff		 mov	 edx, DWORD PTR _nn$13[ebp]
  005d8	83 ea 01	 sub	 edx, 1
  005db	8b 45 e4	 mov	 eax, DWORD PTR _numGroup$21[ebp]
  005de	89 94 85 d8 f7
	ff ff		 mov	 DWORD PTR _lastNodeInGroup$19[ebp+eax*4], edx

; 255  :                 numGroup++;

  005e5	8b 4d e4	 mov	 ecx, DWORD PTR _numGroup$21[ebp]
  005e8	83 c1 01	 add	 ecx, 1
  005eb	89 4d e4	 mov	 DWORD PTR _numGroup$21[ebp], ecx
$LN45@Canon:

; 256  :               };
; 257  :               firstNodeInGroup[gn] = nn;

  005ee	8b 95 c8 f3 ff
	ff		 mov	 edx, DWORD PTR _gn$17[ebp]
  005f4	8b 85 b8 f3 ff
	ff		 mov	 eax, DWORD PTR _nn$13[ebp]
  005fa	89 84 95 e0 fb
	ff ff		 mov	 DWORD PTR _firstNodeInGroup$20[ebp+edx*4], eax

; 258  :               currentGroupNum = nn-nnFirst;

  00601	8b 8d b8 f3 ff
	ff		 mov	 ecx, DWORD PTR _nn$13[ebp]
  00607	2b 4d 08	 sub	 ecx, DWORD PTR _nnFirst$[ebp]
  0060a	89 8d b4 f3 ff
	ff		 mov	 DWORD PTR _currentGroupNum$12[ebp], ecx

; 259  :               brokenGroup = true;

  00610	c6 45 ef 01	 mov	 BYTE PTR _brokenGroup$24[ebp], 1

; 260  :               arbitraryGn = -1;

  00614	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _arbitraryGn$22[ebp], -1
$LN44@Canon:

; 261  :             };
; 262  :             if (groupNumbers[nn] != f-nnFirst) FixNeighborGroups(nd[nn].ix,groupNumbers[nn]);

  0061b	8b 95 c4 f3 ff
	ff		 mov	 edx, DWORD PTR _f$16[ebp]
  00621	2b 55 08	 sub	 edx, DWORD PTR _nnFirst$[ebp]
  00624	8b 85 b8 f3 ff
	ff		 mov	 eax, DWORD PTR _nn$13[ebp]
  0062a	39 94 85 d0 f3
	ff ff		 cmp	 DWORD PTR _groupNumbers$18[ebp+eax*4], edx
  00631	74 28		 je	 SHORT $LN46@Canon
  00633	8b 8d b8 f3 ff
	ff		 mov	 ecx, DWORD PTR _nn$13[ebp]
  00639	8b 94 8d d0 f3
	ff ff		 mov	 edx, DWORD PTR _groupNumbers$18[ebp+ecx*4]
  00640	52		 push	 edx
  00641	8b 85 b8 f3 ff
	ff		 mov	 eax, DWORD PTR _nn$13[ebp]
  00647	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0064a	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  00652	52		 push	 edx
  00653	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00656	e8 00 00 00 00	 call	 ?FixNeighborGroups@CON@@QAEXHH@Z ; CON::FixNeighborGroups
$LN46@Canon:

; 263  :           };

  0065b	e9 11 ff ff ff	 jmp	 $LN29@Canon
$LN30@Canon:

; 264  :           if (firstNodeInGroup[gn] == lastNodeInGroup[gn])

  00660	8b 85 c8 f3 ff
	ff		 mov	 eax, DWORD PTR _gn$17[ebp]
  00666	8b 8d c8 f3 ff
	ff		 mov	 ecx, DWORD PTR _gn$17[ebp]
  0066c	8b 94 85 e0 fb
	ff ff		 mov	 edx, DWORD PTR _firstNodeInGroup$20[ebp+eax*4]
  00673	3b 94 8d d8 f7
	ff ff		 cmp	 edx, DWORD PTR _lastNodeInGroup$19[ebp+ecx*4]
  0067a	75 4d		 jne	 SHORT $LN47@Canon

; 265  :           {
; 266  :             numGroup--;

  0067c	8b 45 e4	 mov	 eax, DWORD PTR _numGroup$21[ebp]
  0067f	83 e8 01	 sub	 eax, 1
  00682	89 45 e4	 mov	 DWORD PTR _numGroup$21[ebp], eax

; 267  :             firstNodeInGroup[gn] = firstNodeInGroup[numGroup];

  00685	8b 8d c8 f3 ff
	ff		 mov	 ecx, DWORD PTR _gn$17[ebp]
  0068b	8b 55 e4	 mov	 edx, DWORD PTR _numGroup$21[ebp]
  0068e	8b 84 95 e0 fb
	ff ff		 mov	 eax, DWORD PTR _firstNodeInGroup$20[ebp+edx*4]
  00695	89 84 8d e0 fb
	ff ff		 mov	 DWORD PTR _firstNodeInGroup$20[ebp+ecx*4], eax

; 268  :             lastNodeInGroup[gn] = lastNodeInGroup[numGroup];

  0069c	8b 8d c8 f3 ff
	ff		 mov	 ecx, DWORD PTR _gn$17[ebp]
  006a2	8b 55 e4	 mov	 edx, DWORD PTR _numGroup$21[ebp]
  006a5	8b 84 95 d8 f7
	ff ff		 mov	 eax, DWORD PTR _lastNodeInGroup$19[ebp+edx*4]
  006ac	89 84 8d d8 f7
	ff ff		 mov	 DWORD PTR _lastNodeInGroup$19[ebp+ecx*4], eax

; 269  :             arbitraryGn = -1;

  006b3	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _arbitraryGn$22[ebp], -1

; 270  :             gn--;

  006ba	8b 8d c8 f3 ff
	ff		 mov	 ecx, DWORD PTR _gn$17[ebp]
  006c0	83 e9 01	 sub	 ecx, 1
  006c3	89 8d c8 f3 ff
	ff		 mov	 DWORD PTR _gn$17[ebp], ecx
$LN47@Canon:

; 271  :           };
; 272  :         };

  006c9	e9 dd fa ff ff	 jmp	 $LN11@Canon
$LN8@Canon:

; 273  :       } while (brokenGroup);

  006ce	0f b6 55 ef	 movzx	 edx, BYTE PTR _brokenGroup$24[ebp]
  006d2	85 d2		 test	 edx, edx
  006d4	0f 85 c1 fa ff
	ff		 jne	 $LN10@Canon

; 274  :       if (arbitraryGn >= 0)

  006da	83 7d e8 00	 cmp	 DWORD PTR _arbitraryGn$22[ebp], 0
  006de	7c 38		 jl	 SHORT $LN48@Canon

; 275  :       {
; 276  :         numGroup--;

  006e0	8b 45 e4	 mov	 eax, DWORD PTR _numGroup$21[ebp]
  006e3	83 e8 01	 sub	 eax, 1
  006e6	89 45 e4	 mov	 DWORD PTR _numGroup$21[ebp], eax

; 277  :         firstNodeInGroup[arbitraryGn] = firstNodeInGroup[numGroup];

  006e9	8b 4d e8	 mov	 ecx, DWORD PTR _arbitraryGn$22[ebp]
  006ec	8b 55 e4	 mov	 edx, DWORD PTR _numGroup$21[ebp]
  006ef	8b 84 95 e0 fb
	ff ff		 mov	 eax, DWORD PTR _firstNodeInGroup$20[ebp+edx*4]
  006f6	89 84 8d e0 fb
	ff ff		 mov	 DWORD PTR _firstNodeInGroup$20[ebp+ecx*4], eax

; 278  :         lastNodeInGroup[arbitraryGn] = lastNodeInGroup[numGroup];

  006fd	8b 4d e8	 mov	 ecx, DWORD PTR _arbitraryGn$22[ebp]
  00700	8b 55 e4	 mov	 edx, DWORD PTR _numGroup$21[ebp]
  00703	8b 84 95 d8 f7
	ff ff		 mov	 eax, DWORD PTR _lastNodeInGroup$19[ebp+edx*4]
  0070a	89 84 8d d8 f7
	ff ff		 mov	 DWORD PTR _lastNodeInGroup$19[ebp+ecx*4], eax

; 279  :         arbitraryGn = -1;

  00711	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _arbitraryGn$22[ebp], -1
$LN48@Canon:

; 280  :       };
; 281  :       if (numGroup > 0)

  00718	83 7d e4 00	 cmp	 DWORD PTR _numGroup$21[ebp], 0
  0071c	0f 8e 1f 01 00
	00		 jle	 $LN49@Canon

; 282  :       { // We have determined which nodes are indistinguishable.
; 283  :         // Now we will assign break one node from the
; 284  :         // first such group.
; 285  :         int largestGroup;
; 286  :         int gn, gn0, f, l;
; 287  :         largestGroup = firstNodeInGroup[0];

  00722	b9 04 00 00 00	 mov	 ecx, 4
  00727	6b d1 00	 imul	 edx, ecx, 0
  0072a	8b 84 15 e0 fb
	ff ff		 mov	 eax, DWORD PTR _firstNodeInGroup$20[ebp+edx]
  00731	89 85 98 f3 ff
	ff		 mov	 DWORD PTR _largestGroup$5[ebp], eax

; 288  :         gn0 = 0;

  00737	c7 85 90 f3 ff
	ff 00 00 00 00	 mov	 DWORD PTR _gn0$3[ebp], 0

; 289  :         for (gn=1; gn<numGroup; gn++)

  00741	c7 85 94 f3 ff
	ff 01 00 00 00	 mov	 DWORD PTR _gn$4[ebp], 1
  0074b	eb 0f		 jmp	 SHORT $LN34@Canon
$LN32@Canon:
  0074d	8b 8d 94 f3 ff
	ff		 mov	 ecx, DWORD PTR _gn$4[ebp]
  00753	83 c1 01	 add	 ecx, 1
  00756	89 8d 94 f3 ff
	ff		 mov	 DWORD PTR _gn$4[ebp], ecx
$LN34@Canon:
  0075c	8b 95 94 f3 ff
	ff		 mov	 edx, DWORD PTR _gn$4[ebp]
  00762	3b 55 e4	 cmp	 edx, DWORD PTR _numGroup$21[ebp]
  00765	7d 6a		 jge	 SHORT $LN33@Canon

; 290  :         {
; 291  :           //Search for the largest group number.
; 292  :           f = firstNodeInGroup[gn];

  00767	8b 85 94 f3 ff
	ff		 mov	 eax, DWORD PTR _gn$4[ebp]
  0076d	8b 8c 85 e0 fb
	ff ff		 mov	 ecx, DWORD PTR _firstNodeInGroup$20[ebp+eax*4]
  00774	89 8d 8c f3 ff
	ff		 mov	 DWORD PTR _f$2[ebp], ecx

; 293  :           if (nd[nd[f].ix].gn > largestGroup)

  0077a	8b 95 8c f3 ff
	ff		 mov	 edx, DWORD PTR _f$2[ebp]
  00780	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00783	0f b6 8c 90 13
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4115]
  0078b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0078e	0f b6 84 8a 11
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4113]
  00796	3b 85 98 f3 ff
	ff		 cmp	 eax, DWORD PTR _largestGroup$5[ebp]
  0079c	7e 2e		 jle	 SHORT $LN50@Canon

; 294  :           {
; 295  :             largestGroup = nd[nd[f].ix].gn;

  0079e	8b 8d 8c f3 ff
	ff		 mov	 ecx, DWORD PTR _f$2[ebp]
  007a4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  007a7	0f b6 84 8a 13
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4115]
  007af	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  007b2	0f b6 94 81 11
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4113]
  007ba	89 95 98 f3 ff
	ff		 mov	 DWORD PTR _largestGroup$5[ebp], edx

; 296  :             gn0 = gn;

  007c0	8b 85 94 f3 ff
	ff		 mov	 eax, DWORD PTR _gn$4[ebp]
  007c6	89 85 90 f3 ff
	ff		 mov	 DWORD PTR _gn0$3[ebp], eax
$LN50@Canon:

; 297  :           };
; 298  :         };

  007cc	e9 7c ff ff ff	 jmp	 $LN32@Canon
$LN33@Canon:

; 299  :         //Now assign new group number to the last member
; 300  :         //of the group.
; 301  : //        DUMP("Apply Arbitrary numbers",gn0,0,0,firstNodeInGroup[gn0],lastNodeInGroup[gn0]+1);
; 302  :         f = firstNodeInGroup[gn0];

  007d1	8b 8d 90 f3 ff
	ff		 mov	 ecx, DWORD PTR _gn0$3[ebp]
  007d7	8b 94 8d e0 fb
	ff ff		 mov	 edx, DWORD PTR _firstNodeInGroup$20[ebp+ecx*4]
  007de	89 95 8c f3 ff
	ff		 mov	 DWORD PTR _f$2[ebp], edx

; 303  :         l = lastNodeInGroup[gn0];

  007e4	8b 85 90 f3 ff
	ff		 mov	 eax, DWORD PTR _gn0$3[ebp]
  007ea	8b 8c 85 d8 f7
	ff ff		 mov	 ecx, DWORD PTR _lastNodeInGroup$19[ebp+eax*4]
  007f1	89 8d 88 f3 ff
	ff		 mov	 DWORD PTR _l$1[ebp], ecx

; 304  : //        for (nn=f; nn<=l; nn++)
; 305  :         {
; 306  :           FixNeighborGroups(nd[l].ix, l-nnFirst);

  007f7	8b 95 88 f3 ff
	ff		 mov	 edx, DWORD PTR _l$1[ebp]
  007fd	2b 55 08	 sub	 edx, DWORD PTR _nnFirst$[ebp]
  00800	52		 push	 edx
  00801	8b 85 88 f3 ff
	ff		 mov	 eax, DWORD PTR _l$1[ebp]
  00807	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0080a	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  00812	52		 push	 edx
  00813	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00816	e8 00 00 00 00	 call	 ?FixNeighborGroups@CON@@QAEXHH@Z ; CON::FixNeighborGroups

; 307  :         };
; 308  :         lastNodeInGroup[gn0]--;

  0081b	8b 85 90 f3 ff
	ff		 mov	 eax, DWORD PTR _gn0$3[ebp]
  00821	8b 8c 85 d8 f7
	ff ff		 mov	 ecx, DWORD PTR _lastNodeInGroup$19[ebp+eax*4]
  00828	83 e9 01	 sub	 ecx, 1
  0082b	8b 95 90 f3 ff
	ff		 mov	 edx, DWORD PTR _gn0$3[ebp]
  00831	89 8c 95 d8 f7
	ff ff		 mov	 DWORD PTR _lastNodeInGroup$19[ebp+edx*4], ecx

; 309  :         arbitraryGn = gn0;

  00838	8b 85 90 f3 ff
	ff		 mov	 eax, DWORD PTR _gn0$3[ebp]
  0083e	89 45 e8	 mov	 DWORD PTR _arbitraryGn$22[ebp], eax
$LN49@Canon:

; 310  :       };
; 311  :     };// while (numGroup > 0);

  00841	e9 47 f9 ff ff	 jmp	 $LN5@Canon
$LN1@Canon:

; 312  :  //   for (nn=nnFirst; nn<nnLast; nn++)
; 313  :  //   {
; 314  :  //     nd[nd[nn].ix].gn = (STOPNUM)groupNumbers[nn];
; 315  :  //   };
; 316  :   };
; 317  : #if defined(SW_DUMP) || defined(NS_DUMP)
; 318  : //  DUMP("Leaving Canon",0,0,0,nnFirst,nnLast);
; 319  : #endif
; 320  : //Don't check here because we don't know whether to call
; 321  : // CON::CheckEverything or NIMCON::CheckEverything.
; 322  : //#ifdef _CHECK
; 323  : //  CheckEverything(nnFirst, nnLast, false);
; 324  : //#endif
; 325  : }

  00846	52		 push	 edx
  00847	8b cd		 mov	 ecx, ebp
  00849	50		 push	 eax
  0084a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN56@Canon
  00850	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00855	58		 pop	 eax
  00856	5a		 pop	 edx
  00857	5f		 pop	 edi
  00858	5e		 pop	 esi
  00859	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0085c	33 cd		 xor	 ecx, ebp
  0085e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00863	81 c4 78 0c 00
	00		 add	 esp, 3192		; 00000c78H
  00869	3b ec		 cmp	 ebp, esp
  0086b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00870	8b e5		 mov	 esp, ebp
  00872	5d		 pop	 ebp
  00873	c2 08 00	 ret	 8
  00876	66 90		 npad	 2
$LN56@Canon:
  00878	03 00 00 00	 DD	 3
  0087c	00 00 00 00	 DD	 $LN55@Canon
$LN55@Canon:
  00880	e0 fb ff ff	 DD	 -1056			; fffffbe0H
  00884	00 04 00 00	 DD	 1024			; 00000400H
  00888	00 00 00 00	 DD	 $LN52@Canon
  0088c	d8 f7 ff ff	 DD	 -2088			; fffff7d8H
  00890	00 04 00 00	 DD	 1024			; 00000400H
  00894	00 00 00 00	 DD	 $LN53@Canon
  00898	d0 f3 ff ff	 DD	 -3120			; fffff3d0H
  0089c	00 04 00 00	 DD	 1024			; 00000400H
  008a0	00 00 00 00	 DD	 $LN54@Canon
$LN54@Canon:
  008a4	67		 DB	 103			; 00000067H
  008a5	72		 DB	 114			; 00000072H
  008a6	6f		 DB	 111			; 0000006fH
  008a7	75		 DB	 117			; 00000075H
  008a8	70		 DB	 112			; 00000070H
  008a9	4e		 DB	 78			; 0000004eH
  008aa	75		 DB	 117			; 00000075H
  008ab	6d		 DB	 109			; 0000006dH
  008ac	62		 DB	 98			; 00000062H
  008ad	65		 DB	 101			; 00000065H
  008ae	72		 DB	 114			; 00000072H
  008af	73		 DB	 115			; 00000073H
  008b0	00		 DB	 0
$LN53@Canon:
  008b1	6c		 DB	 108			; 0000006cH
  008b2	61		 DB	 97			; 00000061H
  008b3	73		 DB	 115			; 00000073H
  008b4	74		 DB	 116			; 00000074H
  008b5	4e		 DB	 78			; 0000004eH
  008b6	6f		 DB	 111			; 0000006fH
  008b7	64		 DB	 100			; 00000064H
  008b8	65		 DB	 101			; 00000065H
  008b9	49		 DB	 73			; 00000049H
  008ba	6e		 DB	 110			; 0000006eH
  008bb	47		 DB	 71			; 00000047H
  008bc	72		 DB	 114			; 00000072H
  008bd	6f		 DB	 111			; 0000006fH
  008be	75		 DB	 117			; 00000075H
  008bf	70		 DB	 112			; 00000070H
  008c0	00		 DB	 0
$LN52@Canon:
  008c1	66		 DB	 102			; 00000066H
  008c2	69		 DB	 105			; 00000069H
  008c3	72		 DB	 114			; 00000072H
  008c4	73		 DB	 115			; 00000073H
  008c5	74		 DB	 116			; 00000074H
  008c6	4e		 DB	 78			; 0000004eH
  008c7	6f		 DB	 111			; 0000006fH
  008c8	64		 DB	 100			; 00000064H
  008c9	65		 DB	 101			; 00000065H
  008ca	49		 DB	 73			; 00000049H
  008cb	6e		 DB	 110			; 0000006eH
  008cc	47		 DB	 71			; 00000047H
  008cd	72		 DB	 114			; 00000072H
  008ce	6f		 DB	 111			; 0000006fH
  008cf	75		 DB	 117			; 00000075H
  008d0	70		 DB	 112			; 00000070H
  008d1	00		 DB	 0
?Canon@CON@@QAEXHH@Z ENDP				; CON::Canon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Canon.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DoubleCheck@CON@@QAEXXZ PROC				; CON::DoubleCheck
; _this$ = ecx

; 328  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 329  : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c3		 ret	 0
?DoubleCheck@CON@@QAEXXZ ENDP				; CON::DoubleCheck
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Canon.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nnA$ = 8						; size = 4
_gn$ = 12						; size = 4
?FixNeighborGroups@CON@@QAEXHH@Z PROC			; CON::FixNeighborGroups
; _this$ = ecx

; 145  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  :   FIX_NEIGHBOR(nnA,0,gn);

  0000e	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0001b	b8 02 00 00 00	 mov	 eax, 2
  00020	6b c8 00	 imul	 ecx, eax, 0
  00023	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00027	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  0002d	7d 62		 jge	 SHORT $LN2@FixNeighbo
  0002f	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0003c	b8 02 00 00 00	 mov	 eax, 2
  00041	6b c8 00	 imul	 ecx, eax, 0
  00044	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  0004f	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00052	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8d 94 d0 10 08
	00 00		 lea	 edx, DWORD PTR [eax+edx*8+2064]
  0005c	b8 02 00 00 00	 mov	 eax, 2
  00061	6b c0 00	 imul	 eax, eax, 0
  00064	0f b6 54 02 01	 movzx	 edx, BYTE PTR [edx+eax+1]
  00069	8a 45 0c	 mov	 al, BYTE PTR _gn$[ebp]
  0006c	88 04 51	 mov	 BYTE PTR [ecx+edx*2], al
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00072	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00075	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0007c	b9 02 00 00 00	 mov	 ecx, 2
  00081	6b d1 00	 imul	 edx, ecx, 0
  00084	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00088	50		 push	 eax
  00089	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0008c	e8 00 00 00 00	 call	 ?SortEdgesByGroup@CON@@QAEXH@Z ; CON::SortEdgesByGroup
$LN2@FixNeighbo:

; 147  :   FIX_NEIGHBOR(nnA,1,gn);

  00091	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00094	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00097	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0009e	b9 02 00 00 00	 mov	 ecx, 2
  000a3	c1 e1 00	 shl	 ecx, 0
  000a6	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  000aa	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  000b0	7d 62		 jge	 SHORT $LN3@FixNeighbo
  000b2	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  000b5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000b8	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  000bf	b8 02 00 00 00	 mov	 eax, 2
  000c4	c1 e0 00	 shl	 eax, 0
  000c7	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  000cb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ce	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  000d2	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  000d5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000d8	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  000df	ba 02 00 00 00	 mov	 edx, 2
  000e4	c1 e2 00	 shl	 edx, 0
  000e7	0f b6 4c 11 01	 movzx	 ecx, BYTE PTR [ecx+edx+1]
  000ec	8a 55 0c	 mov	 dl, BYTE PTR _gn$[ebp]
  000ef	88 14 48	 mov	 BYTE PTR [eax+ecx*2], dl
  000f2	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  000f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000f8	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  000ff	b8 02 00 00 00	 mov	 eax, 2
  00104	c1 e0 00	 shl	 eax, 0
  00107	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  0010b	51		 push	 ecx
  0010c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0010f	e8 00 00 00 00	 call	 ?SortEdgesByGroup@CON@@QAEXH@Z ; CON::SortEdgesByGroup
$LN3@FixNeighbo:

; 148  :   FIX_NEIGHBOR(nnA,2,gn);

  00114	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00117	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0011a	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00121	ba 02 00 00 00	 mov	 edx, 2
  00126	d1 e2		 shl	 edx, 1
  00128	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  0012c	3d f9 00 00 00	 cmp	 eax, 249		; 000000f9H
  00131	7d 5f		 jge	 SHORT $LN4@FixNeighbo
  00133	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00136	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00139	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00140	b9 02 00 00 00	 mov	 ecx, 2
  00145	d1 e1		 shl	 ecx, 1
  00147	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  0014b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014e	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00152	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00155	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00158	8d 94 d0 10 08
	00 00		 lea	 edx, DWORD PTR [eax+edx*8+2064]
  0015f	b8 02 00 00 00	 mov	 eax, 2
  00164	d1 e0		 shl	 eax, 1
  00166	0f b6 54 02 01	 movzx	 edx, BYTE PTR [edx+eax+1]
  0016b	8a 45 0c	 mov	 al, BYTE PTR _gn$[ebp]
  0016e	88 04 51	 mov	 BYTE PTR [ecx+edx*2], al
  00171	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00174	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00177	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0017e	b9 02 00 00 00	 mov	 ecx, 2
  00183	d1 e1		 shl	 ecx, 1
  00185	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  00189	52		 push	 edx
  0018a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0018d	e8 00 00 00 00	 call	 ?SortEdgesByGroup@CON@@QAEXH@Z ; CON::SortEdgesByGroup
$LN4@FixNeighbo:

; 149  :   FIX_NEIGHBOR(nnA,3,gn);

  00192	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00195	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00198	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0019f	b8 02 00 00 00	 mov	 eax, 2
  001a4	6b c8 03	 imul	 ecx, eax, 3
  001a7	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  001ab	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  001b1	7d 62		 jge	 SHORT $LN1@FixNeighbo
  001b3	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  001b6	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b9	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  001c0	b8 02 00 00 00	 mov	 eax, 2
  001c5	6b c8 03	 imul	 ecx, eax, 3
  001c8	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  001cc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001cf	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  001d3	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  001d6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001d9	8d 94 d0 10 08
	00 00		 lea	 edx, DWORD PTR [eax+edx*8+2064]
  001e0	b8 02 00 00 00	 mov	 eax, 2
  001e5	6b c0 03	 imul	 eax, eax, 3
  001e8	0f b6 54 02 01	 movzx	 edx, BYTE PTR [edx+eax+1]
  001ed	8a 45 0c	 mov	 al, BYTE PTR _gn$[ebp]
  001f0	88 04 51	 mov	 BYTE PTR [ecx+edx*2], al
  001f3	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  001f6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001f9	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00200	b9 02 00 00 00	 mov	 ecx, 2
  00205	6b d1 03	 imul	 edx, ecx, 3
  00208	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  0020c	50		 push	 eax
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00210	e8 00 00 00 00	 call	 ?SortEdgesByGroup@CON@@QAEXH@Z ; CON::SortEdgesByGroup
$LN1@FixNeighbo:

; 150  : }

  00215	83 c4 04	 add	 esp, 4
  00218	3b ec		 cmp	 ebp, esp
  0021a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0021f	8b e5		 mov	 esp, ebp
  00221	5d		 pop	 ebp
  00222	c2 08 00	 ret	 8
?FixNeighborGroups@CON@@QAEXHH@Z ENDP			; CON::FixNeighborGroups
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Canon.cpp
_TEXT	SEGMENT
_te$1 = -120						; size = 2
_tsd$2 = -108						; size = 2
_te$3 = -96						; size = 2
_tsd$4 = -84						; size = 2
_te$5 = -72						; size = 2
_tsd$6 = -60						; size = 2
_te$7 = -48						; size = 2
_tsd$8 = -36						; size = 2
_te$9 = -24						; size = 2
_tsd$10 = -12						; size = 2
_this$ = -4						; size = 4
_nnA$ = 8						; size = 4
?SortEdgesByGroup@CON@@QAEXH@Z PROC			; CON::SortEdgesByGroup
; _this$ = ecx

; 46   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 7c	 sub	 esp, 124		; 0000007cH
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d 84	 lea	 edi, DWORD PTR [ebp-124]
  0000b	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 47   :   CTLGAS(0,2)

  0001b	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  0001e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00025	b8 02 00 00 00	 mov	 eax, 2
  0002a	d1 e0		 shl	 eax, 1
  0002c	03 d0		 add	 edx, eax
  0002e	52		 push	 edx
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00032	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00035	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  00039	b8 02 00 00 00	 mov	 eax, 2
  0003e	6b d0 00	 imul	 edx, eax, 0
  00041	03 ca		 add	 ecx, edx
  00043	e8 00 00 00 00	 call	 ??OEDGE@@QBE_NABU0@@Z	; EDGE::operator>
  00048	0f b6 c0	 movzx	 eax, al
  0004b	85 c0		 test	 eax, eax
  0004d	0f 84 90 01 00
	00		 je	 $LN2@SortEdgesB
  00053	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00056	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00059	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00060	b9 02 00 00 00	 mov	 ecx, 2
  00065	d1 e1		 shl	 ecx, 1
  00067	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  0006b	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  00071	7d 40		 jge	 SHORT $LN3@SortEdgesB
  00073	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00080	b8 02 00 00 00	 mov	 eax, 2
  00085	d1 e0		 shl	 eax, 1
  00087	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  0008b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0008e	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00098	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0009b	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  000a2	ba 02 00 00 00	 mov	 edx, 2
  000a7	d1 e2		 shl	 edx, 1
  000a9	0f b6 4c 11 01	 movzx	 ecx, BYTE PTR [ecx+edx+1]
  000ae	c6 44 48 01 00	 mov	 BYTE PTR [eax+ecx*2+1], 0
$LN3@SortEdgesB:
  000b3	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  000b6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000b9	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  000c0	ba 02 00 00 00	 mov	 edx, 2
  000c5	6b c2 00	 imul	 eax, edx, 0
  000c8	66 8b 0c 01	 mov	 cx, WORD PTR [ecx+eax]
  000cc	66 89 4d f4	 mov	 WORD PTR _tsd$10[ebp], cx
  000d0	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  000d3	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000d6	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  000dd	ba 02 00 00 00	 mov	 edx, 2
  000e2	d1 e2		 shl	 edx, 1
  000e4	66 8b 04 11	 mov	 ax, WORD PTR [ecx+edx]
  000e8	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  000eb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000ee	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  000f5	ba 02 00 00 00	 mov	 edx, 2
  000fa	6b d2 00	 imul	 edx, edx, 0
  000fd	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  00101	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00104	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00107	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0010e	b8 02 00 00 00	 mov	 eax, 2
  00113	d1 e0		 shl	 eax, 1
  00115	66 8b 4d f4	 mov	 cx, WORD PTR _tsd$10[ebp]
  00119	66 89 0c 02	 mov	 WORD PTR [edx+eax], cx
  0011d	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00120	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00123	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00127	ba 02 00 00 00	 mov	 edx, 2
  0012c	6b c2 00	 imul	 eax, edx, 0
  0012f	03 c8		 add	 ecx, eax
  00131	51		 push	 ecx
  00132	8d 4d e8	 lea	 ecx, DWORD PTR _te$9[ebp]
  00135	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  0013a	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0013d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00140	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00144	b9 02 00 00 00	 mov	 ecx, 2
  00149	d1 e1		 shl	 ecx, 1
  0014b	03 c1		 add	 eax, ecx
  0014d	50		 push	 eax
  0014e	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00151	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00154	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00158	ba 02 00 00 00	 mov	 edx, 2
  0015d	6b c2 00	 imul	 eax, edx, 0
  00160	03 c8		 add	 ecx, eax
  00162	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  00167	8d 4d e8	 lea	 ecx, DWORD PTR _te$9[ebp]
  0016a	51		 push	 ecx
  0016b	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  0016e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00171	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00175	ba 02 00 00 00	 mov	 edx, 2
  0017a	d1 e2		 shl	 edx, 1
  0017c	03 ca		 add	 ecx, edx
  0017e	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  00183	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00186	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00189	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00190	b8 02 00 00 00	 mov	 eax, 2
  00195	d1 e0		 shl	 eax, 1
  00197	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  0019b	81 f9 f9 00 00
	00		 cmp	 ecx, 249		; 000000f9H
  001a1	7d 40		 jge	 SHORT $LN2@SortEdgesB
  001a3	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  001a6	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001a9	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  001b0	ba 02 00 00 00	 mov	 edx, 2
  001b5	d1 e2		 shl	 edx, 1
  001b7	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  001bb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001be	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  001c5	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  001c8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001cb	8d 84 c1 10 08
	00 00		 lea	 eax, DWORD PTR [ecx+eax*8+2064]
  001d2	b9 02 00 00 00	 mov	 ecx, 2
  001d7	d1 e1		 shl	 ecx, 1
  001d9	0f b6 44 08 01	 movzx	 eax, BYTE PTR [eax+ecx+1]
  001de	c6 44 42 01 02	 mov	 BYTE PTR [edx+eax*2+1], 2
$LN2@SortEdgesB:

; 48   :   CTLGAS(1,3)

  001e3	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  001e6	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001e9	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  001ed	b9 02 00 00 00	 mov	 ecx, 2
  001f2	6b d1 03	 imul	 edx, ecx, 3
  001f5	03 c2		 add	 eax, edx
  001f7	50		 push	 eax
  001f8	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  001fb	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001fe	8d 4c c1 10	 lea	 ecx, DWORD PTR [ecx+eax*8+16]
  00202	ba 02 00 00 00	 mov	 edx, 2
  00207	c1 e2 00	 shl	 edx, 0
  0020a	03 ca		 add	 ecx, edx
  0020c	e8 00 00 00 00	 call	 ??OEDGE@@QBE_NABU0@@Z	; EDGE::operator>
  00211	0f b6 c0	 movzx	 eax, al
  00214	85 c0		 test	 eax, eax
  00216	0f 84 99 01 00
	00		 je	 $LN5@SortEdgesB
  0021c	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0021f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00222	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00229	b9 02 00 00 00	 mov	 ecx, 2
  0022e	6b d1 03	 imul	 edx, ecx, 3
  00231	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00235	3d f9 00 00 00	 cmp	 eax, 249		; 000000f9H
  0023a	7d 42		 jge	 SHORT $LN6@SortEdgesB
  0023c	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0023f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00242	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00249	b9 02 00 00 00	 mov	 ecx, 2
  0024e	6b d1 03	 imul	 edx, ecx, 3
  00251	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00255	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00258	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0025f	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00262	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00265	8d 84 c1 10 08
	00 00		 lea	 eax, DWORD PTR [ecx+eax*8+2064]
  0026c	b9 02 00 00 00	 mov	 ecx, 2
  00271	6b c9 03	 imul	 ecx, ecx, 3
  00274	0f b6 44 08 01	 movzx	 eax, BYTE PTR [eax+ecx+1]
  00279	c6 44 42 01 01	 mov	 BYTE PTR [edx+eax*2+1], 1
$LN6@SortEdgesB:
  0027e	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00281	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00284	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0028b	b9 02 00 00 00	 mov	 ecx, 2
  00290	c1 e1 00	 shl	 ecx, 0
  00293	66 8b 14 08	 mov	 dx, WORD PTR [eax+ecx]
  00297	66 89 55 dc	 mov	 WORD PTR _tsd$8[ebp], dx
  0029b	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  0029e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002a1	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  002a8	b8 02 00 00 00	 mov	 eax, 2
  002ad	6b c8 03	 imul	 ecx, eax, 3
  002b0	66 8b 14 0a	 mov	 dx, WORD PTR [edx+ecx]
  002b4	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  002b7	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002ba	8d 84 c1 10 08
	00 00		 lea	 eax, DWORD PTR [ecx+eax*8+2064]
  002c1	b9 02 00 00 00	 mov	 ecx, 2
  002c6	c1 e1 00	 shl	 ecx, 0
  002c9	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx
  002cd	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  002d0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002d3	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  002da	ba 02 00 00 00	 mov	 edx, 2
  002df	6b c2 03	 imul	 eax, edx, 3
  002e2	66 8b 55 dc	 mov	 dx, WORD PTR _tsd$8[ebp]
  002e6	66 89 14 01	 mov	 WORD PTR [ecx+eax], dx
  002ea	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  002ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  002f0	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  002f4	b8 02 00 00 00	 mov	 eax, 2
  002f9	c1 e0 00	 shl	 eax, 0
  002fc	03 d0		 add	 edx, eax
  002fe	52		 push	 edx
  002ff	8d 4d d0	 lea	 ecx, DWORD PTR _te$7[ebp]
  00302	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  00307	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0030a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0030d	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00311	b9 02 00 00 00	 mov	 ecx, 2
  00316	6b d1 03	 imul	 edx, ecx, 3
  00319	03 c2		 add	 eax, edx
  0031b	50		 push	 eax
  0031c	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  0031f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00322	8d 4c c1 10	 lea	 ecx, DWORD PTR [ecx+eax*8+16]
  00326	ba 02 00 00 00	 mov	 edx, 2
  0032b	c1 e2 00	 shl	 edx, 0
  0032e	03 ca		 add	 ecx, edx
  00330	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  00335	8d 45 d0	 lea	 eax, DWORD PTR _te$7[ebp]
  00338	50		 push	 eax
  00339	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0033c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0033f	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  00343	b8 02 00 00 00	 mov	 eax, 2
  00348	6b d0 03	 imul	 edx, eax, 3
  0034b	03 ca		 add	 ecx, edx
  0034d	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  00352	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00355	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00358	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0035f	b8 02 00 00 00	 mov	 eax, 2
  00364	6b c8 03	 imul	 ecx, eax, 3
  00367	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  0036b	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  00371	7d 42		 jge	 SHORT $LN5@SortEdgesB
  00373	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00376	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00379	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00380	b8 02 00 00 00	 mov	 eax, 2
  00385	6b c8 03	 imul	 ecx, eax, 3
  00388	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  0038c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0038f	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00396	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00399	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0039c	8d 94 d0 10 08
	00 00		 lea	 edx, DWORD PTR [eax+edx*8+2064]
  003a3	b8 02 00 00 00	 mov	 eax, 2
  003a8	6b c0 03	 imul	 eax, eax, 3
  003ab	0f b6 54 02 01	 movzx	 edx, BYTE PTR [edx+eax+1]
  003b0	c6 44 51 01 03	 mov	 BYTE PTR [ecx+edx*2+1], 3
$LN5@SortEdgesB:

; 49   :   CTLGAS(2,3)

  003b5	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  003b8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  003bb	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  003bf	b8 02 00 00 00	 mov	 eax, 2
  003c4	6b c8 03	 imul	 ecx, eax, 3
  003c7	03 d1		 add	 edx, ecx
  003c9	52		 push	 edx
  003ca	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  003cd	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  003d0	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  003d4	ba 02 00 00 00	 mov	 edx, 2
  003d9	d1 e2		 shl	 edx, 1
  003db	03 ca		 add	 ecx, edx
  003dd	e8 00 00 00 00	 call	 ??OEDGE@@QBE_NABU0@@Z	; EDGE::operator>
  003e2	0f b6 c0	 movzx	 eax, al
  003e5	85 c0		 test	 eax, eax
  003e7	0f 84 95 01 00
	00		 je	 $LN8@SortEdgesB
  003ed	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  003f0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  003f3	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  003fa	b9 02 00 00 00	 mov	 ecx, 2
  003ff	6b d1 03	 imul	 edx, ecx, 3
  00402	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00406	3d f9 00 00 00	 cmp	 eax, 249		; 000000f9H
  0040b	7d 42		 jge	 SHORT $LN9@SortEdgesB
  0040d	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00410	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00413	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0041a	b9 02 00 00 00	 mov	 ecx, 2
  0041f	6b d1 03	 imul	 edx, ecx, 3
  00422	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00426	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00429	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00430	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00433	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00436	8d 84 c1 10 08
	00 00		 lea	 eax, DWORD PTR [ecx+eax*8+2064]
  0043d	b9 02 00 00 00	 mov	 ecx, 2
  00442	6b c9 03	 imul	 ecx, ecx, 3
  00445	0f b6 44 08 01	 movzx	 eax, BYTE PTR [eax+ecx+1]
  0044a	c6 44 42 01 02	 mov	 BYTE PTR [edx+eax*2+1], 2
$LN9@SortEdgesB:
  0044f	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00452	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00455	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0045c	b9 02 00 00 00	 mov	 ecx, 2
  00461	d1 e1		 shl	 ecx, 1
  00463	66 8b 14 08	 mov	 dx, WORD PTR [eax+ecx]
  00467	66 89 55 c4	 mov	 WORD PTR _tsd$6[ebp], dx
  0046b	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  0046e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00471	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00478	b8 02 00 00 00	 mov	 eax, 2
  0047d	6b c8 03	 imul	 ecx, eax, 3
  00480	66 8b 14 0a	 mov	 dx, WORD PTR [edx+ecx]
  00484	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00487	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0048a	8d 84 c1 10 08
	00 00		 lea	 eax, DWORD PTR [ecx+eax*8+2064]
  00491	b9 02 00 00 00	 mov	 ecx, 2
  00496	d1 e1		 shl	 ecx, 1
  00498	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx
  0049c	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  0049f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  004a2	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  004a9	ba 02 00 00 00	 mov	 edx, 2
  004ae	6b c2 03	 imul	 eax, edx, 3
  004b1	66 8b 55 c4	 mov	 dx, WORD PTR _tsd$6[ebp]
  004b5	66 89 14 01	 mov	 WORD PTR [ecx+eax], dx
  004b9	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  004bc	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004bf	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  004c3	b8 02 00 00 00	 mov	 eax, 2
  004c8	d1 e0		 shl	 eax, 1
  004ca	03 d0		 add	 edx, eax
  004cc	52		 push	 edx
  004cd	8d 4d b8	 lea	 ecx, DWORD PTR _te$5[ebp]
  004d0	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  004d5	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  004d8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  004db	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  004df	b9 02 00 00 00	 mov	 ecx, 2
  004e4	6b d1 03	 imul	 edx, ecx, 3
  004e7	03 c2		 add	 eax, edx
  004e9	50		 push	 eax
  004ea	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  004ed	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  004f0	8d 4c c1 10	 lea	 ecx, DWORD PTR [ecx+eax*8+16]
  004f4	ba 02 00 00 00	 mov	 edx, 2
  004f9	d1 e2		 shl	 edx, 1
  004fb	03 ca		 add	 ecx, edx
  004fd	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  00502	8d 45 b8	 lea	 eax, DWORD PTR _te$5[ebp]
  00505	50		 push	 eax
  00506	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00509	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0050c	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  00510	b8 02 00 00 00	 mov	 eax, 2
  00515	6b d0 03	 imul	 edx, eax, 3
  00518	03 ca		 add	 ecx, edx
  0051a	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  0051f	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00522	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00525	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0052c	b8 02 00 00 00	 mov	 eax, 2
  00531	6b c8 03	 imul	 ecx, eax, 3
  00534	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00538	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  0053e	7d 42		 jge	 SHORT $LN8@SortEdgesB
  00540	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00543	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00546	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0054d	b8 02 00 00 00	 mov	 eax, 2
  00552	6b c8 03	 imul	 ecx, eax, 3
  00555	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00559	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0055c	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00563	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00566	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00569	8d 94 d0 10 08
	00 00		 lea	 edx, DWORD PTR [eax+edx*8+2064]
  00570	b8 02 00 00 00	 mov	 eax, 2
  00575	6b c0 03	 imul	 eax, eax, 3
  00578	0f b6 54 02 01	 movzx	 edx, BYTE PTR [edx+eax+1]
  0057d	c6 44 51 01 03	 mov	 BYTE PTR [ecx+edx*2+1], 3
$LN8@SortEdgesB:

; 50   :   CTLGAS(0,1)

  00582	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00585	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00588	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  0058c	b8 02 00 00 00	 mov	 eax, 2
  00591	c1 e0 00	 shl	 eax, 0
  00594	03 d0		 add	 edx, eax
  00596	52		 push	 edx
  00597	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0059a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0059d	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  005a1	b8 02 00 00 00	 mov	 eax, 2
  005a6	6b d0 00	 imul	 edx, eax, 0
  005a9	03 ca		 add	 ecx, edx
  005ab	e8 00 00 00 00	 call	 ??OEDGE@@QBE_NABU0@@Z	; EDGE::operator>
  005b0	0f b6 c0	 movzx	 eax, al
  005b3	85 c0		 test	 eax, eax
  005b5	0f 84 9a 01 00
	00		 je	 $LN11@SortEdgesB
  005bb	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  005be	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005c1	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  005c8	b9 02 00 00 00	 mov	 ecx, 2
  005cd	c1 e1 00	 shl	 ecx, 0
  005d0	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  005d4	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  005da	7d 42		 jge	 SHORT $LN12@SortEdgesB
  005dc	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  005df	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  005e2	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  005e9	b8 02 00 00 00	 mov	 eax, 2
  005ee	c1 e0 00	 shl	 eax, 0
  005f1	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  005f5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  005f8	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  005ff	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00602	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00605	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  0060c	ba 02 00 00 00	 mov	 edx, 2
  00611	c1 e2 00	 shl	 edx, 0
  00614	0f b6 4c 11 01	 movzx	 ecx, BYTE PTR [ecx+edx+1]
  00619	c6 44 48 01 00	 mov	 BYTE PTR [eax+ecx*2+1], 0
$LN12@SortEdgesB:
  0061e	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00621	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00624	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  0062b	ba 02 00 00 00	 mov	 edx, 2
  00630	6b c2 00	 imul	 eax, edx, 0
  00633	66 8b 0c 01	 mov	 cx, WORD PTR [ecx+eax]
  00637	66 89 4d ac	 mov	 WORD PTR _tsd$4[ebp], cx
  0063b	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  0063e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00641	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00648	ba 02 00 00 00	 mov	 edx, 2
  0064d	c1 e2 00	 shl	 edx, 0
  00650	66 8b 04 11	 mov	 ax, WORD PTR [ecx+edx]
  00654	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00657	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0065a	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  00661	ba 02 00 00 00	 mov	 edx, 2
  00666	6b d2 00	 imul	 edx, edx, 0
  00669	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  0066d	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00670	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00673	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0067a	b8 02 00 00 00	 mov	 eax, 2
  0067f	c1 e0 00	 shl	 eax, 0
  00682	66 8b 4d ac	 mov	 cx, WORD PTR _tsd$4[ebp]
  00686	66 89 0c 02	 mov	 WORD PTR [edx+eax], cx
  0068a	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  0068d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00690	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00694	ba 02 00 00 00	 mov	 edx, 2
  00699	6b c2 00	 imul	 eax, edx, 0
  0069c	03 c8		 add	 ecx, eax
  0069e	51		 push	 ecx
  0069f	8d 4d a0	 lea	 ecx, DWORD PTR _te$3[ebp]
  006a2	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  006a7	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  006aa	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  006ad	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  006b1	b9 02 00 00 00	 mov	 ecx, 2
  006b6	c1 e1 00	 shl	 ecx, 0
  006b9	03 c1		 add	 eax, ecx
  006bb	50		 push	 eax
  006bc	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  006bf	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006c2	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  006c6	ba 02 00 00 00	 mov	 edx, 2
  006cb	6b c2 00	 imul	 eax, edx, 0
  006ce	03 c8		 add	 ecx, eax
  006d0	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  006d5	8d 4d a0	 lea	 ecx, DWORD PTR _te$3[ebp]
  006d8	51		 push	 ecx
  006d9	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  006dc	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  006df	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  006e3	ba 02 00 00 00	 mov	 edx, 2
  006e8	c1 e2 00	 shl	 edx, 0
  006eb	03 ca		 add	 ecx, edx
  006ed	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  006f2	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  006f5	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  006f8	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  006ff	b8 02 00 00 00	 mov	 eax, 2
  00704	c1 e0 00	 shl	 eax, 0
  00707	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  0070b	81 f9 f9 00 00
	00		 cmp	 ecx, 249		; 000000f9H
  00711	7d 42		 jge	 SHORT $LN11@SortEdgesB
  00713	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00716	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00719	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00720	ba 02 00 00 00	 mov	 edx, 2
  00725	c1 e2 00	 shl	 edx, 0
  00728	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  0072c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0072f	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00736	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00739	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0073c	8d 84 c1 10 08
	00 00		 lea	 eax, DWORD PTR [ecx+eax*8+2064]
  00743	b9 02 00 00 00	 mov	 ecx, 2
  00748	c1 e1 00	 shl	 ecx, 0
  0074b	0f b6 44 08 01	 movzx	 eax, BYTE PTR [eax+ecx+1]
  00750	c6 44 42 01 01	 mov	 BYTE PTR [edx+eax*2+1], 1
$LN11@SortEdgesB:

; 51   :   CTLGAS(1,2)

  00755	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00758	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0075b	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  0075f	b9 02 00 00 00	 mov	 ecx, 2
  00764	d1 e1		 shl	 ecx, 1
  00766	03 c1		 add	 eax, ecx
  00768	50		 push	 eax
  00769	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  0076c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0076f	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  00773	ba 02 00 00 00	 mov	 edx, 2
  00778	c1 e2 00	 shl	 edx, 0
  0077b	03 ca		 add	 ecx, edx
  0077d	e8 00 00 00 00	 call	 ??OEDGE@@QBE_NABU0@@Z	; EDGE::operator>
  00782	0f b6 c0	 movzx	 eax, al
  00785	85 c0		 test	 eax, eax
  00787	0f 84 90 01 00
	00		 je	 $LN1@SortEdgesB
  0078d	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00790	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00793	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0079a	b9 02 00 00 00	 mov	 ecx, 2
  0079f	d1 e1		 shl	 ecx, 1
  007a1	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  007a5	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  007ab	7d 40		 jge	 SHORT $LN15@SortEdgesB
  007ad	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  007b0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  007b3	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  007ba	b8 02 00 00 00	 mov	 eax, 2
  007bf	d1 e0		 shl	 eax, 1
  007c1	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  007c5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007c8	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  007cf	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  007d2	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  007d5	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  007dc	ba 02 00 00 00	 mov	 edx, 2
  007e1	d1 e2		 shl	 edx, 1
  007e3	0f b6 4c 11 01	 movzx	 ecx, BYTE PTR [ecx+edx+1]
  007e8	c6 44 48 01 01	 mov	 BYTE PTR [eax+ecx*2+1], 1
$LN15@SortEdgesB:
  007ed	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  007f0	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  007f3	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  007fa	ba 02 00 00 00	 mov	 edx, 2
  007ff	c1 e2 00	 shl	 edx, 0
  00802	66 8b 04 11	 mov	 ax, WORD PTR [ecx+edx]
  00806	66 89 45 94	 mov	 WORD PTR _tsd$2[ebp], ax
  0080a	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0080d	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00810	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  00817	b9 02 00 00 00	 mov	 ecx, 2
  0081c	d1 e1		 shl	 ecx, 1
  0081e	66 8b 14 08	 mov	 dx, WORD PTR [eax+ecx]
  00822	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  00825	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00828	8d 84 c1 10 08
	00 00		 lea	 eax, DWORD PTR [ecx+eax*8+2064]
  0082f	b9 02 00 00 00	 mov	 ecx, 2
  00834	c1 e1 00	 shl	 ecx, 0
  00837	66 89 14 08	 mov	 WORD PTR [eax+ecx], dx
  0083b	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  0083e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00841	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00848	ba 02 00 00 00	 mov	 edx, 2
  0084d	d1 e2		 shl	 edx, 1
  0084f	66 8b 45 94	 mov	 ax, WORD PTR _tsd$2[ebp]
  00853	66 89 04 11	 mov	 WORD PTR [ecx+edx], ax
  00857	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  0085a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0085d	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  00861	b9 02 00 00 00	 mov	 ecx, 2
  00866	c1 e1 00	 shl	 ecx, 0
  00869	03 c1		 add	 eax, ecx
  0086b	50		 push	 eax
  0086c	8d 4d 88	 lea	 ecx, DWORD PTR _te$1[ebp]
  0086f	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  00874	8b 55 08	 mov	 edx, DWORD PTR _nnA$[ebp]
  00877	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0087a	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  0087e	ba 02 00 00 00	 mov	 edx, 2
  00883	d1 e2		 shl	 edx, 1
  00885	03 ca		 add	 ecx, edx
  00887	51		 push	 ecx
  00888	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  0088b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0088e	8d 4c c1 10	 lea	 ecx, DWORD PTR [ecx+eax*8+16]
  00892	ba 02 00 00 00	 mov	 edx, 2
  00897	c1 e2 00	 shl	 edx, 0
  0089a	03 ca		 add	 ecx, edx
  0089c	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  008a1	8d 45 88	 lea	 eax, DWORD PTR _te$1[ebp]
  008a4	50		 push	 eax
  008a5	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  008a8	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  008ab	8d 4c ca 10	 lea	 ecx, DWORD PTR [edx+ecx*8+16]
  008af	b8 02 00 00 00	 mov	 eax, 2
  008b4	d1 e0		 shl	 eax, 1
  008b6	03 c8		 add	 ecx, eax
  008b8	e8 00 00 00 00	 call	 ??4EDGE@@QAEXABU0@@Z	; EDGE::operator=
  008bd	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  008c0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  008c3	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  008ca	b9 02 00 00 00	 mov	 ecx, 2
  008cf	d1 e1		 shl	 ecx, 1
  008d1	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  008d5	81 fa f9 00 00
	00		 cmp	 edx, 249		; 000000f9H
  008db	7d 40		 jge	 SHORT $LN1@SortEdgesB
  008dd	8b 45 08	 mov	 eax, DWORD PTR _nnA$[ebp]
  008e0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  008e3	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  008ea	b8 02 00 00 00	 mov	 eax, 2
  008ef	d1 e0		 shl	 eax, 1
  008f1	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  008f5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  008f8	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  008ff	8b 4d 08	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00902	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00905	8d 8c ca 10 08
	00 00		 lea	 ecx, DWORD PTR [edx+ecx*8+2064]
  0090c	ba 02 00 00 00	 mov	 edx, 2
  00911	d1 e2		 shl	 edx, 1
  00913	0f b6 4c 11 01	 movzx	 ecx, BYTE PTR [ecx+edx+1]
  00918	c6 44 48 01 02	 mov	 BYTE PTR [eax+ecx*2+1], 2
$LN1@SortEdgesB:

; 52   : }

  0091d	52		 push	 edx
  0091e	8b cd		 mov	 ecx, ebp
  00920	50		 push	 eax
  00921	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN29@SortEdgesB
  00927	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0092c	58		 pop	 eax
  0092d	5a		 pop	 edx
  0092e	5f		 pop	 edi
  0092f	83 c4 7c	 add	 esp, 124		; 0000007cH
  00932	3b ec		 cmp	 ebp, esp
  00934	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00939	8b e5		 mov	 esp, ebp
  0093b	5d		 pop	 ebp
  0093c	c2 04 00	 ret	 4
  0093f	90		 npad	 1
$LN29@SortEdgesB:
  00940	0a 00 00 00	 DD	 10			; 0000000aH
  00944	00 00 00 00	 DD	 $LN28@SortEdgesB
$LN28@SortEdgesB:
  00948	f4 ff ff ff	 DD	 -12			; fffffff4H
  0094c	02 00 00 00	 DD	 2
  00950	00 00 00 00	 DD	 $LN18@SortEdgesB
  00954	e8 ff ff ff	 DD	 -24			; ffffffe8H
  00958	02 00 00 00	 DD	 2
  0095c	00 00 00 00	 DD	 $LN19@SortEdgesB
  00960	dc ff ff ff	 DD	 -36			; ffffffdcH
  00964	02 00 00 00	 DD	 2
  00968	00 00 00 00	 DD	 $LN20@SortEdgesB
  0096c	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00970	02 00 00 00	 DD	 2
  00974	00 00 00 00	 DD	 $LN21@SortEdgesB
  00978	c4 ff ff ff	 DD	 -60			; ffffffc4H
  0097c	02 00 00 00	 DD	 2
  00980	00 00 00 00	 DD	 $LN22@SortEdgesB
  00984	b8 ff ff ff	 DD	 -72			; ffffffb8H
  00988	02 00 00 00	 DD	 2
  0098c	00 00 00 00	 DD	 $LN23@SortEdgesB
  00990	ac ff ff ff	 DD	 -84			; ffffffacH
  00994	02 00 00 00	 DD	 2
  00998	00 00 00 00	 DD	 $LN24@SortEdgesB
  0099c	a0 ff ff ff	 DD	 -96			; ffffffa0H
  009a0	02 00 00 00	 DD	 2
  009a4	00 00 00 00	 DD	 $LN25@SortEdgesB
  009a8	94 ff ff ff	 DD	 -108			; ffffff94H
  009ac	02 00 00 00	 DD	 2
  009b0	00 00 00 00	 DD	 $LN26@SortEdgesB
  009b4	88 ff ff ff	 DD	 -120			; ffffff88H
  009b8	02 00 00 00	 DD	 2
  009bc	00 00 00 00	 DD	 $LN27@SortEdgesB
$LN27@SortEdgesB:
  009c0	74		 DB	 116			; 00000074H
  009c1	65		 DB	 101			; 00000065H
  009c2	00		 DB	 0
$LN26@SortEdgesB:
  009c3	74		 DB	 116			; 00000074H
  009c4	73		 DB	 115			; 00000073H
  009c5	64		 DB	 100			; 00000064H
  009c6	00		 DB	 0
$LN25@SortEdgesB:
  009c7	74		 DB	 116			; 00000074H
  009c8	65		 DB	 101			; 00000065H
  009c9	00		 DB	 0
$LN24@SortEdgesB:
  009ca	74		 DB	 116			; 00000074H
  009cb	73		 DB	 115			; 00000073H
  009cc	64		 DB	 100			; 00000064H
  009cd	00		 DB	 0
$LN23@SortEdgesB:
  009ce	74		 DB	 116			; 00000074H
  009cf	65		 DB	 101			; 00000065H
  009d0	00		 DB	 0
$LN22@SortEdgesB:
  009d1	74		 DB	 116			; 00000074H
  009d2	73		 DB	 115			; 00000073H
  009d3	64		 DB	 100			; 00000064H
  009d4	00		 DB	 0
$LN21@SortEdgesB:
  009d5	74		 DB	 116			; 00000074H
  009d6	65		 DB	 101			; 00000065H
  009d7	00		 DB	 0
$LN20@SortEdgesB:
  009d8	74		 DB	 116			; 00000074H
  009d9	73		 DB	 115			; 00000073H
  009da	64		 DB	 100			; 00000064H
  009db	00		 DB	 0
$LN19@SortEdgesB:
  009dc	74		 DB	 116			; 00000074H
  009dd	65		 DB	 101			; 00000065H
  009de	00		 DB	 0
$LN18@SortEdgesB:
  009df	74		 DB	 116			; 00000074H
  009e0	73		 DB	 115			; 00000073H
  009e1	64		 DB	 100			; 00000064H
  009e2	00		 DB	 0
?SortEdgesByGroup@CON@@QAEXH@Z ENDP			; CON::SortEdgesByGroup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ??MEDGEDATA@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv65 = -16						; size = 4
tv70 = -12						; size = 4
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_ed$ = 8						; size = 4
??MEDGEDATA@@QBE_NABU0@@Z PROC				; EDGEDATA::operator<, COMDAT
; _this$ = ecx

; 164  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 165  :     return *((ui64 *)(this)) < *((ui64 *)(&ed));

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _ed$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  00012	89 4d f4	 mov	 DWORD PTR tv70[ebp], ecx
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  00018	8b 45 f4	 mov	 eax, DWORD PTR tv70[ebp]
  0001b	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0001e	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00021	77 17		 ja	 SHORT $LN3@operator
  00023	72 0c		 jb	 SHORT $LN5@operator
  00025	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  00028	8b 45 f4	 mov	 eax, DWORD PTR tv70[ebp]
  0002b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0002d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0002f	73 09		 jae	 SHORT $LN3@operator
$LN5@operator:
  00031	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00038	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0003a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator:
  00041	0f b6 45 f0	 movzx	 eax, BYTE PTR tv65[ebp]

; 166  :   };

  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
??MEDGEDATA@@QBE_NABU0@@Z ENDP				; EDGEDATA::operator<
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ??4EDGE@@QAEXABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??4EDGE@@QAEXABU0@@Z PROC				; EDGE::operator=, COMDAT
; _this$ = ecx

; 153  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 154  :     *((ui16 *)(this)) = *((ui16 *)(&e));

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _e$[ebp]
  0000d	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00010	66 89 10	 mov	 WORD PTR [eax], dx

; 155  :   };

  00013	8b e5		 mov	 esp, ebp
  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
??4EDGE@@QAEXABU0@@Z ENDP				; EDGE::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ??OEDGE@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??OEDGE@@QBE_NABU0@@Z PROC				; EDGE::operator>, COMDAT
; _this$ = ecx

; 145  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 146  :     return *((ui16 *)(this)) > *((ui16 *)(&e));

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _e$[ebp]
  00012	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00015	3b c8		 cmp	 ecx, eax
  00017	7e 09		 jle	 SHORT $LN3@operator
  00019	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00020	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@operator:
  00029	0f b6 45 f8	 movzx	 eax, BYTE PTR tv67[ebp]

; 147  :   };

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??OEDGE@@QBE_NABU0@@Z ENDP				; EDGE::operator>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Canon.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\Canon.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
