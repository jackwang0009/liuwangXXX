; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

	TITLE	C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Debug\PlayGame.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG74042 DB	'atlTraceException', 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	??0VECTOR@@QAE@XZ				; VECTOR::VECTOR
PUBLIC	??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z		; VECTOR::operator=
PUBLIC	?Width@DOTS_AND_BOXES@@QBEHXZ			; DOTS_AND_BOXES::Width
PUBLIC	?Height@DOTS_AND_BOXES@@QBEHXZ			; DOTS_AND_BOXES::Height
PUBLIC	??0MOVE@@QAE@XZ					; MOVE::MOVE
PUBLIC	?IsUndoPossible@MOVE_HISTORY@@QAE_NXZ		; MOVE_HISTORY::IsUndoPossible
PUBLIC	?IsRedoPossible@MOVE_HISTORY@@QAE_NXZ		; MOVE_HISTORY::IsRedoPossible
PUBLIC	?AutoPlay@CNewBoxesDoc@@QAE_NXZ			; CNewBoxesDoc::AutoPlay
PUBLIC	?GameSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ	; CNewBoxesDoc::GameSize
PUBLIC	?DotSpacing@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ	; CNewBoxesDoc::DotSpacing
PUBLIC	?ScreenOffset@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ	; CNewBoxesDoc::ScreenOffset
PUBLIC	?DotSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ	; CNewBoxesDoc::DotSize
PUBLIC	?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z		; CNewBoxesDoc::AddMove
PUBLIC	?IsUndoPossible@CNewBoxesDoc@@QAE_NXZ		; CNewBoxesDoc::IsUndoPossible
PUBLIC	?IsRedoPossible@CNewBoxesDoc@@QAE_NXZ		; CNewBoxesDoc::IsRedoPossible
PUBLIC	?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ	; CNewBoxesDoc::Game
PUBLIC	?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; PROCESS::GetTitle
PUBLIC	?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnShutdown
PUBLIC	?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z ; PROCESS::OnLButtonDown
PUBLIC	?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z		; PROCESS::OnChar
PUBLIC	?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z		; PROCESS::OnTimer
PUBLIC	?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnThreadCompletion
PUBLIC	?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnComputerMove
PUBLIC	?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnComputeNimval
PUBLIC	?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnEnterPosition
PUBLIC	?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnPlayGame
PUBLIC	?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnUnDoTurn
PUBLIC	?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnReDoTurn
PUBLIC	?IsIdle@PROCESS@@UBE_NXZ			; PROCESS::IsIdle
PUBLIC	?IsOK_ComputerMove@PROCESS@@UBE_NXZ		; PROCESS::IsOK_ComputerMove
PUBLIC	?IsOK_ComputeNimval@PROCESS@@UBE_NXZ		; PROCESS::IsOK_ComputeNimval
PUBLIC	?IsOK_EnterPosition@PROCESS@@UBE_NXZ		; PROCESS::IsOK_EnterPosition
PUBLIC	?IsOK_PlayGame@PROCESS@@UBE_NXZ			; PROCESS::IsOK_PlayGame
PUBLIC	?IsOK_UnDoTurn@PROCESS@@UBE_NXZ			; PROCESS::IsOK_UnDoTurn
PUBLIC	?IsOK_ReDoTurn@PROCESS@@UBE_NXZ			; PROCESS::IsOK_ReDoTurn
PUBLIC	?IsOK_TestCreation@PROCESS@@UBE_NXZ		; PROCESS::IsOK_TestCreation
PUBLIC	?IsOK_Options@PROCESS@@UBE_NXZ			; PROCESS::IsOK_Options
PUBLIC	??_GPROCESS@@QAEPAXI@Z				; PROCESS::`scalar deleting destructor'
PUBLIC	?OnLButtonDown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@IVCPoint@@@Z ; PROCESS_PLAY_GAME::OnLButtonDown
PUBLIC	?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ	; PROCESS_PLAY_GAME::AutoPlay
PUBLIC	?OnInitialize@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ; PROCESS_PLAY_GAME::OnInitialize
PUBLIC	?OnShutdown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ; PROCESS_PLAY_GAME::OnShutdown
PUBLIC	?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ; PROCESS_PLAY_GAME::OnComputeNimval
PUBLIC	?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ; PROCESS_PLAY_GAME::OnComputerMove
PUBLIC	?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z	; PROCESS_PLAY_GAME::OnChar
PUBLIC	?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ; PROCESS_PLAY_GAME::OnUnDoTurn
PUBLIC	?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ; PROCESS_PLAY_GAME::OnReDoTurn
PUBLIC	?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z ; PROCESS_PLAY_GAME::OnReturn
PUBLIC	?IsOK_UnDoTurn@PROCESS_PLAY_GAME@@EBE_NXZ	; PROCESS_PLAY_GAME::IsOK_UnDoTurn
PUBLIC	?IsOK_ReDoTurn@PROCESS_PLAY_GAME@@EBE_NXZ	; PROCESS_PLAY_GAME::IsOK_ReDoTurn
PUBLIC	??0PROCESS_UNDO_TURN@@QAE@XZ			; PROCESS_UNDO_TURN::PROCESS_UNDO_TURN
PUBLIC	??0PROCESS_REDO_TURN@@QAE@XZ			; PROCESS_REDO_TURN::PROCESS_REDO_TURN
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@ ; `string'
PUBLIC	??_7PROCESS_UNDO_TURN@@6B@			; PROCESS_UNDO_TURN::`vftable'
PUBLIC	??_7PROCESS_REDO_TURN@@6B@			; PROCESS_REDO_TURN::`vftable'
PUBLIC	??_R4PROCESS_UNDO_TURN@@6B@			; PROCESS_UNDO_TURN::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPROCESS_UNDO_TURN@@@8			; PROCESS_UNDO_TURN `RTTI Type Descriptor'
PUBLIC	??_R3PROCESS_UNDO_TURN@@8			; PROCESS_UNDO_TURN::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PROCESS_UNDO_TURN@@8			; PROCESS_UNDO_TURN::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PROCESS_UNDO_TURN@@8		; PROCESS_UNDO_TURN::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@PROCESS@@8			; PROCESS::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVPROCESS@@@8				; PROCESS `RTTI Type Descriptor'
PUBLIC	??_R3PROCESS@@8					; PROCESS::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PROCESS@@8					; PROCESS::`RTTI Base Class Array'
PUBLIC	??_R4PROCESS_REDO_TURN@@6B@			; PROCESS_REDO_TURN::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPROCESS_REDO_TURN@@@8			; PROCESS_REDO_TURN `RTTI Type Descriptor'
PUBLIC	??_R3PROCESS_REDO_TURN@@8			; PROCESS_REDO_TURN::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PROCESS_REDO_TURN@@8			; PROCESS_REDO_TURN::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PROCESS_REDO_TURN@@8		; PROCESS_REDO_TURN::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	??0CON@@QAE@XZ:PROC				; CON::CON
EXTRN	??1CON@@QAE@XZ:PROC				; CON::~CON
EXTRN	??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z:PROC	; CON::operator=
EXTRN	?InvalidateView@@YAXXZ:PROC			; InvalidateView
EXTRN	?FindCaptures@MOVE@@QAEXPAVDOTS_AND_BOXES@@@Z:PROC ; MOVE::FindCaptures
EXTRN	?SetCaptures@MOVE@@QAEXPAVDOTS_AND_BOXES@@@Z:PROC ; MOVE::SetCaptures
EXTRN	?AddMove@MOVE_HISTORY@@QAEXABUMOVE@@@Z:PROC	; MOVE_HISTORY::AddMove
EXTRN	?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z:PROC ; CNewBoxesDoc::HorizontalLineType
EXTRN	?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z:PROC ; CNewBoxesDoc::VerticalLineType
EXTRN	?BoxOwner@CNewBoxesDoc@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z:PROC ; CNewBoxesDoc::BoxOwner
EXTRN	?IncrementHLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z:PROC ; CNewBoxesDoc::IncrementHLineType
EXTRN	?IncrementVLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z:PROC ; CNewBoxesDoc::IncrementVLineType
EXTRN	?IncrementBoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z:PROC ; CNewBoxesDoc::IncrementBoxOwner
EXTRN	?Score@CNewBoxesDoc@@QBE?AVVECTOR@@XZ:PROC	; CNewBoxesDoc::Score
EXTRN	?IsMoveAvailable@CNewBoxesDoc@@QBE_NXZ:PROC	; CNewBoxesDoc::IsMoveAvailable
EXTRN	?PopProcess@PROCESS@@IAEXXZ:PROC		; PROCESS::PopProcess
EXTRN	?PushProcess@PROCESS@@IAEXPAV1@@Z:PROC		; PROCESS::PushProcess
EXTRN	??0PROCESS@@QAE@XZ:PROC				; PROCESS::PROCESS
EXTRN	??1PROCESS@@QAE@XZ:PROC				; PROCESS::~PROCESS
EXTRN	??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z:PROC ; PROCESS_COMPUTER_MOVE::PROCESS_COMPUTER_MOVE
EXTRN	??0PROCESS_NIMVALUE@@QAE@PAVDOTS_AND_BOXES@@@Z:PROC ; PROCESS_NIMVALUE::PROCESS_NIMVALUE
EXTRN	?OnInitialize@PROCESS_UNDO_TURN@@EAE?AW4STATUS@@XZ:PROC ; PROCESS_UNDO_TURN::OnInitialize
EXTRN	?OnReturn@PROCESS_UNDO_TURN@@EAE?AW4STATUS@@PAVPROCESS@@@Z:PROC ; PROCESS_UNDO_TURN::OnReturn
EXTRN	?OnInitialize@PROCESS_REDO_TURN@@EAE?AW4STATUS@@XZ:PROC ; PROCESS_REDO_TURN::OnInitialize
EXTRN	?OnReturn@PROCESS_REDO_TURN@@EAE?AW4STATUS@@PAVPROCESS@@@Z:PROC ; PROCESS_REDO_TURN::OnReturn
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?pDoc@@3PAVCNewBoxesDoc@@A:DWORD		; pDoc
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@PROCESS_REDO_TURN@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PROCESS_REDO_TURN@@8 DD FLAT:??_R0?AVPROCESS_REDO_TURN@@@8 ; PROCESS_REDO_TURN::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PROCESS_REDO_TURN@@8
rdata$r	ENDS
;	COMDAT ??_R2PROCESS_REDO_TURN@@8
rdata$r	SEGMENT
??_R2PROCESS_REDO_TURN@@8 DD FLAT:??_R1A@?0A@EA@PROCESS_REDO_TURN@@8 ; PROCESS_REDO_TURN::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R3PROCESS_REDO_TURN@@8
rdata$r	SEGMENT
??_R3PROCESS_REDO_TURN@@8 DD 00H			; PROCESS_REDO_TURN::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PROCESS_REDO_TURN@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPROCESS_REDO_TURN@@@8
data$rs	SEGMENT
??_R0?AVPROCESS_REDO_TURN@@@8 DD FLAT:??_7type_info@@6B@ ; PROCESS_REDO_TURN `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPROCESS_REDO_TURN@@', 00H
data$rs	ENDS
;	COMDAT ??_R4PROCESS_REDO_TURN@@6B@
rdata$r	SEGMENT
??_R4PROCESS_REDO_TURN@@6B@ DD 00H			; PROCESS_REDO_TURN::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPROCESS_REDO_TURN@@@8
	DD	FLAT:??_R3PROCESS_REDO_TURN@@8
rdata$r	ENDS
;	COMDAT ??_R2PROCESS@@8
rdata$r	SEGMENT
??_R2PROCESS@@8 DD FLAT:??_R1A@?0A@EA@PROCESS@@8	; PROCESS::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PROCESS@@8
rdata$r	SEGMENT
??_R3PROCESS@@8 DD 00H					; PROCESS::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPROCESS@@@8
data$rs	SEGMENT
??_R0?AVPROCESS@@@8 DD FLAT:??_7type_info@@6B@		; PROCESS `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPROCESS@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@PROCESS@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PROCESS@@8 DD FLAT:??_R0?AVPROCESS@@@8	; PROCESS::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PROCESS_UNDO_TURN@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PROCESS_UNDO_TURN@@8 DD FLAT:??_R0?AVPROCESS_UNDO_TURN@@@8 ; PROCESS_UNDO_TURN::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PROCESS_UNDO_TURN@@8
rdata$r	ENDS
;	COMDAT ??_R2PROCESS_UNDO_TURN@@8
rdata$r	SEGMENT
??_R2PROCESS_UNDO_TURN@@8 DD FLAT:??_R1A@?0A@EA@PROCESS_UNDO_TURN@@8 ; PROCESS_UNDO_TURN::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R3PROCESS_UNDO_TURN@@8
rdata$r	SEGMENT
??_R3PROCESS_UNDO_TURN@@8 DD 00H			; PROCESS_UNDO_TURN::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PROCESS_UNDO_TURN@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPROCESS_UNDO_TURN@@@8
data$rs	SEGMENT
??_R0?AVPROCESS_UNDO_TURN@@@8 DD FLAT:??_7type_info@@6B@ ; PROCESS_UNDO_TURN `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPROCESS_UNDO_TURN@@', 00H
data$rs	ENDS
;	COMDAT ??_R4PROCESS_UNDO_TURN@@6B@
rdata$r	SEGMENT
??_R4PROCESS_UNDO_TURN@@6B@ DD 00H			; PROCESS_UNDO_TURN::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPROCESS_UNDO_TURN@@@8
	DD	FLAT:??_R3PROCESS_UNDO_TURN@@8
rdata$r	ENDS
;	COMDAT ??_7PROCESS_REDO_TURN@@6B@
CONST	SEGMENT
??_7PROCESS_REDO_TURN@@6B@ DD FLAT:??_R4PROCESS_REDO_TURN@@6B@ ; PROCESS_REDO_TURN::`vftable'
	DD	FLAT:?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
	DD	FLAT:?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnReturn@PROCESS_REDO_TURN@@EAE?AW4STATUS@@PAVPROCESS@@@Z
	DD	FLAT:?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z
	DD	FLAT:?OnInitialize@PROCESS_REDO_TURN@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z
	DD	FLAT:?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z
	DD	FLAT:?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?IsIdle@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputerMove@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputeNimval@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_EnterPosition@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_PlayGame@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_UnDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ReDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_TestCreation@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_Options@PROCESS@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7PROCESS_UNDO_TURN@@6B@
CONST	SEGMENT
??_7PROCESS_UNDO_TURN@@6B@ DD FLAT:??_R4PROCESS_UNDO_TURN@@6B@ ; PROCESS_UNDO_TURN::`vftable'
	DD	FLAT:?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
	DD	FLAT:?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnReturn@PROCESS_UNDO_TURN@@EAE?AW4STATUS@@PAVPROCESS@@@Z
	DD	FLAT:?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z
	DD	FLAT:?OnInitialize@PROCESS_UNDO_TURN@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z
	DD	FLAT:?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z
	DD	FLAT:?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?IsIdle@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputerMove@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputeNimval@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_EnterPosition@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_PlayGame@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_UnDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ReDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_TestCreation@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_Options@PROCESS@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
CONST	SEGMENT
??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@ DB 'G'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '\'
	DB	00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T', 00H
	DB	'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H, 'S'
	DB	00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.', 00H
	DB	'3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2', 00H, '1'
	DB	00H, '5', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm', 00H
	DB	'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0PROCESS_REDO_TURN@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0PROCESS_REDO_TURN@@QAE@XZ$0
__ehfuncinfo$??0PROCESS_REDO_TURN@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0PROCESS_REDO_TURN@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0PROCESS_UNDO_TURN@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0PROCESS_UNDO_TURN@@QAE@XZ$0
__ehfuncinfo$??0PROCESS_UNDO_TURN@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0PROCESS_UNDO_TURN@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z$0
__unwindtable$?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0
__unwindtable$?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0
__unwindtable$?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z$0
__unwindtable$?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0
__unwindtable$?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0
__unwindtable$?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ$0
__ehfuncinfo$?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z$0
	DD	01dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0
	DD	01dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0
	DD	01dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0
	DD	01dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0
	DD	01dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ$0
	DD	01dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z$0
	DD	019H
	DD	026H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z
	DD	037H
	DD	0c4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?OnLButtonDown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@IVCPoint@@@Z
	DD	025H
	DD	044eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0100H
voltbl	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0PROCESS_REDO_TURN@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0PROCESS_REDO_TURN@@QAE@XZ PROC			; PROCESS_REDO_TURN::PROCESS_REDO_TURN, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0PROCESS_REDO_TURN@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0PROCESS@@QAE@XZ	; PROCESS::PROCESS
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PROCESS_REDO_TURN@@6B@
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 08	 add	 ecx, 8
  0004b	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ
  00050	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00057	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0PROCESS_REDO_TURN@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1PROCESS@@QAE@XZ	; PROCESS::~PROCESS
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0PROCESS_REDO_TURN@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0PROCESS_REDO_TURN@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0PROCESS_REDO_TURN@@QAE@XZ ENDP			; PROCESS_REDO_TURN::PROCESS_REDO_TURN
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0PROCESS_UNDO_TURN@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0PROCESS_UNDO_TURN@@QAE@XZ PROC			; PROCESS_UNDO_TURN::PROCESS_UNDO_TURN, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0PROCESS_UNDO_TURN@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0PROCESS@@QAE@XZ	; PROCESS::PROCESS
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PROCESS_UNDO_TURN@@6B@
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 08	 add	 ecx, 8
  0004b	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ
  00050	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00057	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00064	59		 pop	 ecx
  00065	83 c4 10	 add	 esp, 16			; 00000010H
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0PROCESS_UNDO_TURN@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1PROCESS@@QAE@XZ	; PROCESS::~PROCESS
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0PROCESS_UNDO_TURN@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0PROCESS_UNDO_TURN@@QAE@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0PROCESS_UNDO_TURN@@QAE@XZ ENDP			; PROCESS_UNDO_TURN::PROCESS_UNDO_TURN
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ReDoTurn@PROCESS_PLAY_GAME@@EBE_NXZ PROC		; PROCESS_PLAY_GAME::IsOK_ReDoTurn
; _this$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 178  :   return pDoc->IsRedoPossible();

  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00014	e8 00 00 00 00	 call	 ?IsRedoPossible@CNewBoxesDoc@@QAE_NXZ ; CNewBoxesDoc::IsRedoPossible

; 179  : }

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?IsOK_ReDoTurn@PROCESS_PLAY_GAME@@EBE_NXZ ENDP		; PROCESS_PLAY_GAME::IsOK_ReDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_UnDoTurn@PROCESS_PLAY_GAME@@EBE_NXZ PROC		; PROCESS_PLAY_GAME::IsOK_UnDoTurn
; _this$ = ecx

; 172  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 173  :   return pDoc->IsUndoPossible();

  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00014	e8 00 00 00 00	 call	 ?IsUndoPossible@CNewBoxesDoc@@QAE_NXZ ; CNewBoxesDoc::IsUndoPossible

; 174  : }

  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
?IsOK_UnDoTurn@PROCESS_PLAY_GAME@@EBE_NXZ ENDP		; PROCESS_PLAY_GAME::IsOK_UnDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
tv149 = -44						; size = 4
tv68 = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -32						; size = 4
$T4 = -28						; size = 8
$T5 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pProcess$ = 8						; size = 4
?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z PROC ; PROCESS_PLAY_GAME::OnReturn
; _this$ = ecx

; 47   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001c	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  0001f	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00022	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00025	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00028	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 48   :   delete pProcess;

  00045	8b 45 08	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00048	89 45 ec	 mov	 DWORD PTR $T5[ebp], eax
  0004b	83 7d ec 00	 cmp	 DWORD PTR $T5[ebp], 0
  0004f	74 0f		 je	 SHORT $LN5@OnReturn
  00051	6a 01		 push	 1
  00053	8b 4d ec	 mov	 ecx, DWORD PTR $T5[ebp]
  00056	e8 00 00 00 00	 call	 ??_GPROCESS@@QAEPAXI@Z
  0005b	89 45 d8	 mov	 DWORD PTR tv68[ebp], eax
  0005e	eb 07		 jmp	 SHORT $LN6@OnReturn
$LN5@OnReturn:
  00060	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN6@OnReturn:

; 49   :   if (    (m_score.x != pDoc->Score().x)
; 50   :        && (m_score.x >= 0)
; 51   :        && pDoc->IsMoveAvailable())

  00067	8d 4d e4	 lea	 ecx, DWORD PTR $T4[ebp]
  0006a	51		 push	 ecx
  0006b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00071	e8 00 00 00 00	 call	 ?Score@CNewBoxesDoc@@QBE?AVVECTOR@@XZ ; CNewBoxesDoc::Score
  00076	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00079	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0007c	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0007e	74 77		 je	 SHORT $LN2@OnReturn
  00080	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00083	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00087	7c 6e		 jl	 SHORT $LN2@OnReturn
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0008f	e8 00 00 00 00	 call	 ?IsMoveAvailable@CNewBoxesDoc@@QBE_NXZ ; CNewBoxesDoc::IsMoveAvailable
  00094	0f b6 c0	 movzx	 eax, al
  00097	85 c0		 test	 eax, eax
  00099	74 5c		 je	 SHORT $LN2@OnReturn

; 52   :   {
; 53   :     PushProcess(new PROCESS_COMPUTER_MOVE(&pDoc->Game()));

  0009b	6a 44		 push	 68			; 00000044H
  0009d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a2	83 c4 04	 add	 esp, 4
  000a5	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
  000a8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000af	83 7d dc 00	 cmp	 DWORD PTR $T2[ebp], 0
  000b3	74 19		 je	 SHORT $LN7@OnReturn
  000b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  000bb	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  000c0	50		 push	 eax
  000c1	8b 4d dc	 mov	 ecx, DWORD PTR $T2[ebp]
  000c4	e8 00 00 00 00	 call	 ??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z ; PROCESS_COMPUTER_MOVE::PROCESS_COMPUTER_MOVE
  000c9	89 45 d4	 mov	 DWORD PTR tv149[ebp], eax
  000cc	eb 07		 jmp	 SHORT $LN8@OnReturn
$LN7@OnReturn:
  000ce	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv149[ebp], 0
$LN8@OnReturn:
  000d5	8b 4d d4	 mov	 ecx, DWORD PTR tv149[ebp]
  000d8	89 4d e0	 mov	 DWORD PTR $T3[ebp], ecx
  000db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000e2	8b 55 e0	 mov	 edx, DWORD PTR $T3[ebp]
  000e5	52		 push	 edx
  000e6	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000e9	e8 00 00 00 00	 call	 ?PushProcess@PROCESS@@IAEXPAV1@@Z ; PROCESS::PushProcess

; 54   :     return STATUS_OK;

  000ee	b8 03 00 00 00	 mov	 eax, 3
  000f3	eb 07		 jmp	 SHORT $LN1@OnReturn

; 55   :   }

  000f5	eb 05		 jmp	 SHORT $LN1@OnReturn
$LN2@OnReturn:

; 56   :   else
; 57   :   {
; 58   :     //this->m_title = "Playing Game - Your Move. CTRL-C to make computer move.";
; 59   :     return STATUS_OK;

  000f7	b8 03 00 00 00	 mov	 eax, 3
$LN1@OnReturn:

; 60   :   };
; 61   : }

  000fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00106	59		 pop	 ecx
  00107	83 c4 2c	 add	 esp, 44			; 0000002cH
  0010a	3b ec		 cmp	 ebp, esp
  0010c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00111	8b e5		 mov	 esp, ebp
  00113	5d		 pop	 ebp
  00114	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z$0:
  00000	6a 44		 push	 68			; 00000044H
  00002	8b 45 dc	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnReturn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@PAVPROCESS@@@Z ENDP ; PROCESS_PLAY_GAME::OnReturn
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
tv83 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ PROC	; PROCESS_PLAY_GAME::OnReDoTurn
; _this$ = ecx

; 189  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 190  :   PushProcess(new PROCESS_REDO_TURN);

  00039	6a 40		 push	 64			; 00000040H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	83 7d e8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00051	74 0d		 je	 SHORT $LN3@OnReDoTurn
  00053	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00056	e8 00 00 00 00	 call	 ??0PROCESS_REDO_TURN@@QAE@XZ
  0005b	89 45 e4	 mov	 DWORD PTR tv83[ebp], eax
  0005e	eb 07		 jmp	 SHORT $LN4@OnReDoTurn
$LN3@OnReDoTurn:
  00060	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN4@OnReDoTurn:
  00067	8b 45 e4	 mov	 eax, DWORD PTR tv83[ebp]
  0006a	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  0006d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00074	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  00077	51		 push	 ecx
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?PushProcess@PROCESS@@IAEXPAV1@@Z ; PROCESS::PushProcess

; 191  :   m_score.x = -1;

  00080	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00083	c7 42 08 ff ff
	ff ff		 mov	 DWORD PTR [edx+8], -1

; 192  :   return STATUS_OK;

  0008a	b8 03 00 00 00	 mov	 eax, 3

; 193  : }

  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0:
  00000	6a 40		 push	 64			; 00000040H
  00002	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnReDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ENDP	; PROCESS_PLAY_GAME::OnReDoTurn
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
tv83 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ PROC	; PROCESS_PLAY_GAME::OnUnDoTurn
; _this$ = ecx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 183  :   PushProcess(new PROCESS_UNDO_TURN);

  00039	6a 40		 push	 64			; 00000040H
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	83 7d e8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00051	74 0d		 je	 SHORT $LN3@OnUnDoTurn
  00053	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00056	e8 00 00 00 00	 call	 ??0PROCESS_UNDO_TURN@@QAE@XZ
  0005b	89 45 e4	 mov	 DWORD PTR tv83[ebp], eax
  0005e	eb 07		 jmp	 SHORT $LN4@OnUnDoTurn
$LN3@OnUnDoTurn:
  00060	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv83[ebp], 0
$LN4@OnUnDoTurn:
  00067	8b 45 e4	 mov	 eax, DWORD PTR tv83[ebp]
  0006a	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  0006d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00074	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  00077	51		 push	 ecx
  00078	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	e8 00 00 00 00	 call	 ?PushProcess@PROCESS@@IAEXPAV1@@Z ; PROCESS::PushProcess

; 184  :   m_score.x = -1;

  00080	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00083	c7 42 08 ff ff
	ff ff		 mov	 DWORD PTR [edx+8], -1

; 185  :   return STATUS_OK;

  0008a	b8 03 00 00 00	 mov	 eax, 3

; 186  : }

  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	83 c4 1c	 add	 esp, 28			; 0000001cH
  0009d	3b ec		 cmp	 ebp, esp
  0009f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a4	8b e5		 mov	 esp, ebp
  000a6	5d		 pop	 ebp
  000a7	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0:
  00000	6a 40		 push	 64			; 00000040H
  00002	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnUnDoTurn@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ENDP	; PROCESS_PLAY_GAME::OnUnDoTurn
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
$T2 = -5168						; size = 4
_con$3 = -5160						; size = 5136
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_nChar$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z PROC	; PROCESS_PLAY_GAME::OnChar
; _this$ = ecx

; 157  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 24 14 00 00	 mov	 eax, 5156		; 00001424H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	57		 push	 edi
  0001c	51		 push	 ecx
  0001d	8d bd d0 eb ff
	ff		 lea	 edi, DWORD PTR [ebp-5168]
  00023	b9 09 05 00 00	 mov	 ecx, 1289		; 00000509H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	59		 pop	 ecx
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	50		 push	 eax
  0003b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00044	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 158  :   if (nChar == 27)

  00047	83 7d 08 1b	 cmp	 DWORD PTR _nChar$[ebp], 27 ; 0000001bH
  0004b	75 55		 jne	 SHORT $LN2@OnChar

; 159  :   {
; 160  :     CON con;

  0004d	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$3[ebp]
  00053	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 161  :     con = pDoc->Game();

  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00065	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  0006a	50		 push	 eax
  0006b	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$3[ebp]
  00071	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 162  :     PopProcess();

  00076	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?PopProcess@PROCESS@@IAEXXZ ; PROCESS::PopProcess

; 163  : #if (defined SW_DUMP)||(defined NS_DUMP)
; 164  :     CloseDump();
; 165  : #endif
; 166  :     return STATUS_DONE;

  0007e	c7 85 d0 eb ff
	ff 02 00 00 00	 mov	 DWORD PTR $T2[ebp], 2
  00088	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008f	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$3[ebp]
  00095	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  0009a	8b 85 d0 eb ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  000a0	eb 05		 jmp	 SHORT $LN1@OnChar
$LN2@OnChar:

; 167  :   };
; 168  :   return STATUS_OK;

  000a2	b8 03 00 00 00	 mov	 eax, 3
$LN1@OnChar:

; 169  : }

  000a7	52		 push	 edx
  000a8	8b cd		 mov	 ecx, ebp
  000aa	50		 push	 eax
  000ab	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@OnChar
  000b1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000b6	58		 pop	 eax
  000b7	5a		 pop	 edx
  000b8	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000bb	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c2	59		 pop	 ecx
  000c3	5f		 pop	 edi
  000c4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000c7	33 cd		 xor	 ecx, ebp
  000c9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ce	81 c4 30 14 00
	00		 add	 esp, 5168		; 00001430H
  000d4	3b ec		 cmp	 ebp, esp
  000d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000db	8b e5		 mov	 esp, ebp
  000dd	5d		 pop	 ebp
  000de	c2 0c 00	 ret	 12			; 0000000cH
  000e1	0f 1f 00	 npad	 3
$LN8@OnChar:
  000e4	01 00 00 00	 DD	 1
  000e8	00 00 00 00	 DD	 $LN7@OnChar
$LN7@OnChar:
  000ec	d8 eb ff ff	 DD	 -5160			; ffffebd8H
  000f0	10 14 00 00	 DD	 5136			; 00001410H
  000f4	00 00 00 00	 DD	 $LN5@OnChar
$LN5@OnChar:
  000f8	63		 DB	 99			; 00000063H
  000f9	6f		 DB	 111			; 0000006fH
  000fa	6e		 DB	 110			; 0000006eH
  000fb	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z$0:
  00000	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a d4 eb ff
	ff		 mov	 ecx, DWORD PTR [edx-5164]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnChar@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@III@Z ENDP	; PROCESS_PLAY_GAME::OnChar
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
tv91 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ PROC ; PROCESS_PLAY_GAME::OnComputerMove
; _this$ = ecx

; 24   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 25   :   m_score = pDoc->Score();

  0003f	8d 45 e8	 lea	 eax, DWORD PTR $T4[ebp]
  00042	50		 push	 eax
  00043	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00049	e8 00 00 00 00	 call	 ?Score@CNewBoxesDoc@@QBE?AVVECTOR@@XZ ; CNewBoxesDoc::Score
  0004e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00050	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00053	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00056	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00059	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 26   :   PushProcess(new PROCESS_COMPUTER_MOVE(&pDoc->Game()));

  0005c	6a 44		 push	 68			; 00000044H
  0005e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00063	83 c4 04	 add	 esp, 4
  00066	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00069	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00070	83 7d e0 00	 cmp	 DWORD PTR $T2[ebp], 0
  00074	74 19		 je	 SHORT $LN3@OnComputer
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0007c	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  00081	50		 push	 eax
  00082	8b 4d e0	 mov	 ecx, DWORD PTR $T2[ebp]
  00085	e8 00 00 00 00	 call	 ??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z ; PROCESS_COMPUTER_MOVE::PROCESS_COMPUTER_MOVE
  0008a	89 45 dc	 mov	 DWORD PTR tv91[ebp], eax
  0008d	eb 07		 jmp	 SHORT $LN4@OnComputer
$LN3@OnComputer:
  0008f	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv91[ebp], 0
$LN4@OnComputer:
  00096	8b 4d dc	 mov	 ecx, DWORD PTR tv91[ebp]
  00099	89 4d e4	 mov	 DWORD PTR $T3[ebp], ecx
  0009c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a3	8b 55 e4	 mov	 edx, DWORD PTR $T3[ebp]
  000a6	52		 push	 edx
  000a7	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000aa	e8 00 00 00 00	 call	 ?PushProcess@PROCESS@@IAEXPAV1@@Z ; PROCESS::PushProcess

; 27   :   return STATUS_OK;

  000af	b8 03 00 00 00	 mov	 eax, 3

; 28   : }

  000b4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000b7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000be	59		 pop	 ecx
  000bf	83 c4 24	 add	 esp, 36			; 00000024H
  000c2	3b ec		 cmp	 ebp, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0:
  00000	6a 44		 push	 68			; 00000044H
  00002	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnComputerMove@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ENDP ; PROCESS_PLAY_GAME::OnComputerMove
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
tv86 = -28						; size = 4
$T2 = -24						; size = 4
$T3 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ PROC ; PROCESS_PLAY_GAME::OnComputeNimval
; _this$ = ecx

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0001c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0001f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00022	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00025	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002a	33 c5		 xor	 eax, ebp
  0002c	50		 push	 eax
  0002d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00030	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00036	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 32   :   PushProcess(new PROCESS_NIMVALUE(&pDoc->Game()));

  00039	6a 0c		 push	 12			; 0000000cH
  0003b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00040	83 c4 04	 add	 esp, 4
  00043	89 45 e8	 mov	 DWORD PTR $T2[ebp], eax
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	83 7d e8 00	 cmp	 DWORD PTR $T2[ebp], 0
  00051	74 19		 je	 SHORT $LN3@OnComputeN
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00059	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  0005e	50		 push	 eax
  0005f	8b 4d e8	 mov	 ecx, DWORD PTR $T2[ebp]
  00062	e8 00 00 00 00	 call	 ??0PROCESS_NIMVALUE@@QAE@PAVDOTS_AND_BOXES@@@Z ; PROCESS_NIMVALUE::PROCESS_NIMVALUE
  00067	89 45 e4	 mov	 DWORD PTR tv86[ebp], eax
  0006a	eb 07		 jmp	 SHORT $LN4@OnComputeN
$LN3@OnComputeN:
  0006c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv86[ebp], 0
$LN4@OnComputeN:
  00073	8b 45 e4	 mov	 eax, DWORD PTR tv86[ebp]
  00076	89 45 ec	 mov	 DWORD PTR $T3[ebp], eax
  00079	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00080	8b 4d ec	 mov	 ecx, DWORD PTR $T3[ebp]
  00083	51		 push	 ecx
  00084	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00087	e8 00 00 00 00	 call	 ?PushProcess@PROCESS@@IAEXPAV1@@Z ; PROCESS::PushProcess

; 33   :   m_score.x = -1;

  0008c	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  0008f	c7 42 08 ff ff
	ff ff		 mov	 DWORD PTR [edx+8], -1

; 34   :   return STATUS_OK;

  00096	b8 03 00 00 00	 mov	 eax, 3

; 35   : }

  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	83 c4 1c	 add	 esp, 28			; 0000001cH
  000a9	3b ec		 cmp	 ebp, esp
  000ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ$0:
  00000	6a 0c		 push	 12			; 0000000cH
  00002	8b 45 e8	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnComputeNimval@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ENDP ; PROCESS_PLAY_GAME::OnComputeNimval
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnShutdown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ PROC	; PROCESS_PLAY_GAME::OnShutdown
; _this$ = ecx

; 19   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 20   :   return STATUS_DONE;

  00007	b8 02 00 00 00	 mov	 eax, 2

; 21   : }

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnShutdown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ENDP	; PROCESS_PLAY_GAME::OnShutdown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnInitialize@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ PROC	; PROCESS_PLAY_GAME::OnInitialize
; _this$ = ecx

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 14   :  // m_title = "Playing a Game.  Your Move.  CTRL-C makes computer move.";
; 15   :   return STATUS_OK;

  00007	b8 03 00 00 00	 mov	 eax, 3

; 16   : }

  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnInitialize@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@XZ ENDP	; PROCESS_PLAY_GAME::OnInitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
tv95 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
$T4 = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ PROC	; PROCESS_PLAY_GAME::AutoPlay
; _this$ = ecx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 18	 sub	 esp, 24			; 00000018H
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  0001c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0001f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00022	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00025	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00028	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00030	33 c5		 xor	 eax, ebp
  00032	50		 push	 eax
  00033	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00036	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003c	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx

; 40   :   if (!pDoc->AutoPlay()) return STATUS_DONE;

  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00045	e8 00 00 00 00	 call	 ?AutoPlay@CNewBoxesDoc@@QAE_NXZ ; CNewBoxesDoc::AutoPlay
  0004a	0f b6 c0	 movzx	 eax, al
  0004d	85 c0		 test	 eax, eax
  0004f	75 07		 jne	 SHORT $LN2@AutoPlay
  00051	b8 02 00 00 00	 mov	 eax, 2
  00056	eb 75		 jmp	 SHORT $LN1@AutoPlay
$LN2@AutoPlay:

; 41   :   m_score = pDoc->Score();

  00058	8d 4d e8	 lea	 ecx, DWORD PTR $T4[ebp]
  0005b	51		 push	 ecx
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00062	e8 00 00 00 00	 call	 ?Score@CNewBoxesDoc@@QBE?AVVECTOR@@XZ ; CNewBoxesDoc::Score
  00067	8b 10		 mov	 edx, DWORD PTR [eax]
  00069	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006c	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00072	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 42   :   PushProcess(new PROCESS_COMPUTER_MOVE(&pDoc->Game()));

  00075	6a 44		 push	 68			; 00000044H
  00077	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007c	83 c4 04	 add	 esp, 4
  0007f	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
  00082	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00089	83 7d e0 00	 cmp	 DWORD PTR $T2[ebp], 0
  0008d	74 19		 je	 SHORT $LN4@AutoPlay
  0008f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00095	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  0009a	50		 push	 eax
  0009b	8b 4d e0	 mov	 ecx, DWORD PTR $T2[ebp]
  0009e	e8 00 00 00 00	 call	 ??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z ; PROCESS_COMPUTER_MOVE::PROCESS_COMPUTER_MOVE
  000a3	89 45 dc	 mov	 DWORD PTR tv95[ebp], eax
  000a6	eb 07		 jmp	 SHORT $LN5@AutoPlay
$LN4@AutoPlay:
  000a8	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN5@AutoPlay:
  000af	8b 55 dc	 mov	 edx, DWORD PTR tv95[ebp]
  000b2	89 55 e4	 mov	 DWORD PTR $T3[ebp], edx
  000b5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000bc	8b 45 e4	 mov	 eax, DWORD PTR $T3[ebp]
  000bf	50		 push	 eax
  000c0	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  000c3	e8 00 00 00 00	 call	 ?PushProcess@PROCESS@@IAEXPAV1@@Z ; PROCESS::PushProcess

; 43   :   return STATUS_OK;

  000c8	b8 03 00 00 00	 mov	 eax, 3
$LN1@AutoPlay:

; 44   : }

  000cd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000d7	59		 pop	 ecx
  000d8	83 c4 24	 add	 esp, 36			; 00000024H
  000db	3b ec		 cmp	 ebp, esp
  000dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ$0:
  00000	6a 44		 push	 68			; 00000044H
  00002	8b 45 e0	 mov	 eax, DWORD PTR $T2[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
  0000f	cc		 int	 3
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
__ehhandler$?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ:
  00014	90		 npad	 1
  00015	90		 npad	 1
  00016	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001d	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ ENDP	; PROCESS_PLAY_GAME::AutoPlay
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
_TEXT	SEGMENT
$T1 = -192						; size = 8
$T2 = -184						; size = 8
$T3 = -176						; size = 8
$T4 = -168						; size = 8
_y$ = -160						; size = 4
_x$ = -156						; size = 4
_move$ = -148						; size = 56
_dotNum$ = -84						; size = 8
_dotSize$ = -68						; size = 8
_gameSize$ = -52					; size = 8
_dotSpacing$ = -36					; size = 8
_screenOffset$ = -20					; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
_point$ = 12						; size = 8
?OnLButtonDown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@IVCPoint@@@Z PROC ; PROCESS_PLAY_GAME::OnLButtonDown
; _this$ = ecx

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00011	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 66   : 	// TODO: Add your message handler code here and/or call default
; 67   : 	POINT screenOffset;
; 68   :   POINT dotSpacing;
; 69   :   POINT gameSize;
; 70   :   POINT dotSize;
; 71   :   POINT dotNum;
; 72   :   MOVE move;

  0002b	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _move$[ebp]
  00031	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 73   :   int x, y;
; 74   :   move.moveType = MT_EDIT;    

  00036	c7 45 a0 0f 00
	00 00		 mov	 DWORD PTR _move$[ebp+52], 15 ; 0000000fH

; 75   :   move.boxesCaptured[0].x = -1;

  0003d	b8 08 00 00 00	 mov	 eax, 8
  00042	6b c8 00	 imul	 ecx, eax, 0
  00045	c7 84 0d 78 ff
	ff ff ff ff ff
	ff		 mov	 DWORD PTR _move$[ebp+ecx+12], -1

; 76   :   move.boxesCaptured[1].x = -1;

  00050	ba 08 00 00 00	 mov	 edx, 8
  00055	c1 e2 00	 shl	 edx, 0
  00058	c7 84 15 78 ff
	ff ff ff ff ff
	ff		 mov	 DWORD PTR _move$[ebp+edx+12], -1

; 77   :   move.dotNum.x = -1;

  00063	c7 85 6c ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _move$[ebp], -1

; 78   :   screenOffset = pDoc->ScreenOffset();

  0006d	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00073	50		 push	 eax
  00074	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0007a	e8 00 00 00 00	 call	 ?ScreenOffset@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ ; CNewBoxesDoc::ScreenOffset
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00084	89 4d ec	 mov	 DWORD PTR _screenOffset$[ebp], ecx
  00087	89 55 f0	 mov	 DWORD PTR _screenOffset$[ebp+4], edx

; 79   :   dotSpacing = pDoc->DotSpacing();

  0008a	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00090	50		 push	 eax
  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00097	e8 00 00 00 00	 call	 ?DotSpacing@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ ; CNewBoxesDoc::DotSpacing
  0009c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000a1	89 4d dc	 mov	 DWORD PTR _dotSpacing$[ebp], ecx
  000a4	89 55 e0	 mov	 DWORD PTR _dotSpacing$[ebp+4], edx

; 80   :   gameSize = pDoc->GameSize();

  000a7	8d 85 48 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000ad	50		 push	 eax
  000ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  000b4	e8 00 00 00 00	 call	 ?GameSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ ; CNewBoxesDoc::GameSize
  000b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000bb	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000be	89 4d cc	 mov	 DWORD PTR _gameSize$[ebp], ecx
  000c1	89 55 d0	 mov	 DWORD PTR _gameSize$[ebp+4], edx

; 81   :   dotSize = pDoc->DotSize();

  000c4	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  000ca	50		 push	 eax
  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  000d1	e8 00 00 00 00	 call	 ?DotSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ ; CNewBoxesDoc::DotSize
  000d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d8	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000db	89 4d bc	 mov	 DWORD PTR _dotSize$[ebp], ecx
  000de	89 55 c0	 mov	 DWORD PTR _dotSize$[ebp+4], edx

; 82   :   point.x -= screenOffset.x - dotSize.x/2;

  000e1	8b 45 bc	 mov	 eax, DWORD PTR _dotSize$[ebp]
  000e4	99		 cdq
  000e5	2b c2		 sub	 eax, edx
  000e7	d1 f8		 sar	 eax, 1
  000e9	8b 4d ec	 mov	 ecx, DWORD PTR _screenOffset$[ebp]
  000ec	2b c8		 sub	 ecx, eax
  000ee	8b 55 0c	 mov	 edx, DWORD PTR _point$[ebp]
  000f1	2b d1		 sub	 edx, ecx
  000f3	89 55 0c	 mov	 DWORD PTR _point$[ebp], edx

; 83   :   point.y -= screenOffset.y - dotSize.y/2;

  000f6	8b 45 c0	 mov	 eax, DWORD PTR _dotSize$[ebp+4]
  000f9	99		 cdq
  000fa	2b c2		 sub	 eax, edx
  000fc	d1 f8		 sar	 eax, 1
  000fe	8b 4d f0	 mov	 ecx, DWORD PTR _screenOffset$[ebp+4]
  00101	2b c8		 sub	 ecx, eax
  00103	8b 55 10	 mov	 edx, DWORD PTR _point$[ebp+4]
  00106	2b d1		 sub	 edx, ecx
  00108	89 55 10	 mov	 DWORD PTR _point$[ebp+4], edx

; 84   :   dotNum.x = point.x / dotSpacing.x;

  0010b	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp]
  0010e	99		 cdq
  0010f	f7 7d dc	 idiv	 DWORD PTR _dotSpacing$[ebp]
  00112	89 45 ac	 mov	 DWORD PTR _dotNum$[ebp], eax

; 85   :   dotNum.y = point.y / dotSpacing.y;

  00115	8b 45 10	 mov	 eax, DWORD PTR _point$[ebp+4]
  00118	99		 cdq
  00119	f7 7d e0	 idiv	 DWORD PTR _dotSpacing$[ebp+4]
  0011c	89 45 b0	 mov	 DWORD PTR _dotNum$[ebp+4], eax

; 86   :   if (dotNum.x < 0) return STATUS_OK;

  0011f	83 7d ac 00	 cmp	 DWORD PTR _dotNum$[ebp], 0
  00123	7d 0a		 jge	 SHORT $LN2@OnLButtonD
  00125	b8 03 00 00 00	 mov	 eax, 3
  0012a	e9 0d 03 00 00	 jmp	 $LN1@OnLButtonD
$LN2@OnLButtonD:

; 87   :   if (dotNum.y < 0) return STATUS_OK;

  0012f	83 7d b0 00	 cmp	 DWORD PTR _dotNum$[ebp+4], 0
  00133	7d 0a		 jge	 SHORT $LN3@OnLButtonD
  00135	b8 03 00 00 00	 mov	 eax, 3
  0013a	e9 fd 02 00 00	 jmp	 $LN1@OnLButtonD
$LN3@OnLButtonD:

; 88   :   x = point.x % dotSpacing.x;

  0013f	8b 45 0c	 mov	 eax, DWORD PTR _point$[ebp]
  00142	99		 cdq
  00143	f7 7d dc	 idiv	 DWORD PTR _dotSpacing$[ebp]
  00146	89 95 64 ff ff
	ff		 mov	 DWORD PTR _x$[ebp], edx

; 89   :   y = point.y % dotSpacing.y;

  0014c	8b 45 10	 mov	 eax, DWORD PTR _point$[ebp+4]
  0014f	99		 cdq
  00150	f7 7d e0	 idiv	 DWORD PTR _dotSpacing$[ebp+4]
  00153	89 95 60 ff ff
	ff		 mov	 DWORD PTR _y$[ebp], edx

; 90   :   if (     (y < dotSize.y)
; 91   :         && (x > dotSize.x)

  00159	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _y$[ebp]
  0015f	3b 45 c0	 cmp	 eax, DWORD PTR _dotSize$[ebp+4]
  00162	0f 8d f5 00 00
	00		 jge	 $LN4@OnLButtonD
  00168	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _x$[ebp]
  0016e	3b 4d bc	 cmp	 ecx, DWORD PTR _dotSize$[ebp]
  00171	0f 8e e6 00 00
	00		 jle	 $LN4@OnLButtonD

; 92   :      )
; 93   :   { // He clicked on a horizontal line
; 94   :     if (dotNum.x >= gameSize.x-1) return STATUS_OK;

  00177	8b 55 cc	 mov	 edx, DWORD PTR _gameSize$[ebp]
  0017a	83 ea 01	 sub	 edx, 1
  0017d	39 55 ac	 cmp	 DWORD PTR _dotNum$[ebp], edx
  00180	7c 0a		 jl	 SHORT $LN6@OnLButtonD
  00182	b8 03 00 00 00	 mov	 eax, 3
  00187	e9 b0 02 00 00	 jmp	 $LN1@OnLButtonD
$LN6@OnLButtonD:

; 95   :     if (dotNum.y >= gameSize.y) return STATUS_OK;

  0018c	8b 45 b0	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  0018f	3b 45 d0	 cmp	 eax, DWORD PTR _gameSize$[ebp+4]
  00192	7c 0a		 jl	 SHORT $LN7@OnLButtonD
  00194	b8 03 00 00 00	 mov	 eax, 3
  00199	e9 9e 02 00 00	 jmp	 $LN1@OnLButtonD
$LN7@OnLButtonD:

; 96   :     move.oldLineType = pDoc->HorizontalLineType(dotNum);

  0019e	8d 4d ac	 lea	 ecx, DWORD PTR _dotNum$[ebp]
  001a1	51		 push	 ecx
  001a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  001a8	e8 00 00 00 00	 call	 ?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::HorizontalLineType
  001ad	89 45 98	 mov	 DWORD PTR _move$[ebp+44], eax

; 97   :     pDoc->IncrementHLineType(dotNum);

  001b0	8d 55 ac	 lea	 edx, DWORD PTR _dotNum$[ebp]
  001b3	52		 push	 edx
  001b4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  001ba	e8 00 00 00 00	 call	 ?IncrementHLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z ; CNewBoxesDoc::IncrementHLineType

; 98   :     move.dotNum = dotNum;

  001bf	8d 45 ac	 lea	 eax, DWORD PTR _dotNum$[ebp]
  001c2	50		 push	 eax
  001c3	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _move$[ebp]
  001c9	e8 00 00 00 00	 call	 ??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z ; VECTOR::operator=

; 99   :     move.vertical = false;

  001ce	c6 85 74 ff ff
	ff 00		 mov	 BYTE PTR _move$[ebp+8], 0

; 100  :     move.newLineType = pDoc->HorizontalLineType(dotNum);

  001d5	8d 4d ac	 lea	 ecx, DWORD PTR _dotNum$[ebp]
  001d8	51		 push	 ecx
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  001df	e8 00 00 00 00	 call	 ?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::HorizontalLineType
  001e4	89 45 9c	 mov	 DWORD PTR _move$[ebp+48], eax

; 101  :     move.FindCaptures(&pDoc->Game());

  001e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  001ed	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  001f2	50		 push	 eax
  001f3	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _move$[ebp]
  001f9	e8 00 00 00 00	 call	 ?FindCaptures@MOVE@@QAEXPAVDOTS_AND_BOXES@@@Z ; MOVE::FindCaptures

; 102  :     move.SetCaptures(&pDoc->Game());

  001fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00204	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  00209	50		 push	 eax
  0020a	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _move$[ebp]
  00210	e8 00 00 00 00	 call	 ?SetCaptures@MOVE@@QAEXPAVDOTS_AND_BOXES@@@Z ; MOVE::SetCaptures

; 103  :     pDoc->AddMove(move);

  00215	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR _move$[ebp]
  0021b	52		 push	 edx
  0021c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00222	e8 00 00 00 00	 call	 ?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z ; CNewBoxesDoc::AddMove

; 104  :     INVALIDATE

  00227	e8 00 00 00 00	 call	 ?InvalidateView@@YAXXZ	; InvalidateView

; 105  :     if (   (move.boxesCaptured[0].x < 0)
; 106  :         && (move.boxesCaptured[1].x < 0)

  0022c	b8 08 00 00 00	 mov	 eax, 8
  00231	6b c8 00	 imul	 ecx, eax, 0
  00234	83 bc 0d 78 ff
	ff ff 00	 cmp	 DWORD PTR _move$[ebp+ecx+12], 0
  0023c	7d 1a		 jge	 SHORT $LN8@OnLButtonD
  0023e	ba 08 00 00 00	 mov	 edx, 8
  00243	c1 e2 00	 shl	 edx, 0
  00246	83 bc 15 78 ff
	ff ff 00	 cmp	 DWORD PTR _move$[ebp+edx+12], 0
  0024e	7d 08		 jge	 SHORT $LN8@OnLButtonD

; 107  :        )
; 108  :     {
; 109  :       AutoPlay();

  00250	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00253	e8 00 00 00 00	 call	 ?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ ; PROCESS_PLAY_GAME::AutoPlay
$LN8@OnLButtonD:

; 110  :     };
; 111  :   }

  00258	e9 da 01 00 00	 jmp	 $LN5@OnLButtonD
$LN4@OnLButtonD:

; 112  :   else if (     (x < dotSize.x)
; 113  :              && (y > dotSize.y)

  0025d	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _x$[ebp]
  00263	3b 45 bc	 cmp	 eax, DWORD PTR _dotSize$[ebp]
  00266	0f 8d f5 00 00
	00		 jge	 $LN9@OnLButtonD
  0026c	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _y$[ebp]
  00272	3b 4d c0	 cmp	 ecx, DWORD PTR _dotSize$[ebp+4]
  00275	0f 8e e6 00 00
	00		 jle	 $LN9@OnLButtonD

; 114  :           )
; 115  :   { // He clicked on a vertical line
; 116  :     if (dotNum.y >= gameSize.y-1) return STATUS_OK;

  0027b	8b 55 d0	 mov	 edx, DWORD PTR _gameSize$[ebp+4]
  0027e	83 ea 01	 sub	 edx, 1
  00281	39 55 b0	 cmp	 DWORD PTR _dotNum$[ebp+4], edx
  00284	7c 0a		 jl	 SHORT $LN11@OnLButtonD
  00286	b8 03 00 00 00	 mov	 eax, 3
  0028b	e9 ac 01 00 00	 jmp	 $LN1@OnLButtonD
$LN11@OnLButtonD:

; 117  :     if (dotNum.x >= gameSize.x) return STATUS_OK;

  00290	8b 45 ac	 mov	 eax, DWORD PTR _dotNum$[ebp]
  00293	3b 45 cc	 cmp	 eax, DWORD PTR _gameSize$[ebp]
  00296	7c 0a		 jl	 SHORT $LN12@OnLButtonD
  00298	b8 03 00 00 00	 mov	 eax, 3
  0029d	e9 9a 01 00 00	 jmp	 $LN1@OnLButtonD
$LN12@OnLButtonD:

; 118  :     move.oldLineType = pDoc->VerticalLineType(dotNum);

  002a2	8d 4d ac	 lea	 ecx, DWORD PTR _dotNum$[ebp]
  002a5	51		 push	 ecx
  002a6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  002ac	e8 00 00 00 00	 call	 ?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::VerticalLineType
  002b1	89 45 98	 mov	 DWORD PTR _move$[ebp+44], eax

; 119  :     pDoc->IncrementVLineType(dotNum);

  002b4	8d 55 ac	 lea	 edx, DWORD PTR _dotNum$[ebp]
  002b7	52		 push	 edx
  002b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  002be	e8 00 00 00 00	 call	 ?IncrementVLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z ; CNewBoxesDoc::IncrementVLineType

; 120  :     move.dotNum = dotNum;

  002c3	8d 45 ac	 lea	 eax, DWORD PTR _dotNum$[ebp]
  002c6	50		 push	 eax
  002c7	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _move$[ebp]
  002cd	e8 00 00 00 00	 call	 ??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z ; VECTOR::operator=

; 121  :     move.vertical = true;

  002d2	c6 85 74 ff ff
	ff 01		 mov	 BYTE PTR _move$[ebp+8], 1

; 122  :     move.newLineType = pDoc->VerticalLineType(dotNum);

  002d9	8d 4d ac	 lea	 ecx, DWORD PTR _dotNum$[ebp]
  002dc	51		 push	 ecx
  002dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  002e3	e8 00 00 00 00	 call	 ?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::VerticalLineType
  002e8	89 45 9c	 mov	 DWORD PTR _move$[ebp+48], eax

; 123  :     move.FindCaptures(&pDoc->Game());

  002eb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  002f1	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  002f6	50		 push	 eax
  002f7	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _move$[ebp]
  002fd	e8 00 00 00 00	 call	 ?FindCaptures@MOVE@@QAEXPAVDOTS_AND_BOXES@@@Z ; MOVE::FindCaptures

; 124  :     move.SetCaptures(&pDoc->Game());

  00302	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00308	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  0030d	50		 push	 eax
  0030e	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _move$[ebp]
  00314	e8 00 00 00 00	 call	 ?SetCaptures@MOVE@@QAEXPAVDOTS_AND_BOXES@@@Z ; MOVE::SetCaptures

; 125  :     pDoc->AddMove(move);

  00319	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR _move$[ebp]
  0031f	52		 push	 edx
  00320	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00326	e8 00 00 00 00	 call	 ?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z ; CNewBoxesDoc::AddMove

; 126  :     INVALIDATE

  0032b	e8 00 00 00 00	 call	 ?InvalidateView@@YAXXZ	; InvalidateView

; 127  :     if (   (move.boxesCaptured[0].x < 0)
; 128  :         && (move.boxesCaptured[1].x < 0)

  00330	b8 08 00 00 00	 mov	 eax, 8
  00335	6b c8 00	 imul	 ecx, eax, 0
  00338	83 bc 0d 78 ff
	ff ff 00	 cmp	 DWORD PTR _move$[ebp+ecx+12], 0
  00340	7d 1a		 jge	 SHORT $LN13@OnLButtonD
  00342	ba 08 00 00 00	 mov	 edx, 8
  00347	c1 e2 00	 shl	 edx, 0
  0034a	83 bc 15 78 ff
	ff ff 00	 cmp	 DWORD PTR _move$[ebp+edx+12], 0
  00352	7d 08		 jge	 SHORT $LN13@OnLButtonD

; 129  :        )
; 130  :     {
; 131  :       AutoPlay();

  00354	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00357	e8 00 00 00 00	 call	 ?AutoPlay@PROCESS_PLAY_GAME@@AAE?AW4STATUS@@XZ ; PROCESS_PLAY_GAME::AutoPlay
$LN13@OnLButtonD:

; 132  :     };
; 133  :   }

  0035c	e9 d6 00 00 00	 jmp	 $LN5@OnLButtonD
$LN9@OnLButtonD:

; 134  :   else if (     (x > dotSize.x)
; 135  :              && (y > dotSize.y)

  00361	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _x$[ebp]
  00367	3b 45 bc	 cmp	 eax, DWORD PTR _dotSize$[ebp]
  0036a	0f 8e c7 00 00
	00		 jle	 $LN5@OnLButtonD
  00370	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _y$[ebp]
  00376	3b 4d c0	 cmp	 ecx, DWORD PTR _dotSize$[ebp+4]
  00379	0f 8e b8 00 00
	00		 jle	 $LN5@OnLButtonD

; 136  :           )
; 137  : 
; 138  :   {
; 139  :     // He clicked on one of the squares.
; 140  :     if (dotNum.y >= gameSize.y-1) return STATUS_OK;

  0037f	8b 55 d0	 mov	 edx, DWORD PTR _gameSize$[ebp+4]
  00382	83 ea 01	 sub	 edx, 1
  00385	39 55 b0	 cmp	 DWORD PTR _dotNum$[ebp+4], edx
  00388	7c 0a		 jl	 SHORT $LN15@OnLButtonD
  0038a	b8 03 00 00 00	 mov	 eax, 3
  0038f	e9 a8 00 00 00	 jmp	 $LN1@OnLButtonD
$LN15@OnLButtonD:

; 141  :     if (dotNum.x >= gameSize.x-1) return STATUS_OK;

  00394	8b 45 cc	 mov	 eax, DWORD PTR _gameSize$[ebp]
  00397	83 e8 01	 sub	 eax, 1
  0039a	39 45 ac	 cmp	 DWORD PTR _dotNum$[ebp], eax
  0039d	7c 0a		 jl	 SHORT $LN16@OnLButtonD
  0039f	b8 03 00 00 00	 mov	 eax, 3
  003a4	e9 93 00 00 00	 jmp	 $LN1@OnLButtonD
$LN16@OnLButtonD:

; 142  :     move.oldOwnerType[0] = pDoc->BoxOwner(dotNum);

  003a9	8d 4d ac	 lea	 ecx, DWORD PTR _dotNum$[ebp]
  003ac	51		 push	 ecx
  003ad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  003b3	e8 00 00 00 00	 call	 ?BoxOwner@CNewBoxesDoc@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::BoxOwner
  003b8	ba 04 00 00 00	 mov	 edx, 4
  003bd	6b ca 00	 imul	 ecx, edx, 0
  003c0	89 44 0d 88	 mov	 DWORD PTR _move$[ebp+ecx+28], eax

; 143  :     pDoc->IncrementBoxOwner(dotNum);

  003c4	8d 55 ac	 lea	 edx, DWORD PTR _dotNum$[ebp]
  003c7	52		 push	 edx
  003c8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  003ce	e8 00 00 00 00	 call	 ?IncrementBoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@@Z ; CNewBoxesDoc::IncrementBoxOwner

; 144  :     move.newOwnerType[0] = pDoc->BoxOwner(dotNum);

  003d3	8d 45 ac	 lea	 eax, DWORD PTR _dotNum$[ebp]
  003d6	50		 push	 eax
  003d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  003dd	e8 00 00 00 00	 call	 ?BoxOwner@CNewBoxesDoc@@QBE?AW4OWNER_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::BoxOwner
  003e2	b9 04 00 00 00	 mov	 ecx, 4
  003e7	6b d1 00	 imul	 edx, ecx, 0
  003ea	89 44 15 90	 mov	 DWORD PTR _move$[ebp+edx+36], eax

; 145  :     if (move.newOwnerType[0] != move.oldOwnerType[0])

  003ee	b8 04 00 00 00	 mov	 eax, 4
  003f3	6b c8 00	 imul	 ecx, eax, 0
  003f6	ba 04 00 00 00	 mov	 edx, 4
  003fb	6b c2 00	 imul	 eax, edx, 0
  003fe	8b 4c 0d 90	 mov	 ecx, DWORD PTR _move$[ebp+ecx+36]
  00402	3b 4c 05 88	 cmp	 ecx, DWORD PTR _move$[ebp+eax+28]
  00406	74 2f		 je	 SHORT $LN5@OnLButtonD

; 146  :     {
; 147  :       move.boxesCaptured[0] = dotNum;

  00408	8d 55 ac	 lea	 edx, DWORD PTR _dotNum$[ebp]
  0040b	52		 push	 edx
  0040c	b8 08 00 00 00	 mov	 eax, 8
  00411	6b c8 00	 imul	 ecx, eax, 0
  00414	8d 8c 0d 78 ff
	ff ff		 lea	 ecx, DWORD PTR _move$[ebp+ecx+12]
  0041b	e8 00 00 00 00	 call	 ??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z ; VECTOR::operator=

; 148  :       pDoc->AddMove(move);

  00420	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR _move$[ebp]
  00426	52		 push	 edx
  00427	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0042d	e8 00 00 00 00	 call	 ?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z ; CNewBoxesDoc::AddMove

; 149  :       INVALIDATE

  00432	e8 00 00 00 00	 call	 ?InvalidateView@@YAXXZ	; InvalidateView
$LN5@OnLButtonD:

; 150  :     };
; 151  :   };
; 152  :   return STATUS_OK;

  00437	b8 03 00 00 00	 mov	 eax, 3
$LN1@OnLButtonD:

; 153  : }

  0043c	52		 push	 edx
  0043d	8b cd		 mov	 ecx, ebp
  0043f	50		 push	 eax
  00440	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN26@OnLButtonD
  00446	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0044b	58		 pop	 eax
  0044c	5a		 pop	 edx
  0044d	5f		 pop	 edi
  0044e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00451	33 cd		 xor	 ecx, ebp
  00453	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00458	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0045e	3b ec		 cmp	 ebp, esp
  00460	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00465	8b e5		 mov	 esp, ebp
  00467	5d		 pop	 ebp
  00468	c2 0c 00	 ret	 12			; 0000000cH
  0046b	90		 npad	 1
$LN26@OnLButtonD:
  0046c	06 00 00 00	 DD	 6
  00470	00 00 00 00	 DD	 $LN25@OnLButtonD
$LN25@OnLButtonD:
  00474	ec ff ff ff	 DD	 -20			; ffffffecH
  00478	08 00 00 00	 DD	 8
  0047c	00 00 00 00	 DD	 $LN19@OnLButtonD
  00480	dc ff ff ff	 DD	 -36			; ffffffdcH
  00484	08 00 00 00	 DD	 8
  00488	00 00 00 00	 DD	 $LN20@OnLButtonD
  0048c	cc ff ff ff	 DD	 -52			; ffffffccH
  00490	08 00 00 00	 DD	 8
  00494	00 00 00 00	 DD	 $LN21@OnLButtonD
  00498	bc ff ff ff	 DD	 -68			; ffffffbcH
  0049c	08 00 00 00	 DD	 8
  004a0	00 00 00 00	 DD	 $LN22@OnLButtonD
  004a4	ac ff ff ff	 DD	 -84			; ffffffacH
  004a8	08 00 00 00	 DD	 8
  004ac	00 00 00 00	 DD	 $LN23@OnLButtonD
  004b0	6c ff ff ff	 DD	 -148			; ffffff6cH
  004b4	38 00 00 00	 DD	 56			; 00000038H
  004b8	00 00 00 00	 DD	 $LN24@OnLButtonD
$LN24@OnLButtonD:
  004bc	6d		 DB	 109			; 0000006dH
  004bd	6f		 DB	 111			; 0000006fH
  004be	76		 DB	 118			; 00000076H
  004bf	65		 DB	 101			; 00000065H
  004c0	00		 DB	 0
$LN23@OnLButtonD:
  004c1	64		 DB	 100			; 00000064H
  004c2	6f		 DB	 111			; 0000006fH
  004c3	74		 DB	 116			; 00000074H
  004c4	4e		 DB	 78			; 0000004eH
  004c5	75		 DB	 117			; 00000075H
  004c6	6d		 DB	 109			; 0000006dH
  004c7	00		 DB	 0
$LN22@OnLButtonD:
  004c8	64		 DB	 100			; 00000064H
  004c9	6f		 DB	 111			; 0000006fH
  004ca	74		 DB	 116			; 00000074H
  004cb	53		 DB	 83			; 00000053H
  004cc	69		 DB	 105			; 00000069H
  004cd	7a		 DB	 122			; 0000007aH
  004ce	65		 DB	 101			; 00000065H
  004cf	00		 DB	 0
$LN21@OnLButtonD:
  004d0	67		 DB	 103			; 00000067H
  004d1	61		 DB	 97			; 00000061H
  004d2	6d		 DB	 109			; 0000006dH
  004d3	65		 DB	 101			; 00000065H
  004d4	53		 DB	 83			; 00000053H
  004d5	69		 DB	 105			; 00000069H
  004d6	7a		 DB	 122			; 0000007aH
  004d7	65		 DB	 101			; 00000065H
  004d8	00		 DB	 0
$LN20@OnLButtonD:
  004d9	64		 DB	 100			; 00000064H
  004da	6f		 DB	 111			; 0000006fH
  004db	74		 DB	 116			; 00000074H
  004dc	53		 DB	 83			; 00000053H
  004dd	70		 DB	 112			; 00000070H
  004de	61		 DB	 97			; 00000061H
  004df	63		 DB	 99			; 00000063H
  004e0	69		 DB	 105			; 00000069H
  004e1	6e		 DB	 110			; 0000006eH
  004e2	67		 DB	 103			; 00000067H
  004e3	00		 DB	 0
$LN19@OnLButtonD:
  004e4	73		 DB	 115			; 00000073H
  004e5	63		 DB	 99			; 00000063H
  004e6	72		 DB	 114			; 00000072H
  004e7	65		 DB	 101			; 00000065H
  004e8	65		 DB	 101			; 00000065H
  004e9	6e		 DB	 110			; 0000006eH
  004ea	4f		 DB	 79			; 0000004fH
  004eb	66		 DB	 102			; 00000066H
  004ec	66		 DB	 102			; 00000066H
  004ed	73		 DB	 115			; 00000073H
  004ee	65		 DB	 101			; 00000065H
  004ef	74		 DB	 116			; 00000074H
  004f0	00		 DB	 0
?OnLButtonDown@PROCESS_PLAY_GAME@@EAE?AW4STATUS@@IVCPoint@@@Z ENDP ; PROCESS_PLAY_GAME::OnLButtonDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GPROCESS@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPROCESS@@QAEPAXI@Z PROC				; PROCESS::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1PROCESS@@QAE@XZ	; PROCESS::~PROCESS
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 08		 push	 8
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GPROCESS@@QAEPAXI@Z ENDP				; PROCESS::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_Options@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_Options@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_Options, COMDAT
; _this$ = ecx

; 48   :   virtual bool    IsOK_Options(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_Options@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_Options
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_TestCreation@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_TestCreation@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_TestCreation, COMDAT
; _this$ = ecx

; 47   :   virtual bool    IsOK_TestCreation(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_TestCreation@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_TestCreation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ReDoTurn@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ReDoTurn@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_ReDoTurn, COMDAT
; _this$ = ecx

; 46   :   virtual bool    IsOK_ReDoTurn(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ReDoTurn@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_ReDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_UnDoTurn@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_UnDoTurn@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_UnDoTurn, COMDAT
; _this$ = ecx

; 45   :   virtual bool    IsOK_UnDoTurn(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_UnDoTurn@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_UnDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_PlayGame@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_PlayGame@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_PlayGame, COMDAT
; _this$ = ecx

; 44   :   virtual bool    IsOK_PlayGame(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_PlayGame@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_PlayGame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_EnterPosition@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_EnterPosition@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_EnterPosition, COMDAT
; _this$ = ecx

; 43   :   virtual bool    IsOK_EnterPosition(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_EnterPosition@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_EnterPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ComputeNimval@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ComputeNimval@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_ComputeNimval, COMDAT
; _this$ = ecx

; 42   :   virtual bool    IsOK_ComputeNimval(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ComputeNimval@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_ComputeNimval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ComputerMove@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ComputerMove@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_ComputerMove, COMDAT
; _this$ = ecx

; 41   :   virtual bool    IsOK_ComputerMove(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ComputerMove@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_ComputerMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsIdle@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsIdle@PROCESS@@UBE_NXZ PROC				; PROCESS::IsIdle, COMDAT
; _this$ = ecx

; 40   :   virtual bool    IsIdle(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsIdle@PROCESS@@UBE_NXZ ENDP				; PROCESS::IsIdle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnReDoTurn, COMDAT
; _this$ = ecx

; 39   :   virtual STATUS  OnReDoTurn(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnReDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnUnDoTurn, COMDAT
; _this$ = ecx

; 38   :   virtual STATUS  OnUnDoTurn(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnUnDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnPlayGame, COMDAT
; _this$ = ecx

; 37   :   virtual STATUS  OnPlayGame(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnPlayGame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ PROC	; PROCESS::OnEnterPosition, COMDAT
; _this$ = ecx

; 36   :   virtual STATUS  OnEnterPosition(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ ENDP	; PROCESS::OnEnterPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ PROC	; PROCESS::OnComputeNimval, COMDAT
; _this$ = ecx

; 35   :   virtual STATUS  OnComputeNimval(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ ENDP	; PROCESS::OnComputeNimval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnComputerMove, COMDAT
; _this$ = ecx

; 34   :   virtual STATUS  OnComputerMove(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnComputerMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ PROC	; PROCESS::OnThreadCompletion, COMDAT
; _this$ = ecx

; 33   :   virtual STATUS  OnThreadCompletion(void){return STATUS_OK;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 03 00 00 00	 mov	 eax, 3
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ ENDP	; PROCESS::OnThreadCompletion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z PROC		; PROCESS::OnTimer, COMDAT
; _this$ = ecx

; 32   :   virtual STATUS  OnTimer(UINT /*nIDEvent*/){return STATUS_OK;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 03 00 00 00	 mov	 eax, 3
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z ENDP		; PROCESS::OnTimer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z PROC		; PROCESS::OnChar, COMDAT
; _this$ = ecx

; 31   :   virtual STATUS  OnChar(UINT /*nChar*/, UINT /*nRepCnt*/, UINT /*nFlags*/){return STATUS_OK;}; 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 03 00 00 00	 mov	 eax, 3
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
?OnChar@PROCESS@@UAE?AW4STATUS@@III@Z ENDP		; PROCESS::OnChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z PROC ; PROCESS::OnLButtonDown, COMDAT
; _this$ = ecx

; 29   :   virtual STATUS  OnLButtonDown(UINT /*nFlags*/, CPoint /*point*/){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z ENDP ; PROCESS::OnLButtonDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnShutdown, COMDAT
; _this$ = ecx

; 27   :   virtual STATUS  OnShutdown(void){return STATUS_ERROR;}; // All processes should handle shutdown!

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 05 00 00 00	 mov	 eax, 5
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnShutdown@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnShutdown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; PROCESS::GetTitle, COMDAT
; _this$ = ecx

; 25   :   virtual CString GetTitle(void){return m_title;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c0 04	 add	 eax, 4
  00025	8b f4		 mov	 esi, esp
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003b	83 c9 01	 or	 ecx, 1
  0003e	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00041	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00044	5e		 pop	 esi
  00045	83 c4 08	 add	 esp, 8
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; PROCESS::GetTitle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ PROC	; CNewBoxesDoc::Game, COMDAT
; _this$ = ecx

; 175  :   DOTS_AND_BOXES& Game(void){return *m_pGame;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 28 36 00
	00		 mov	 eax, DWORD PTR [eax+13864]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ENDP	; CNewBoxesDoc::Game
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?IsRedoPossible@CNewBoxesDoc@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRedoPossible@CNewBoxesDoc@@QAE_NXZ PROC		; CNewBoxesDoc::IsRedoPossible, COMDAT
; _this$ = ecx

; 156  :   bool IsRedoPossible(void){return m_moveHistory.IsRedoPossible();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 68 01 00
	00		 add	 ecx, 360		; 00000168H
  00017	e8 00 00 00 00	 call	 ?IsRedoPossible@MOVE_HISTORY@@QAE_NXZ ; MOVE_HISTORY::IsRedoPossible
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?IsRedoPossible@CNewBoxesDoc@@QAE_NXZ ENDP		; CNewBoxesDoc::IsRedoPossible
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?IsUndoPossible@CNewBoxesDoc@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsUndoPossible@CNewBoxesDoc@@QAE_NXZ PROC		; CNewBoxesDoc::IsUndoPossible, COMDAT
; _this$ = ecx

; 155  :   bool IsUndoPossible(void){return m_moveHistory.IsUndoPossible();};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 68 01 00
	00		 add	 ecx, 360		; 00000168H
  00017	e8 00 00 00 00	 call	 ?IsUndoPossible@MOVE_HISTORY@@QAE_NXZ ; MOVE_HISTORY::IsUndoPossible
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?IsUndoPossible@CNewBoxesDoc@@QAE_NXZ ENDP		; CNewBoxesDoc::IsUndoPossible
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_move$ = 8						; size = 4
?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z PROC		; CNewBoxesDoc::AddMove, COMDAT
; _this$ = ecx

; 154  :   void AddMove(const MOVE& move){m_moveHistory.AddMove(move);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _move$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	81 c1 68 01 00
	00		 add	 ecx, 360		; 00000168H
  0001b	e8 00 00 00 00	 call	 ?AddMove@MOVE_HISTORY@@QAEXABUMOVE@@@Z ; MOVE_HISTORY::AddMove
  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z ENDP		; CNewBoxesDoc::AddMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?DotSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ
_TEXT	SEGMENT
_p$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?DotSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ PROC		; CNewBoxesDoc::DotSize, COMDAT
; _this$ = ecx

; 78   :   POINT DotSize(void){POINT p = {m_currentDotSizeX,m_currentDotSizeY}; return p;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 88 10 01 00
	00		 mov	 ecx, DWORD PTR [eax+272]
  00026	89 4d f0	 mov	 DWORD PTR _p$[ebp], ecx
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 82 14 01 00
	00		 mov	 eax, DWORD PTR [edx+276]
  00032	89 45 f4	 mov	 DWORD PTR _p$[ebp+4], eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00038	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  0003b	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp+4]
  0003e	89 11		 mov	 DWORD PTR [ecx], edx
  00040	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00043	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00046	52		 push	 edx
  00047	8b cd		 mov	 ecx, ebp
  00049	50		 push	 eax
  0004a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@DotSize
  00050	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00055	58		 pop	 eax
  00056	5a		 pop	 edx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
  0005d	0f 1f 00	 npad	 3
$LN5@DotSize:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN4@DotSize
$LN4@DotSize:
  00068	f0 ff ff ff	 DD	 -16			; fffffff0H
  0006c	08 00 00 00	 DD	 8
  00070	00 00 00 00	 DD	 $LN3@DotSize
$LN3@DotSize:
  00074	70		 DB	 112			; 00000070H
  00075	00		 DB	 0
?DotSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ ENDP		; CNewBoxesDoc::DotSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?ScreenOffset@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ
_TEXT	SEGMENT
_p$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?ScreenOffset@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ PROC	; CNewBoxesDoc::ScreenOffset, COMDAT
; _this$ = ecx

; 77   :   POINT ScreenOffset(void){POINT p={m_currentScreenOffsetX,m_currentScreenOffsetY}; return p;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  00026	89 4d f0	 mov	 DWORD PTR _p$[ebp], ecx
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 82 ec 00 00
	00		 mov	 eax, DWORD PTR [edx+236]
  00032	89 45 f4	 mov	 DWORD PTR _p$[ebp+4], eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00038	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  0003b	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp+4]
  0003e	89 11		 mov	 DWORD PTR [ecx], edx
  00040	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00043	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00046	52		 push	 edx
  00047	8b cd		 mov	 ecx, ebp
  00049	50		 push	 eax
  0004a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@ScreenOffs
  00050	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00055	58		 pop	 eax
  00056	5a		 pop	 edx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
  0005d	0f 1f 00	 npad	 3
$LN5@ScreenOffs:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN4@ScreenOffs
$LN4@ScreenOffs:
  00068	f0 ff ff ff	 DD	 -16			; fffffff0H
  0006c	08 00 00 00	 DD	 8
  00070	00 00 00 00	 DD	 $LN3@ScreenOffs
$LN3@ScreenOffs:
  00074	70		 DB	 112			; 00000070H
  00075	00		 DB	 0
?ScreenOffset@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ ENDP	; CNewBoxesDoc::ScreenOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?DotSpacing@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ
_TEXT	SEGMENT
_p$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?DotSpacing@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ PROC	; CNewBoxesDoc::DotSpacing, COMDAT
; _this$ = ecx

; 76   :   POINT DotSpacing(void){POINT p ={m_currentDotSpaceX,m_currentDotSpaceY};return p;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 88 e0 00 00
	00		 mov	 ecx, DWORD PTR [eax+224]
  00026	89 4d f0	 mov	 DWORD PTR _p$[ebp], ecx
  00029	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0002c	8b 82 e4 00 00
	00		 mov	 eax, DWORD PTR [edx+228]
  00032	89 45 f4	 mov	 DWORD PTR _p$[ebp+4], eax
  00035	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00038	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  0003b	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp+4]
  0003e	89 11		 mov	 DWORD PTR [ecx], edx
  00040	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00043	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00046	52		 push	 edx
  00047	8b cd		 mov	 ecx, ebp
  00049	50		 push	 eax
  0004a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@DotSpacing
  00050	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00055	58		 pop	 eax
  00056	5a		 pop	 edx
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 04 00	 ret	 4
  0005d	0f 1f 00	 npad	 3
$LN5@DotSpacing:
  00060	01 00 00 00	 DD	 1
  00064	00 00 00 00	 DD	 $LN4@DotSpacing
$LN4@DotSpacing:
  00068	f0 ff ff ff	 DD	 -16			; fffffff0H
  0006c	08 00 00 00	 DD	 8
  00070	00 00 00 00	 DD	 $LN3@DotSpacing
$LN3@DotSpacing:
  00074	70		 DB	 112			; 00000070H
  00075	00		 DB	 0
?DotSpacing@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ ENDP	; CNewBoxesDoc::DotSpacing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?GameSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ
_TEXT	SEGMENT
_p$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GameSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ PROC		; CNewBoxesDoc::GameSize, COMDAT
; _this$ = ecx

; 75   :   POINT GameSize(void){POINT p={m_pGame->Width(),m_pGame->Height()};return p;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 88 28 36 00
	00		 mov	 ecx, DWORD PTR [eax+13864]
  00026	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  0002b	89 45 f0	 mov	 DWORD PTR _p$[ebp], eax
  0002e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00031	8b 89 28 36 00
	00		 mov	 ecx, DWORD PTR [ecx+13864]
  00037	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0003c	89 45 f4	 mov	 DWORD PTR _p$[ebp+4], eax
  0003f	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00042	8b 45 f0	 mov	 eax, DWORD PTR _p$[ebp]
  00045	8b 4d f4	 mov	 ecx, DWORD PTR _p$[ebp+4]
  00048	89 02		 mov	 DWORD PTR [edx], eax
  0004a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0004d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00050	52		 push	 edx
  00051	8b cd		 mov	 ecx, ebp
  00053	50		 push	 eax
  00054	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@GameSize
  0005a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0005f	58		 pop	 eax
  00060	5a		 pop	 edx
  00061	83 c4 14	 add	 esp, 20			; 00000014H
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c2 04 00	 ret	 4
  00071	0f 1f 00	 npad	 3
$LN5@GameSize:
  00074	01 00 00 00	 DD	 1
  00078	00 00 00 00	 DD	 $LN4@GameSize
$LN4@GameSize:
  0007c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00080	08 00 00 00	 DD	 8
  00084	00 00 00 00	 DD	 $LN3@GameSize
$LN3@GameSize:
  00088	70		 DB	 112			; 00000070H
  00089	00		 DB	 0
?GameSize@CNewBoxesDoc@@QAE?AUtagPOINT@@XZ ENDP		; CNewBoxesDoc::GameSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?AutoPlay@CNewBoxesDoc@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?AutoPlay@CNewBoxesDoc@@QAE_NXZ PROC			; CNewBoxesDoc::AutoPlay, COMDAT
; _this$ = ecx

; 72   :   bool  AutoPlay(void){return m_autoPlay;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	0f b6 80 28 01
	00 00		 movzx	 eax, BYTE PTR [eax+296]
  00011	8b e5		 mov	 esp, ebp
  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?AutoPlay@CNewBoxesDoc@@QAE_NXZ ENDP			; CNewBoxesDoc::AutoPlay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\BoxDef.h
;	COMDAT ?IsRedoPossible@MOVE_HISTORY@@QAE_NXZ
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
?IsRedoPossible@MOVE_HISTORY@@QAE_NXZ PROC		; MOVE_HISTORY::IsRedoPossible, COMDAT
; _this$ = ecx

; 107  :   bool IsRedoPossible(void){return m_currentMoves < m_totalMoves;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00012	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00014	7d 09		 jge	 SHORT $LN3@IsRedoPoss
  00016	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  0001d	eb 07		 jmp	 SHORT $LN4@IsRedoPoss
$LN3@IsRedoPoss:
  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@IsRedoPoss:
  00026	0f b6 45 f8	 movzx	 eax, BYTE PTR tv67[ebp]
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
?IsRedoPossible@MOVE_HISTORY@@QAE_NXZ ENDP		; MOVE_HISTORY::IsRedoPossible
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\BoxDef.h
;	COMDAT ?IsUndoPossible@MOVE_HISTORY@@QAE_NXZ
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?IsUndoPossible@MOVE_HISTORY@@QAE_NXZ PROC		; MOVE_HISTORY::IsUndoPossible, COMDAT
; _this$ = ecx

; 106  :   bool IsUndoPossible(void){return m_currentMoves>0;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00010	7e 09		 jle	 SHORT $LN3@IsUndoPoss
  00012	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv66[ebp], 1
  00019	eb 07		 jmp	 SHORT $LN4@IsUndoPoss
$LN3@IsUndoPoss:
  0001b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@IsUndoPoss:
  00022	0f b6 45 f8	 movzx	 eax, BYTE PTR tv66[ebp]
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?IsUndoPossible@MOVE_HISTORY@@QAE_NXZ ENDP		; MOVE_HISTORY::IsUndoPossible
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0MOVE@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MOVE@@QAE@XZ PROC					; MOVE::MOVE, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0VECTOR@@QAE@XZ	; VECTOR::VECTOR
  00016	68 00 00 00 00	 push	 OFFSET ??0VECTOR@@QAE@XZ ; VECTOR::VECTOR
  0001b	6a 02		 push	 2
  0001d	6a 08		 push	 8
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c0 0c	 add	 eax, 12			; 0000000cH
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??0MOVE@@QAE@XZ ENDP					; MOVE::MOVE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Height@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::Height, COMDAT
; _this$ = ecx

; 93   :   INLINE int Height(void) const {return m_height;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Height@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::Height
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Width@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::Width, COMDAT
; _this$ = ecx

; 92   :   INLINE int Width(void) const {return m_width;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Width@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::Width
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\stdafx.h
;	COMDAT ??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_point$ = 8						; size = 4
??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z PROC			; VECTOR::operator=, COMDAT
; _this$ = ecx

; 63   :   VECTOR& operator =(const POINT& point){x=point.x;y=point.y;return *this;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00014	8b 4d 08	 mov	 ecx, DWORD PTR _point$[ebp]
  00017	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0001a	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??4VECTOR@@QAEAAV0@ABUtagPOINT@@@Z ENDP			; VECTOR::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\stdafx.h
;	COMDAT ??0VECTOR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VECTOR@@QAE@XZ PROC					; VECTOR::VECTOR, COMDAT
; _this$ = ecx

; 61   :   VECTOR(void){};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0VECTOR@@QAE@XZ ENDP					; VECTOR::VECTOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00011	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 330  : 		if (pszCategory == nullptr)

  00027	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0002b	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0002d	e9 bb 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00032	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00039	72 36		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0003b	33 c0		 xor	 eax, eax
  0003d	75 30		 jne	 SHORT $LN5@RegisterCa
  0003f	8b f4		 mov	 esi, esp
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0004b	6a 00		 push	 0
  0004d	68 51 01 00 00	 push	 337			; 00000151H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
  00057	6a 02		 push	 2
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	83 f8 01	 cmp	 eax, 1
  0006c	75 01		 jne	 SHORT $LN5@RegisterCa
  0006e	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  0006f	eb 7c		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00071	69 15 00 00 00
	00 04 01 00 00	 imul	 edx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _nCategory$[ebp]
  0007e	89 82 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[edx], eax

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  00084	68 00 01 00 00	 push	 256			; 00000100H
  00089	6a 00		 push	 0
  0008b	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _memset
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  0009a	8b 55 08	 mov	 edx, DWORD PTR _pszCategory$[ebp]
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  000a3	6a 7f		 push	 127			; 0000007fH
  000a5	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _swprintf_s
  000b1	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  000b4	8b f4		 mov	 esi, esp
  000b6	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000bc	51		 push	 ecx
  000bd	6a 7f		 push	 127			; 0000007fH
  000bf	69 15 00 00 00
	00 04 01 00 00	 imul	 edx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000c9	81 c2 04 00 00
	00		 add	 edx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000cf	52		 push	 edx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000e5	83 c0 01	 add	 eax, 1
  000e8	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ed	52		 push	 edx
  000ee	8b cd		 mov	 ecx, ebp
  000f0	50		 push	 eax
  000f1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@RegisterCa
  000f7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fc	58		 pop	 eax
  000fd	5a		 pop	 edx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00103	33 cd		 xor	 ecx, ebp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
  0011b	90		 npad	 1
$LN8@RegisterCa:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN7@RegisterCa
$LN7@RegisterCa:
  00124	f8 fe ff ff	 DD	 -264			; fffffef8H
  00128	00 01 00 00	 DD	 256			; 00000100H
  0012c	00 00 00 00	 DD	 $LN6@RegisterCa
$LN6@RegisterCa:
  00130	62		 DB	 98			; 00000062H
  00131	75		 DB	 117			; 00000075H
  00132	66		 DB	 102			; 00000066H
  00133	66		 DB	 102			; 00000066H
  00134	65		 DB	 101			; 00000065H
  00135	72		 DB	 114			; 00000072H
  00136	00		 DB	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG74042
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 20 00 00	 push	 8192			; 00002000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1523 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1524 :             int _Result;
; 1525 :             va_list _ArgList;
; 1526 :             __crt_va_start(_ArgList, _Format);

  0001b	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1527 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 __vswprintf_s_l
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1528 :             __crt_va_end(_ArgList);

  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1529 :             return _Result;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1530 :         }

  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1256 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1257 :         int const _Result = __stdio_common_vswprintf_s(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00030	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00033	52		 push	 edx
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1258 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1259 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1260 : 
; 1261 :         return _Result < 0 ? -1 : _Result;

  0004a	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004e	7d 09		 jge	 SHORT $LN3@vswprintf_
  00050	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00057	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  0005c	89 4d f8	 mov	 DWORD PTR tv73[ebp], ecx
$LN4@vswprintf_:
  0005f	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 1262 :     }

  00062	5e		 pop	 esi
  00063	83 c4 08	 add	 esp, 8
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\PlayGame.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
$LN2@vector:
  00015	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00018	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00024	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00028	76 09		 jbe	 SHORT $LN5@vector
  0002a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00031	eb 07		 jmp	 SHORT $LN6@vector
$LN5@vector:
  00033	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN6@vector:
  0003a	83 7d f8 00	 cmp	 DWORD PTR tv67[ebp], 0
  0003e	74 1a		 je	 SHORT $LN1@vector
  00040	8b f4		 mov	 esi, esp
  00042	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00045	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b 55 08	 mov	 edx, DWORD PTR ___t$[ebp]
  00052	03 55 0c	 add	 edx, DWORD PTR ___s$[ebp]
  00055	89 55 08	 mov	 DWORD PTR ___t$[ebp], edx
  00058	eb bb		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0005a	5e		 pop	 esi
  0005b	83 c4 08	 add	 esp, 8
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
