; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32217.1 

	TITLE	C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Debug\ComputerMove.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?swHashTable@@3PAVSWHASHTABLE@@A		; swHashTable
PUBLIC	?nimHashTable@@3PAVNIMHASHTABLE@@A		; nimHashTable
PUBLIC	?moveType@@3W4MOVE_TYPE@@A			; moveType
PUBLIC	?availableMoveStack@@3HA			; availableMoveStack
PUBLIC	?stopThinking@@3_NA				; stopThinking
PUBLIC	?timeLimit@@3_JA				; timeLimit
PUBLIC	?currentTime@@3_JA				; currentTime
PUBLIC	?searchAborted@@3_NA				; searchAborted
_BSS	SEGMENT
?swHashTable@@3PAVSWHASHTABLE@@A DD 01H DUP (?)		; swHashTable
?nimHashTable@@3PAVNIMHASHTABLE@@A DD 01H DUP (?)	; nimHashTable
?moveType@@3W4MOVE_TYPE@@A DD 01H DUP (?)		; moveType
?availableMoveStack@@3HA DD 01H DUP (?)			; availableMoveStack
?stopThinking@@3_NA DB 01H DUP (?)			; stopThinking
	ALIGN	8

?timeLimit@@3_JA DQ 01H DUP (?)				; timeLimit
?currentTime@@3_JA DQ 01H DUP (?)			; currentTime
?searchAborted@@3_NA DB 01H DUP (?)			; searchAborted
_BSS	ENDS
CONST	SEGMENT
$SG74042 DB	'atlTraceException', 00H
$SG227405 DB	00H
	ORG $+1
$SG74238 DB	'atlTraceString', 00H
	ORG $+1
$SG226409 DB	'Error', 00H
	ORG $+2
$SG226410 DB	'Asked to find move.  None exist.', 00H
	ORG $+3
$SG226429 DB	'Internal Error', 00H
	ORG $+1
$SG226637 DB	'Unknown isolated chain', 00H
	ORG $+1
$SG226647 DB	'Expected non-zero nimval', 00H
	ORG $+3
$SG226656 DB	'Capturable to joint', 00H
$SG226664 DB	'Expected non-zero nimval', 00H
	ORG $+3
$SG226704 DB	'Cannot determine computer''s move', 00H
	ORG $+3
$SG226737 DB	'Cannot determine computer''s move', 00H
	ORG $+3
$SG226770 DB	'Cannot determine computer''s move', 00H
	ORG $+3
$SG226796 DB	'Cannot determine computer''s move', 00H
	ORG $+3
$SG226862 DB	'Cannot determine computer''s move', 00H
	ORG $+3
$SG226895 DB	'ISOLATED EDGE', 00H
	ORG $+2
$SG226911 DB	'Unknown edge type', 00H
	ORG $+6
$SG227012 DB	'C:\Users\15485\Desktop\', 0b9H, 0a4H, 0b3H, 0ccH, 0d6H, 0aeH
	DB	0d0H, 0c7H, 0b5H, 0e3H, 0b8H, 0f1H, 0c6H, 0e5H, '\', 0b9H, 0a4H
	DB	0b3H, 0ccH, 0d6H, 0aeH, 0d0H, 0c7H, 0b5H, 0e3H, 0b8H, 0f1H, 0c6H
	DB	0e5H, '\ComputerMove.cpp', 00H
	ORG $+2
$SG227018 DB	'C:\Users\15485\Desktop\', 0b9H, 0a4H, 0b3H, 0ccH, 0d6H, 0aeH
	DB	0d0H, 0c7H, 0b5H, 0e3H, 0b8H, 0f1H, 0c6H, 0e5H, '\', 0b9H, 0a4H
	DB	0b3H, 0ccH, 0d6H, 0aeH, 0d0H, 0c7H, 0b5H, 0e3H, 0b8H, 0f1H, 0c6H
	DB	0e5H, '\ComputerMove.cpp', 00H
	ORG $+2
$SG227038 DB	'Negative nimval', 00H
$SG227075 DB	'Cannot allocate memory', 00H
	ORG $+1
$SG227122 DB	'Internal Error', 00H
	ORG $+1
$SG227169 DB	'Nimval = %d', 00H
$SG227170 DB	'Result', 00H
	ORG $+1
$SG227327 DB	'Vertical', 00H
	ORG $+3
$SG227328 DB	'Horizontal', 00H
	ORG $+1
$SG227329 DB	'Test Error', 0aH, 'Computer move to dot (%d,%d)%s', 0aH, 'M'
	DB	'ove Type = %s', 00H
	ORG $+3
$SG227404 DB	'Expected Nimstring value=%d', 0aH, 'Computed value=%d', 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vswprintf_s_l
PUBLIC	_swprintf_s
PUBLIC	?AfxAssertFailedLine@@YGHPBDH@Z			; AfxAssertFailedLine
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
PUBLIC	?RegisterCategory@CTrace@ATL@@SAXPBDI@Z		; ATL::CTrace::RegisterCategory
PUBLIC	??0VECTOR@@QAE@XZ				; VECTOR::VECTOR
PUBLIC	?GiveNothing_BreakLoops@DOTS_AND_BOXES@@ABE_NHPAH@Z ; DOTS_AND_BOXES::GiveNothing_BreakLoops
PUBLIC	?GiveNothing_BothLoopAndDivide@DOTS_AND_BOXES@@AAE_NHPAH0@Z ; DOTS_AND_BOXES::GiveNothing_BothLoopAndDivide
PUBLIC	?GiveNothing_Divide@DOTS_AND_BOXES@@AAE_NPAHH@Z	; DOTS_AND_BOXES::GiveNothing_Divide
PUBLIC	?v@DOTS_AND_BOXES@@AAEXXZ			; DOTS_AND_BOXES::v
PUBLIC	?Width@DOTS_AND_BOXES@@QBEHXZ			; DOTS_AND_BOXES::Width
PUBLIC	?Height@DOTS_AND_BOXES@@QBEHXZ			; DOTS_AND_BOXES::Height
PUBLIC	?NumEdges@DOTS_AND_BOXES@@QBEHXZ		; DOTS_AND_BOXES::NumEdges
PUBLIC	?Size@DOTS_AND_BOXES@@QBE?AUtagPOINT@@XZ	; DOTS_AND_BOXES::Size
PUBLIC	?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
PUBLIC	?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType
PUBLIC	?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType
PUBLIC	?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
PUBLIC	?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType
PUBLIC	?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType
PUBLIC	?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z ; DOTS_AND_BOXES::BoxOwner
PUBLIC	?SetBoxOwner@DOTS_AND_BOXES@@QAEXHHW4OWNER_TYPE@@@Z ; DOTS_AND_BOXES::SetBoxOwner
PUBLIC	?Dot2Line@DOTS_AND_BOXES@@QBEHHH_N@Z		; DOTS_AND_BOXES::Dot2Line
PUBLIC	?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z	; DOTS_AND_BOXES::Dot2Line
PUBLIC	?GiveNothing@DOTS_AND_BOXES@@QAEXXZ		; DOTS_AND_BOXES::GiveNothing
PUBLIC	?IsSpecial5x5@DOTS_AND_BOXES@@QAE_NXZ		; DOTS_AND_BOXES::IsSpecial5x5
PUBLIC	?DivideAndConquer@DOTS_AND_BOXES@@QAEXXZ	; DOTS_AND_BOXES::DivideAndConquer
PUBLIC	?LoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@_N@Z	; DOTS_AND_BOXES::LoopWeight
PUBLIC	?FindAvoids@DOTS_AND_BOXES@@QAEXXZ		; DOTS_AND_BOXES::FindAvoids
PUBLIC	?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z	; OPENINGp::Play
PUBLIC	?Position@OPENINGp@@QAE_KHH@Z			; OPENINGp::Position
PUBLIC	?NumPositions@OPENINGp@@QAEHH@Z			; OPENINGp::NumPositions
PUBLIC	??_GNIMHASHTABLE@@QAEPAXI@Z			; NIMHASHTABLE::`scalar deleting destructor'
PUBLIC	??8EDGE@@QBE_NABU0@@Z				; EDGE::operator==
PUBLIC	??8EDGEDATA@@QBE_NABU0@@Z			; EDGEDATA::operator==
PUBLIC	?GiveLittle@CON@@QBEXXZ				; CON::GiveLittle
PUBLIC	?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z ; CON::TheGeneralCase
PUBLIC	?TheCCD55Case@CON@@QAEXPAVDOTS_AND_BOXES@@@Z	; CON::TheCCD55Case
PUBLIC	?SimpleWin@CON@@QAEXPAVDOTS_AND_BOXES@@@Z	; CON::SimpleWin
PUBLIC	?MaxCostOfNimZero@CON@@QBEHHH@Z			; CON::MaxCostOfNimZero
PUBLIC	?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@XZ ; CON::ComputeLongChainInfo
PUBLIC	?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z ; CON::ComputeLongChainInfo
PUBLIC	??0PossibleMove@@QAE@XZ				; PossibleMove::PossibleMove
PUBLIC	??1PossibleMove@@QAE@XZ				; PossibleMove::~PossibleMove
PUBLIC	??4PossibleMove@@QAEAAU0@ABU0@@Z		; PossibleMove::operator=
PUBLIC	??0NIMCON@@QAE@XZ				; NIMCON::NIMCON
PUBLIC	??1NIMCON@@QAE@XZ				; NIMCON::~NIMCON
PUBLIC	??0MOVE@@QAE@XZ					; MOVE::MOVE
PUBLIC	?TimeLimit@CNewBoxesDoc@@QAEHXZ			; CNewBoxesDoc::TimeLimit
PUBLIC	?MoveFlashCount@CNewBoxesDoc@@QAEHXZ		; CNewBoxesDoc::MoveFlashCount
PUBLIC	?NimstringValueToVerify@CNewBoxesDoc@@QAEHXZ	; CNewBoxesDoc::NimstringValueToVerify
PUBLIC	?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z		; CNewBoxesDoc::AddMove
PUBLIC	?MyRandom@CNewBoxesDoc@@QAEII@Z			; CNewBoxesDoc::MyRandom
PUBLIC	?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ	; CNewBoxesDoc::Game
PUBLIC	?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; PROCESS::GetTitle
PUBLIC	?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z ; PROCESS::OnLButtonDown
PUBLIC	?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z		; PROCESS::OnTimer
PUBLIC	?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnThreadCompletion
PUBLIC	?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnComputerMove
PUBLIC	?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnComputeNimval
PUBLIC	?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ	; PROCESS::OnEnterPosition
PUBLIC	?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnPlayGame
PUBLIC	?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnUnDoTurn
PUBLIC	?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ		; PROCESS::OnReDoTurn
PUBLIC	?IsIdle@PROCESS@@UBE_NXZ			; PROCESS::IsIdle
PUBLIC	?IsOK_ComputerMove@PROCESS@@UBE_NXZ		; PROCESS::IsOK_ComputerMove
PUBLIC	?IsOK_ComputeNimval@PROCESS@@UBE_NXZ		; PROCESS::IsOK_ComputeNimval
PUBLIC	?IsOK_EnterPosition@PROCESS@@UBE_NXZ		; PROCESS::IsOK_EnterPosition
PUBLIC	?IsOK_PlayGame@PROCESS@@UBE_NXZ			; PROCESS::IsOK_PlayGame
PUBLIC	?IsOK_UnDoTurn@PROCESS@@UBE_NXZ			; PROCESS::IsOK_UnDoTurn
PUBLIC	?IsOK_ReDoTurn@PROCESS@@UBE_NXZ			; PROCESS::IsOK_ReDoTurn
PUBLIC	?IsOK_TestCreation@PROCESS@@UBE_NXZ		; PROCESS::IsOK_TestCreation
PUBLIC	?IsOK_Options@PROCESS@@UBE_NXZ			; PROCESS::IsOK_Options
PUBLIC	??_GPROCESS@@QAEPAXI@Z				; PROCESS::`scalar deleting destructor'
PUBLIC	?StartThread@PROCESS_COMPUTER_MOVE@@AAEXXZ	; PROCESS_COMPUTER_MOVE::StartThread
PUBLIC	?OnInitialize@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ ; PROCESS_COMPUTER_MOVE::OnInitialize
PUBLIC	?OnShutdown@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ ; PROCESS_COMPUTER_MOVE::OnShutdown
PUBLIC	?OnReturn@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@PAVPROCESS@@@Z ; PROCESS_COMPUTER_MOVE::OnReturn
PUBLIC	?OnChar@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@III@Z ; PROCESS_COMPUTER_MOVE::OnChar
PUBLIC	?OnTimer@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@I@Z ; PROCESS_COMPUTER_MOVE::OnTimer
PUBLIC	?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ ; PROCESS_COMPUTER_MOVE::OnThreadCompletion
PUBLIC	??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z ; PROCESS_COMPUTER_MOVE::PROCESS_COMPUTER_MOVE
PUBLIC	?StartThread@PROCESS_NIMVALUE@@AAEXXZ		; PROCESS_NIMVALUE::StartThread
PUBLIC	?OnInitialize@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ ; PROCESS_NIMVALUE::OnInitialize
PUBLIC	?OnShutdown@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ	; PROCESS_NIMVALUE::OnShutdown
PUBLIC	?OnReturn@PROCESS_NIMVALUE@@EAE?AW4STATUS@@PAVPROCESS@@@Z ; PROCESS_NIMVALUE::OnReturn
PUBLIC	?OnChar@PROCESS_NIMVALUE@@EAE?AW4STATUS@@III@Z	; PROCESS_NIMVALUE::OnChar
PUBLIC	?OnThreadCompletion@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ ; PROCESS_NIMVALUE::OnThreadCompletion
PUBLIC	??0PROCESS_NIMVALUE@@QAE@PAVDOTS_AND_BOXES@@@Z	; PROCESS_NIMVALUE::PROCESS_NIMVALUE
PUBLIC	?OnInitialize@PROCESS_FLASH@@EAE?AW4STATUS@@XZ	; PROCESS_FLASH::OnInitialize
PUBLIC	?OnChar@PROCESS_FLASH@@EAE?AW4STATUS@@III@Z	; PROCESS_FLASH::OnChar
PUBLIC	?OnTimer@PROCESS_FLASH@@EAE?AW4STATUS@@I@Z	; PROCESS_FLASH::OnTimer
PUBLIC	?OnShutdown@PROCESS_FLASH@@EAE?AW4STATUS@@XZ	; PROCESS_FLASH::OnShutdown
PUBLIC	??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z		; PROCESS_FLASH::PROCESS_FLASH
PUBLIC	?ComputerMoveRandom@@YAXPAVDOTS_AND_BOXES@@@Z	; ComputerMoveRandom
PUBLIC	?FormRanks@@YAXPAH0H@Z				; FormRanks
PUBLIC	?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWin
PUBLIC	?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWinDecline
PUBLIC	?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWinCapture
PUBLIC	?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleMove
PUBLIC	?TranslateOpeningMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@@Z ; TranslateOpeningMove
PUBLIC	?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z ; TranslateComputerMove
PUBLIC	?MoveQualityGT@@YA_NPAHPAULONG_CHAIN_INFO@@HH@Z	; MoveQualityGT
PUBLIC	?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z		; PlayOpening
PUBLIC	?ComputerMoveProc@@YAIPAX@Z			; ComputerMoveProc
PUBLIC	?ComputeNimvalProc@@YAIPAX@Z			; ComputeNimvalProc
PUBLIC	?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z ; TestError
PUBLIC	?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; Test
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@		; `string'
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	?m_nLastCategory@CTrace@ATL@@1IA		; ATL::CTrace::m_nLastCategory
PUBLIC	?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A	; ATL::CTrace::m_nMap
PUBLIC	??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@		; `string'
PUBLIC	??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ ; `string'
PUBLIC	??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@ ; `string'
PUBLIC	??_7PROCESS_COMPUTER_MOVE@@6B@			; PROCESS_COMPUTER_MOVE::`vftable'
PUBLIC	??_7PROCESS_NIMVALUE@@6B@			; PROCESS_NIMVALUE::`vftable'
PUBLIC	??_7PROCESS_FLASH@@6B@				; PROCESS_FLASH::`vftable'
PUBLIC	?computerMove@@3UPossibleMove@@A		; computerMove
PUBLIC	?computerMoveDB@@3UMOVE@@A			; computerMoveDB
PUBLIC	??_R4PROCESS_COMPUTER_MOVE@@6B@			; PROCESS_COMPUTER_MOVE::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPROCESS_COMPUTER_MOVE@@@8		; PROCESS_COMPUTER_MOVE `RTTI Type Descriptor'
PUBLIC	??_R3PROCESS_COMPUTER_MOVE@@8			; PROCESS_COMPUTER_MOVE::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PROCESS_COMPUTER_MOVE@@8			; PROCESS_COMPUTER_MOVE::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PROCESS_COMPUTER_MOVE@@8		; PROCESS_COMPUTER_MOVE::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@PROCESS@@8			; PROCESS::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVPROCESS@@@8				; PROCESS `RTTI Type Descriptor'
PUBLIC	??_R3PROCESS@@8					; PROCESS::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PROCESS@@8					; PROCESS::`RTTI Base Class Array'
PUBLIC	??_R4PROCESS_NIMVALUE@@6B@			; PROCESS_NIMVALUE::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPROCESS_NIMVALUE@@@8			; PROCESS_NIMVALUE `RTTI Type Descriptor'
PUBLIC	??_R3PROCESS_NIMVALUE@@8			; PROCESS_NIMVALUE::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PROCESS_NIMVALUE@@8			; PROCESS_NIMVALUE::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PROCESS_NIMVALUE@@8		; PROCESS_NIMVALUE::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4PROCESS_FLASH@@6B@				; PROCESS_FLASH::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPROCESS_FLASH@@@8			; PROCESS_FLASH `RTTI Type Descriptor'
PUBLIC	??_R3PROCESS_FLASH@@8				; PROCESS_FLASH::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PROCESS_FLASH@@8				; PROCESS_FLASH::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PROCESS_FLASH@@8			; PROCESS_FLASH::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__imp__wcscpy_s:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__GetSystemTimeAsFileTime@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	__imp____stdio_common_vswprintf_s:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp___CrtDbgReportW:PROC
EXTRN	__imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z:PROC
EXTRN	__imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z:PROC
EXTRN	__imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ:PROC
EXTRN	__imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ:PROC
EXTRN	?Invalidate@CWnd@@QAEXH@Z:PROC			; CWnd::Invalidate
EXTRN	?AfxBeginThread@@YGPAVCWinThread@@P6AIPAX@Z0HIKPAU_SECURITY_ATTRIBUTES@@@Z:PROC ; AfxBeginThread
EXTRN	?UpdateAllViews@CDocument@@QAEXPAVCView@@JPAVCObject@@@Z:PROC ; CDocument::UpdateAllViews
EXTRN	?die@@YAXPBD@Z:PROC				; die
EXTRN	?NotImplemented@@YAXPAD@Z:PROC			; NotImplemented
EXTRN	?ImplementationError@@YAXPBD@Z:PROC		; ImplementationError
EXTRN	??0DOTS_AND_BOXES@@QAE@HH@Z:PROC		; DOTS_AND_BOXES::DOTS_AND_BOXES
EXTRN	??1DOTS_AND_BOXES@@QAE@XZ:PROC			; DOTS_AND_BOXES::~DOTS_AND_BOXES
EXTRN	??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z:PROC		; DOTS_AND_BOXES::operator=
EXTRN	?NumberOfLines@DOTS_AND_BOXES@@QBEHXZ:PROC	; DOTS_AND_BOXES::NumberOfLines
EXTRN	?CountLines@DOTS_AND_BOXES@@QBEHUtagPOINT@@@Z:PROC ; DOTS_AND_BOXES::CountLines
EXTRN	?RemoveCapturables@DOTS_AND_BOXES@@QAEXXZ:PROC	; DOTS_AND_BOXES::RemoveCapturables
EXTRN	?CountCapturables@DOTS_AND_BOXES@@QBEHXZ:PROC	; DOTS_AND_BOXES::CountCapturables
EXTRN	?IsFinished@DOTS_AND_BOXES@@QBE_NXZ:PROC	; DOTS_AND_BOXES::IsFinished
EXTRN	?ComputeDivideAndConquerWeights_3@DOTS_AND_BOXES@@QAEXXZ:PROC ; DOTS_AND_BOXES::ComputeDivideAndConquerWeights_3
EXTRN	?ComputeBreakUpLoopWeights@DOTS_AND_BOXES@@QAEXH@Z:PROC ; DOTS_AND_BOXES::ComputeBreakUpLoopWeights
EXTRN	??0OPENINGp@@QAE@HHH@Z:PROC			; OPENINGp::OPENINGp
EXTRN	??1OPENINGp@@QAE@XZ:PROC			; OPENINGp::~OPENINGp
EXTRN	?Canon@CCDn@@QAEXXZ:PROC			; CCDn::Canon
EXTRN	??0CCDp@@QAE@HH@Z:PROC				; CCDp::CCDp
EXTRN	??1CCDp@@QAE@XZ:PROC				; CCDp::~CCDp
EXTRN	?IsCapture@CCDp@@QAE_NH@Z:PROC			; CCDp::IsCapture
EXTRN	?GoodOpening@CCDp@@QAE_N_K0@Z:PROC		; CCDp::GoodOpening
EXTRN	??0NIMHASHTABLE@@QAE@XZ:PROC			; NIMHASHTABLE::NIMHASHTABLE
EXTRN	??1NIMHASHTABLE@@QAE@XZ:PROC			; NIMHASHTABLE::~NIMHASHTABLE
EXTRN	?DeleteEdge@CON@@QAEXHH@Z:PROC			; CON::DeleteEdge
EXTRN	?DeleteNode@CON@@QAEXH@Z:PROC			; CON::DeleteNode
EXTRN	??0CON@@QAE@XZ:PROC				; CON::CON
EXTRN	??1CON@@QAE@XZ:PROC				; CON::~CON
EXTRN	??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z:PROC	; CON::operator=
EXTRN	??4CON@@QAEAAV0@ABV0@@Z:PROC			; CON::operator=
EXTRN	??8CON@@QBE_NABV0@@Z:PROC			; CON::operator==
EXTRN	?Canon@CON@@QAEXHH@Z:PROC			; CON::Canon
EXTRN	?ObviousCapture@CON@@QAEXXZ:PROC		; CON::ObviousCapture
EXTRN	?GrabAnything@CON@@QAEXXZ:PROC			; CON::GrabAnything
EXTRN	?SWEvaluateAllMoves@CON@@QBE?AUSWVALUE@@IIPAUPossibleMove@@@Z:PROC ; CON::SWEvaluateAllMoves
EXTRN	?CheckSWCapture@CON@@QBE?AUSWVALUE@@IIPAUPossibleMove@@@Z:PROC ; CON::CheckSWCapture
EXTRN	?MeasureRope@CON@@QAEHXZ:PROC			; CON::MeasureRope
EXTRN	?NimVal@NIMCON@@QAEHPBVCON@@@Z:PROC		; NIMCON::NimVal
EXTRN	??4NIMCON@@QAEAAV0@PBVCON@@@Z:PROC		; NIMCON::operator=
EXTRN	?InvalidateView@@YAXXZ:PROC			; InvalidateView
EXTRN	?FindCaptures@MOVE@@QAEXPAVDOTS_AND_BOXES@@@Z:PROC ; MOVE::FindCaptures
EXTRN	?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:PROC ; MOVE::TypeName
EXTRN	?AddMove@MOVE_HISTORY@@QAEXABUMOVE@@@Z:PROC	; MOVE_HISTORY::AddMove
EXTRN	?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z:PROC ; CNewBoxesDoc::HorizontalLineType
EXTRN	?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@HH@Z:PROC ; CNewBoxesDoc::HorizontalLineType
EXTRN	?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z:PROC ; CNewBoxesDoc::VerticalLineType
EXTRN	?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@HH@Z:PROC ; CNewBoxesDoc::VerticalLineType
EXTRN	?HorizontalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z:PROC ; CNewBoxesDoc::HorizontalLineType
EXTRN	?VerticalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z:PROC ; CNewBoxesDoc::VerticalLineType
EXTRN	?BoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z:PROC ; CNewBoxesDoc::BoxOwner
EXTRN	?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z:PROC ; CNewBoxesDoc::AI_Option
EXTRN	?IsMoveAvailable@CNewBoxesDoc@@QBE_NXZ:PROC	; CNewBoxesDoc::IsMoveAvailable
EXTRN	?PopProcess@PROCESS@@IAEXXZ:PROC		; PROCESS::PopProcess
EXTRN	?PushProcess@PROCESS@@IAEXPAV1@@Z:PROC		; PROCESS::PushProcess
EXTRN	??0PROCESS@@QAE@XZ:PROC				; PROCESS::PROCESS
EXTRN	??1PROCESS@@QAE@XZ:PROC				; PROCESS::~PROCESS
EXTRN	?OnReturn@PROCESS@@UAE?AW4STATUS@@PAV1@@Z:PROC	; PROCESS::OnReturn
EXTRN	?MyRandom@@YAII@Z:PROC				; MyRandom
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__allmul:PROC
EXTRN	__allshl:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?pDoc@@3PAVCNewBoxesDoc@@A:DWORD		; pDoc
EXTRN	?windowHandle@@3PAUHWND__@@A:DWORD		; windowHandle
EXTRN	?pViewWindow@@3PAVCNewBoxesView@@A:DWORD	; pViewWindow
EXTRN	___security_cookie:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?m_nLastCategory@CTrace@ATL@@1IA
_BSS	SEGMENT
?m_nLastCategory@CTrace@ATL@@1IA DD 01H DUP (?)		; ATL::CTrace::m_nLastCategory
_BSS	ENDS
;	COMDAT ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A
_BSS	SEGMENT
?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A DB 02080H DUP (?) ; ATL::CTrace::m_nMap
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?computerMove@@3UPossibleMove@@A DB 0141cH DUP (?)	; computerMove
?computerMoveDB@@3UMOVE@@A DB 038H DUP (?)		; computerMoveDB
?thinking@@3_NA DB 01H DUP (?)				; thinking
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceException$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceException@ATL@@YAXXZ ; ATL::atlTraceException$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@PROCESS_FLASH@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PROCESS_FLASH@@8 DD FLAT:??_R0?AVPROCESS_FLASH@@@8 ; PROCESS_FLASH::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PROCESS_FLASH@@8
rdata$r	ENDS
;	COMDAT ??_R2PROCESS_FLASH@@8
rdata$r	SEGMENT
??_R2PROCESS_FLASH@@8 DD FLAT:??_R1A@?0A@EA@PROCESS_FLASH@@8 ; PROCESS_FLASH::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R3PROCESS_FLASH@@8
rdata$r	SEGMENT
??_R3PROCESS_FLASH@@8 DD 00H				; PROCESS_FLASH::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PROCESS_FLASH@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPROCESS_FLASH@@@8
data$rs	SEGMENT
??_R0?AVPROCESS_FLASH@@@8 DD FLAT:??_7type_info@@6B@	; PROCESS_FLASH `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPROCESS_FLASH@@', 00H
data$rs	ENDS
;	COMDAT ??_R4PROCESS_FLASH@@6B@
rdata$r	SEGMENT
??_R4PROCESS_FLASH@@6B@ DD 00H				; PROCESS_FLASH::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPROCESS_FLASH@@@8
	DD	FLAT:??_R3PROCESS_FLASH@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PROCESS_NIMVALUE@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PROCESS_NIMVALUE@@8 DD FLAT:??_R0?AVPROCESS_NIMVALUE@@@8 ; PROCESS_NIMVALUE::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PROCESS_NIMVALUE@@8
rdata$r	ENDS
;	COMDAT ??_R2PROCESS_NIMVALUE@@8
rdata$r	SEGMENT
??_R2PROCESS_NIMVALUE@@8 DD FLAT:??_R1A@?0A@EA@PROCESS_NIMVALUE@@8 ; PROCESS_NIMVALUE::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R3PROCESS_NIMVALUE@@8
rdata$r	SEGMENT
??_R3PROCESS_NIMVALUE@@8 DD 00H				; PROCESS_NIMVALUE::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PROCESS_NIMVALUE@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPROCESS_NIMVALUE@@@8
data$rs	SEGMENT
??_R0?AVPROCESS_NIMVALUE@@@8 DD FLAT:??_7type_info@@6B@	; PROCESS_NIMVALUE `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPROCESS_NIMVALUE@@', 00H
data$rs	ENDS
;	COMDAT ??_R4PROCESS_NIMVALUE@@6B@
rdata$r	SEGMENT
??_R4PROCESS_NIMVALUE@@6B@ DD 00H			; PROCESS_NIMVALUE::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPROCESS_NIMVALUE@@@8
	DD	FLAT:??_R3PROCESS_NIMVALUE@@8
rdata$r	ENDS
;	COMDAT ??_R2PROCESS@@8
rdata$r	SEGMENT
??_R2PROCESS@@8 DD FLAT:??_R1A@?0A@EA@PROCESS@@8	; PROCESS::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3PROCESS@@8
rdata$r	SEGMENT
??_R3PROCESS@@8 DD 00H					; PROCESS::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPROCESS@@@8
data$rs	SEGMENT
??_R0?AVPROCESS@@@8 DD FLAT:??_7type_info@@6B@		; PROCESS `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPROCESS@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@PROCESS@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PROCESS@@8 DD FLAT:??_R0?AVPROCESS@@@8	; PROCESS::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PROCESS_COMPUTER_MOVE@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PROCESS_COMPUTER_MOVE@@8 DD FLAT:??_R0?AVPROCESS_COMPUTER_MOVE@@@8 ; PROCESS_COMPUTER_MOVE::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PROCESS_COMPUTER_MOVE@@8
rdata$r	ENDS
;	COMDAT ??_R2PROCESS_COMPUTER_MOVE@@8
rdata$r	SEGMENT
??_R2PROCESS_COMPUTER_MOVE@@8 DD FLAT:??_R1A@?0A@EA@PROCESS_COMPUTER_MOVE@@8 ; PROCESS_COMPUTER_MOVE::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PROCESS@@8
rdata$r	ENDS
;	COMDAT ??_R3PROCESS_COMPUTER_MOVE@@8
rdata$r	SEGMENT
??_R3PROCESS_COMPUTER_MOVE@@8 DD 00H			; PROCESS_COMPUTER_MOVE::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PROCESS_COMPUTER_MOVE@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPROCESS_COMPUTER_MOVE@@@8
data$rs	SEGMENT
??_R0?AVPROCESS_COMPUTER_MOVE@@@8 DD FLAT:??_7type_info@@6B@ ; PROCESS_COMPUTER_MOVE `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPROCESS_COMPUTER_MOVE@@', 00H
data$rs	ENDS
;	COMDAT ??_R4PROCESS_COMPUTER_MOVE@@6B@
rdata$r	SEGMENT
??_R4PROCESS_COMPUTER_MOVE@@6B@ DD 00H			; PROCESS_COMPUTER_MOVE::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPROCESS_COMPUTER_MOVE@@@8
	DD	FLAT:??_R3PROCESS_COMPUTER_MOVE@@8
rdata$r	ENDS
;	COMDAT ??_7PROCESS_FLASH@@6B@
CONST	SEGMENT
??_7PROCESS_FLASH@@6B@ DD FLAT:??_R4PROCESS_FLASH@@6B@	; PROCESS_FLASH::`vftable'
	DD	FLAT:?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
	DD	FLAT:?OnShutdown@PROCESS_FLASH@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnReturn@PROCESS@@UAE?AW4STATUS@@PAV1@@Z
	DD	FLAT:?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z
	DD	FLAT:?OnInitialize@PROCESS_FLASH@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnChar@PROCESS_FLASH@@EAE?AW4STATUS@@III@Z
	DD	FLAT:?OnTimer@PROCESS_FLASH@@EAE?AW4STATUS@@I@Z
	DD	FLAT:?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?IsIdle@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputerMove@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputeNimval@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_EnterPosition@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_PlayGame@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_UnDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ReDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_TestCreation@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_Options@PROCESS@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7PROCESS_NIMVALUE@@6B@
CONST	SEGMENT
??_7PROCESS_NIMVALUE@@6B@ DD FLAT:??_R4PROCESS_NIMVALUE@@6B@ ; PROCESS_NIMVALUE::`vftable'
	DD	FLAT:?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
	DD	FLAT:?OnShutdown@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnReturn@PROCESS_NIMVALUE@@EAE?AW4STATUS@@PAVPROCESS@@@Z
	DD	FLAT:?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z
	DD	FLAT:?OnInitialize@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnChar@PROCESS_NIMVALUE@@EAE?AW4STATUS@@III@Z
	DD	FLAT:?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z
	DD	FLAT:?OnThreadCompletion@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?IsIdle@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputerMove@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputeNimval@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_EnterPosition@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_PlayGame@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_UnDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ReDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_TestCreation@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_Options@PROCESS@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_7PROCESS_COMPUTER_MOVE@@6B@
CONST	SEGMENT
??_7PROCESS_COMPUTER_MOVE@@6B@ DD FLAT:??_R4PROCESS_COMPUTER_MOVE@@6B@ ; PROCESS_COMPUTER_MOVE::`vftable'
	DD	FLAT:?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
	DD	FLAT:?OnShutdown@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnReturn@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@PAVPROCESS@@@Z
	DD	FLAT:?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z
	DD	FLAT:?OnInitialize@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnChar@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@III@Z
	DD	FLAT:?OnTimer@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@I@Z
	DD	FLAT:?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
	DD	FLAT:?IsIdle@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputerMove@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ComputeNimval@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_EnterPosition@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_PlayGame@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_UnDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_ReDoTurn@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_TestCreation@PROCESS@@UBE_NXZ
	DD	FLAT:?IsOK_Options@PROCESS@@UBE_NXZ
CONST	ENDS
;	COMDAT ??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
CONST	SEGMENT
??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@ DB 'G'
	DB	00H, ':', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r', 00H
	DB	'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H, 'V'
	DB	00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H
	DB	'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '\'
	DB	00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H, 'C', 00H
	DB	'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T', 00H
	DB	'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H, 'S'
	DB	00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.', 00H
	DB	'3', 00H, '5', 00H, '.', 00H, '3', 00H, '2', 00H, '2', 00H, '1'
	DB	00H, '5', 00H, '\', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'm', 00H
	DB	'f', 00H, 'c', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
CONST	SEGMENT
??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@ DB 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' '
	DB	00H, 'm', 00H, 'a', 00H, 'n', 00H, 'y', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'f', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 'd', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
CONST	SEGMENT
??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@ DB '%', 00H, 'h', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
CONST	SEGMENT
??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@ DB '%', 00H, 'l', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
xdata$x	SEGMENT
__unwindtable$?ComputerMoveProc@@YAIPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ComputerMoveProc@@YAIPAX@Z$0
__unwindtable$?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z$0
__unwindtable$??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z$0
__unwindtable$??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z$0
__unwindtable$?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ$0
__unwindtable$?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z$0
__unwindtable$?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z$0
__unwindtable$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z$1
__unwindtable$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z$1
__unwindtable$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$1
__unwindtable$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$1
__unwindtable$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$1
__unwindtable$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$1
__unwindtable$?MaxCostOfNimZero@CON@@QBEHHH@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?MaxCostOfNimZero@CON@@QBEHHH@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?MaxCostOfNimZero@CON@@QBEHHH@Z$1
__unwindtable$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z$1
__unwindtable$?ComputeNimvalProc@@YAIPAX@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ComputeNimvalProc@@YAIPAX@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ComputeNimvalProc@@YAIPAX@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ComputeNimvalProc@@YAIPAX@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ComputeNimvalProc@@YAIPAX@Z$3
__ehfuncinfo$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ComputeNimvalProc@@YAIPAX@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?ComputeNimvalProc@@YAIPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ComputerMoveProc@@YAIPAX@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ComputerMoveProc@@YAIPAX@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?MaxCostOfNimZero@CON@@QBEHHH@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?MaxCostOfNimZero@CON@@QBEHHH@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$4
	DD	03H
	DD	FLAT:__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$5
	DD	03H
	DD	FLAT:__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$6
xdata$x	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z$0
	DD	032H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z$0
	DD	016H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z$0
	DD	016H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$0
	DD	05eH
	DD	06bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
	DD	036H
	DD	0867H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?ComputeNimvalProc@@YAIPAX@Z$0
	DD	04bH
	DD	058H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ComputeNimvalProc@@YAIPAX@Z
	DD	036H
	DD	0242H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?ComputerMoveProc@@YAIPAX@Z$0
	DD	019H
	DD	026H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ComputerMoveProc@@YAIPAX@Z
	DD	036H
	DD	045eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z$0
	DD	016H
	DD	020H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z
	DD	02bH
	DD	09bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z$0
	DD	024H
	DD	031H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z
	DD	036H
	DD	07e4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?TranslateOpeningMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@@Z
	DD	01eH
	DD	0a4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0
	DD	024H
	DD	031H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
	DD	036H
	DD	0258H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0
	DD	024H
	DD	031H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
	DD	036H
	DD	031aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0
	DD	024H
	DD	031H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
	DD	036H
	DD	031aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0
	DD	024H
	DD	031H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
	DD	036H
	DD	0308H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ComputerMoveRandom@@YAXPAVDOTS_AND_BOXES@@@Z
	DD	024H
	DD	0250H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ$0
	DD	020H
	DD	02dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ
	DD	034H
	DD	015dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z$0
	DD	019H
	DD	026H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z
	DD	037H
	DD	0147H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@XZ
	DD	01fH
	DD	030dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?MaxCostOfNimZero@CON@@QBEHHH@Z$0
	DD	024H
	DD	031H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MaxCostOfNimZero@CON@@QBEHHH@Z
	DD	038H
	DD	060eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?SimpleWin@CON@@QAEXPAVDOTS_AND_BOXES@@@Z
	DD	020H
	DD	0183H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z$0
	DD	024H
	DD	031H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z
	DD	038H
	DD	0c82H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?GiveLittle@CON@@QBEXXZ
	DD	025H
	DD	039bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:__unwindfunclet$?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z$0
	DD	016H
	DD	023H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z
	DD	034H
	DD	037aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?GiveNothing@DOTS_AND_BOXES@@QAEXXZ
	DD	025H
	DD	016eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	024H
	DW	0100H
voltbl	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?atlTraceString$initializer$@ATL@@3P6AXXZA DD FLAT:??__EatlTraceString@ATL@@YAXXZ ; ATL::atlTraceString$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?computerMove$initializer$@@3P6AXXZA DD FLAT:??__EcomputerMove@@YAXXZ ; computerMove$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?computerMoveDB$initializer$@@3P6AXXZA DD FLAT:??__EcomputerMoveDB@@YAXXZ ; computerMoveDB$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
tv353 = -15740						; size = 4
tv345 = -15736						; size = 4
tv333 = -15732						; size = 4
$T2 = -15728						; size = 4
$T3 = -15724						; size = 4
$T4 = -15720						; size = 4
$T5 = -15716						; size = 4
$T6 = -15712						; size = 4
$T7 = -15708						; size = 56
_err$8 = -15648						; size = 4
_origNimHashTable$9 = -15640				; size = 4
_nimcon$10 = -15632					; size = 5136
_v$11 = -10492						; size = 4
$T12 = -10488						; size = 56
_savecon$13 = -10428					; size = 5136
_con$ = -5284						; size = 5136
_move$ = -140						; size = 56
_col$ = -80						; size = 4
_row$ = -76						; size = 4
_copyOfGame$ = -68					; size = 48
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; Test

; 2167 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 70 3d 00 00	 mov	 eax, 15728		; 00003d70H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d bd 84 c2 ff
	ff		 lea	 edi, DWORD PTR [ebp-15740]
  00023	b9 5c 0f 00 00	 mov	 ecx, 3932		; 00000f5cH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00043	c7 85 90 c2 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0

; 2168 :   // Make a copy of the current game.
; 2169 :   // Remove the computer moves.
; 2170 :   // Ask the computer to generate a move.
; 2171 :   // See if the generated move is an allowed move.
; 2172 :   // That's All, Folks!
; 2173 :   DOTS_AND_BOXES copyOfGame(pDoc->Game().Width(), pDoc->Game().Height());

  0004d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00053	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  00058	8b c8		 mov	 ecx, eax
  0005a	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0005f	50		 push	 eax
  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00066	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  0006b	8b c8		 mov	 ecx, eax
  0006d	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00072	50		 push	 eax
  00073	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00076	e8 00 00 00 00	 call	 ??0DOTS_AND_BOXES@@QAE@HH@Z ; DOTS_AND_BOXES::DOTS_AND_BOXES
  0007b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2174 :   int row, col;
; 2175 :   MOVE move;

  00082	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _move$[ebp]
  00088	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 2176 :   CON con;

  0008d	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00093	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00098	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 2177 :   copyOfGame = pDoc->Game();

  0009c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  000a2	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  000a7	50		 push	 eax
  000a8	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  000ab	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 2178 :   // First, remove all the computer lines from copyOfGame.
; 2179 :   for (row=0; row<copyOfGame.Height(); row++)

  000b0	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  000b7	eb 09		 jmp	 SHORT $LN4@Test
$LN2@Test:
  000b9	8b 45 b4	 mov	 eax, DWORD PTR _row$[ebp]
  000bc	83 c0 01	 add	 eax, 1
  000bf	89 45 b4	 mov	 DWORD PTR _row$[ebp], eax
$LN4@Test:
  000c2	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  000c5	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  000ca	39 45 b4	 cmp	 DWORD PTR _row$[ebp], eax
  000cd	0f 8d 97 00 00
	00		 jge	 $LN3@Test

; 2180 :   {
; 2181 :     for (col=0; col<copyOfGame.Width(); col++)

  000d3	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  000da	eb 09		 jmp	 SHORT $LN7@Test
$LN5@Test:
  000dc	8b 4d b0	 mov	 ecx, DWORD PTR _col$[ebp]
  000df	83 c1 01	 add	 ecx, 1
  000e2	89 4d b0	 mov	 DWORD PTR _col$[ebp], ecx
$LN7@Test:
  000e5	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  000e8	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  000ed	39 45 b0	 cmp	 DWORD PTR _col$[ebp], eax
  000f0	7d 73		 jge	 SHORT $LN6@Test

; 2182 :     {
; 2183 :       if (col < copyOfGame.Width()-1)

  000f2	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  000f5	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  000fa	83 e8 01	 sub	 eax, 1
  000fd	39 45 b0	 cmp	 DWORD PTR _col$[ebp], eax
  00100	7d 27		 jge	 SHORT $LN20@Test

; 2184 :       {
; 2185 :         if (copyOfGame.HLineType(col, row) == LINE_COMPUTER)

  00102	8b 55 b4	 mov	 edx, DWORD PTR _row$[ebp]
  00105	52		 push	 edx
  00106	8b 45 b0	 mov	 eax, DWORD PTR _col$[ebp]
  00109	50		 push	 eax
  0010a	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  0010d	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  00112	83 f8 01	 cmp	 eax, 1
  00115	75 12		 jne	 SHORT $LN20@Test

; 2186 :         {
; 2187 :           copyOfGame.SetHLineType(col, row, LINE_NONE);

  00117	6a 00		 push	 0
  00119	8b 4d b4	 mov	 ecx, DWORD PTR _row$[ebp]
  0011c	51		 push	 ecx
  0011d	8b 55 b0	 mov	 edx, DWORD PTR _col$[ebp]
  00120	52		 push	 edx
  00121	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00124	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType
$LN20@Test:

; 2188 :         };
; 2189 :       };
; 2190 :       if (row < copyOfGame.Height()-1)

  00129	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  0012c	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  00131	83 e8 01	 sub	 eax, 1
  00134	39 45 b4	 cmp	 DWORD PTR _row$[ebp], eax
  00137	7d 27		 jge	 SHORT $LN22@Test

; 2191 :       {
; 2192 :         if (copyOfGame.VLineType(col, row) == LINE_COMPUTER)

  00139	8b 45 b4	 mov	 eax, DWORD PTR _row$[ebp]
  0013c	50		 push	 eax
  0013d	8b 4d b0	 mov	 ecx, DWORD PTR _col$[ebp]
  00140	51		 push	 ecx
  00141	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00144	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  00149	83 f8 01	 cmp	 eax, 1
  0014c	75 12		 jne	 SHORT $LN22@Test

; 2193 :         {
; 2194 :           copyOfGame.SetVLineType(col, row, LINE_NONE);

  0014e	6a 00		 push	 0
  00150	8b 55 b4	 mov	 edx, DWORD PTR _row$[ebp]
  00153	52		 push	 edx
  00154	8b 45 b0	 mov	 eax, DWORD PTR _col$[ebp]
  00157	50		 push	 eax
  00158	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  0015b	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType
$LN22@Test:

; 2195 :         };
; 2196 :       };
; 2197 :     };

  00160	e9 77 ff ff ff	 jmp	 $LN5@Test
$LN6@Test:

; 2198 :   };

  00165	e9 4f ff ff ff	 jmp	 $LN2@Test
$LN3@Test:

; 2199 :   //Remove the owner from any boxes that are no longer captured.
; 2200 :   for (row=0; row<copyOfGame.Height()-1; row++)

  0016a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  00171	eb 09		 jmp	 SHORT $LN10@Test
$LN8@Test:
  00173	8b 4d b4	 mov	 ecx, DWORD PTR _row$[ebp]
  00176	83 c1 01	 add	 ecx, 1
  00179	89 4d b4	 mov	 DWORD PTR _row$[ebp], ecx
$LN10@Test:
  0017c	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  0017f	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  00184	83 e8 01	 sub	 eax, 1
  00187	39 45 b4	 cmp	 DWORD PTR _row$[ebp], eax
  0018a	0f 8d ac 00 00
	00		 jge	 $LN9@Test

; 2201 :   {
; 2202 :     for (col=0; col<copyOfGame.Width()-1; col++)

  00190	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  00197	eb 09		 jmp	 SHORT $LN13@Test
$LN11@Test:
  00199	8b 55 b0	 mov	 edx, DWORD PTR _col$[ebp]
  0019c	83 c2 01	 add	 edx, 1
  0019f	89 55 b0	 mov	 DWORD PTR _col$[ebp], edx
$LN13@Test:
  001a2	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  001a5	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  001aa	83 e8 01	 sub	 eax, 1
  001ad	39 45 b0	 cmp	 DWORD PTR _col$[ebp], eax
  001b0	0f 8d 81 00 00
	00		 jge	 $LN12@Test

; 2203 :     {
; 2204 :       if (copyOfGame.BoxOwner(col,row) != OWNER_NONE)

  001b6	8b 45 b4	 mov	 eax, DWORD PTR _row$[ebp]
  001b9	50		 push	 eax
  001ba	8b 4d b0	 mov	 ecx, DWORD PTR _col$[ebp]
  001bd	51		 push	 ecx
  001be	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  001c1	e8 00 00 00 00	 call	 ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z ; DOTS_AND_BOXES::BoxOwner
  001c6	85 c0		 test	 eax, eax
  001c8	74 68		 je	 SHORT $LN24@Test

; 2205 :       {
; 2206 :         if (   (copyOfGame.HLineType(col,row) == LINE_NONE)
; 2207 :             || (copyOfGame.VLineType(col,row) == LINE_NONE)
; 2208 :             || (copyOfGame.HLineType(col,row+1) == LINE_NONE)
; 2209 :             || (copyOfGame.VLineType(col+1,row) == LINE_NONE))

  001ca	8b 55 b4	 mov	 edx, DWORD PTR _row$[ebp]
  001cd	52		 push	 edx
  001ce	8b 45 b0	 mov	 eax, DWORD PTR _col$[ebp]
  001d1	50		 push	 eax
  001d2	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  001d5	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  001da	85 c0		 test	 eax, eax
  001dc	74 42		 je	 SHORT $LN26@Test
  001de	8b 4d b4	 mov	 ecx, DWORD PTR _row$[ebp]
  001e1	51		 push	 ecx
  001e2	8b 55 b0	 mov	 edx, DWORD PTR _col$[ebp]
  001e5	52		 push	 edx
  001e6	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  001e9	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  001ee	85 c0		 test	 eax, eax
  001f0	74 2e		 je	 SHORT $LN26@Test
  001f2	8b 45 b4	 mov	 eax, DWORD PTR _row$[ebp]
  001f5	83 c0 01	 add	 eax, 1
  001f8	50		 push	 eax
  001f9	8b 4d b0	 mov	 ecx, DWORD PTR _col$[ebp]
  001fc	51		 push	 ecx
  001fd	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00200	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  00205	85 c0		 test	 eax, eax
  00207	74 17		 je	 SHORT $LN26@Test
  00209	8b 55 b4	 mov	 edx, DWORD PTR _row$[ebp]
  0020c	52		 push	 edx
  0020d	8b 45 b0	 mov	 eax, DWORD PTR _col$[ebp]
  00210	83 c0 01	 add	 eax, 1
  00213	50		 push	 eax
  00214	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00217	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  0021c	85 c0		 test	 eax, eax
  0021e	75 12		 jne	 SHORT $LN24@Test
$LN26@Test:

; 2210 :         {
; 2211 :           copyOfGame.SetBoxOwner(col, row, OWNER_NONE);

  00220	6a 00		 push	 0
  00222	8b 4d b4	 mov	 ecx, DWORD PTR _row$[ebp]
  00225	51		 push	 ecx
  00226	8b 55 b0	 mov	 edx, DWORD PTR _col$[ebp]
  00229	52		 push	 edx
  0022a	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  0022d	e8 00 00 00 00	 call	 ?SetBoxOwner@DOTS_AND_BOXES@@QAEXHHW4OWNER_TYPE@@@Z ; DOTS_AND_BOXES::SetBoxOwner
$LN24@Test:

; 2212 :         };
; 2213 :       };
; 2214 :     };

  00232	e9 62 ff ff ff	 jmp	 $LN11@Test
$LN12@Test:

; 2215 :   };

  00237	e9 37 ff ff ff	 jmp	 $LN8@Test
$LN9@Test:

; 2216 : //  computerMove = -1;
; 2217 :   if (pDoc->AI_Option(MT_RANDOM)) ComputerMoveRandom(&copyOfGame);

  0023c	6a 01		 push	 1
  0023e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00244	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ; CNewBoxesDoc::AI_Option
  00249	0f b6 c0	 movzx	 eax, al
  0024c	85 c0		 test	 eax, eax
  0024e	74 0c		 je	 SHORT $LN27@Test
  00250	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00253	51		 push	 ecx
  00254	e8 00 00 00 00	 call	 ?ComputerMoveRandom@@YAXPAVDOTS_AND_BOXES@@@Z ; ComputerMoveRandom
  00259	83 c4 04	 add	 esp, 4
$LN27@Test:

; 2218 :   con = copyOfGame;

  0025c	8d 55 bc	 lea	 edx, DWORD PTR _copyOfGame$[ebp]
  0025f	52		 push	 edx
  00260	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00266	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 2219 : #if (defined NS_DUMP) || (defined SW_DUMP)
; 2220 :   con.DUMP("After translation",0,0,0,0,con.m_numNode);
; 2221 : #endif
; 2222 :   if (pDoc->AI_Option(MT_OBVIOUSCAPTURE)) con.ObviousCapture();

  0026b	6a 02		 push	 2
  0026d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00273	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ; CNewBoxesDoc::AI_Option
  00278	0f b6 c0	 movzx	 eax, al
  0027b	85 c0		 test	 eax, eax
  0027d	74 0b		 je	 SHORT $LN28@Test
  0027f	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00285	e8 00 00 00 00	 call	 ?ObviousCapture@CON@@QAEXXZ ; CON::ObviousCapture
$LN28@Test:

; 2223 :   if (moveType != MT_OBVIOUSCAPTURE)

  0028a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 2 ; moveType
  00291	0f 84 02 01 00
	00		 je	 $LN29@Test

; 2224 :   {
; 2225 :     if (pDoc->AI_Option(MT_GRABANYTHING)) con.GrabAnything();

  00297	6a 08		 push	 8
  00299	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0029f	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ; CNewBoxesDoc::AI_Option
  002a4	0f b6 c8	 movzx	 ecx, al
  002a7	85 c9		 test	 ecx, ecx
  002a9	74 0b		 je	 SHORT $LN30@Test
  002ab	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  002b1	e8 00 00 00 00	 call	 ?GrabAnything@CON@@QAEXXZ ; CON::GrabAnything
$LN30@Test:

; 2226 :     if (moveType != MT_GRABANYTHING)

  002b6	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 8 ; moveType
  002bd	74 5f		 je	 SHORT $LN31@Test

; 2227 :     {
; 2228 :       if (pDoc->AI_Option(MT_GIVENOTHING)) copyOfGame.GiveNothing();

  002bf	6a 03		 push	 3
  002c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  002c7	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ; CNewBoxesDoc::AI_Option
  002cc	0f b6 d0	 movzx	 edx, al
  002cf	85 d2		 test	 edx, edx
  002d1	74 08		 je	 SHORT $LN32@Test
  002d3	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  002d6	e8 00 00 00 00	 call	 ?GiveNothing@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::GiveNothing
$LN32@Test:

; 2229 :       if (    (moveType != MT_GIVENOTHING)
; 2230 :            && (moveType != MT_BREAKLOOPS)
; 2231 :            && (moveType != MT_LOOPDIVIDE)
; 2232 :            && (moveType != MT_DIVIDE)

  002db	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 3 ; moveType
  002e2	74 3a		 je	 SHORT $LN31@Test
  002e4	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 4 ; moveType
  002eb	74 31		 je	 SHORT $LN31@Test
  002ed	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 5 ; moveType
  002f4	74 28		 je	 SHORT $LN31@Test
  002f6	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 6 ; moveType
  002fd	74 1f		 je	 SHORT $LN31@Test

; 2233 :          )
; 2234 :       {
; 2235 :         if (pDoc->AI_Option(MT_GIVELITTLE)) con.GiveLittle();

  002ff	6a 07		 push	 7
  00301	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00307	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ; CNewBoxesDoc::AI_Option
  0030c	0f b6 c0	 movzx	 eax, al
  0030f	85 c0		 test	 eax, eax
  00311	74 0b		 je	 SHORT $LN31@Test
  00313	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00319	e8 00 00 00 00	 call	 ?GiveLittle@CON@@QBEXXZ	; CON::GiveLittle
$LN31@Test:

; 2236 :       };
; 2237 :     };
; 2238 :     CON savecon;

  0031e	8d 8d 44 d7 ff
	ff		 lea	 ecx, DWORD PTR _savecon$13[ebp]
  00324	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00329	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 2239 :     savecon = con;

  0032d	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00333	51		 push	 ecx
  00334	8d 8d 44 d7 ff
	ff		 lea	 ecx, DWORD PTR _savecon$13[ebp]
  0033a	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABV0@@Z	; CON::operator=

; 2240 :     con.Canon(0,con.m_numNode);

  0033f	8b 95 5c eb ff
	ff		 mov	 edx, DWORD PTR _con$[ebp]
  00345	52		 push	 edx
  00346	6a 00		 push	 0
  00348	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0034e	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon

; 2241 :     //for (int k=0;k<100;k++)
; 2242 :     if (   pDoc->AI_Option(MT_SIMPLEWIN)
; 2243 :          ||pDoc->AI_Option(MT_NIMVAL)) con.SimpleWin(&copyOfGame);

  00353	6a 09		 push	 9
  00355	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0035b	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ; CNewBoxesDoc::AI_Option
  00360	0f b6 c0	 movzx	 eax, al
  00363	85 c0		 test	 eax, eax
  00365	75 14		 jne	 SHORT $LN36@Test
  00367	6a 0d		 push	 13			; 0000000dH
  00369	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0036f	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ; CNewBoxesDoc::AI_Option
  00374	0f b6 c8	 movzx	 ecx, al
  00377	85 c9		 test	 ecx, ecx
  00379	74 0f		 je	 SHORT $LN35@Test
$LN36@Test:
  0037b	8d 55 bc	 lea	 edx, DWORD PTR _copyOfGame$[ebp]
  0037e	52		 push	 edx
  0037f	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00385	e8 00 00 00 00	 call	 ?SimpleWin@CON@@QAEXPAVDOTS_AND_BOXES@@@Z ; CON::SimpleWin
$LN35@Test:

; 2244 :   };

  0038a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0038e	8d 8d 44 d7 ff
	ff		 lea	 ecx, DWORD PTR _savecon$13[ebp]
  00394	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
$LN29@Test:

; 2245 :   if (moveType != MT_NONE)

  00399	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 0 ; moveType
  003a0	0f 84 23 01 00
	00		 je	 $LN37@Test

; 2246 :   {
; 2247 :     computerMove.con.Canon(0, computerMove.con.m_numNode);

  003a6	a1 08 00 00 00	 mov	 eax, DWORD PTR ?computerMove@@3UPossibleMove@@A+8
  003ab	50		 push	 eax
  003ac	6a 00		 push	 0
  003ae	b9 08 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A+8
  003b3	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon

; 2248 :     move = TranslateComputerMove(&copyOfGame, moveType, &computerMove.con);

  003b8	68 08 00 00 00	 push	 OFFSET ?computerMove@@3UPossibleMove@@A+8
  003bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  003c3	51		 push	 ecx
  003c4	8d 55 bc	 lea	 edx, DWORD PTR _copyOfGame$[ebp]
  003c7	52		 push	 edx
  003c8	8d 85 a4 c2 ff
	ff		 lea	 eax, DWORD PTR $T7[ebp]
  003ce	50		 push	 eax
  003cf	e8 00 00 00 00	 call	 ?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z ; TranslateComputerMove
  003d4	83 c4 10	 add	 esp, 16			; 00000010H
  003d7	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  003dc	8b f0		 mov	 esi, eax
  003de	8d bd 08 d7 ff
	ff		 lea	 edi, DWORD PTR $T12[ebp]
  003e4	f3 a5		 rep movsd
  003e6	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  003eb	8d b5 08 d7 ff
	ff		 lea	 esi, DWORD PTR $T12[ebp]
  003f1	8d bd 74 ff ff
	ff		 lea	 edi, DWORD PTR _move$[ebp]
  003f7	f3 a5		 rep movsd

; 2249 :     if (move.vertical)

  003f9	0f b6 8d 7c ff
	ff ff		 movzx	 ecx, BYTE PTR _move$[ebp+8]
  00400	85 c9		 test	 ecx, ecx
  00402	74 61		 je	 SHORT $LN39@Test

; 2250 :     {
; 2251 :       if (pDoc->VerticalLineType(move.dotNum) != LINE_COMPUTER) return TestError(move);

  00404	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _move$[ebp]
  0040a	52		 push	 edx
  0040b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00411	e8 00 00 00 00	 call	 ?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::VerticalLineType
  00416	83 f8 01	 cmp	 eax, 1
  00419	74 48		 je	 SHORT $LN41@Test
  0041b	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _move$[ebp]
  00421	50		 push	 eax
  00422	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00425	51		 push	 ecx
  00426	e8 00 00 00 00	 call	 ?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z ; TestError
  0042b	83 c4 08	 add	 esp, 8
  0042e	8b 95 90 c2 ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00434	83 ca 01	 or	 edx, 1
  00437	89 95 90 c2 ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  0043d	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00441	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00447	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  0044c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00453	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00456	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  0045b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0045e	e9 e6 03 00 00	 jmp	 $LN1@Test
$LN41@Test:

; 2252 :     }

  00463	eb 5f		 jmp	 SHORT $LN40@Test
$LN39@Test:

; 2253 :     else
; 2254 :     {
; 2255 :       if (pDoc->HorizontalLineType(move.dotNum) != LINE_COMPUTER) return TestError(move);

  00465	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _move$[ebp]
  0046b	50		 push	 eax
  0046c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00472	e8 00 00 00 00	 call	 ?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@ABUtagPOINT@@@Z ; CNewBoxesDoc::HorizontalLineType
  00477	83 f8 01	 cmp	 eax, 1
  0047a	74 48		 je	 SHORT $LN40@Test
  0047c	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _move$[ebp]
  00482	51		 push	 ecx
  00483	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00486	52		 push	 edx
  00487	e8 00 00 00 00	 call	 ?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z ; TestError
  0048c	83 c4 08	 add	 esp, 8
  0048f	8b 85 90 c2 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00495	83 c8 01	 or	 eax, 1
  00498	89 85 90 c2 ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  0049e	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  004a2	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  004a8	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  004ad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004b4	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  004b7	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  004bc	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  004bf	e9 85 03 00 00	 jmp	 $LN1@Test
$LN40@Test:

; 2256 :     };
; 2257 :   }

  004c4	e9 30 01 00 00	 jmp	 $LN38@Test
$LN37@Test:

; 2258 :   else
; 2259 :   { //No move was made.  Make sure no moves were expected.
; 2260 :     for (row=0; row<copyOfGame.Height(); row++)

  004c9	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  004d0	eb 09		 jmp	 SHORT $LN16@Test
$LN14@Test:
  004d2	8b 4d b4	 mov	 ecx, DWORD PTR _row$[ebp]
  004d5	83 c1 01	 add	 ecx, 1
  004d8	89 4d b4	 mov	 DWORD PTR _row$[ebp], ecx
$LN16@Test:
  004db	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  004de	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  004e3	39 45 b4	 cmp	 DWORD PTR _row$[ebp], eax
  004e6	0f 8d 0d 01 00
	00		 jge	 $LN38@Test

; 2261 :     {
; 2262 :       for (col=0; col<copyOfGame.Width(); col++)

  004ec	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  004f3	eb 09		 jmp	 SHORT $LN19@Test
$LN17@Test:
  004f5	8b 55 b0	 mov	 edx, DWORD PTR _col$[ebp]
  004f8	83 c2 01	 add	 edx, 1
  004fb	89 55 b0	 mov	 DWORD PTR _col$[ebp], edx
$LN19@Test:
  004fe	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00501	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00506	39 45 b0	 cmp	 DWORD PTR _col$[ebp], eax
  00509	0f 8d e5 00 00
	00		 jge	 $LN18@Test

; 2263 :       {
; 2264 :         if (col < copyOfGame.Width() - 1)

  0050f	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00512	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00517	83 e8 01	 sub	 eax, 1
  0051a	39 45 b0	 cmp	 DWORD PTR _col$[ebp], eax
  0051d	7d 60		 jge	 SHORT $LN43@Test

; 2265 :         {
; 2266 :           if (pDoc->HorizontalLineType(col, row) == LINE_COMPUTER)

  0051f	8b 45 b4	 mov	 eax, DWORD PTR _row$[ebp]
  00522	50		 push	 eax
  00523	8b 4d b0	 mov	 ecx, DWORD PTR _col$[ebp]
  00526	51		 push	 ecx
  00527	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0052d	e8 00 00 00 00	 call	 ?HorizontalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@HH@Z ; CNewBoxesDoc::HorizontalLineType
  00532	83 f8 01	 cmp	 eax, 1
  00535	75 48		 jne	 SHORT $LN43@Test

; 2267 :           {
; 2268 :             return TestError(move);

  00537	8d 95 74 ff ff
	ff		 lea	 edx, DWORD PTR _move$[ebp]
  0053d	52		 push	 edx
  0053e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00541	50		 push	 eax
  00542	e8 00 00 00 00	 call	 ?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z ; TestError
  00547	83 c4 08	 add	 esp, 8
  0054a	8b 8d 90 c2 ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00550	83 c9 01	 or	 ecx, 1
  00553	89 8d 90 c2 ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00559	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0055d	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00563	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00568	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0056f	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00572	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00577	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0057a	e9 ca 02 00 00	 jmp	 $LN1@Test
$LN43@Test:

; 2269 :           };
; 2270 :         };
; 2271 :         if (row < copyOfGame.Height() - 1)

  0057f	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00582	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  00587	83 e8 01	 sub	 eax, 1
  0058a	39 45 b4	 cmp	 DWORD PTR _row$[ebp], eax
  0058d	7d 60		 jge	 SHORT $LN45@Test

; 2272 :         {
; 2273 :           if (pDoc->VerticalLineType(col, row) == LINE_COMPUTER)

  0058f	8b 55 b4	 mov	 edx, DWORD PTR _row$[ebp]
  00592	52		 push	 edx
  00593	8b 45 b0	 mov	 eax, DWORD PTR _col$[ebp]
  00596	50		 push	 eax
  00597	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0059d	e8 00 00 00 00	 call	 ?VerticalLineType@CNewBoxesDoc@@QBE?AW4LINE_TYPE@@HH@Z ; CNewBoxesDoc::VerticalLineType
  005a2	83 f8 01	 cmp	 eax, 1
  005a5	75 48		 jne	 SHORT $LN45@Test

; 2274 :           {
; 2275 :             return TestError(move);

  005a7	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _move$[ebp]
  005ad	51		 push	 ecx
  005ae	8b 55 08	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  005b1	52		 push	 edx
  005b2	e8 00 00 00 00	 call	 ?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z ; TestError
  005b7	83 c4 08	 add	 esp, 8
  005ba	8b 85 90 c2 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  005c0	83 c8 01	 or	 eax, 1
  005c3	89 85 90 c2 ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  005c9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  005cd	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  005d3	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  005d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005df	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  005e2	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  005e7	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  005ea	e9 5a 02 00 00	 jmp	 $LN1@Test
$LN45@Test:

; 2276 :           };
; 2277 :         };
; 2278 :       };

  005ef	e9 01 ff ff ff	 jmp	 $LN17@Test
$LN18@Test:

; 2279 :     };

  005f4	e9 d9 fe ff ff	 jmp	 $LN14@Test
$LN38@Test:

; 2280 :   };
; 2281 :   if (pDoc->AI_Option(MT_VERIFYNIMSTRINGVALUE))

  005f9	6a 10		 push	 16			; 00000010H
  005fb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00601	e8 00 00 00 00	 call	 ?AI_Option@CNewBoxesDoc@@QBE_NW4MOVE_TYPE@@@Z ; CNewBoxesDoc::AI_Option
  00606	0f b6 c8	 movzx	 ecx, al
  00609	85 c9		 test	 ecx, ecx
  0060b	0f 84 f1 01 00
	00		 je	 $LN47@Test

; 2282 :   {
; 2283 :     int v;
; 2284 :     NIMCON nimcon;

  00611	8d 8d f0 c2 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$10[ebp]
  00617	e8 00 00 00 00	 call	 ??0NIMCON@@QAE@XZ
  0061c	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 2285 :     //if (pDoc->Game().IsSpecial5x5())
; 2286 :     //{
; 2287 :     //  if (cdHashTable != NULL) delete cdHashTable;
; 2288 :     //  cdHashTable = new CDHASHTABLE;
; 2289 :     //  CDVALUE cdvalue;
; 2290 :     //  CCD55 ccd55;
; 2291 :     //  ccd55 = &pDoc->Game();
; 2292 :     //  cdvalue = ccd55.Value(0,0);
; 2293 :     //  v = cdvalue.player1Min - cdvalue.player2Min;
; 2294 :     //  delete cdHashTable;
; 2295 :     //  cdHashTable = NULL;
; 2296 :     //}
; 2297 :     //else
; 2298 :     {
; 2299 :       NIMHASHTABLE *origNimHashTable;
; 2300 :       origNimHashTable = nimHashTable;

  00620	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A ; nimHashTable
  00626	89 95 e8 c2 ff
	ff		 mov	 DWORD PTR _origNimHashTable$9[ebp], edx

; 2301 :       if (nimHashTable != NULL) delete nimHashTable;

  0062c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A, 0 ; nimHashTable
  00633	74 33		 je	 SHORT $LN48@Test
  00635	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A ; nimHashTable
  0063a	89 85 a0 c2 ff
	ff		 mov	 DWORD PTR $T6[ebp], eax
  00640	83 bd a0 c2 ff
	ff 00		 cmp	 DWORD PTR $T6[ebp], 0
  00647	74 15		 je	 SHORT $LN52@Test
  00649	6a 01		 push	 1
  0064b	8b 8d a0 c2 ff
	ff		 mov	 ecx, DWORD PTR $T6[ebp]
  00651	e8 00 00 00 00	 call	 ??_GNIMHASHTABLE@@QAEPAXI@Z
  00656	89 85 8c c2 ff
	ff		 mov	 DWORD PTR tv333[ebp], eax
  0065c	eb 0a		 jmp	 SHORT $LN48@Test
$LN52@Test:
  0065e	c7 85 8c c2 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv333[ebp], 0
$LN48@Test:

; 2302 :       nimHashTable = new NIMHASHTABLE;

  00668	6a 0c		 push	 12			; 0000000cH
  0066a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0066f	83 c4 04	 add	 esp, 4
  00672	89 85 98 c2 ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  00678	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0067c	83 bd 98 c2 ff
	ff 00		 cmp	 DWORD PTR $T4[ebp], 0
  00683	74 13		 je	 SHORT $LN54@Test
  00685	8b 8d 98 c2 ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  0068b	e8 00 00 00 00	 call	 ??0NIMHASHTABLE@@QAE@XZ	; NIMHASHTABLE::NIMHASHTABLE
  00690	89 85 88 c2 ff
	ff		 mov	 DWORD PTR tv345[ebp], eax
  00696	eb 0a		 jmp	 SHORT $LN55@Test
$LN54@Test:
  00698	c7 85 88 c2 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv345[ebp], 0
$LN55@Test:
  006a2	8b 8d 88 c2 ff
	ff		 mov	 ecx, DWORD PTR tv345[ebp]
  006a8	89 8d 9c c2 ff
	ff		 mov	 DWORD PTR $T5[ebp], ecx
  006ae	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  006b2	8b 95 9c c2 ff
	ff		 mov	 edx, DWORD PTR $T5[ebp]
  006b8	89 15 00 00 00
	00		 mov	 DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A, edx ; nimHashTable

; 2303 :       v = nimcon.NimVal(&con);

  006be	8d 85 5c eb ff
	ff		 lea	 eax, DWORD PTR _con$[ebp]
  006c4	50		 push	 eax
  006c5	8d 8d f0 c2 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$10[ebp]
  006cb	e8 00 00 00 00	 call	 ?NimVal@NIMCON@@QAEHPBVCON@@@Z ; NIMCON::NimVal
  006d0	89 85 04 d7 ff
	ff		 mov	 DWORD PTR _v$11[ebp], eax

; 2304 :       if (nimHashTable != NULL) delete nimHashTable;

  006d6	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A, 0 ; nimHashTable
  006dd	74 34		 je	 SHORT $LN49@Test
  006df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A ; nimHashTable
  006e5	89 8d 94 c2 ff
	ff		 mov	 DWORD PTR $T3[ebp], ecx
  006eb	83 bd 94 c2 ff
	ff 00		 cmp	 DWORD PTR $T3[ebp], 0
  006f2	74 15		 je	 SHORT $LN56@Test
  006f4	6a 01		 push	 1
  006f6	8b 8d 94 c2 ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  006fc	e8 00 00 00 00	 call	 ??_GNIMHASHTABLE@@QAEPAXI@Z
  00701	89 85 84 c2 ff
	ff		 mov	 DWORD PTR tv353[ebp], eax
  00707	eb 0a		 jmp	 SHORT $LN49@Test
$LN56@Test:
  00709	c7 85 84 c2 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv353[ebp], 0
$LN49@Test:

; 2305 :       nimHashTable = origNimHashTable;

  00713	8b 95 e8 c2 ff
	ff		 mov	 edx, DWORD PTR _origNimHashTable$9[ebp]
  00719	89 15 00 00 00
	00		 mov	 DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A, edx ; nimHashTable

; 2306 :     };
; 2307 :     if (v != pDoc->NimstringValueToVerify())

  0071f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00725	e8 00 00 00 00	 call	 ?NimstringValueToVerify@CNewBoxesDoc@@QAEHXZ ; CNewBoxesDoc::NimstringValueToVerify
  0072a	39 85 04 d7 ff
	ff		 cmp	 DWORD PTR _v$11[ebp], eax
  00730	0f 84 bd 00 00
	00		 je	 $LN50@Test

; 2308 :     {
; 2309 :       CString err;

  00736	8b f4		 mov	 esi, esp
  00738	8d 8d e0 c2 ff
	ff		 lea	 ecx, DWORD PTR _err$8[ebp]
  0073e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00744	3b f4		 cmp	 esi, esp
  00746	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0074b	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5

; 2310 :       err.Format("Expected Nimstring value=%d\nComputed value=%d",

  0074f	8b f4		 mov	 esi, esp
  00751	8b 85 04 d7 ff
	ff		 mov	 eax, DWORD PTR _v$11[ebp]
  00757	50		 push	 eax
  00758	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0075e	e8 00 00 00 00	 call	 ?NimstringValueToVerify@CNewBoxesDoc@@QAEHXZ ; CNewBoxesDoc::NimstringValueToVerify
  00763	50		 push	 eax
  00764	68 00 00 00 00	 push	 OFFSET $SG227404
  00769	8d 8d e0 c2 ff
	ff		 lea	 ecx, DWORD PTR _err$8[ebp]
  0076f	51		 push	 ecx
  00770	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00776	83 c4 10	 add	 esp, 16			; 00000010H
  00779	3b f4		 cmp	 esi, esp
  0077b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2311 :         pDoc->NimstringValueToVerify(), v);
; 2312 :       return err;

  00780	8b f4		 mov	 esi, esp
  00782	8d 95 e0 c2 ff
	ff		 lea	 edx, DWORD PTR _err$8[ebp]
  00788	52		 push	 edx
  00789	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0078c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00792	3b f4		 cmp	 esi, esp
  00794	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00799	8b 85 90 c2 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  0079f	83 c8 01	 or	 eax, 1
  007a2	89 85 90 c2 ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  007a8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  007ac	8b f4		 mov	 esi, esp
  007ae	8d 8d e0 c2 ff
	ff		 lea	 ecx, DWORD PTR _err$8[ebp]
  007b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  007ba	3b f4		 cmp	 esi, esp
  007bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007c1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  007c5	8d 8d f0 c2 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$10[ebp]
  007cb	e8 00 00 00 00	 call	 ??1NIMCON@@QAE@XZ
  007d0	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  007d4	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  007da	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  007df	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  007e6	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  007e9	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  007ee	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  007f1	eb 56		 jmp	 SHORT $LN1@Test
$LN50@Test:

; 2313 :     };
; 2314 :   };

  007f3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  007f7	8d 8d f0 c2 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$10[ebp]
  007fd	e8 00 00 00 00	 call	 ??1NIMCON@@QAE@XZ
$LN47@Test:

; 2315 :   return CString("");

  00802	8b f4		 mov	 esi, esp
  00804	68 00 00 00 00	 push	 OFFSET $SG227405
  00809	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0080c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@PBD@Z
  00812	3b f4		 cmp	 esi, esp
  00814	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00819	8b 8d 90 c2 ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  0081f	83 c9 01	 or	 ecx, 1
  00822	89 8d 90 c2 ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  00828	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0082c	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00832	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00837	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0083e	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00841	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00846	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Test:

; 2316 : }

  00849	52		 push	 edx
  0084a	8b cd		 mov	 ecx, ebp
  0084c	50		 push	 eax
  0084d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN74@Test
  00853	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00858	58		 pop	 eax
  00859	5a		 pop	 edx
  0085a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0085d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00864	59		 pop	 ecx
  00865	5f		 pop	 edi
  00866	5e		 pop	 esi
  00867	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0086a	33 cd		 xor	 ecx, ebp
  0086c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00871	81 c4 7c 3d 00
	00		 add	 esp, 15740		; 00003d7cH
  00877	3b ec		 cmp	 ebp, esp
  00879	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0087e	8b e5		 mov	 esp, ebp
  00880	5d		 pop	 ebp
  00881	c3		 ret	 0
  00882	66 90		 npad	 2
$LN74@Test:
  00884	06 00 00 00	 DD	 6
  00888	00 00 00 00	 DD	 $LN73@Test
$LN73@Test:
  0088c	bc ff ff ff	 DD	 -68			; ffffffbcH
  00890	30 00 00 00	 DD	 48			; 00000030H
  00894	00 00 00 00	 DD	 $LN66@Test
  00898	74 ff ff ff	 DD	 -140			; ffffff74H
  0089c	38 00 00 00	 DD	 56			; 00000038H
  008a0	00 00 00 00	 DD	 $LN67@Test
  008a4	5c eb ff ff	 DD	 -5284			; ffffeb5cH
  008a8	10 14 00 00	 DD	 5136			; 00001410H
  008ac	00 00 00 00	 DD	 $LN68@Test
  008b0	44 d7 ff ff	 DD	 -10428			; ffffd744H
  008b4	10 14 00 00	 DD	 5136			; 00001410H
  008b8	00 00 00 00	 DD	 $LN69@Test
  008bc	f0 c2 ff ff	 DD	 -15632			; ffffc2f0H
  008c0	10 14 00 00	 DD	 5136			; 00001410H
  008c4	00 00 00 00	 DD	 $LN70@Test
  008c8	e0 c2 ff ff	 DD	 -15648			; ffffc2e0H
  008cc	04 00 00 00	 DD	 4
  008d0	00 00 00 00	 DD	 $LN71@Test
$LN71@Test:
  008d4	65		 DB	 101			; 00000065H
  008d5	72		 DB	 114			; 00000072H
  008d6	72		 DB	 114			; 00000072H
  008d7	00		 DB	 0
$LN70@Test:
  008d8	6e		 DB	 110			; 0000006eH
  008d9	69		 DB	 105			; 00000069H
  008da	6d		 DB	 109			; 0000006dH
  008db	63		 DB	 99			; 00000063H
  008dc	6f		 DB	 111			; 0000006fH
  008dd	6e		 DB	 110			; 0000006eH
  008de	00		 DB	 0
$LN69@Test:
  008df	73		 DB	 115			; 00000073H
  008e0	61		 DB	 97			; 00000061H
  008e1	76		 DB	 118			; 00000076H
  008e2	65		 DB	 101			; 00000065H
  008e3	63		 DB	 99			; 00000063H
  008e4	6f		 DB	 111			; 0000006fH
  008e5	6e		 DB	 110			; 0000006eH
  008e6	00		 DB	 0
$LN68@Test:
  008e7	63		 DB	 99			; 00000063H
  008e8	6f		 DB	 111			; 0000006fH
  008e9	6e		 DB	 110			; 0000006eH
  008ea	00		 DB	 0
$LN67@Test:
  008eb	6d		 DB	 109			; 0000006dH
  008ec	6f		 DB	 111			; 0000006fH
  008ed	76		 DB	 118			; 00000076H
  008ee	65		 DB	 101			; 00000065H
  008ef	00		 DB	 0
$LN66@Test:
  008f0	63		 DB	 99			; 00000063H
  008f1	6f		 DB	 111			; 0000006fH
  008f2	70		 DB	 112			; 00000070H
  008f3	79		 DB	 121			; 00000079H
  008f4	4f		 DB	 79			; 0000004fH
  008f5	66		 DB	 102			; 00000066H
  008f6	47		 DB	 71			; 00000047H
  008f7	61		 DB	 97			; 00000061H
  008f8	6d		 DB	 109			; 0000006dH
  008f9	65		 DB	 101			; 00000065H
  008fa	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$0:
  00000	8d 4d bc	 lea	 ecx, DWORD PTR _copyOfGame$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$1:
  00008	8d 8d 5c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0000e	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$2:
  00013	8d 8d 44 d7 ff
	ff		 lea	 ecx, DWORD PTR _savecon$13[ebp]
  00019	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$4:
  0001e	8d 8d f0 c2 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$10[ebp]
  00024	e9 00 00 00 00	 jmp	 ??1NIMCON@@QAE@XZ
__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$5:
  00029	6a 0c		 push	 12			; 0000000cH
  0002b	8b 85 98 c2 ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00037	83 c4 08	 add	 esp, 8
  0003a	c3		 ret	 0
__unwindfunclet$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ$6:
  0003b	8b f4		 mov	 esi, esp
  0003d	8d 8d e0 c2 ff
	ff		 lea	 ecx, DWORD PTR _err$8[ebp]
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00049	3b f4		 cmp	 esi, esp
  0004b	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
  00050	cc		 int	 3
  00051	cc		 int	 3
  00052	cc		 int	 3
  00053	cc		 int	 3
  00054	cc		 int	 3
__ehhandler$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ:
  00055	90		 npad	 1
  00056	90		 npad	 1
  00057	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0005b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0005e	8b 8a 84 c2 ff
	ff		 mov	 ecx, DWORD PTR [edx-15740]
  00064	33 c8		 xor	 ecx, eax
  00066	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006b	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0006e	33 c8		 xor	 ecx, eax
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
  0007a	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Test@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; Test
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
tv132 = -44						; size = 4
tv65 = -40						; size = 4
tv77 = -36						; size = 4
$T2 = -32						; size = 4
$T3 = -28						; size = 4
_result$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_move$ = 12						; size = 4
?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z PROC ; TestError

; 2157 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	56		 push	 esi
  00015	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001a	89 45 d4	 mov	 DWORD PTR [ebp-44], eax
  0001d	89 45 d8	 mov	 DWORD PTR [ebp-40], eax
  00020	89 45 dc	 mov	 DWORD PTR [ebp-36], eax
  00023	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  00026	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00029	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0002c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0002f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00037	33 c5		 xor	 eax, ebp
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00043	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp], 0

; 2158 :   CString result;

  0004a	8b f4		 mov	 esi, esp
  0004c	8d 4d ec	 lea	 ecx, DWORD PTR _result$[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2159 :   result.Format("Test Error\nComputer move to dot (%d,%d)%s\nMove Type = %s",

  00063	8b 45 0c	 mov	 eax, DWORD PTR _move$[ebp]
  00066	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  0006a	85 c9		 test	 ecx, ecx
  0006c	74 09		 je	 SHORT $LN3@TestError
  0006e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], OFFSET $SG227327
  00075	eb 07		 jmp	 SHORT $LN4@TestError
$LN3@TestError:
  00077	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR tv77[ebp], OFFSET $SG227328
$LN4@TestError:
  0007e	8d 55 e4	 lea	 edx, DWORD PTR $T3[ebp]
  00081	52		 push	 edx
  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _move$[ebp]
  00085	e8 00 00 00 00	 call	 ?TypeName@MOVE@@QBE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ; MOVE::TypeName
  0008a	89 45 d8	 mov	 DWORD PTR tv65[ebp], eax
  0008d	8b 45 d8	 mov	 eax, DWORD PTR tv65[ebp]
  00090	89 45 d4	 mov	 DWORD PTR tv132[ebp], eax
  00093	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00097	8b f4		 mov	 esi, esp
  00099	8b 4d d4	 mov	 ecx, DWORD PTR tv132[ebp]
  0009c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009e	52		 push	 edx
  0009f	8b 45 dc	 mov	 eax, DWORD PTR tv77[ebp]
  000a2	50		 push	 eax
  000a3	8b 4d 0c	 mov	 ecx, DWORD PTR _move$[ebp]
  000a6	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000a9	52		 push	 edx
  000aa	8b 45 0c	 mov	 eax, DWORD PTR _move$[ebp]
  000ad	8b 08		 mov	 ecx, DWORD PTR [eax]
  000af	51		 push	 ecx
  000b0	68 00 00 00 00	 push	 OFFSET $SG227329
  000b5	8d 55 ec	 lea	 edx, DWORD PTR _result$[ebp]
  000b8	52		 push	 edx
  000b9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  000bf	83 c4 18	 add	 esp, 24			; 00000018H
  000c2	3b f4		 cmp	 esi, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000cd	8b f4		 mov	 esi, esp
  000cf	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
  000d2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  000d8	3b f4		 cmp	 esi, esp
  000da	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2160 :                    move.dotNum.x, move.dotNum.y,
; 2161 :                    move.vertical?"Vertical":"Horizontal",
; 2162 :                    move.TypeName());
; 2163 :   return result;

  000df	8b f4		 mov	 esi, esp
  000e1	8d 45 ec	 lea	 eax, DWORD PTR _result$[ebp]
  000e4	50		 push	 eax
  000e5	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  000ee	3b f4		 cmp	 esi, esp
  000f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f5	8b 4d e0	 mov	 ecx, DWORD PTR $T2[ebp]
  000f8	83 c9 01	 or	 ecx, 1
  000fb	89 4d e0	 mov	 DWORD PTR $T2[ebp], ecx
  000fe	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00105	8b f4		 mov	 esi, esp
  00107	8d 4d ec	 lea	 ecx, DWORD PTR _result$[ebp]
  0010a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00110	3b f4		 cmp	 esi, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2164 : }

  0011a	52		 push	 edx
  0011b	8b cd		 mov	 ecx, ebp
  0011d	50		 push	 eax
  0011e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@TestError
  00124	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00129	58		 pop	 eax
  0012a	5a		 pop	 edx
  0012b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0012e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00135	59		 pop	 ecx
  00136	5e		 pop	 esi
  00137	83 c4 2c	 add	 esp, 44			; 0000002cH
  0013a	3b ec		 cmp	 ebp, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	8b e5		 mov	 esp, ebp
  00143	5d		 pop	 ebp
  00144	c3		 ret	 0
  00145	0f 1f 00	 npad	 3
$LN12@TestError:
  00148	01 00 00 00	 DD	 1
  0014c	00 00 00 00	 DD	 $LN11@TestError
$LN11@TestError:
  00150	ec ff ff ff	 DD	 -20			; ffffffecH
  00154	04 00 00 00	 DD	 4
  00158	00 00 00 00	 DD	 $LN9@TestError
$LN9@TestError:
  0015c	72		 DB	 114			; 00000072H
  0015d	65		 DB	 101			; 00000065H
  0015e	73		 DB	 115			; 00000073H
  0015f	75		 DB	 117			; 00000075H
  00160	6c		 DB	 108			; 0000006cH
  00161	74		 DB	 116			; 00000074H
  00162	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z$0:
  00000	8b f4		 mov	 esi, esp
  00002	8d 4d ec	 lea	 ecx, DWORD PTR _result$[ebp]
  00005	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0000b	3b f4		 cmp	 esi, esp
  0000d	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z$1:
  00012	8b f4		 mov	 esi, esp
  00014	8d 4d e4	 lea	 ecx, DWORD PTR $T3[ebp]
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  0001d	3b f4		 cmp	 esi, esp
  0001f	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
  00024	cc		 int	 3
  00025	cc		 int	 3
  00026	cc		 int	 3
  00027	cc		 int	 3
  00028	cc		 int	 3
__ehhandler$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z:
  00029	90		 npad	 1
  0002a	90		 npad	 1
  0002b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00032	8b 4a d8	 mov	 ecx, DWORD PTR [edx-40]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TestError@@YA?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@ABUMOVE@@@Z ENDP ; TestError
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
tv94 = -10352						; size = 4
tv86 = -10348						; size = 4
$T2 = -10344						; size = 4
$T3 = -10340						; size = 4
$T4 = -10336						; size = 4
$T5 = -10332						; size = 4
_nimval$ = -10328					; size = 4
_origNimHashTable$ = -10324				; size = 4
_msg$ = -10316						; size = 4
_nimcon$ = -10304					; size = 5136
_con$ = -5160						; size = 5136
_pGame$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_param$ = 8						; size = 4
?ComputeNimvalProc@@YAIPAX@Z PROC			; ComputeNimvalProc

; 1788 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ComputeNimvalProc@@YAIPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 64 28 00 00	 mov	 eax, 10340		; 00002864H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d bd 90 d7 ff
	ff		 lea	 edi, DWORD PTR [ebp-10352]
  00023	b9 19 0a 00 00	 mov	 ecx, 2585		; 00000a19H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1789 :   DOTS_AND_BOXES *pGame;
; 1790 :   CON con;//  STRING cos;

  00043	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00049	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1791 :   pGame = (DOTS_AND_BOXES *)param;

  00055	8b 45 08	 mov	 eax, DWORD PTR _param$[ebp]
  00058	89 45 ec	 mov	 DWORD PTR _pGame$[ebp], eax

; 1792 :   moveType = MT_NONE;

  0005b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 0 ; moveType

; 1793 :   con = *pGame;

  00065	8b 4d ec	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00068	51		 push	 ecx
  00069	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0006f	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 1794 : 
; 1795 : 	NIMCON nimcon;

  00074	8d 8d c0 d7 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$[ebp]
  0007a	e8 00 00 00 00	 call	 ??0NIMCON@@QAE@XZ
  0007f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1796 :   CString msg;

  00083	8b f4		 mov	 esi, esp
  00085	8d 8d b4 d7 ff
	ff		 lea	 ecx, DWORD PTR _msg$[ebp]
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00091	3b f4		 cmp	 esi, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 1797 :   NIMHASHTABLE *origNimHashTable;
; 1798 :   int nimval;
; 1799 :   origNimHashTable = nimHashTable;

  0009c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A ; nimHashTable
  000a2	89 95 ac d7 ff
	ff		 mov	 DWORD PTR _origNimHashTable$[ebp], edx

; 1800 :   nimHashTable = new NIMHASHTABLE;

  000a8	6a 0c		 push	 12			; 0000000cH
  000aa	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000af	83 c4 04	 add	 esp, 4
  000b2	89 85 a0 d7 ff
	ff		 mov	 DWORD PTR $T4[ebp], eax
  000b8	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  000bc	83 bd a0 d7 ff
	ff 00		 cmp	 DWORD PTR $T4[ebp], 0
  000c3	74 13		 je	 SHORT $LN4@ComputeNim
  000c5	8b 8d a0 d7 ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp]
  000cb	e8 00 00 00 00	 call	 ??0NIMHASHTABLE@@QAE@XZ	; NIMHASHTABLE::NIMHASHTABLE
  000d0	89 85 94 d7 ff
	ff		 mov	 DWORD PTR tv86[ebp], eax
  000d6	eb 0a		 jmp	 SHORT $LN5@ComputeNim
$LN4@ComputeNim:
  000d8	c7 85 94 d7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv86[ebp], 0
$LN5@ComputeNim:
  000e2	8b 85 94 d7 ff
	ff		 mov	 eax, DWORD PTR tv86[ebp]
  000e8	89 85 a4 d7 ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  000ee	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000f2	8b 8d a4 d7 ff
	ff		 mov	 ecx, DWORD PTR $T5[ebp]
  000f8	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A, ecx ; nimHashTable

; 1801 :   nimval = nimcon.NimVal(&con);

  000fe	8d 95 d8 eb ff
	ff		 lea	 edx, DWORD PTR _con$[ebp]
  00104	52		 push	 edx
  00105	8d 8d c0 d7 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$[ebp]
  0010b	e8 00 00 00 00	 call	 ?NimVal@NIMCON@@QAEHPBVCON@@@Z ; NIMCON::NimVal
  00110	89 85 a8 d7 ff
	ff		 mov	 DWORD PTR _nimval$[ebp], eax

; 1802 :   if (nimHashTable != NULL) delete nimHashTable;

  00116	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A, 0 ; nimHashTable
  0011d	74 33		 je	 SHORT $LN2@ComputeNim
  0011f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A ; nimHashTable
  00124	89 85 9c d7 ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  0012a	83 bd 9c d7 ff
	ff 00		 cmp	 DWORD PTR $T3[ebp], 0
  00131	74 15		 je	 SHORT $LN6@ComputeNim
  00133	6a 01		 push	 1
  00135	8b 8d 9c d7 ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  0013b	e8 00 00 00 00	 call	 ??_GNIMHASHTABLE@@QAEPAXI@Z
  00140	89 85 90 d7 ff
	ff		 mov	 DWORD PTR tv94[ebp], eax
  00146	eb 0a		 jmp	 SHORT $LN2@ComputeNim
$LN6@ComputeNim:
  00148	c7 85 90 d7 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv94[ebp], 0
$LN2@ComputeNim:

; 1803 :   nimHashTable = origNimHashTable;

  00152	8b 8d ac d7 ff
	ff		 mov	 ecx, DWORD PTR _origNimHashTable$[ebp]
  00158	89 0d 00 00 00
	00		 mov	 DWORD PTR ?nimHashTable@@3PAVNIMHASHTABLE@@A, ecx ; nimHashTable

; 1804 :   msg.Format("Nimval = %d", nimval);

  0015e	8b f4		 mov	 esi, esp
  00160	8b 95 a8 d7 ff
	ff		 mov	 edx, DWORD PTR _nimval$[ebp]
  00166	52		 push	 edx
  00167	68 00 00 00 00	 push	 OFFSET $SG227169
  0016c	8d 85 b4 d7 ff
	ff		 lea	 eax, DWORD PTR _msg$[ebp]
  00172	50		 push	 eax
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?Format@?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAAXPBDZZ
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH
  0017c	3b f4		 cmp	 esi, esp
  0017e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1805 :   MessageBox(NULL, msg, "Result", MB_OK);

  00183	8b f4		 mov	 esi, esp
  00185	6a 00		 push	 0
  00187	68 00 00 00 00	 push	 OFFSET $SG227170
  0018c	8b fc		 mov	 edi, esp
  0018e	8d 8d b4 d7 ff
	ff		 lea	 ecx, DWORD PTR _msg$[ebp]
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??B?$CSimpleStringT@D$00@ATL@@QBEPBDXZ
  0019a	3b fc		 cmp	 edi, esp
  0019c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a1	50		 push	 eax
  001a2	6a 00		 push	 0
  001a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  001aa	3b f4		 cmp	 esi, esp
  001ac	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1806 :   
; 1807 :   
; 1808 :   
; 1809 :   thinking = false;  

  001b1	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?thinking@@3_NA, 0

; 1810 :   PostMessage(windowHandle, WM_COMMAND, WM_THREADCOMPLETION, 0);

  001b8	8b f4		 mov	 esi, esp
  001ba	6a 00		 push	 0
  001bc	68 01 04 00 00	 push	 1025			; 00000401H
  001c1	68 11 01 00 00	 push	 273			; 00000111H
  001c6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?windowHandle@@3PAUHWND__@@A ; windowHandle
  001cc	51		 push	 ecx
  001cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  001d3	3b f4		 cmp	 esi, esp
  001d5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1811 : 
; 1812 :   return 0;

  001da	c7 85 98 d7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  001e4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  001e8	8b f4		 mov	 esi, esp
  001ea	8d 8d b4 d7 ff
	ff		 lea	 ecx, DWORD PTR _msg$[ebp]
  001f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  001f6	3b f4		 cmp	 esi, esp
  001f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fd	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00201	8d 8d c0 d7 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$[ebp]
  00207	e8 00 00 00 00	 call	 ??1NIMCON@@QAE@XZ
  0020c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00213	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00219	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  0021e	8b 85 98 d7 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 1813 : }

  00224	52		 push	 edx
  00225	8b cd		 mov	 ecx, ebp
  00227	50		 push	 eax
  00228	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@ComputeNim
  0022e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00233	58		 pop	 eax
  00234	5a		 pop	 edx
  00235	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00238	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0023f	59		 pop	 ecx
  00240	5f		 pop	 edi
  00241	5e		 pop	 esi
  00242	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00245	33 cd		 xor	 ecx, ebp
  00247	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0024c	81 c4 70 28 00
	00		 add	 esp, 10352		; 00002870H
  00252	3b ec		 cmp	 ebp, esp
  00254	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	c3		 ret	 0
  0025d	0f 1f 00	 npad	 3
$LN17@ComputeNim:
  00260	03 00 00 00	 DD	 3
  00264	00 00 00 00	 DD	 $LN16@ComputeNim
$LN16@ComputeNim:
  00268	d8 eb ff ff	 DD	 -5160			; ffffebd8H
  0026c	10 14 00 00	 DD	 5136			; 00001410H
  00270	00 00 00 00	 DD	 $LN12@ComputeNim
  00274	c0 d7 ff ff	 DD	 -10304			; ffffd7c0H
  00278	10 14 00 00	 DD	 5136			; 00001410H
  0027c	00 00 00 00	 DD	 $LN13@ComputeNim
  00280	b4 d7 ff ff	 DD	 -10316			; ffffd7b4H
  00284	04 00 00 00	 DD	 4
  00288	00 00 00 00	 DD	 $LN14@ComputeNim
$LN14@ComputeNim:
  0028c	6d		 DB	 109			; 0000006dH
  0028d	73		 DB	 115			; 00000073H
  0028e	67		 DB	 103			; 00000067H
  0028f	00		 DB	 0
$LN13@ComputeNim:
  00290	6e		 DB	 110			; 0000006eH
  00291	69		 DB	 105			; 00000069H
  00292	6d		 DB	 109			; 0000006dH
  00293	63		 DB	 99			; 00000063H
  00294	6f		 DB	 111			; 0000006fH
  00295	6e		 DB	 110			; 0000006eH
  00296	00		 DB	 0
$LN12@ComputeNim:
  00297	63		 DB	 99			; 00000063H
  00298	6f		 DB	 111			; 0000006fH
  00299	6e		 DB	 110			; 0000006eH
  0029a	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ComputeNimvalProc@@YAIPAX@Z$0:
  00000	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
__unwindfunclet$?ComputeNimvalProc@@YAIPAX@Z$1:
  0000b	8d 8d c0 d7 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1NIMCON@@QAE@XZ
__unwindfunclet$?ComputeNimvalProc@@YAIPAX@Z$2:
  00016	8b f4		 mov	 esi, esp
  00018	8d 8d b4 d7 ff
	ff		 lea	 ecx, DWORD PTR _msg$[ebp]
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@XZ
  00024	3b f4		 cmp	 esi, esp
  00026	e9 00 00 00 00	 jmp	 __RTC_CheckEsp
__unwindfunclet$?ComputeNimvalProc@@YAIPAX@Z$3:
  0002b	6a 0c		 push	 12			; 0000000cH
  0002d	8b 85 a0 d7 ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
  0003c	c3		 ret	 0
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
  00041	cc		 int	 3
__ehhandler$?ComputeNimvalProc@@YAIPAX@Z:
  00042	90		 npad	 1
  00043	90		 npad	 1
  00044	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00048	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004b	8b 8a 90 d7 ff
	ff		 mov	 ecx, DWORD PTR [edx-10352]
  00051	33 c8		 xor	 ecx, eax
  00053	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00058	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0005b	33 c8		 xor	 ecx, eax
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ComputeNimvalProc@@YAIPAX@Z
  00067	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ComputeNimvalProc@@YAIPAX@Z ENDP			; ComputeNimvalProc
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
$T2 = -5200						; size = 4
$T3 = -5196						; size = 4
$T4 = -5192						; size = 4
$T5 = -5188						; size = 4
$T6 = -5184						; size = 4
$T7 = -5180						; size = 4
$T8 = -5176						; size = 4
$T9 = -5172						; size = 4
$T10 = -5168						; size = 4
_con$ = -5160						; size = 5136
_pGame$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_param$ = 8						; size = 4
?ComputerMoveProc@@YAIPAX@Z PROC			; ComputerMoveProc

; 1680 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ComputerMoveProc@@YAIPAX@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 44 14 00 00	 mov	 eax, 5188		; 00001444H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d bd b0 eb ff
	ff		 lea	 edi, DWORD PTR [ebp-5200]
  00023	b9 11 05 00 00	 mov	 ecx, 1297		; 00000511H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1681 :   DOTS_AND_BOXES *pGame;
; 1682 :   CON con;//  STRING cos;

  00043	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00049	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1683 :   pGame = (DOTS_AND_BOXES *)param;

  00055	8b 45 08	 mov	 eax, DWORD PTR _param$[ebp]
  00058	89 45 ec	 mov	 DWORD PTR _pGame$[ebp], eax

; 1684 :   moveType = MT_NONE;

  0005b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 0 ; moveType

; 1685 :   PlayOpening(pGame);

  00065	8b 4d ec	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z ; PlayOpening
  0006e	83 c4 04	 add	 esp, 4

; 1686 :   if (moveType != MT_NONE)

  00071	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 0 ; moveType
  00078	74 50		 je	 SHORT $LN2@ComputerMo

; 1687 :   {
; 1688 :     thinking = false;

  0007a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?thinking@@3_NA, 0

; 1689 :     PostMessage(windowHandle, WM_COMMAND, WM_THREADCOMPLETION, 0);

  00081	8b f4		 mov	 esi, esp
  00083	6a 00		 push	 0
  00085	68 01 04 00 00	 push	 1025			; 00000401H
  0008a	68 11 01 00 00	 push	 273			; 00000111H
  0008f	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?windowHandle@@3PAUHWND__@@A ; windowHandle
  00095	52		 push	 edx
  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  0009c	3b f4		 cmp	 esi, esp
  0009e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1690 :     return 0;

  000a3	c7 85 d0 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T10[ebp], 0
  000ad	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b4	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  000ba	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  000bf	8b 85 d0 eb ff
	ff		 mov	 eax, DWORD PTR $T10[ebp]
  000c5	e9 76 03 00 00	 jmp	 $LN1@ComputerMo
$LN2@ComputerMo:

; 1691 :   };
; 1692 :   con = *pGame;

  000ca	8b 45 ec	 mov	 eax, DWORD PTR _pGame$[ebp]
  000cd	50		 push	 eax
  000ce	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  000d4	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 1693 :   con.ObviousCapture();

  000d9	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  000df	e8 00 00 00 00	 call	 ?ObviousCapture@CON@@QAEXXZ ; CON::ObviousCapture

; 1694 :   // Stop right here if there is an obvious capture move
; 1695 :   if (moveType == MT_OBVIOUSCAPTURE)

  000e4	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 2 ; moveType
  000eb	75 50		 jne	 SHORT $LN3@ComputerMo

; 1696 :   {
; 1697 :     thinking = false;

  000ed	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?thinking@@3_NA, 0

; 1698 :     PostMessage(windowHandle, WM_COMMAND, WM_THREADCOMPLETION, 0);

  000f4	8b f4		 mov	 esi, esp
  000f6	6a 00		 push	 0
  000f8	68 01 04 00 00	 push	 1025			; 00000401H
  000fd	68 11 01 00 00	 push	 273			; 00000111H
  00102	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?windowHandle@@3PAUHWND__@@A ; windowHandle
  00108	51		 push	 ecx
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1699 :     return 0;

  00116	c7 85 cc eb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T9[ebp], 0
  00120	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00127	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0012d	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00132	8b 85 cc eb ff
	ff		 mov	 eax, DWORD PTR $T9[ebp]
  00138	e9 03 03 00 00	 jmp	 $LN1@ComputerMo
$LN3@ComputerMo:

; 1700 :   };
; 1701 : 
; 1702 :   // *** If we can find a simple win in the time allowed
; 1703 :   // *** then we are finished.
; 1704 :   con.Canon(0,con.m_numNode);

  0013d	8b 95 d8 eb ff
	ff		 mov	 edx, DWORD PTR _con$[ebp]
  00143	52		 push	 edx
  00144	6a 00		 push	 0
  00146	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0014c	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon

; 1705 :   con.SimpleWin(pGame);

  00151	8b 45 ec	 mov	 eax, DWORD PTR _pGame$[ebp]
  00154	50		 push	 eax
  00155	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0015b	e8 00 00 00 00	 call	 ?SimpleWin@CON@@QAEXPAVDOTS_AND_BOXES@@@Z ; CON::SimpleWin

; 1706 :   if (    (moveType == MT_SIMPLEWIN)
; 1707 :        || (moveType == MT_SIMPLETIE)
; 1708 :        || (moveType == MT_SIMPLEWINDECLINE)
; 1709 :        || (moveType == MT_SIMPLEWINCAPTURE) 
; 1710 :        || (moveType == MT_MAXCAPTURE)
; 1711 :        || (moveType == MT_MAXDECLINE)
; 1712 :        || (moveType == MT_NIMVALCAPTURE)
; 1713 :        || (moveType == MT_NIMVALDECLINE)

  00160	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 9 ; moveType
  00167	74 3f		 je	 SHORT $LN5@ComputerMo
  00169	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 10 ; moveType, 0000000aH
  00170	74 36		 je	 SHORT $LN5@ComputerMo
  00172	83 3d 00 00 00
	00 0c		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 12 ; moveType, 0000000cH
  00179	74 2d		 je	 SHORT $LN5@ComputerMo
  0017b	83 3d 00 00 00
	00 0b		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 11 ; moveType, 0000000bH
  00182	74 24		 je	 SHORT $LN5@ComputerMo
  00184	83 3d 00 00 00
	00 14		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 20 ; moveType, 00000014H
  0018b	74 1b		 je	 SHORT $LN5@ComputerMo
  0018d	83 3d 00 00 00
	00 13		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 19 ; moveType, 00000013H
  00194	74 12		 je	 SHORT $LN5@ComputerMo
  00196	83 3d 00 00 00
	00 15		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 21 ; moveType, 00000015H
  0019d	74 09		 je	 SHORT $LN5@ComputerMo
  0019f	83 3d 00 00 00
	00 16		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 22 ; moveType, 00000016H
  001a6	75 50		 jne	 SHORT $LN4@ComputerMo
$LN5@ComputerMo:

; 1714 :      )
; 1715 :   {
; 1716 :     thinking = false;

  001a8	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?thinking@@3_NA, 0

; 1717 :     PostMessage(windowHandle, WM_COMMAND, WM_THREADCOMPLETION, 0);

  001af	8b f4		 mov	 esi, esp
  001b1	6a 00		 push	 0
  001b3	68 01 04 00 00	 push	 1025			; 00000401H
  001b8	68 11 01 00 00	 push	 273			; 00000111H
  001bd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?windowHandle@@3PAUHWND__@@A ; windowHandle
  001c3	51		 push	 ecx
  001c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  001ca	3b f4		 cmp	 esi, esp
  001cc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1718 :     return 0;

  001d1	c7 85 c8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T8[ebp], 0
  001db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001e2	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  001e8	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  001ed	8b 85 c8 eb ff
	ff		 mov	 eax, DWORD PTR $T8[ebp]
  001f3	e9 48 02 00 00	 jmp	 $LN1@ComputerMo
$LN4@ComputerMo:

; 1719 :   };
; 1720 : 
; 1721 :   
; 1722 :   
; 1723 :   //A Simple win is impossible.
; 1724 :   //Let us see if a possible move results 
; 1725 :   //in a numval of zero.
; 1726 :   if (moveType == MT_NIMVAL)

  001f8	83 3d 00 00 00
	00 0d		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 13 ; moveType, 0000000dH
  001ff	75 50		 jne	 SHORT $LN6@ComputerMo

; 1727 :   {
; 1728 :     thinking = false;

  00201	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?thinking@@3_NA, 0

; 1729 :     PostMessage(windowHandle, WM_COMMAND, WM_THREADCOMPLETION, 0);

  00208	8b f4		 mov	 esi, esp
  0020a	6a 00		 push	 0
  0020c	68 01 04 00 00	 push	 1025			; 00000401H
  00211	68 11 01 00 00	 push	 273			; 00000111H
  00216	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?windowHandle@@3PAUHWND__@@A ; windowHandle
  0021c	52		 push	 edx
  0021d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00223	3b f4		 cmp	 esi, esp
  00225	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1730 :     return 0;

  0022a	c7 85 c4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T7[ebp], 0
  00234	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0023b	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00241	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00246	8b 85 c4 eb ff
	ff		 mov	 eax, DWORD PTR $T7[ebp]
  0024c	e9 ef 01 00 00	 jmp	 $LN1@ComputerMo
$LN6@ComputerMo:

; 1731 :   };
; 1732 : 
; 1733 :   //Well, perhaps we can find a move that will cost him
; 1734 :   //something in order to maintain a nimval of zero.
; 1735 :   if (moveType == MT_NONIMVAL)

  00251	83 3d 00 00 00
	00 0e		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 14 ; moveType, 0000000eH
  00258	75 4f		 jne	 SHORT $LN7@ComputerMo

; 1736 :   {
; 1737 :     thinking = false;

  0025a	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?thinking@@3_NA, 0

; 1738 :     PostMessage(windowHandle, WM_COMMAND, WM_THREADCOMPLETION, 0);

  00261	8b f4		 mov	 esi, esp
  00263	6a 00		 push	 0
  00265	68 01 04 00 00	 push	 1025			; 00000401H
  0026a	68 11 01 00 00	 push	 273			; 00000111H
  0026f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?windowHandle@@3PAUHWND__@@A ; windowHandle
  00274	50		 push	 eax
  00275	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  0027b	3b f4		 cmp	 esi, esp
  0027d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1739 :     return 0;

  00282	c7 85 c0 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T6[ebp], 0
  0028c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00293	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00299	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  0029e	8b 85 c0 eb ff
	ff		 mov	 eax, DWORD PTR $T6[ebp]
  002a4	e9 97 01 00 00	 jmp	 $LN1@ComputerMo
$LN7@ComputerMo:

; 1740 :   };
; 1741 :   
; 1742 :   //Taking anything is better than a random move.
; 1743 :   con.GrabAnything();

  002a9	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  002af	e8 00 00 00 00	 call	 ?GrabAnything@CON@@QAEXXZ ; CON::GrabAnything

; 1744 :   if (moveType == MT_GRABANYTHING)

  002b4	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 8 ; moveType
  002bb	75 50		 jne	 SHORT $LN8@ComputerMo

; 1745 :   {
; 1746 :     thinking = false;

  002bd	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?thinking@@3_NA, 0

; 1747 :     PostMessage(windowHandle, WM_COMMAND, WM_THREADCOMPLETION, 0);

  002c4	8b f4		 mov	 esi, esp
  002c6	6a 00		 push	 0
  002c8	68 01 04 00 00	 push	 1025			; 00000401H
  002cd	68 11 01 00 00	 push	 273			; 00000111H
  002d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?windowHandle@@3PAUHWND__@@A ; windowHandle
  002d8	51		 push	 ecx
  002d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  002df	3b f4		 cmp	 esi, esp
  002e1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1748 :     return 0;

  002e6	c7 85 bc eb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp], 0
  002f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002f7	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  002fd	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00302	8b 85 bc eb ff
	ff		 mov	 eax, DWORD PTR $T5[ebp]
  00308	e9 33 01 00 00	 jmp	 $LN1@ComputerMo
$LN8@ComputerMo:

; 1749 :   };
; 1750 : 
; 1751 :   
; 1752 :   //Giving nothing is better than a random move.
; 1753 :   pGame->GiveNothing();

  0030d	8b 4d ec	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00310	e8 00 00 00 00	 call	 ?GiveNothing@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::GiveNothing

; 1754 :   if (    (moveType == MT_GIVENOTHING)
; 1755 :        || (moveType == MT_BREAKLOOPS)
; 1756 :        || (moveType == MT_LOOPDIVIDE)
; 1757 :        || (moveType == MT_DIVIDE) 

  00315	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 3 ; moveType
  0031c	74 1b		 je	 SHORT $LN10@ComputerMo
  0031e	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 4 ; moveType
  00325	74 12		 je	 SHORT $LN10@ComputerMo
  00327	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 5 ; moveType
  0032e	74 09		 je	 SHORT $LN10@ComputerMo
  00330	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 6 ; moveType
  00337	75 50		 jne	 SHORT $LN9@ComputerMo
$LN10@ComputerMo:

; 1758 :      )       
; 1759 :   {
; 1760 :     thinking = false;

  00339	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?thinking@@3_NA, 0

; 1761 :     PostMessage(windowHandle, WM_COMMAND, WM_THREADCOMPLETION, 0);

  00340	8b f4		 mov	 esi, esp
  00342	6a 00		 push	 0
  00344	68 01 04 00 00	 push	 1025			; 00000401H
  00349	68 11 01 00 00	 push	 273			; 00000111H
  0034e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?windowHandle@@3PAUHWND__@@A ; windowHandle
  00354	52		 push	 edx
  00355	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  0035b	3b f4		 cmp	 esi, esp
  0035d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1762 :     return 0;

  00362	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp], 0
  0036c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00373	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00379	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  0037e	8b 85 b8 eb ff
	ff		 mov	 eax, DWORD PTR $T4[ebp]
  00384	e9 b7 00 00 00	 jmp	 $LN1@ComputerMo
$LN9@ComputerMo:

; 1763 :   };
; 1764 : 
; 1765 :   
; 1766 :   
; 1767 :   con.GiveLittle();

  00389	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0038f	e8 00 00 00 00	 call	 ?GiveLittle@CON@@QBEXXZ	; CON::GiveLittle

; 1768 :   if (moveType == MT_GIVELITTLE)

  00394	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 7 ; moveType
  0039b	75 4c		 jne	 SHORT $LN11@ComputerMo

; 1769 :   {
; 1770 :     thinking = false;

  0039d	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?thinking@@3_NA, 0

; 1771 :     PostMessage(windowHandle, WM_COMMAND, WM_THREADCOMPLETION, 0);

  003a4	8b f4		 mov	 esi, esp
  003a6	6a 00		 push	 0
  003a8	68 01 04 00 00	 push	 1025			; 00000401H
  003ad	68 11 01 00 00	 push	 273			; 00000111H
  003b2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?windowHandle@@3PAUHWND__@@A ; windowHandle
  003b7	50		 push	 eax
  003b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  003be	3b f4		 cmp	 esi, esp
  003c0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1772 :     return 0;

  003c5	c7 85 b4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], 0
  003cf	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003d6	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  003dc	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  003e1	8b 85 b4 eb ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  003e7	eb 57		 jmp	 SHORT $LN1@ComputerMo
$LN11@ComputerMo:

; 1773 :   };
; 1774 : 
; 1775 :   ComputerMoveRandom(pGame);

  003e9	8b 4d ec	 mov	 ecx, DWORD PTR _pGame$[ebp]
  003ec	51		 push	 ecx
  003ed	e8 00 00 00 00	 call	 ?ComputerMoveRandom@@YAXPAVDOTS_AND_BOXES@@@Z ; ComputerMoveRandom
  003f2	83 c4 04	 add	 esp, 4

; 1776 :   thinking = false;

  003f5	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?thinking@@3_NA, 0

; 1777 :   PostMessage(windowHandle, WM_COMMAND, WM_THREADCOMPLETION, 0);

  003fc	8b f4		 mov	 esi, esp
  003fe	6a 00		 push	 0
  00400	68 01 04 00 00	 push	 1025			; 00000401H
  00405	68 11 01 00 00	 push	 273			; 00000111H
  0040a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?windowHandle@@3PAUHWND__@@A ; windowHandle
  00410	52		 push	 edx
  00411	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostMessageA@16
  00417	3b f4		 cmp	 esi, esp
  00419	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1778 :   return 0;

  0041e	c7 85 b0 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], 0
  00428	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0042f	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00435	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  0043a	8b 85 b0 eb ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@ComputerMo:

; 1779 : }

  00440	52		 push	 edx
  00441	8b cd		 mov	 ecx, ebp
  00443	50		 push	 eax
  00444	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@ComputerMo
  0044a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0044f	58		 pop	 eax
  00450	5a		 pop	 edx
  00451	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00454	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0045b	59		 pop	 ecx
  0045c	5f		 pop	 edi
  0045d	5e		 pop	 esi
  0045e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00461	33 cd		 xor	 ecx, ebp
  00463	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00468	81 c4 50 14 00
	00		 add	 esp, 5200		; 00001450H
  0046e	3b ec		 cmp	 ebp, esp
  00470	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00475	8b e5		 mov	 esp, ebp
  00477	5d		 pop	 ebp
  00478	c3		 ret	 0
  00479	0f 1f 00	 npad	 3
$LN17@ComputerMo:
  0047c	01 00 00 00	 DD	 1
  00480	00 00 00 00	 DD	 $LN16@ComputerMo
$LN16@ComputerMo:
  00484	d8 eb ff ff	 DD	 -5160			; ffffebd8H
  00488	10 14 00 00	 DD	 5136			; 00001410H
  0048c	00 00 00 00	 DD	 $LN14@ComputerMo
$LN14@ComputerMo:
  00490	63		 DB	 99			; 00000063H
  00491	6f		 DB	 111			; 0000006fH
  00492	6e		 DB	 110			; 0000006eH
  00493	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ComputerMoveProc@@YAIPAX@Z$0:
  00000	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?ComputerMoveProc@@YAIPAX@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a b0 eb ff
	ff		 mov	 ecx, DWORD PTR [edx-5200]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ComputerMoveProc@@YAIPAX@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ComputerMoveProc@@YAIPAX@Z ENDP			; ComputerMoveProc
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_opening$2 = -56					; size = 36
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pGame$ = 8						; size = 4
?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z PROC		; PlayOpening

; 1666 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	57		 push	 edi
  00015	8d 7d c4	 lea	 edi, DWORD PTR [ebp-60]
  00018	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0002e	50		 push	 eax
  0002f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00032	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1667 :   if (pGame->IsSpecial5x5())

  00038	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  0003b	e8 00 00 00 00	 call	 ?IsSpecial5x5@DOTS_AND_BOXES@@QAE_NXZ ; DOTS_AND_BOXES::IsSpecial5x5
  00040	0f b6 c0	 movzx	 eax, al
  00043	85 c0		 test	 eax, eax
  00045	74 37		 je	 SHORT $LN1@PlayOpenin

; 1668 :   {
; 1669 :     OPENINGp opening(5, 5, pGame->NumberOfLines());

  00047	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  0004a	e8 00 00 00 00	 call	 ?NumberOfLines@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::NumberOfLines
  0004f	50		 push	 eax
  00050	6a 05		 push	 5
  00052	6a 05		 push	 5
  00054	8d 4d c8	 lea	 ecx, DWORD PTR _opening$2[ebp]
  00057	e8 00 00 00 00	 call	 ??0OPENINGp@@QAE@HHH@Z	; OPENINGp::OPENINGp
  0005c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1670 :     opening.Play(pGame);

  00063	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00066	51		 push	 ecx
  00067	8d 4d c8	 lea	 ecx, DWORD PTR _opening$2[ebp]
  0006a	e8 00 00 00 00	 call	 ?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z ; OPENINGp::Play

; 1671 :   }

  0006f	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00076	8d 4d c8	 lea	 ecx, DWORD PTR _opening$2[ebp]
  00079	e8 00 00 00 00	 call	 ??1OPENINGp@@QAE@XZ	; OPENINGp::~OPENINGp
$LN1@PlayOpenin:

; 1672 :   else
; 1673 :   {
; 1674 :     return;
; 1675 :   };
; 1676 : }

  0007e	52		 push	 edx
  0007f	8b cd		 mov	 ecx, ebp
  00081	50		 push	 eax
  00082	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN9@PlayOpenin
  00088	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0008d	58		 pop	 eax
  0008e	5a		 pop	 edx
  0008f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00092	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00099	59		 pop	 ecx
  0009a	5f		 pop	 edi
  0009b	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0009e	33 cd		 xor	 ecx, ebp
  000a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000a5	83 c4 3c	 add	 esp, 60			; 0000003cH
  000a8	3b ec		 cmp	 ebp, esp
  000aa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000af	8b e5		 mov	 esp, ebp
  000b1	5d		 pop	 ebp
  000b2	c3		 ret	 0
  000b3	90		 npad	 1
$LN9@PlayOpenin:
  000b4	01 00 00 00	 DD	 1
  000b8	00 00 00 00	 DD	 $LN8@PlayOpenin
$LN8@PlayOpenin:
  000bc	c8 ff ff ff	 DD	 -56			; ffffffc8H
  000c0	24 00 00 00	 DD	 36			; 00000024H
  000c4	00 00 00 00	 DD	 $LN6@PlayOpenin
$LN6@PlayOpenin:
  000c8	6f		 DB	 111			; 0000006fH
  000c9	70		 DB	 112			; 00000070H
  000ca	65		 DB	 101			; 00000065H
  000cb	6e		 DB	 110			; 0000006eH
  000cc	69		 DB	 105			; 00000069H
  000cd	6e		 DB	 110			; 0000006eH
  000ce	67		 DB	 103			; 00000067H
  000cf	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _opening$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1OPENINGp@@QAE@XZ	; OPENINGp::~OPENINGp
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c8	 mov	 ecx, DWORD PTR [edx-56]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?PlayOpening@@YAXPAVDOTS_AND_BOXES@@@Z ENDP		; PlayOpening
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
tv129 = -4						; size = 4
_breakWeights$ = 8					; size = 4
_lci$ = 12						; size = 4
_i$ = 16						; size = 4
_j$ = 20						; size = 4
?MoveQualityGT@@YA_NPAHPAULONG_CHAIN_INFO@@HH@Z PROC	; MoveQualityGT

; 1193 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 1194 :   if (lci[i].longestChain > lci[j].longestChain) return true;

  00005	8b 45 10	 mov	 eax, DWORD PTR _i$[ebp]
  00008	c1 e0 04	 shl	 eax, 4
  0000b	8b 4d 14	 mov	 ecx, DWORD PTR _j$[ebp]
  0000e	c1 e1 04	 shl	 ecx, 4
  00011	8b 55 0c	 mov	 edx, DWORD PTR _lci$[ebp]
  00014	8b 75 0c	 mov	 esi, DWORD PTR _lci$[ebp]
  00017	8b 44 02 04	 mov	 eax, DWORD PTR [edx+eax+4]
  0001b	3b 44 0e 04	 cmp	 eax, DWORD PTR [esi+ecx+4]
  0001f	7e 07		 jle	 SHORT $LN2@MoveQualit
  00021	b0 01		 mov	 al, 1
  00023	e9 87 00 00 00	 jmp	 $LN1@MoveQualit
$LN2@MoveQualit:

; 1195 :   if (lci[i].longestChain < lci[j].longestChain) return false;

  00028	8b 4d 10	 mov	 ecx, DWORD PTR _i$[ebp]
  0002b	c1 e1 04	 shl	 ecx, 4
  0002e	8b 55 14	 mov	 edx, DWORD PTR _j$[ebp]
  00031	c1 e2 04	 shl	 edx, 4
  00034	8b 45 0c	 mov	 eax, DWORD PTR _lci$[ebp]
  00037	8b 75 0c	 mov	 esi, DWORD PTR _lci$[ebp]
  0003a	8b 4c 08 04	 mov	 ecx, DWORD PTR [eax+ecx+4]
  0003e	3b 4c 16 04	 cmp	 ecx, DWORD PTR [esi+edx+4]
  00042	7d 04		 jge	 SHORT $LN3@MoveQualit
  00044	32 c0		 xor	 al, al
  00046	eb 67		 jmp	 SHORT $LN1@MoveQualit
$LN3@MoveQualit:

; 1196 :   if (lci[i].gain > lci[j].gain) return true;

  00048	8b 55 10	 mov	 edx, DWORD PTR _i$[ebp]
  0004b	c1 e2 04	 shl	 edx, 4
  0004e	8b 45 14	 mov	 eax, DWORD PTR _j$[ebp]
  00051	c1 e0 04	 shl	 eax, 4
  00054	8b 4d 0c	 mov	 ecx, DWORD PTR _lci$[ebp]
  00057	8b 75 0c	 mov	 esi, DWORD PTR _lci$[ebp]
  0005a	8b 54 11 0c	 mov	 edx, DWORD PTR [ecx+edx+12]
  0005e	3b 54 06 0c	 cmp	 edx, DWORD PTR [esi+eax+12]
  00062	7e 04		 jle	 SHORT $LN4@MoveQualit
  00064	b0 01		 mov	 al, 1
  00066	eb 47		 jmp	 SHORT $LN1@MoveQualit
$LN4@MoveQualit:

; 1197 :   if (lci[i].gain < lci[j].gain) return false;

  00068	8b 45 10	 mov	 eax, DWORD PTR _i$[ebp]
  0006b	c1 e0 04	 shl	 eax, 4
  0006e	8b 4d 14	 mov	 ecx, DWORD PTR _j$[ebp]
  00071	c1 e1 04	 shl	 ecx, 4
  00074	8b 55 0c	 mov	 edx, DWORD PTR _lci$[ebp]
  00077	8b 75 0c	 mov	 esi, DWORD PTR _lci$[ebp]
  0007a	8b 44 02 0c	 mov	 eax, DWORD PTR [edx+eax+12]
  0007e	3b 44 0e 0c	 cmp	 eax, DWORD PTR [esi+ecx+12]
  00082	7d 04		 jge	 SHORT $LN5@MoveQualit
  00084	32 c0		 xor	 al, al
  00086	eb 27		 jmp	 SHORT $LN1@MoveQualit
$LN5@MoveQualit:

; 1198 :   return breakWeights[i] > breakWeights[j];

  00088	8b 4d 10	 mov	 ecx, DWORD PTR _i$[ebp]
  0008b	8b 55 08	 mov	 edx, DWORD PTR _breakWeights$[ebp]
  0008e	8b 45 14	 mov	 eax, DWORD PTR _j$[ebp]
  00091	8b 75 08	 mov	 esi, DWORD PTR _breakWeights$[ebp]
  00094	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00097	3b 0c 86	 cmp	 ecx, DWORD PTR [esi+eax*4]
  0009a	7e 09		 jle	 SHORT $LN7@MoveQualit
  0009c	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv129[ebp], 1
  000a3	eb 07		 jmp	 SHORT $LN8@MoveQualit
$LN7@MoveQualit:
  000a5	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv129[ebp], 0
$LN8@MoveQualit:
  000ac	8a 45 fc	 mov	 al, BYTE PTR tv129[ebp]
$LN1@MoveQualit:

; 1199 : }

  000af	5e		 pop	 esi
  000b0	8b e5		 mov	 esp, ebp
  000b2	5d		 pop	 ebp
  000b3	c3		 ret	 0
?MoveQualityGT@@YA_NPAHPAULONG_CHAIN_INFO@@HH@Z ENDP	; MoveQualityGT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
$T2 = -7656						; size = 56
$T3 = -7600						; size = 56
$T4 = -7544						; size = 56
$T5 = -7488						; size = 56
$T6 = -7432						; size = 56
$T7 = -7376						; size = 56
$T8 = -7320						; size = 56
$T9 = -7264						; size = 56
$T10 = -7208						; size = 56
$T11 = -7152						; size = 56
$T12 = -7096						; size = 56
$T13 = -7040						; size = 56
$T14 = -6984						; size = 56
$T15 = -6928						; size = 8
$T16 = -6920						; size = 56
$T17 = -6864						; size = 56
$T18 = -6808						; size = 56
$T19 = -6752						; size = 56
$T20 = -6696						; size = 56
$T21 = -6640						; size = 56
$T22 = -6584						; size = 56
$T23 = -6528						; size = 56
$T24 = -6472						; size = 56
$T25 = -6416						; size = 56
$T26 = -6360						; size = 56
$T27 = -6304						; size = 56
$T28 = -6248						; size = 56
$T29 = -6192						; size = 56
$T30 = -6136						; size = 56
$T31 = -6080						; size = 56
$T32 = -6024						; size = 56
$T33 = -5968						; size = 56
$T34 = -5912						; size = 56
$T35 = -5856						; size = 56
$T36 = -5800						; size = 56
$T37 = -5744						; size = 56
$T38 = -5688						; size = 56
$T39 = -5632						; size = 56
$T40 = -5576						; size = 56
$T41 = -5520						; size = 56
$T42 = -5464						; size = 56
$T43 = -5408						; size = 56
$T44 = -5352						; size = 56
_db$ = -5292						; size = 48
_con$ = -5236						; size = 5136
_result$ = -92						; size = 56
_size$ = -28						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddress$ = 8					; size = 4
_pGame$ = 12						; size = 4
_moveType$ = 16						; size = 4
_computerMove$ = 20					; size = 4
?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z PROC ; TranslateComputerMove

; 1018 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 dc 1d 00 00	 mov	 eax, 7644		; 00001ddcH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d bd 18 e2 ff
	ff		 lea	 edi, DWORD PTR [ebp-7656]
  00023	b9 77 07 00 00	 mov	 ecx, 1911		; 00000777H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 1019 :   // Given the Dots-and-Boxes gaame and the 
; 1020 :   // CON representation of the game after the computer's 
; 1021 :   // move.  We need to find which line to draw.
; 1022 :   // We will try **ALL** the lines, one-at-a-time, and see
; 1023 :   // which one will produce the desired result.
; 1024 :   POINT size;
; 1025 :   MOVE result;

  00043	8d 4d a4	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 1026 :   CON con;

  0004b	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00051	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1027 :   size = pGame->Size();

  0005d	8d 85 f0 e4 ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  00063	50		 push	 eax
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00067	e8 00 00 00 00	 call	 ?Size@DOTS_AND_BOXES@@QBE?AUtagPOINT@@XZ ; DOTS_AND_BOXES::Size
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00071	89 4d e4	 mov	 DWORD PTR _size$[ebp], ecx
  00074	89 55 e8	 mov	 DWORD PTR _size$[ebp+4], edx

; 1028 :   DOTS_AND_BOXES db(size.x, size.y);

  00077	8b 45 e8	 mov	 eax, DWORD PTR _size$[ebp+4]
  0007a	50		 push	 eax
  0007b	8b 4d e4	 mov	 ecx, DWORD PTR _size$[ebp]
  0007e	51		 push	 ecx
  0007f	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00085	e8 00 00 00 00	 call	 ??0DOTS_AND_BOXES@@QAE@HH@Z ; DOTS_AND_BOXES::DOTS_AND_BOXES
  0008a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 1029 :   db = *pGame;

  0008e	8b 55 0c	 mov	 edx, DWORD PTR _pGame$[ebp]
  00091	52		 push	 edx
  00092	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00098	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 1030 :   if (moveType == MT_RANDOM) return computerMoveDB;

  0009d	83 7d 10 01	 cmp	 DWORD PTR _moveType$[ebp], 1
  000a1	75 4b		 jne	 SHORT $LN2@TranslateC
  000a3	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000a8	be 00 00 00 00	 mov	 esi, OFFSET ?computerMoveDB@@3UMOVE@@A ; computerMoveDB
  000ad	8d bd 40 e8 ff
	ff		 lea	 edi, DWORD PTR $T31[ebp]
  000b3	f3 a5		 rep movsd
  000b5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  000b9	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  000bf	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  000c4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000cb	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  000d1	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  000d6	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  000db	8d b5 40 e8 ff
	ff		 lea	 esi, DWORD PTR $T31[ebp]
  000e1	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  000e4	f3 a5		 rep movsd
  000e6	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  000e9	e9 d8 06 00 00	 jmp	 $LN1@TranslateC
$LN2@TranslateC:

; 1031 :   result.dotNum.x = -1;

  000ee	c7 45 a4 ff ff
	ff ff		 mov	 DWORD PTR _result$[ebp], -1

; 1032 : //  if (moveType == MT_GRABANYTHING)
; 1033 : //          return TranslateSimpleWin(pGame, computerMove);
; 1034 :   if (moveType == MT_SIMPLEWIN)

  000f5	83 7d 10 09	 cmp	 DWORD PTR _moveType$[ebp], 9
  000f9	75 72		 jne	 SHORT $LN3@TranslateC

; 1035 :           return TranslateSimpleWin(pGame, computerMove);

  000fb	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  000fe	50		 push	 eax
  000ff	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00102	51		 push	 ecx
  00103	8d 95 b8 e4 ff
	ff		 lea	 edx, DWORD PTR $T14[ebp]
  00109	52		 push	 edx
  0010a	e8 00 00 00 00	 call	 ?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWin
  0010f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00112	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00117	8b f0		 mov	 esi, eax
  00119	8d bd 18 eb ff
	ff		 lea	 edi, DWORD PTR $T44[ebp]
  0011f	f3 a5		 rep movsd
  00121	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00126	8d b5 18 eb ff
	ff		 lea	 esi, DWORD PTR $T44[ebp]
  0012c	8d bd 08 e8 ff
	ff		 lea	 edi, DWORD PTR $T30[ebp]
  00132	f3 a5		 rep movsd
  00134	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00138	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0013e	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00143	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0014a	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00150	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00155	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0015a	8d b5 08 e8 ff
	ff		 lea	 esi, DWORD PTR $T30[ebp]
  00160	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  00163	f3 a5		 rep movsd
  00165	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  00168	e9 59 06 00 00	 jmp	 $LN1@TranslateC
$LN3@TranslateC:

; 1036 :   if (moveType == MT_SIMPLETIE)

  0016d	83 7d 10 0a	 cmp	 DWORD PTR _moveType$[ebp], 10 ; 0000000aH
  00171	75 72		 jne	 SHORT $LN4@TranslateC

; 1037 :           return TranslateSimpleWin(pGame, computerMove);

  00173	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  00176	50		 push	 eax
  00177	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  0017a	51		 push	 ecx
  0017b	8d 95 80 e4 ff
	ff		 lea	 edx, DWORD PTR $T13[ebp]
  00181	52		 push	 edx
  00182	e8 00 00 00 00	 call	 ?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWin
  00187	83 c4 0c	 add	 esp, 12			; 0000000cH
  0018a	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0018f	8b f0		 mov	 esi, eax
  00191	8d bd e0 ea ff
	ff		 lea	 edi, DWORD PTR $T43[ebp]
  00197	f3 a5		 rep movsd
  00199	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0019e	8d b5 e0 ea ff
	ff		 lea	 esi, DWORD PTR $T43[ebp]
  001a4	8d bd d0 e7 ff
	ff		 lea	 edi, DWORD PTR $T29[ebp]
  001aa	f3 a5		 rep movsd
  001ac	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  001b0	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  001b6	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  001bb	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  001c2	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  001c8	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  001cd	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  001d2	8d b5 d0 e7 ff
	ff		 lea	 esi, DWORD PTR $T29[ebp]
  001d8	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  001db	f3 a5		 rep movsd
  001dd	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  001e0	e9 e1 05 00 00	 jmp	 $LN1@TranslateC
$LN4@TranslateC:

; 1038 :   if (moveType == MT_SIMPLEWINDECLINE)

  001e5	83 7d 10 0c	 cmp	 DWORD PTR _moveType$[ebp], 12 ; 0000000cH
  001e9	75 72		 jne	 SHORT $LN5@TranslateC

; 1039 :           return TranslateSimpleWinDecline(pGame, computerMove);

  001eb	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  001ee	50		 push	 eax
  001ef	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  001f2	51		 push	 ecx
  001f3	8d 95 48 e4 ff
	ff		 lea	 edx, DWORD PTR $T12[ebp]
  001f9	52		 push	 edx
  001fa	e8 00 00 00 00	 call	 ?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWinDecline
  001ff	83 c4 0c	 add	 esp, 12			; 0000000cH
  00202	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00207	8b f0		 mov	 esi, eax
  00209	8d bd a8 ea ff
	ff		 lea	 edi, DWORD PTR $T42[ebp]
  0020f	f3 a5		 rep movsd
  00211	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00216	8d b5 a8 ea ff
	ff		 lea	 esi, DWORD PTR $T42[ebp]
  0021c	8d bd 98 e7 ff
	ff		 lea	 edi, DWORD PTR $T28[ebp]
  00222	f3 a5		 rep movsd
  00224	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00228	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0022e	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00233	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0023a	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00240	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00245	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0024a	8d b5 98 e7 ff
	ff		 lea	 esi, DWORD PTR $T28[ebp]
  00250	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  00253	f3 a5		 rep movsd
  00255	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  00258	e9 69 05 00 00	 jmp	 $LN1@TranslateC
$LN5@TranslateC:

; 1040 :   if (moveType == MT_MAXDECLINE)

  0025d	83 7d 10 13	 cmp	 DWORD PTR _moveType$[ebp], 19 ; 00000013H
  00261	75 72		 jne	 SHORT $LN6@TranslateC

; 1041 :           return TranslateSimpleWinDecline(pGame, computerMove);

  00263	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  00266	50		 push	 eax
  00267	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  0026a	51		 push	 ecx
  0026b	8d 95 10 e4 ff
	ff		 lea	 edx, DWORD PTR $T11[ebp]
  00271	52		 push	 edx
  00272	e8 00 00 00 00	 call	 ?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWinDecline
  00277	83 c4 0c	 add	 esp, 12			; 0000000cH
  0027a	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0027f	8b f0		 mov	 esi, eax
  00281	8d bd 70 ea ff
	ff		 lea	 edi, DWORD PTR $T41[ebp]
  00287	f3 a5		 rep movsd
  00289	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0028e	8d b5 70 ea ff
	ff		 lea	 esi, DWORD PTR $T41[ebp]
  00294	8d bd 60 e7 ff
	ff		 lea	 edi, DWORD PTR $T27[ebp]
  0029a	f3 a5		 rep movsd
  0029c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002a0	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  002a6	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  002ab	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002b2	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  002b8	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  002bd	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  002c2	8d b5 60 e7 ff
	ff		 lea	 esi, DWORD PTR $T27[ebp]
  002c8	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  002cb	f3 a5		 rep movsd
  002cd	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  002d0	e9 f1 04 00 00	 jmp	 $LN1@TranslateC
$LN6@TranslateC:

; 1042 :   if (moveType == MT_NIMVALDECLINE)

  002d5	83 7d 10 16	 cmp	 DWORD PTR _moveType$[ebp], 22 ; 00000016H
  002d9	75 72		 jne	 SHORT $LN7@TranslateC

; 1043 :           return TranslateSimpleWinDecline(pGame, computerMove);

  002db	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  002de	50		 push	 eax
  002df	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  002e2	51		 push	 ecx
  002e3	8d 95 d8 e3 ff
	ff		 lea	 edx, DWORD PTR $T10[ebp]
  002e9	52		 push	 edx
  002ea	e8 00 00 00 00	 call	 ?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWinDecline
  002ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  002f2	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  002f7	8b f0		 mov	 esi, eax
  002f9	8d bd 38 ea ff
	ff		 lea	 edi, DWORD PTR $T40[ebp]
  002ff	f3 a5		 rep movsd
  00301	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00306	8d b5 38 ea ff
	ff		 lea	 esi, DWORD PTR $T40[ebp]
  0030c	8d bd 28 e7 ff
	ff		 lea	 edi, DWORD PTR $T26[ebp]
  00312	f3 a5		 rep movsd
  00314	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00318	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0031e	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00323	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0032a	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00330	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00335	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0033a	8d b5 28 e7 ff
	ff		 lea	 esi, DWORD PTR $T26[ebp]
  00340	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  00343	f3 a5		 rep movsd
  00345	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  00348	e9 79 04 00 00	 jmp	 $LN1@TranslateC
$LN7@TranslateC:

; 1044 :   if (moveType == MT_SIMPLEWINCAPTURE)

  0034d	83 7d 10 0b	 cmp	 DWORD PTR _moveType$[ebp], 11 ; 0000000bH
  00351	75 72		 jne	 SHORT $LN8@TranslateC

; 1045 :           return TranslateSimpleWinCapture(pGame, computerMove);

  00353	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  00356	50		 push	 eax
  00357	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  0035a	51		 push	 ecx
  0035b	8d 95 a0 e3 ff
	ff		 lea	 edx, DWORD PTR $T9[ebp]
  00361	52		 push	 edx
  00362	e8 00 00 00 00	 call	 ?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWinCapture
  00367	83 c4 0c	 add	 esp, 12			; 0000000cH
  0036a	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0036f	8b f0		 mov	 esi, eax
  00371	8d bd 00 ea ff
	ff		 lea	 edi, DWORD PTR $T39[ebp]
  00377	f3 a5		 rep movsd
  00379	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0037e	8d b5 00 ea ff
	ff		 lea	 esi, DWORD PTR $T39[ebp]
  00384	8d bd f0 e6 ff
	ff		 lea	 edi, DWORD PTR $T25[ebp]
  0038a	f3 a5		 rep movsd
  0038c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00390	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00396	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  0039b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  003a2	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  003a8	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  003ad	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  003b2	8d b5 f0 e6 ff
	ff		 lea	 esi, DWORD PTR $T25[ebp]
  003b8	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  003bb	f3 a5		 rep movsd
  003bd	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  003c0	e9 01 04 00 00	 jmp	 $LN1@TranslateC
$LN8@TranslateC:

; 1046 :   if (moveType == MT_MAXCAPTURE)

  003c5	83 7d 10 14	 cmp	 DWORD PTR _moveType$[ebp], 20 ; 00000014H
  003c9	75 72		 jne	 SHORT $LN9@TranslateC

; 1047 :           return TranslateSimpleWinCapture(pGame, computerMove);

  003cb	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  003ce	50		 push	 eax
  003cf	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  003d2	51		 push	 ecx
  003d3	8d 95 68 e3 ff
	ff		 lea	 edx, DWORD PTR $T8[ebp]
  003d9	52		 push	 edx
  003da	e8 00 00 00 00	 call	 ?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWinCapture
  003df	83 c4 0c	 add	 esp, 12			; 0000000cH
  003e2	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  003e7	8b f0		 mov	 esi, eax
  003e9	8d bd c8 e9 ff
	ff		 lea	 edi, DWORD PTR $T38[ebp]
  003ef	f3 a5		 rep movsd
  003f1	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  003f6	8d b5 c8 e9 ff
	ff		 lea	 esi, DWORD PTR $T38[ebp]
  003fc	8d bd b8 e6 ff
	ff		 lea	 edi, DWORD PTR $T24[ebp]
  00402	f3 a5		 rep movsd
  00404	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00408	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0040e	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00413	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0041a	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00420	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00425	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0042a	8d b5 b8 e6 ff
	ff		 lea	 esi, DWORD PTR $T24[ebp]
  00430	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  00433	f3 a5		 rep movsd
  00435	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  00438	e9 89 03 00 00	 jmp	 $LN1@TranslateC
$LN9@TranslateC:

; 1048 :   if (moveType == MT_NIMVALCAPTURE)

  0043d	83 7d 10 15	 cmp	 DWORD PTR _moveType$[ebp], 21 ; 00000015H
  00441	75 72		 jne	 SHORT $LN10@TranslateC

; 1049 :           return TranslateSimpleWinCapture(pGame, computerMove);

  00443	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  00446	50		 push	 eax
  00447	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  0044a	51		 push	 ecx
  0044b	8d 95 30 e3 ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  00451	52		 push	 edx
  00452	e8 00 00 00 00	 call	 ?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWinCapture
  00457	83 c4 0c	 add	 esp, 12			; 0000000cH
  0045a	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0045f	8b f0		 mov	 esi, eax
  00461	8d bd 90 e9 ff
	ff		 lea	 edi, DWORD PTR $T37[ebp]
  00467	f3 a5		 rep movsd
  00469	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0046e	8d b5 90 e9 ff
	ff		 lea	 esi, DWORD PTR $T37[ebp]
  00474	8d bd 80 e6 ff
	ff		 lea	 edi, DWORD PTR $T23[ebp]
  0047a	f3 a5		 rep movsd
  0047c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00480	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00486	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  0048b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00492	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00498	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  0049d	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  004a2	8d b5 80 e6 ff
	ff		 lea	 esi, DWORD PTR $T23[ebp]
  004a8	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  004ab	f3 a5		 rep movsd
  004ad	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  004b0	e9 11 03 00 00	 jmp	 $LN1@TranslateC
$LN10@TranslateC:

; 1050 :   if (moveType == MT_GRABANYTHING)

  004b5	83 7d 10 08	 cmp	 DWORD PTR _moveType$[ebp], 8
  004b9	75 72		 jne	 SHORT $LN11@TranslateC

; 1051 :           return TranslateSimpleMove(pGame, computerMove);

  004bb	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  004be	50		 push	 eax
  004bf	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  004c2	51		 push	 ecx
  004c3	8d 95 f8 e2 ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  004c9	52		 push	 edx
  004ca	e8 00 00 00 00	 call	 ?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleMove
  004cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  004d2	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  004d7	8b f0		 mov	 esi, eax
  004d9	8d bd 58 e9 ff
	ff		 lea	 edi, DWORD PTR $T36[ebp]
  004df	f3 a5		 rep movsd
  004e1	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  004e6	8d b5 58 e9 ff
	ff		 lea	 esi, DWORD PTR $T36[ebp]
  004ec	8d bd 48 e6 ff
	ff		 lea	 edi, DWORD PTR $T22[ebp]
  004f2	f3 a5		 rep movsd
  004f4	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  004f8	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  004fe	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00503	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0050a	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00510	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00515	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0051a	8d b5 48 e6 ff
	ff		 lea	 esi, DWORD PTR $T22[ebp]
  00520	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  00523	f3 a5		 rep movsd
  00525	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  00528	e9 99 02 00 00	 jmp	 $LN1@TranslateC
$LN11@TranslateC:

; 1052 :   if (moveType == MT_OBVIOUSCAPTURE)

  0052d	83 7d 10 02	 cmp	 DWORD PTR _moveType$[ebp], 2
  00531	75 72		 jne	 SHORT $LN12@TranslateC

; 1053 :           return TranslateSimpleMove(pGame, computerMove);

  00533	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  00536	50		 push	 eax
  00537	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  0053a	51		 push	 ecx
  0053b	8d 95 c0 e2 ff
	ff		 lea	 edx, DWORD PTR $T5[ebp]
  00541	52		 push	 edx
  00542	e8 00 00 00 00	 call	 ?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleMove
  00547	83 c4 0c	 add	 esp, 12			; 0000000cH
  0054a	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0054f	8b f0		 mov	 esi, eax
  00551	8d bd 20 e9 ff
	ff		 lea	 edi, DWORD PTR $T35[ebp]
  00557	f3 a5		 rep movsd
  00559	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0055e	8d b5 20 e9 ff
	ff		 lea	 esi, DWORD PTR $T35[ebp]
  00564	8d bd 10 e6 ff
	ff		 lea	 edi, DWORD PTR $T21[ebp]
  0056a	f3 a5		 rep movsd
  0056c	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00570	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00576	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  0057b	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00582	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00588	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  0058d	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00592	8d b5 10 e6 ff
	ff		 lea	 esi, DWORD PTR $T21[ebp]
  00598	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  0059b	f3 a5		 rep movsd
  0059d	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  005a0	e9 21 02 00 00	 jmp	 $LN1@TranslateC
$LN12@TranslateC:

; 1054 :   if (    (moveType == MT_GIVENOTHING)
; 1055 :        || (moveType == MT_BREAKLOOPS)
; 1056 :        || (moveType == MT_LOOPDIVIDE)
; 1057 :        || (moveType == MT_DIVIDE)

  005a5	83 7d 10 03	 cmp	 DWORD PTR _moveType$[ebp], 3
  005a9	74 12		 je	 SHORT $LN14@TranslateC
  005ab	83 7d 10 04	 cmp	 DWORD PTR _moveType$[ebp], 4
  005af	74 0c		 je	 SHORT $LN14@TranslateC
  005b1	83 7d 10 05	 cmp	 DWORD PTR _moveType$[ebp], 5
  005b5	74 06		 je	 SHORT $LN14@TranslateC
  005b7	83 7d 10 06	 cmp	 DWORD PTR _moveType$[ebp], 6
  005bb	75 4b		 jne	 SHORT $LN13@TranslateC
$LN14@TranslateC:

; 1058 :      )
; 1059 :        //return TranslateSimpleMove(pGame, computerMove);
; 1060 :           return computerMoveDB;

  005bd	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  005c2	be 00 00 00 00	 mov	 esi, OFFSET ?computerMoveDB@@3UMOVE@@A ; computerMoveDB
  005c7	8d bd d8 e5 ff
	ff		 lea	 edi, DWORD PTR $T20[ebp]
  005cd	f3 a5		 rep movsd
  005cf	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  005d3	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  005d9	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  005de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005e5	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  005eb	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  005f0	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  005f5	8d b5 d8 e5 ff
	ff		 lea	 esi, DWORD PTR $T20[ebp]
  005fb	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  005fe	f3 a5		 rep movsd
  00600	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  00603	e9 be 01 00 00	 jmp	 $LN1@TranslateC
$LN13@TranslateC:

; 1061 :   if (moveType == MT_GIVELITTLE)

  00608	83 7d 10 07	 cmp	 DWORD PTR _moveType$[ebp], 7
  0060c	75 72		 jne	 SHORT $LN15@TranslateC

; 1062 :           return TranslateSimpleWin(pGame, computerMove);

  0060e	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  00611	50		 push	 eax
  00612	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00615	51		 push	 ecx
  00616	8d 95 88 e2 ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0061c	52		 push	 edx
  0061d	e8 00 00 00 00	 call	 ?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWin
  00622	83 c4 0c	 add	 esp, 12			; 0000000cH
  00625	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0062a	8b f0		 mov	 esi, eax
  0062c	8d bd e8 e8 ff
	ff		 lea	 edi, DWORD PTR $T34[ebp]
  00632	f3 a5		 rep movsd
  00634	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00639	8d b5 e8 e8 ff
	ff		 lea	 esi, DWORD PTR $T34[ebp]
  0063f	8d bd a0 e5 ff
	ff		 lea	 edi, DWORD PTR $T19[ebp]
  00645	f3 a5		 rep movsd
  00647	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0064b	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00651	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00656	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0065d	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00663	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00668	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0066d	8d b5 a0 e5 ff
	ff		 lea	 esi, DWORD PTR $T19[ebp]
  00673	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  00676	f3 a5		 rep movsd
  00678	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  0067b	e9 46 01 00 00	 jmp	 $LN1@TranslateC
$LN15@TranslateC:

; 1063 :   if ((moveType == MT_NIMVAL) || (moveType == MT_NONIMVAL))

  00680	83 7d 10 0d	 cmp	 DWORD PTR _moveType$[ebp], 13 ; 0000000dH
  00684	74 06		 je	 SHORT $LN17@TranslateC
  00686	83 7d 10 0e	 cmp	 DWORD PTR _moveType$[ebp], 14 ; 0000000eH
  0068a	75 72		 jne	 SHORT $LN16@TranslateC
$LN17@TranslateC:

; 1064 :           return TranslateSimpleWin(pGame, computerMove);

  0068c	8b 45 14	 mov	 eax, DWORD PTR _computerMove$[ebp]
  0068f	50		 push	 eax
  00690	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00693	51		 push	 ecx
  00694	8d 95 50 e2 ff
	ff		 lea	 edx, DWORD PTR $T3[ebp]
  0069a	52		 push	 edx
  0069b	e8 00 00 00 00	 call	 ?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ; TranslateSimpleWin
  006a0	83 c4 0c	 add	 esp, 12			; 0000000cH
  006a3	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  006a8	8b f0		 mov	 esi, eax
  006aa	8d bd b0 e8 ff
	ff		 lea	 edi, DWORD PTR $T33[ebp]
  006b0	f3 a5		 rep movsd
  006b2	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  006b7	8d b5 b0 e8 ff
	ff		 lea	 esi, DWORD PTR $T33[ebp]
  006bd	8d bd 68 e5 ff
	ff		 lea	 edi, DWORD PTR $T18[ebp]
  006c3	f3 a5		 rep movsd
  006c5	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  006c9	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  006cf	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  006d4	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  006db	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  006e1	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  006e6	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  006eb	8d b5 68 e5 ff
	ff		 lea	 esi, DWORD PTR $T18[ebp]
  006f1	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  006f4	f3 a5		 rep movsd
  006f6	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  006f9	e9 c8 00 00 00	 jmp	 $LN1@TranslateC
$LN16@TranslateC:

; 1065 :   if ((moveType == MT_OPENINGTIE) || (moveType == MT_OPENINGWIN))

  006fe	83 7d 10 12	 cmp	 DWORD PTR _moveType$[ebp], 18 ; 00000012H
  00702	74 06		 je	 SHORT $LN19@TranslateC
  00704	83 7d 10 11	 cmp	 DWORD PTR _moveType$[ebp], 17 ; 00000011H
  00708	75 6b		 jne	 SHORT $LN18@TranslateC
$LN19@TranslateC:

; 1066 :           return TranslateOpeningMove(pGame);

  0070a	8b 45 0c	 mov	 eax, DWORD PTR _pGame$[ebp]
  0070d	50		 push	 eax
  0070e	8d 8d 18 e2 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00714	51		 push	 ecx
  00715	e8 00 00 00 00	 call	 ?TranslateOpeningMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@@Z ; TranslateOpeningMove
  0071a	83 c4 08	 add	 esp, 8
  0071d	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00722	8b f0		 mov	 esi, eax
  00724	8d bd 78 e8 ff
	ff		 lea	 edi, DWORD PTR $T32[ebp]
  0072a	f3 a5		 rep movsd
  0072c	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00731	8d b5 78 e8 ff
	ff		 lea	 esi, DWORD PTR $T32[ebp]
  00737	8d bd 30 e5 ff
	ff		 lea	 edi, DWORD PTR $T17[ebp]
  0073d	f3 a5		 rep movsd
  0073f	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00743	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00749	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  0074e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00755	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0075b	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00760	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00765	8d b5 30 e5 ff
	ff		 lea	 esi, DWORD PTR $T17[ebp]
  0076b	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  0076e	f3 a5		 rep movsd
  00770	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
  00773	eb 51		 jmp	 SHORT $LN1@TranslateC
$LN18@TranslateC:

; 1067 :   ImplementationError("Cannot determine computer's move");

  00775	68 00 00 00 00	 push	 OFFSET $SG226862
  0077a	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  0077f	83 c4 04	 add	 esp, 4

; 1068 :   return result;

  00782	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00787	8d 75 a4	 lea	 esi, DWORD PTR _result$[ebp]
  0078a	8d bd f8 e4 ff
	ff		 lea	 edi, DWORD PTR $T16[ebp]
  00790	f3 a5		 rep movsd
  00792	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  00796	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0079c	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  007a1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  007a8	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  007ae	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  007b3	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  007b8	8d b5 f8 e4 ff
	ff		 lea	 esi, DWORD PTR $T16[ebp]
  007be	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  007c1	f3 a5		 rep movsd
  007c3	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]
$LN1@TranslateC:

; 1069 : };

  007c6	52		 push	 edx
  007c7	8b cd		 mov	 ecx, ebp
  007c9	50		 push	 eax
  007ca	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN29@TranslateC
  007d0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  007d5	58		 pop	 eax
  007d6	5a		 pop	 edx
  007d7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  007da	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  007e1	59		 pop	 ecx
  007e2	5f		 pop	 edi
  007e3	5e		 pop	 esi
  007e4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  007e7	33 cd		 xor	 ecx, ebp
  007e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  007ee	81 c4 e8 1d 00
	00		 add	 esp, 7656		; 00001de8H
  007f4	3b ec		 cmp	 ebp, esp
  007f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007fb	8b e5		 mov	 esp, ebp
  007fd	5d		 pop	 ebp
  007fe	c3		 ret	 0
  007ff	90		 npad	 1
$LN29@TranslateC:
  00800	04 00 00 00	 DD	 4
  00804	00 00 00 00	 DD	 $LN28@TranslateC
$LN28@TranslateC:
  00808	e4 ff ff ff	 DD	 -28			; ffffffe4H
  0080c	08 00 00 00	 DD	 8
  00810	00 00 00 00	 DD	 $LN23@TranslateC
  00814	a4 ff ff ff	 DD	 -92			; ffffffa4H
  00818	38 00 00 00	 DD	 56			; 00000038H
  0081c	00 00 00 00	 DD	 $LN24@TranslateC
  00820	8c eb ff ff	 DD	 -5236			; ffffeb8cH
  00824	10 14 00 00	 DD	 5136			; 00001410H
  00828	00 00 00 00	 DD	 $LN25@TranslateC
  0082c	54 eb ff ff	 DD	 -5292			; ffffeb54H
  00830	30 00 00 00	 DD	 48			; 00000030H
  00834	00 00 00 00	 DD	 $LN26@TranslateC
$LN26@TranslateC:
  00838	64		 DB	 100			; 00000064H
  00839	62		 DB	 98			; 00000062H
  0083a	00		 DB	 0
$LN25@TranslateC:
  0083b	63		 DB	 99			; 00000063H
  0083c	6f		 DB	 111			; 0000006fH
  0083d	6e		 DB	 110			; 0000006eH
  0083e	00		 DB	 0
$LN24@TranslateC:
  0083f	72		 DB	 114			; 00000072H
  00840	65		 DB	 101			; 00000065H
  00841	73		 DB	 115			; 00000073H
  00842	75		 DB	 117			; 00000075H
  00843	6c		 DB	 108			; 0000006cH
  00844	74		 DB	 116			; 00000074H
  00845	00		 DB	 0
$LN23@TranslateC:
  00846	73		 DB	 115			; 00000073H
  00847	69		 DB	 105			; 00000069H
  00848	7a		 DB	 122			; 0000007aH
  00849	65		 DB	 101			; 00000065H
  0084a	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z$0:
  00000	8d 8d 8c eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
__unwindfunclet$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z$1:
  0000b	8d 8d 54 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 18 e2 ff
	ff		 mov	 ecx, DWORD PTR [edx-7656]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z ENDP ; TranslateComputerMove
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_width$ = -72						; size = 4
_result$ = -64						; size = 56
__$ArrayPad$ = -4					; size = 4
__$ReturnAddress$ = 8					; size = 4
_pGame$ = 12						; size = 4
?TranslateOpeningMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@@Z PROC ; TranslateOpeningMove

; 996  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 48	 sub	 esp, 72			; 00000048H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d b8	 lea	 edi, DWORD PTR [ebp-72]
  0000b	b9 12 00 00 00	 mov	 ecx, 18			; 00000012H
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 997  :   MOVE result;

  00021	8d 4d c0	 lea	 ecx, DWORD PTR _result$[ebp]
  00024	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 998  :   int width;
; 999  :   result.moveType = moveType;

  00029	a1 00 00 00 00	 mov	 eax, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  0002e	89 45 f4	 mov	 DWORD PTR _result$[ebp+52], eax

; 1000 :   width = pGame->Width();

  00031	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00034	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00039	89 45 b8	 mov	 DWORD PTR _width$[ebp], eax

; 1001 :   result.dotNum.y = computerMove.lineNum/(2*width-1);

  0003c	8b 4d b8	 mov	 ecx, DWORD PTR _width$[ebp]
  0003f	8d 4c 09 ff	 lea	 ecx, DWORD PTR [ecx+ecx-1]
  00043	a1 18 14 00 00	 mov	 eax, DWORD PTR ?computerMove@@3UPossibleMove@@A+5144
  00048	99		 cdq
  00049	f7 f9		 idiv	 ecx
  0004b	89 45 c4	 mov	 DWORD PTR _result$[ebp+4], eax

; 1002 :   result.dotNum.x = computerMove.lineNum%(2*width-1);

  0004e	8b 55 b8	 mov	 edx, DWORD PTR _width$[ebp]
  00051	8d 4c 12 ff	 lea	 ecx, DWORD PTR [edx+edx-1]
  00055	a1 18 14 00 00	 mov	 eax, DWORD PTR ?computerMove@@3UPossibleMove@@A+5144
  0005a	99		 cdq
  0005b	f7 f9		 idiv	 ecx
  0005d	89 55 c0	 mov	 DWORD PTR _result$[ebp], edx

; 1003 :   result.vertical = false;

  00060	c6 45 c8 00	 mov	 BYTE PTR _result$[ebp+8], 0

; 1004 :   if (result.dotNum.x >= width-1)

  00064	8b 55 b8	 mov	 edx, DWORD PTR _width$[ebp]
  00067	83 ea 01	 sub	 edx, 1
  0006a	39 55 c0	 cmp	 DWORD PTR _result$[ebp], edx
  0006d	7c 12		 jl	 SHORT $LN2@TranslateO

; 1005 :   {
; 1006 :     result.dotNum.x -= width-1;

  0006f	8b 45 b8	 mov	 eax, DWORD PTR _width$[ebp]
  00072	83 e8 01	 sub	 eax, 1
  00075	8b 4d c0	 mov	 ecx, DWORD PTR _result$[ebp]
  00078	2b c8		 sub	 ecx, eax
  0007a	89 4d c0	 mov	 DWORD PTR _result$[ebp], ecx

; 1007 :     result.vertical = true;

  0007d	c6 45 c8 01	 mov	 BYTE PTR _result$[ebp+8], 1
$LN2@TranslateO:

; 1008 :   };
; 1009 :   return result;

  00081	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00086	8d 75 c0	 lea	 esi, DWORD PTR _result$[ebp]
  00089	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  0008c	f3 a5		 rep movsd
  0008e	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]

; 1010 : }

  00091	52		 push	 edx
  00092	8b cd		 mov	 ecx, ebp
  00094	50		 push	 eax
  00095	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@TranslateO
  0009b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a0	58		 pop	 eax
  000a1	5a		 pop	 edx
  000a2	5f		 pop	 edi
  000a3	5e		 pop	 esi
  000a4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a7	33 cd		 xor	 ecx, ebp
  000a9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000ae	83 c4 48	 add	 esp, 72			; 00000048H
  000b1	3b ec		 cmp	 ebp, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
$LN6@TranslateO:
  000bc	01 00 00 00	 DD	 1
  000c0	00 00 00 00	 DD	 $LN5@TranslateO
$LN5@TranslateO:
  000c4	c0 ff ff ff	 DD	 -64			; ffffffc0H
  000c8	38 00 00 00	 DD	 56			; 00000038H
  000cc	00 00 00 00	 DD	 $LN4@TranslateO
$LN4@TranslateO:
  000d0	72		 DB	 114			; 00000072H
  000d1	65		 DB	 101			; 00000065H
  000d2	73		 DB	 115			; 00000073H
  000d3	75		 DB	 117			; 00000075H
  000d4	6c		 DB	 108			; 0000006cH
  000d5	74		 DB	 116			; 00000074H
  000d6	00		 DB	 0
?TranslateOpeningMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@@Z ENDP ; TranslateOpeningMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
$T2 = -5368						; size = 8
$T3 = -5360						; size = 56
_db$ = -5300						; size = 48
_con$ = -5244						; size = 5136
_result$ = -100						; size = 56
_size$ = -36						; size = 8
_col$ = -24						; size = 4
_row$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddress$ = 8					; size = 4
_pGame$ = 12						; size = 4
_computerMove$ = 16					; size = 4
?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z PROC ; TranslateSimpleMove

; 921  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 ec 14 00 00	 mov	 eax, 5356		; 000014ecH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d bd 08 eb ff
	ff		 lea	 edi, DWORD PTR [ebp-5368]
  00023	b9 3b 05 00 00	 mov	 ecx, 1339		; 0000053bH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 922  :   int row, col;
; 923  :   POINT size;
; 924  :   MOVE result;

  00043	8d 4d 9c	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 925  :   CON con;

  0004b	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00051	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 926  : //  int initialCaptures, newCaptures;
; 927  : //  int finalCaptures = -1;
; 928  :   size = pGame->Size();

  0005d	8d 85 08 eb ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00063	50		 push	 eax
  00064	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00067	e8 00 00 00 00	 call	 ?Size@DOTS_AND_BOXES@@QBE?AUtagPOINT@@XZ ; DOTS_AND_BOXES::Size
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00071	89 4d dc	 mov	 DWORD PTR _size$[ebp], ecx
  00074	89 55 e0	 mov	 DWORD PTR _size$[ebp+4], edx

; 929  :   DOTS_AND_BOXES db(size.x, size.y);

  00077	8b 45 e0	 mov	 eax, DWORD PTR _size$[ebp+4]
  0007a	50		 push	 eax
  0007b	8b 4d dc	 mov	 ecx, DWORD PTR _size$[ebp]
  0007e	51		 push	 ecx
  0007f	8d 8d 4c eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00085	e8 00 00 00 00	 call	 ??0DOTS_AND_BOXES@@QAE@HH@Z ; DOTS_AND_BOXES::DOTS_AND_BOXES
  0008a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 930  : //  initialCaptures = db.CountCapturables();
; 931  :   result.dotNum.x = -1;

  0008e	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _result$[ebp], -1

; 932  :   for (row=0; row<size.y; row++)

  00095	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  0009c	eb 09		 jmp	 SHORT $LN4@TranslateS
$LN2@TranslateS:
  0009e	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  000a1	83 c2 01	 add	 edx, 1
  000a4	89 55 ec	 mov	 DWORD PTR _row$[ebp], edx
$LN4@TranslateS:
  000a7	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  000aa	3b 45 e0	 cmp	 eax, DWORD PTR _size$[ebp+4]
  000ad	0f 8d 30 01 00
	00		 jge	 $LN3@TranslateS

; 933  :   {
; 934  :     for (col=0; col<size.x; col++)

  000b3	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  000ba	eb 09		 jmp	 SHORT $LN7@TranslateS
$LN5@TranslateS:
  000bc	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  000bf	83 c1 01	 add	 ecx, 1
  000c2	89 4d e8	 mov	 DWORD PTR _col$[ebp], ecx
$LN7@TranslateS:
  000c5	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  000c8	3b 55 dc	 cmp	 edx, DWORD PTR _size$[ebp]
  000cb	0f 8d 0d 01 00
	00		 jge	 $LN6@TranslateS

; 935  :     {
; 936  :       if (col < size.x-1)

  000d1	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  000d4	83 e8 01	 sub	 eax, 1
  000d7	39 45 e8	 cmp	 DWORD PTR _col$[ebp], eax
  000da	7d 79		 jge	 SHORT $LN8@TranslateS

; 937  :       {
; 938  :         if (pGame->HLineType(col,row) == LINE_NONE)

  000dc	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  000df	51		 push	 ecx
  000e0	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  000e3	52		 push	 edx
  000e4	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  000e7	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  000ec	85 c0		 test	 eax, eax
  000ee	75 65		 jne	 SHORT $LN8@TranslateS

; 939  :         {
; 940  :           db = *pGame;

  000f0	8b 45 0c	 mov	 eax, DWORD PTR _pGame$[ebp]
  000f3	50		 push	 eax
  000f4	8d 8d 4c eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  000fa	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 941  :           db.SetHLineType(col,row,LINE_COMPUTER);

  000ff	6a 01		 push	 1
  00101	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  00104	51		 push	 ecx
  00105	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  00108	52		 push	 edx
  00109	8d 8d 4c eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0010f	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType

; 942  : //          newCaptures = db.CountCapturables();
; 943  : //          db.RemoveCapturables();
; 944  :           con = db;

  00114	8d 85 4c eb ff
	ff		 lea	 eax, DWORD PTR _db$[ebp]
  0011a	50		 push	 eax
  0011b	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00121	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 945  :           if (con == *computerMove)

  00126	8b 4d 10	 mov	 ecx, DWORD PTR _computerMove$[ebp]
  00129	51		 push	 ecx
  0012a	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00130	e8 00 00 00 00	 call	 ??8CON@@QBE_NABV0@@Z	; CON::operator==
  00135	0f b6 d0	 movzx	 edx, al
  00138	85 d2		 test	 edx, edx
  0013a	74 19		 je	 SHORT $LN8@TranslateS

; 946  :           {
; 947  : //            if (newCaptures >= initialCaptures)
; 948  : //            {
; 949  : //              if (newCaptures > finalCaptures)
; 950  : //              {
; 951  :                 result.dotNum.x = col;

  0013c	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  0013f	89 45 9c	 mov	 DWORD PTR _result$[ebp], eax

; 952  :                 result.dotNum.y = row;

  00142	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  00145	89 4d a0	 mov	 DWORD PTR _result$[ebp+4], ecx

; 953  :                 result.vertical = false;

  00148	c6 45 a4 00	 mov	 BYTE PTR _result$[ebp+8], 0

; 954  :                 result.moveType = moveType;

  0014c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  00152	89 55 d0	 mov	 DWORD PTR _result$[ebp+52], edx
$LN8@TranslateS:

; 955  : //                finalCaptures = newCaptures;
; 956  : //              };
; 957  : //            };
; 958  :           };
; 959  :         };
; 960  :       };
; 961  :       if (row < size.y-1)

  00155	8b 45 e0	 mov	 eax, DWORD PTR _size$[ebp+4]
  00158	83 e8 01	 sub	 eax, 1
  0015b	39 45 ec	 cmp	 DWORD PTR _row$[ebp], eax
  0015e	7d 79		 jge	 SHORT $LN11@TranslateS

; 962  :       {
; 963  :         if (pGame->VLineType(col,row) == LINE_NONE)

  00160	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  00163	51		 push	 ecx
  00164	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  00167	52		 push	 edx
  00168	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  0016b	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  00170	85 c0		 test	 eax, eax
  00172	75 65		 jne	 SHORT $LN11@TranslateS

; 964  :         {
; 965  :           db = *pGame;

  00174	8b 45 0c	 mov	 eax, DWORD PTR _pGame$[ebp]
  00177	50		 push	 eax
  00178	8d 8d 4c eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0017e	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 966  :           db.SetVLineType(col,row,LINE_COMPUTER);

  00183	6a 01		 push	 1
  00185	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  00188	51		 push	 ecx
  00189	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  0018c	52		 push	 edx
  0018d	8d 8d 4c eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00193	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType

; 967  : //          newCaptures = db.CountCapturables();
; 968  : //          db.RemoveCapturables();
; 969  :           con = db;

  00198	8d 85 4c eb ff
	ff		 lea	 eax, DWORD PTR _db$[ebp]
  0019e	50		 push	 eax
  0019f	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  001a5	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 970  :           if (con == *computerMove)

  001aa	8b 4d 10	 mov	 ecx, DWORD PTR _computerMove$[ebp]
  001ad	51		 push	 ecx
  001ae	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  001b4	e8 00 00 00 00	 call	 ??8CON@@QBE_NABV0@@Z	; CON::operator==
  001b9	0f b6 d0	 movzx	 edx, al
  001bc	85 d2		 test	 edx, edx
  001be	74 19		 je	 SHORT $LN11@TranslateS

; 971  :           {
; 972  : //            if (newCaptures >= initialCaptures)
; 973  : //            {
; 974  : //              if (newCaptures > finalCaptures)
; 975  : //              {
; 976  :                 result.dotNum.x = col;

  001c0	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  001c3	89 45 9c	 mov	 DWORD PTR _result$[ebp], eax

; 977  :                 result.dotNum.y = row;

  001c6	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  001c9	89 4d a0	 mov	 DWORD PTR _result$[ebp+4], ecx

; 978  :                 result.vertical = true;

  001cc	c6 45 a4 01	 mov	 BYTE PTR _result$[ebp+8], 1

; 979  :                 result.moveType = moveType;

  001d0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  001d6	89 55 d0	 mov	 DWORD PTR _result$[ebp+52], edx
$LN11@TranslateS:

; 980  : //                finalCaptures = newCaptures;
; 981  : //              };
; 982  : //            };
; 983  :           };
; 984  :         };
; 985  :       };
; 986  :     };

  001d9	e9 de fe ff ff	 jmp	 $LN5@TranslateS
$LN6@TranslateS:

; 987  :   };

  001de	e9 bb fe ff ff	 jmp	 $LN2@TranslateS
$LN3@TranslateS:

; 988  :   if (result.dotNum.x == -1)

  001e3	83 7d 9c ff	 cmp	 DWORD PTR _result$[ebp], -1
  001e7	75 0d		 jne	 SHORT $LN14@TranslateS

; 989  :   {
; 990  :     ImplementationError("Cannot determine computer's move");

  001e9	68 00 00 00 00	 push	 OFFSET $SG226796
  001ee	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  001f3	83 c4 04	 add	 esp, 4
$LN14@TranslateS:

; 991  :   };
; 992  :   return result;

  001f6	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  001fb	8d 75 9c	 lea	 esi, DWORD PTR _result$[ebp]
  001fe	8d bd 10 eb ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
  00204	f3 a5		 rep movsd
  00206	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0020a	8d 8d 4c eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00210	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00215	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0021c	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00222	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00227	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0022c	8d b5 10 eb ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  00232	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  00235	f3 a5		 rep movsd
  00237	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]

; 993  : }

  0023a	52		 push	 edx
  0023b	8b cd		 mov	 ecx, ebp
  0023d	50		 push	 eax
  0023e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@TranslateS
  00244	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00249	58		 pop	 eax
  0024a	5a		 pop	 edx
  0024b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0024e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00255	59		 pop	 ecx
  00256	5f		 pop	 edi
  00257	5e		 pop	 esi
  00258	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0025b	33 cd		 xor	 ecx, ebp
  0025d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00262	81 c4 f8 14 00
	00		 add	 esp, 5368		; 000014f8H
  00268	3b ec		 cmp	 ebp, esp
  0026a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0026f	8b e5		 mov	 esp, ebp
  00271	5d		 pop	 ebp
  00272	c3		 ret	 0
  00273	90		 npad	 1
$LN24@TranslateS:
  00274	04 00 00 00	 DD	 4
  00278	00 00 00 00	 DD	 $LN23@TranslateS
$LN23@TranslateS:
  0027c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00280	08 00 00 00	 DD	 8
  00284	00 00 00 00	 DD	 $LN18@TranslateS
  00288	9c ff ff ff	 DD	 -100			; ffffff9cH
  0028c	38 00 00 00	 DD	 56			; 00000038H
  00290	00 00 00 00	 DD	 $LN19@TranslateS
  00294	84 eb ff ff	 DD	 -5244			; ffffeb84H
  00298	10 14 00 00	 DD	 5136			; 00001410H
  0029c	00 00 00 00	 DD	 $LN20@TranslateS
  002a0	4c eb ff ff	 DD	 -5300			; ffffeb4cH
  002a4	30 00 00 00	 DD	 48			; 00000030H
  002a8	00 00 00 00	 DD	 $LN21@TranslateS
$LN21@TranslateS:
  002ac	64		 DB	 100			; 00000064H
  002ad	62		 DB	 98			; 00000062H
  002ae	00		 DB	 0
$LN20@TranslateS:
  002af	63		 DB	 99			; 00000063H
  002b0	6f		 DB	 111			; 0000006fH
  002b1	6e		 DB	 110			; 0000006eH
  002b2	00		 DB	 0
$LN19@TranslateS:
  002b3	72		 DB	 114			; 00000072H
  002b4	65		 DB	 101			; 00000065H
  002b5	73		 DB	 115			; 00000073H
  002b6	75		 DB	 117			; 00000075H
  002b7	6c		 DB	 108			; 0000006cH
  002b8	74		 DB	 116			; 00000074H
  002b9	00		 DB	 0
$LN18@TranslateS:
  002ba	73		 DB	 115			; 00000073H
  002bb	69		 DB	 105			; 00000069H
  002bc	7a		 DB	 122			; 0000007aH
  002bd	65		 DB	 101			; 00000065H
  002be	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0:
  00000	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
__unwindfunclet$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$1:
  0000b	8d 8d 4c eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 08 eb ff
	ff		 mov	 ecx, DWORD PTR [edx-5368]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TranslateSimpleMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ENDP ; TranslateSimpleMove
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
$T2 = -5380						; size = 8
$T3 = -5372						; size = 56
_db$ = -5312						; size = 48
_finalCaptures$ = -5260					; size = 4
_newCaptures$ = -5256					; size = 4
_initialCaptures$ = -5252				; size = 4
_con$ = -5244						; size = 5136
_result$ = -100						; size = 56
_size$ = -36						; size = 8
_col$ = -24						; size = 4
_row$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddress$ = 8					; size = 4
_pGame$ = 12						; size = 4
_computerMove$ = 16					; size = 4
?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z PROC ; TranslateSimpleWinCapture

; 844  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 f8 14 00 00	 mov	 eax, 5368		; 000014f8H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d bd fc ea ff
	ff		 lea	 edi, DWORD PTR [ebp-5380]
  00023	b9 3e 05 00 00	 mov	 ecx, 1342		; 0000053eH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 845  :   int row, col;
; 846  :   POINT size;
; 847  :   MOVE result;

  00043	8d 4d 9c	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 848  :   CON con;

  0004b	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00051	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 849  :   int initialCaptures, newCaptures;
; 850  :   int finalCaptures = 999999;

  0005d	c7 85 74 eb ff
	ff 3f 42 0f 00	 mov	 DWORD PTR _finalCaptures$[ebp], 999999 ; 000f423fH

; 851  :   size = pGame->Size();

  00067	8d 85 fc ea ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00071	e8 00 00 00 00	 call	 ?Size@DOTS_AND_BOXES@@QBE?AUtagPOINT@@XZ ; DOTS_AND_BOXES::Size
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0007b	89 4d dc	 mov	 DWORD PTR _size$[ebp], ecx
  0007e	89 55 e0	 mov	 DWORD PTR _size$[ebp+4], edx

; 852  :   DOTS_AND_BOXES db(size.x, size.y);

  00081	8b 45 e0	 mov	 eax, DWORD PTR _size$[ebp+4]
  00084	50		 push	 eax
  00085	8b 4d dc	 mov	 ecx, DWORD PTR _size$[ebp]
  00088	51		 push	 ecx
  00089	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0008f	e8 00 00 00 00	 call	 ??0DOTS_AND_BOXES@@QAE@HH@Z ; DOTS_AND_BOXES::DOTS_AND_BOXES
  00094	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 853  :   db = *pGame;

  00098	8b 55 0c	 mov	 edx, DWORD PTR _pGame$[ebp]
  0009b	52		 push	 edx
  0009c	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  000a2	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 854  :   initialCaptures = db.CountCapturables();

  000a7	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  000ad	e8 00 00 00 00	 call	 ?CountCapturables@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::CountCapturables
  000b2	89 85 7c eb ff
	ff		 mov	 DWORD PTR _initialCaptures$[ebp], eax

; 855  :   result.dotNum.x = -1;

  000b8	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _result$[ebp], -1

; 856  :   for (row=0; row<size.y; row++)

  000bf	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  000c6	eb 09		 jmp	 SHORT $LN4@TranslateS
$LN2@TranslateS:
  000c8	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  000cb	83 c0 01	 add	 eax, 1
  000ce	89 45 ec	 mov	 DWORD PTR _row$[ebp], eax
$LN4@TranslateS:
  000d1	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  000d4	3b 4d e0	 cmp	 ecx, DWORD PTR _size$[ebp+4]
  000d7	0f 8d c8 01 00
	00		 jge	 $LN3@TranslateS

; 857  :   {
; 858  :     for (col=0; col<size.x; col++)

  000dd	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  000e4	eb 09		 jmp	 SHORT $LN7@TranslateS
$LN5@TranslateS:
  000e6	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  000e9	83 c2 01	 add	 edx, 1
  000ec	89 55 e8	 mov	 DWORD PTR _col$[ebp], edx
$LN7@TranslateS:
  000ef	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  000f2	3b 45 dc	 cmp	 eax, DWORD PTR _size$[ebp]
  000f5	0f 8d a5 01 00
	00		 jge	 $LN6@TranslateS

; 859  :     {
; 860  :       if (col < size.x-1)

  000fb	8b 4d dc	 mov	 ecx, DWORD PTR _size$[ebp]
  000fe	83 e9 01	 sub	 ecx, 1
  00101	39 4d e8	 cmp	 DWORD PTR _col$[ebp], ecx
  00104	0f 8d c1 00 00
	00		 jge	 $LN8@TranslateS

; 861  :       {
; 862  :         if (pGame->HLineType(col,row) == LINE_NONE)

  0010a	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  0010d	52		 push	 edx
  0010e	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00111	50		 push	 eax
  00112	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00115	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  0011a	85 c0		 test	 eax, eax
  0011c	0f 85 a9 00 00
	00		 jne	 $LN8@TranslateS

; 863  :         {
; 864  :           db = *pGame;

  00122	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00125	51		 push	 ecx
  00126	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0012c	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 865  :           db.SetHLineType(col,row,LINE_COMPUTER);

  00131	6a 01		 push	 1
  00133	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00136	52		 push	 edx
  00137	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  0013a	50		 push	 eax
  0013b	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00141	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType

; 866  :           newCaptures = db.CountCapturables();

  00146	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0014c	e8 00 00 00 00	 call	 ?CountCapturables@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::CountCapturables
  00151	89 85 78 eb ff
	ff		 mov	 DWORD PTR _newCaptures$[ebp], eax

; 867  :           db.RemoveCapturables();

  00157	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0015d	e8 00 00 00 00	 call	 ?RemoveCapturables@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::RemoveCapturables

; 868  :           con = db;

  00162	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00168	51		 push	 ecx
  00169	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0016f	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 869  :           if (con == *computerMove)

  00174	8b 55 10	 mov	 edx, DWORD PTR _computerMove$[ebp]
  00177	52		 push	 edx
  00178	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0017e	e8 00 00 00 00	 call	 ??8CON@@QBE_NABV0@@Z	; CON::operator==
  00183	0f b6 c0	 movzx	 eax, al
  00186	85 c0		 test	 eax, eax
  00188	74 41		 je	 SHORT $LN8@TranslateS

; 870  :           {
; 871  :             if (newCaptures <= initialCaptures)

  0018a	8b 8d 78 eb ff
	ff		 mov	 ecx, DWORD PTR _newCaptures$[ebp]
  00190	3b 8d 7c eb ff
	ff		 cmp	 ecx, DWORD PTR _initialCaptures$[ebp]
  00196	7f 33		 jg	 SHORT $LN8@TranslateS

; 872  :             {
; 873  :               if (newCaptures <= finalCaptures)

  00198	8b 95 78 eb ff
	ff		 mov	 edx, DWORD PTR _newCaptures$[ebp]
  0019e	3b 95 74 eb ff
	ff		 cmp	 edx, DWORD PTR _finalCaptures$[ebp]
  001a4	7f 25		 jg	 SHORT $LN8@TranslateS

; 874  :               {
; 875  :                 result.dotNum.x = col;

  001a6	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  001a9	89 45 9c	 mov	 DWORD PTR _result$[ebp], eax

; 876  :                 result.dotNum.y = row;

  001ac	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  001af	89 4d a0	 mov	 DWORD PTR _result$[ebp+4], ecx

; 877  :                 result.vertical = false;

  001b2	c6 45 a4 00	 mov	 BYTE PTR _result$[ebp+8], 0

; 878  :                 result.moveType = moveType;

  001b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  001bc	89 55 d0	 mov	 DWORD PTR _result$[ebp+52], edx

; 879  :                 finalCaptures = newCaptures;

  001bf	8b 85 78 eb ff
	ff		 mov	 eax, DWORD PTR _newCaptures$[ebp]
  001c5	89 85 74 eb ff
	ff		 mov	 DWORD PTR _finalCaptures$[ebp], eax
$LN8@TranslateS:

; 880  :               };
; 881  :             };
; 882  :           };
; 883  :         };
; 884  :       };
; 885  :       if (row < size.y-1)

  001cb	8b 4d e0	 mov	 ecx, DWORD PTR _size$[ebp+4]
  001ce	83 e9 01	 sub	 ecx, 1
  001d1	39 4d ec	 cmp	 DWORD PTR _row$[ebp], ecx
  001d4	0f 8d c1 00 00
	00		 jge	 $LN13@TranslateS

; 886  :       {
; 887  :         if (pGame->VLineType(col,row) == LINE_NONE)

  001da	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  001dd	52		 push	 edx
  001de	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  001e1	50		 push	 eax
  001e2	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  001e5	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  001ea	85 c0		 test	 eax, eax
  001ec	0f 85 a9 00 00
	00		 jne	 $LN13@TranslateS

; 888  :         {
; 889  :           db = *pGame;

  001f2	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  001f5	51		 push	 ecx
  001f6	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  001fc	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 890  :           db.SetVLineType(col,row,LINE_COMPUTER);

  00201	6a 01		 push	 1
  00203	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00206	52		 push	 edx
  00207	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  0020a	50		 push	 eax
  0020b	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00211	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType

; 891  :           newCaptures = db.CountCapturables();

  00216	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0021c	e8 00 00 00 00	 call	 ?CountCapturables@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::CountCapturables
  00221	89 85 78 eb ff
	ff		 mov	 DWORD PTR _newCaptures$[ebp], eax

; 892  :           db.RemoveCapturables();

  00227	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0022d	e8 00 00 00 00	 call	 ?RemoveCapturables@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::RemoveCapturables

; 893  :           con = db;

  00232	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00238	51		 push	 ecx
  00239	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0023f	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 894  :           if (con == *computerMove)

  00244	8b 55 10	 mov	 edx, DWORD PTR _computerMove$[ebp]
  00247	52		 push	 edx
  00248	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0024e	e8 00 00 00 00	 call	 ??8CON@@QBE_NABV0@@Z	; CON::operator==
  00253	0f b6 c0	 movzx	 eax, al
  00256	85 c0		 test	 eax, eax
  00258	74 41		 je	 SHORT $LN13@TranslateS

; 895  :           {
; 896  :             if (newCaptures <= initialCaptures)

  0025a	8b 8d 78 eb ff
	ff		 mov	 ecx, DWORD PTR _newCaptures$[ebp]
  00260	3b 8d 7c eb ff
	ff		 cmp	 ecx, DWORD PTR _initialCaptures$[ebp]
  00266	7f 33		 jg	 SHORT $LN13@TranslateS

; 897  :             {
; 898  :               if (newCaptures <= finalCaptures)

  00268	8b 95 78 eb ff
	ff		 mov	 edx, DWORD PTR _newCaptures$[ebp]
  0026e	3b 95 74 eb ff
	ff		 cmp	 edx, DWORD PTR _finalCaptures$[ebp]
  00274	7f 25		 jg	 SHORT $LN13@TranslateS

; 899  :               {
; 900  :                 result.dotNum.x = col;

  00276	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00279	89 45 9c	 mov	 DWORD PTR _result$[ebp], eax

; 901  :                 result.dotNum.y = row;

  0027c	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  0027f	89 4d a0	 mov	 DWORD PTR _result$[ebp+4], ecx

; 902  :                 result.vertical = true;

  00282	c6 45 a4 01	 mov	 BYTE PTR _result$[ebp+8], 1

; 903  :                 result.moveType = moveType;

  00286	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  0028c	89 55 d0	 mov	 DWORD PTR _result$[ebp+52], edx

; 904  :                 finalCaptures = newCaptures;

  0028f	8b 85 78 eb ff
	ff		 mov	 eax, DWORD PTR _newCaptures$[ebp]
  00295	89 85 74 eb ff
	ff		 mov	 DWORD PTR _finalCaptures$[ebp], eax
$LN13@TranslateS:

; 905  :               };
; 906  :             };
; 907  :           };
; 908  :         };
; 909  :       };
; 910  :     };

  0029b	e9 46 fe ff ff	 jmp	 $LN5@TranslateS
$LN6@TranslateS:

; 911  :   };

  002a0	e9 23 fe ff ff	 jmp	 $LN2@TranslateS
$LN3@TranslateS:

; 912  :   if (result.dotNum.x == -1)

  002a5	83 7d 9c ff	 cmp	 DWORD PTR _result$[ebp], -1
  002a9	75 0d		 jne	 SHORT $LN18@TranslateS

; 913  :   {
; 914  :     ImplementationError("Cannot determine computer's move");

  002ab	68 00 00 00 00	 push	 OFFSET $SG226770
  002b0	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  002b5	83 c4 04	 add	 esp, 4
$LN18@TranslateS:

; 915  :   };
; 916  :   return result;

  002b8	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  002bd	8d 75 9c	 lea	 esi, DWORD PTR _result$[ebp]
  002c0	8d bd 04 eb ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
  002c6	f3 a5		 rep movsd
  002c8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002cc	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  002d2	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  002d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002de	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  002e4	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  002e9	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  002ee	8d b5 04 eb ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  002f4	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  002f7	f3 a5		 rep movsd
  002f9	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]

; 917  : }

  002fc	52		 push	 edx
  002fd	8b cd		 mov	 ecx, ebp
  002ff	50		 push	 eax
  00300	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@TranslateS
  00306	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0030b	58		 pop	 eax
  0030c	5a		 pop	 edx
  0030d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00310	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00317	59		 pop	 ecx
  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031d	33 cd		 xor	 ecx, ebp
  0031f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00324	81 c4 04 15 00
	00		 add	 esp, 5380		; 00001504H
  0032a	3b ec		 cmp	 ebp, esp
  0032c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00331	8b e5		 mov	 esp, ebp
  00333	5d		 pop	 ebp
  00334	c3		 ret	 0
  00335	0f 1f 00	 npad	 3
$LN28@TranslateS:
  00338	04 00 00 00	 DD	 4
  0033c	00 00 00 00	 DD	 $LN27@TranslateS
$LN27@TranslateS:
  00340	dc ff ff ff	 DD	 -36			; ffffffdcH
  00344	08 00 00 00	 DD	 8
  00348	00 00 00 00	 DD	 $LN22@TranslateS
  0034c	9c ff ff ff	 DD	 -100			; ffffff9cH
  00350	38 00 00 00	 DD	 56			; 00000038H
  00354	00 00 00 00	 DD	 $LN23@TranslateS
  00358	84 eb ff ff	 DD	 -5244			; ffffeb84H
  0035c	10 14 00 00	 DD	 5136			; 00001410H
  00360	00 00 00 00	 DD	 $LN24@TranslateS
  00364	40 eb ff ff	 DD	 -5312			; ffffeb40H
  00368	30 00 00 00	 DD	 48			; 00000030H
  0036c	00 00 00 00	 DD	 $LN25@TranslateS
$LN25@TranslateS:
  00370	64		 DB	 100			; 00000064H
  00371	62		 DB	 98			; 00000062H
  00372	00		 DB	 0
$LN24@TranslateS:
  00373	63		 DB	 99			; 00000063H
  00374	6f		 DB	 111			; 0000006fH
  00375	6e		 DB	 110			; 0000006eH
  00376	00		 DB	 0
$LN23@TranslateS:
  00377	72		 DB	 114			; 00000072H
  00378	65		 DB	 101			; 00000065H
  00379	73		 DB	 115			; 00000073H
  0037a	75		 DB	 117			; 00000075H
  0037b	6c		 DB	 108			; 0000006cH
  0037c	74		 DB	 116			; 00000074H
  0037d	00		 DB	 0
$LN22@TranslateS:
  0037e	73		 DB	 115			; 00000073H
  0037f	69		 DB	 105			; 00000069H
  00380	7a		 DB	 122			; 0000007aH
  00381	65		 DB	 101			; 00000065H
  00382	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0:
  00000	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
__unwindfunclet$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$1:
  0000b	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a fc ea ff
	ff		 mov	 ecx, DWORD PTR [edx-5380]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TranslateSimpleWinCapture@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ENDP ; TranslateSimpleWinCapture
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
$T2 = -5380						; size = 8
$T3 = -5372						; size = 56
_db$ = -5312						; size = 48
_finalCaptures$ = -5260					; size = 4
_newCaptures$ = -5256					; size = 4
_initialCaptures$ = -5252				; size = 4
_con$ = -5244						; size = 5136
_result$ = -100						; size = 56
_size$ = -36						; size = 8
_col$ = -24						; size = 4
_row$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddress$ = 8					; size = 4
_pGame$ = 12						; size = 4
_computerMove$ = 16					; size = 4
?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z PROC ; TranslateSimpleWinDecline

; 768  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 f8 14 00 00	 mov	 eax, 5368		; 000014f8H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d bd fc ea ff
	ff		 lea	 edi, DWORD PTR [ebp-5380]
  00023	b9 3e 05 00 00	 mov	 ecx, 1342		; 0000053eH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 769  :   int row, col;
; 770  :   POINT size;
; 771  :   MOVE result;

  00043	8d 4d 9c	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 772  :   CON con;

  0004b	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00051	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 773  :   int initialCaptures, newCaptures;
; 774  :   int finalCaptures = -1;

  0005d	c7 85 74 eb ff
	ff ff ff ff ff	 mov	 DWORD PTR _finalCaptures$[ebp], -1

; 775  :   size = pGame->Size();

  00067	8d 85 fc ea ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00071	e8 00 00 00 00	 call	 ?Size@DOTS_AND_BOXES@@QBE?AUtagPOINT@@XZ ; DOTS_AND_BOXES::Size
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0007b	89 4d dc	 mov	 DWORD PTR _size$[ebp], ecx
  0007e	89 55 e0	 mov	 DWORD PTR _size$[ebp+4], edx

; 776  :   DOTS_AND_BOXES db(size.x, size.y);

  00081	8b 45 e0	 mov	 eax, DWORD PTR _size$[ebp+4]
  00084	50		 push	 eax
  00085	8b 4d dc	 mov	 ecx, DWORD PTR _size$[ebp]
  00088	51		 push	 ecx
  00089	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0008f	e8 00 00 00 00	 call	 ??0DOTS_AND_BOXES@@QAE@HH@Z ; DOTS_AND_BOXES::DOTS_AND_BOXES
  00094	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 777  :   db = *pGame;

  00098	8b 55 0c	 mov	 edx, DWORD PTR _pGame$[ebp]
  0009b	52		 push	 edx
  0009c	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  000a2	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 778  :   initialCaptures = db.CountCapturables();

  000a7	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  000ad	e8 00 00 00 00	 call	 ?CountCapturables@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::CountCapturables
  000b2	89 85 7c eb ff
	ff		 mov	 DWORD PTR _initialCaptures$[ebp], eax

; 779  :   result.dotNum.x = -1;

  000b8	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _result$[ebp], -1

; 780  :   for (row=0; row<size.y; row++)

  000bf	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  000c6	eb 09		 jmp	 SHORT $LN4@TranslateS
$LN2@TranslateS:
  000c8	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  000cb	83 c0 01	 add	 eax, 1
  000ce	89 45 ec	 mov	 DWORD PTR _row$[ebp], eax
$LN4@TranslateS:
  000d1	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  000d4	3b 4d e0	 cmp	 ecx, DWORD PTR _size$[ebp+4]
  000d7	0f 8d c8 01 00
	00		 jge	 $LN3@TranslateS

; 781  :   {
; 782  :     for (col=0; col<size.x; col++)

  000dd	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  000e4	eb 09		 jmp	 SHORT $LN7@TranslateS
$LN5@TranslateS:
  000e6	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  000e9	83 c2 01	 add	 edx, 1
  000ec	89 55 e8	 mov	 DWORD PTR _col$[ebp], edx
$LN7@TranslateS:
  000ef	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  000f2	3b 45 dc	 cmp	 eax, DWORD PTR _size$[ebp]
  000f5	0f 8d a5 01 00
	00		 jge	 $LN6@TranslateS

; 783  :     {
; 784  :       if (col < size.x-1)

  000fb	8b 4d dc	 mov	 ecx, DWORD PTR _size$[ebp]
  000fe	83 e9 01	 sub	 ecx, 1
  00101	39 4d e8	 cmp	 DWORD PTR _col$[ebp], ecx
  00104	0f 8d c1 00 00
	00		 jge	 $LN8@TranslateS

; 785  :       {
; 786  :         if (pGame->HLineType(col,row) == LINE_NONE)

  0010a	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  0010d	52		 push	 edx
  0010e	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00111	50		 push	 eax
  00112	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00115	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  0011a	85 c0		 test	 eax, eax
  0011c	0f 85 a9 00 00
	00		 jne	 $LN8@TranslateS

; 787  :         {
; 788  :           db = *pGame;

  00122	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00125	51		 push	 ecx
  00126	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0012c	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 789  :           db.SetHLineType(col,row,LINE_COMPUTER);

  00131	6a 01		 push	 1
  00133	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00136	52		 push	 edx
  00137	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  0013a	50		 push	 eax
  0013b	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00141	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType

; 790  :           newCaptures = db.CountCapturables();

  00146	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0014c	e8 00 00 00 00	 call	 ?CountCapturables@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::CountCapturables
  00151	89 85 78 eb ff
	ff		 mov	 DWORD PTR _newCaptures$[ebp], eax

; 791  :           db.RemoveCapturables();

  00157	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0015d	e8 00 00 00 00	 call	 ?RemoveCapturables@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::RemoveCapturables

; 792  :           con = db;

  00162	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00168	51		 push	 ecx
  00169	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0016f	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 793  :           if (con == *computerMove)

  00174	8b 55 10	 mov	 edx, DWORD PTR _computerMove$[ebp]
  00177	52		 push	 edx
  00178	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0017e	e8 00 00 00 00	 call	 ??8CON@@QBE_NABV0@@Z	; CON::operator==
  00183	0f b6 c0	 movzx	 eax, al
  00186	85 c0		 test	 eax, eax
  00188	74 41		 je	 SHORT $LN8@TranslateS

; 794  :           {
; 795  :             if (newCaptures >= initialCaptures)

  0018a	8b 8d 78 eb ff
	ff		 mov	 ecx, DWORD PTR _newCaptures$[ebp]
  00190	3b 8d 7c eb ff
	ff		 cmp	 ecx, DWORD PTR _initialCaptures$[ebp]
  00196	7c 33		 jl	 SHORT $LN8@TranslateS

; 796  :             {
; 797  :               if (newCaptures > finalCaptures)

  00198	8b 95 78 eb ff
	ff		 mov	 edx, DWORD PTR _newCaptures$[ebp]
  0019e	3b 95 74 eb ff
	ff		 cmp	 edx, DWORD PTR _finalCaptures$[ebp]
  001a4	7e 25		 jle	 SHORT $LN8@TranslateS

; 798  :               {
; 799  :                 result.dotNum.x = col;

  001a6	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  001a9	89 45 9c	 mov	 DWORD PTR _result$[ebp], eax

; 800  :                 result.dotNum.y = row;

  001ac	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  001af	89 4d a0	 mov	 DWORD PTR _result$[ebp+4], ecx

; 801  :                 result.vertical = false;

  001b2	c6 45 a4 00	 mov	 BYTE PTR _result$[ebp+8], 0

; 802  :                 result.moveType = moveType;

  001b6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  001bc	89 55 d0	 mov	 DWORD PTR _result$[ebp+52], edx

; 803  :                 finalCaptures = newCaptures;

  001bf	8b 85 78 eb ff
	ff		 mov	 eax, DWORD PTR _newCaptures$[ebp]
  001c5	89 85 74 eb ff
	ff		 mov	 DWORD PTR _finalCaptures$[ebp], eax
$LN8@TranslateS:

; 804  :               };
; 805  :             };
; 806  :           };
; 807  :         };
; 808  :       };
; 809  :       if (row < size.y-1)

  001cb	8b 4d e0	 mov	 ecx, DWORD PTR _size$[ebp+4]
  001ce	83 e9 01	 sub	 ecx, 1
  001d1	39 4d ec	 cmp	 DWORD PTR _row$[ebp], ecx
  001d4	0f 8d c1 00 00
	00		 jge	 $LN13@TranslateS

; 810  :       {
; 811  :         if (pGame->VLineType(col,row) == LINE_NONE)

  001da	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  001dd	52		 push	 edx
  001de	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  001e1	50		 push	 eax
  001e2	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  001e5	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  001ea	85 c0		 test	 eax, eax
  001ec	0f 85 a9 00 00
	00		 jne	 $LN13@TranslateS

; 812  :         {
; 813  :           db = *pGame;

  001f2	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  001f5	51		 push	 ecx
  001f6	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  001fc	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 814  :           db.SetVLineType(col,row,LINE_COMPUTER);

  00201	6a 01		 push	 1
  00203	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00206	52		 push	 edx
  00207	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  0020a	50		 push	 eax
  0020b	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00211	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType

; 815  :           newCaptures = db.CountCapturables();

  00216	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0021c	e8 00 00 00 00	 call	 ?CountCapturables@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::CountCapturables
  00221	89 85 78 eb ff
	ff		 mov	 DWORD PTR _newCaptures$[ebp], eax

; 816  :           db.RemoveCapturables();

  00227	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0022d	e8 00 00 00 00	 call	 ?RemoveCapturables@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::RemoveCapturables

; 817  :           con = db;

  00232	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00238	51		 push	 ecx
  00239	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0023f	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 818  :           if (con == *computerMove)

  00244	8b 55 10	 mov	 edx, DWORD PTR _computerMove$[ebp]
  00247	52		 push	 edx
  00248	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0024e	e8 00 00 00 00	 call	 ??8CON@@QBE_NABV0@@Z	; CON::operator==
  00253	0f b6 c0	 movzx	 eax, al
  00256	85 c0		 test	 eax, eax
  00258	74 41		 je	 SHORT $LN13@TranslateS

; 819  :           {
; 820  :             if (newCaptures >= initialCaptures)

  0025a	8b 8d 78 eb ff
	ff		 mov	 ecx, DWORD PTR _newCaptures$[ebp]
  00260	3b 8d 7c eb ff
	ff		 cmp	 ecx, DWORD PTR _initialCaptures$[ebp]
  00266	7c 33		 jl	 SHORT $LN13@TranslateS

; 821  :             {
; 822  :               if (newCaptures > finalCaptures)

  00268	8b 95 78 eb ff
	ff		 mov	 edx, DWORD PTR _newCaptures$[ebp]
  0026e	3b 95 74 eb ff
	ff		 cmp	 edx, DWORD PTR _finalCaptures$[ebp]
  00274	7e 25		 jle	 SHORT $LN13@TranslateS

; 823  :               {
; 824  :                 result.dotNum.x = col;

  00276	8b 45 e8	 mov	 eax, DWORD PTR _col$[ebp]
  00279	89 45 9c	 mov	 DWORD PTR _result$[ebp], eax

; 825  :                 result.dotNum.y = row;

  0027c	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  0027f	89 4d a0	 mov	 DWORD PTR _result$[ebp+4], ecx

; 826  :                 result.vertical = true;

  00282	c6 45 a4 01	 mov	 BYTE PTR _result$[ebp+8], 1

; 827  :                 result.moveType = moveType;

  00286	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  0028c	89 55 d0	 mov	 DWORD PTR _result$[ebp+52], edx

; 828  :                 finalCaptures = newCaptures;

  0028f	8b 85 78 eb ff
	ff		 mov	 eax, DWORD PTR _newCaptures$[ebp]
  00295	89 85 74 eb ff
	ff		 mov	 DWORD PTR _finalCaptures$[ebp], eax
$LN13@TranslateS:

; 829  :               };
; 830  :             };
; 831  :           };
; 832  :         };
; 833  :       };
; 834  :     };

  0029b	e9 46 fe ff ff	 jmp	 $LN5@TranslateS
$LN6@TranslateS:

; 835  :   };

  002a0	e9 23 fe ff ff	 jmp	 $LN2@TranslateS
$LN3@TranslateS:

; 836  :   if (result.dotNum.x == -1)

  002a5	83 7d 9c ff	 cmp	 DWORD PTR _result$[ebp], -1
  002a9	75 0d		 jne	 SHORT $LN18@TranslateS

; 837  :   {
; 838  :     ImplementationError("Cannot determine computer's move");

  002ab	68 00 00 00 00	 push	 OFFSET $SG226737
  002b0	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  002b5	83 c4 04	 add	 esp, 4
$LN18@TranslateS:

; 839  :   };
; 840  :   return result;

  002b8	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  002bd	8d 75 9c	 lea	 esi, DWORD PTR _result$[ebp]
  002c0	8d bd 04 eb ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
  002c6	f3 a5		 rep movsd
  002c8	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002cc	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  002d2	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  002d7	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002de	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  002e4	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  002e9	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  002ee	8d b5 04 eb ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  002f4	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  002f7	f3 a5		 rep movsd
  002f9	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]

; 841  : }

  002fc	52		 push	 edx
  002fd	8b cd		 mov	 ecx, ebp
  002ff	50		 push	 eax
  00300	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@TranslateS
  00306	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0030b	58		 pop	 eax
  0030c	5a		 pop	 edx
  0030d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00310	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00317	59		 pop	 ecx
  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0031d	33 cd		 xor	 ecx, ebp
  0031f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00324	81 c4 04 15 00
	00		 add	 esp, 5380		; 00001504H
  0032a	3b ec		 cmp	 ebp, esp
  0032c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00331	8b e5		 mov	 esp, ebp
  00333	5d		 pop	 ebp
  00334	c3		 ret	 0
  00335	0f 1f 00	 npad	 3
$LN28@TranslateS:
  00338	04 00 00 00	 DD	 4
  0033c	00 00 00 00	 DD	 $LN27@TranslateS
$LN27@TranslateS:
  00340	dc ff ff ff	 DD	 -36			; ffffffdcH
  00344	08 00 00 00	 DD	 8
  00348	00 00 00 00	 DD	 $LN22@TranslateS
  0034c	9c ff ff ff	 DD	 -100			; ffffff9cH
  00350	38 00 00 00	 DD	 56			; 00000038H
  00354	00 00 00 00	 DD	 $LN23@TranslateS
  00358	84 eb ff ff	 DD	 -5244			; ffffeb84H
  0035c	10 14 00 00	 DD	 5136			; 00001410H
  00360	00 00 00 00	 DD	 $LN24@TranslateS
  00364	40 eb ff ff	 DD	 -5312			; ffffeb40H
  00368	30 00 00 00	 DD	 48			; 00000030H
  0036c	00 00 00 00	 DD	 $LN25@TranslateS
$LN25@TranslateS:
  00370	64		 DB	 100			; 00000064H
  00371	62		 DB	 98			; 00000062H
  00372	00		 DB	 0
$LN24@TranslateS:
  00373	63		 DB	 99			; 00000063H
  00374	6f		 DB	 111			; 0000006fH
  00375	6e		 DB	 110			; 0000006eH
  00376	00		 DB	 0
$LN23@TranslateS:
  00377	72		 DB	 114			; 00000072H
  00378	65		 DB	 101			; 00000065H
  00379	73		 DB	 115			; 00000073H
  0037a	75		 DB	 117			; 00000075H
  0037b	6c		 DB	 108			; 0000006cH
  0037c	74		 DB	 116			; 00000074H
  0037d	00		 DB	 0
$LN22@TranslateS:
  0037e	73		 DB	 115			; 00000073H
  0037f	69		 DB	 105			; 00000069H
  00380	7a		 DB	 122			; 0000007aH
  00381	65		 DB	 101			; 00000065H
  00382	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0:
  00000	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
__unwindfunclet$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$1:
  0000b	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a fc ea ff
	ff		 mov	 ecx, DWORD PTR [edx-5380]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TranslateSimpleWinDecline@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ENDP ; TranslateSimpleWinDecline
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
$T2 = -5380						; size = 8
$T3 = -5372						; size = 56
_db$ = -5312						; size = 48
_finalCaptures$ = -5260					; size = 4
_newCaptures$ = -5256					; size = 4
_initialCaptures$ = -5252				; size = 4
_con$ = -5244						; size = 5136
_result$ = -100						; size = 56
_size$ = -36						; size = 8
_col$ = -24						; size = 4
_row$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddress$ = 8					; size = 4
_pGame$ = 12						; size = 4
_computerMove$ = 16					; size = 4
?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z PROC ; TranslateSimpleWin

; 693  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 f8 14 00 00	 mov	 eax, 5368		; 000014f8H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	8d bd fc ea ff
	ff		 lea	 edi, DWORD PTR [ebp-5380]
  00023	b9 3e 05 00 00	 mov	 ecx, 1342		; 0000053eH
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00034	33 c5		 xor	 eax, ebp
  00036	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00039	50		 push	 eax
  0003a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 694  :   int row, col;
; 695  :   POINT size;
; 696  :   MOVE result;

  00043	8d 4d 9c	 lea	 ecx, DWORD PTR _result$[ebp]
  00046	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 697  :   CON con;

  0004b	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00051	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00056	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 698  :   int initialCaptures, newCaptures;
; 699  :   int finalCaptures = -1;

  0005d	c7 85 74 eb ff
	ff ff ff ff ff	 mov	 DWORD PTR _finalCaptures$[ebp], -1

; 700  :   result.dotNum.x = -1;

  00067	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _result$[ebp], -1

; 701  :   size = pGame->Size();

  0006e	8d 85 fc ea ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00074	50		 push	 eax
  00075	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00078	e8 00 00 00 00	 call	 ?Size@DOTS_AND_BOXES@@QBE?AUtagPOINT@@XZ ; DOTS_AND_BOXES::Size
  0007d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00082	89 4d dc	 mov	 DWORD PTR _size$[ebp], ecx
  00085	89 55 e0	 mov	 DWORD PTR _size$[ebp+4], edx

; 702  :   DOTS_AND_BOXES db(size.x, size.y);

  00088	8b 45 e0	 mov	 eax, DWORD PTR _size$[ebp+4]
  0008b	50		 push	 eax
  0008c	8b 4d dc	 mov	 ecx, DWORD PTR _size$[ebp]
  0008f	51		 push	 ecx
  00090	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00096	e8 00 00 00 00	 call	 ??0DOTS_AND_BOXES@@QAE@HH@Z ; DOTS_AND_BOXES::DOTS_AND_BOXES
  0009b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 703  :   initialCaptures = pGame->CountCapturables();

  0009f	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  000a2	e8 00 00 00 00	 call	 ?CountCapturables@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::CountCapturables
  000a7	89 85 7c eb ff
	ff		 mov	 DWORD PTR _initialCaptures$[ebp], eax

; 704  :   for (row=0; row<size.y; row++)

  000ad	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  000b4	eb 09		 jmp	 SHORT $LN4@TranslateS
$LN2@TranslateS:
  000b6	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  000b9	83 c2 01	 add	 edx, 1
  000bc	89 55 ec	 mov	 DWORD PTR _row$[ebp], edx
$LN4@TranslateS:
  000bf	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  000c2	3b 45 e0	 cmp	 eax, DWORD PTR _size$[ebp+4]
  000c5	0f 8d c8 01 00
	00		 jge	 $LN3@TranslateS

; 705  :   {
; 706  :     for (col=0; col<size.x; col++)

  000cb	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  000d2	eb 09		 jmp	 SHORT $LN7@TranslateS
$LN5@TranslateS:
  000d4	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  000d7	83 c1 01	 add	 ecx, 1
  000da	89 4d e8	 mov	 DWORD PTR _col$[ebp], ecx
$LN7@TranslateS:
  000dd	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  000e0	3b 55 dc	 cmp	 edx, DWORD PTR _size$[ebp]
  000e3	0f 8d a5 01 00
	00		 jge	 $LN6@TranslateS

; 707  :     {
; 708  :       if (col < size.x-1)

  000e9	8b 45 dc	 mov	 eax, DWORD PTR _size$[ebp]
  000ec	83 e8 01	 sub	 eax, 1
  000ef	39 45 e8	 cmp	 DWORD PTR _col$[ebp], eax
  000f2	0f 8d c1 00 00
	00		 jge	 $LN8@TranslateS

; 709  :       {
; 710  :         if (pGame->HLineType(col,row) == LINE_NONE)

  000f8	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  000fb	51		 push	 ecx
  000fc	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  000ff	52		 push	 edx
  00100	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00103	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  00108	85 c0		 test	 eax, eax
  0010a	0f 85 a9 00 00
	00		 jne	 $LN8@TranslateS

; 711  :         {
; 712  :           db = *pGame;

  00110	8b 45 0c	 mov	 eax, DWORD PTR _pGame$[ebp]
  00113	50		 push	 eax
  00114	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0011a	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 713  :           db.SetHLineType(col,row,LINE_COMPUTER);

  0011f	6a 01		 push	 1
  00121	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  00124	51		 push	 ecx
  00125	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  00128	52		 push	 edx
  00129	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0012f	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType

; 714  :           newCaptures = db.CountCapturables();

  00134	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0013a	e8 00 00 00 00	 call	 ?CountCapturables@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::CountCapturables
  0013f	89 85 78 eb ff
	ff		 mov	 DWORD PTR _newCaptures$[ebp], eax

; 715  :           db.RemoveCapturables();

  00145	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0014b	e8 00 00 00 00	 call	 ?RemoveCapturables@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::RemoveCapturables

; 716  :           con = db;

  00150	8d 85 40 eb ff
	ff		 lea	 eax, DWORD PTR _db$[ebp]
  00156	50		 push	 eax
  00157	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0015d	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 717  :           if (con == *computerMove)

  00162	8b 4d 10	 mov	 ecx, DWORD PTR _computerMove$[ebp]
  00165	51		 push	 ecx
  00166	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0016c	e8 00 00 00 00	 call	 ??8CON@@QBE_NABV0@@Z	; CON::operator==
  00171	0f b6 d0	 movzx	 edx, al
  00174	85 d2		 test	 edx, edx
  00176	74 41		 je	 SHORT $LN8@TranslateS

; 718  :           {
; 719  :             if (newCaptures >= initialCaptures)

  00178	8b 85 78 eb ff
	ff		 mov	 eax, DWORD PTR _newCaptures$[ebp]
  0017e	3b 85 7c eb ff
	ff		 cmp	 eax, DWORD PTR _initialCaptures$[ebp]
  00184	7c 33		 jl	 SHORT $LN8@TranslateS

; 720  :             {
; 721  :               if (newCaptures > finalCaptures)

  00186	8b 8d 78 eb ff
	ff		 mov	 ecx, DWORD PTR _newCaptures$[ebp]
  0018c	3b 8d 74 eb ff
	ff		 cmp	 ecx, DWORD PTR _finalCaptures$[ebp]
  00192	7e 25		 jle	 SHORT $LN8@TranslateS

; 722  :               {
; 723  :                 result.dotNum.x = col;

  00194	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  00197	89 55 9c	 mov	 DWORD PTR _result$[ebp], edx

; 724  :                 result.dotNum.y = row;

  0019a	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  0019d	89 45 a0	 mov	 DWORD PTR _result$[ebp+4], eax

; 725  :                 result.vertical = false;

  001a0	c6 45 a4 00	 mov	 BYTE PTR _result$[ebp+8], 0

; 726  :                 result.moveType = moveType;

  001a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  001aa	89 4d d0	 mov	 DWORD PTR _result$[ebp+52], ecx

; 727  :                 finalCaptures = newCaptures;

  001ad	8b 95 78 eb ff
	ff		 mov	 edx, DWORD PTR _newCaptures$[ebp]
  001b3	89 95 74 eb ff
	ff		 mov	 DWORD PTR _finalCaptures$[ebp], edx
$LN8@TranslateS:

; 728  :               };
; 729  :             };
; 730  :           };
; 731  :         };
; 732  :       };
; 733  :       if (row < size.y-1)

  001b9	8b 45 e0	 mov	 eax, DWORD PTR _size$[ebp+4]
  001bc	83 e8 01	 sub	 eax, 1
  001bf	39 45 ec	 cmp	 DWORD PTR _row$[ebp], eax
  001c2	0f 8d c1 00 00
	00		 jge	 $LN13@TranslateS

; 734  :       {
; 735  :         if (pGame->VLineType(col,row) == LINE_NONE)

  001c8	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  001cb	51		 push	 ecx
  001cc	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  001cf	52		 push	 edx
  001d0	8b 4d 0c	 mov	 ecx, DWORD PTR _pGame$[ebp]
  001d3	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  001d8	85 c0		 test	 eax, eax
  001da	0f 85 a9 00 00
	00		 jne	 $LN13@TranslateS

; 736  :         {
; 737  :           db = *pGame;

  001e0	8b 45 0c	 mov	 eax, DWORD PTR _pGame$[ebp]
  001e3	50		 push	 eax
  001e4	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  001ea	e8 00 00 00 00	 call	 ??4DOTS_AND_BOXES@@QAEAAV0@ABV0@@Z ; DOTS_AND_BOXES::operator=

; 738  :           db.SetVLineType(col,row,LINE_COMPUTER);

  001ef	6a 01		 push	 1
  001f1	8b 4d ec	 mov	 ecx, DWORD PTR _row$[ebp]
  001f4	51		 push	 ecx
  001f5	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  001f8	52		 push	 edx
  001f9	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  001ff	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType

; 739  :           newCaptures = db.CountCapturables();

  00204	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0020a	e8 00 00 00 00	 call	 ?CountCapturables@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::CountCapturables
  0020f	89 85 78 eb ff
	ff		 mov	 DWORD PTR _newCaptures$[ebp], eax

; 740  :           db.RemoveCapturables();

  00215	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  0021b	e8 00 00 00 00	 call	 ?RemoveCapturables@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::RemoveCapturables

; 741  :           con = db;

  00220	8d 85 40 eb ff
	ff		 lea	 eax, DWORD PTR _db$[ebp]
  00226	50		 push	 eax
  00227	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0022d	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 742  :           if (con == *computerMove)

  00232	8b 4d 10	 mov	 ecx, DWORD PTR _computerMove$[ebp]
  00235	51		 push	 ecx
  00236	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0023c	e8 00 00 00 00	 call	 ??8CON@@QBE_NABV0@@Z	; CON::operator==
  00241	0f b6 d0	 movzx	 edx, al
  00244	85 d2		 test	 edx, edx
  00246	74 41		 je	 SHORT $LN13@TranslateS

; 743  :           {
; 744  :             if (newCaptures >= initialCaptures)

  00248	8b 85 78 eb ff
	ff		 mov	 eax, DWORD PTR _newCaptures$[ebp]
  0024e	3b 85 7c eb ff
	ff		 cmp	 eax, DWORD PTR _initialCaptures$[ebp]
  00254	7c 33		 jl	 SHORT $LN13@TranslateS

; 745  :             {
; 746  :               if (newCaptures > finalCaptures)

  00256	8b 8d 78 eb ff
	ff		 mov	 ecx, DWORD PTR _newCaptures$[ebp]
  0025c	3b 8d 74 eb ff
	ff		 cmp	 ecx, DWORD PTR _finalCaptures$[ebp]
  00262	7e 25		 jle	 SHORT $LN13@TranslateS

; 747  :               {
; 748  :                 result.dotNum.x = col;

  00264	8b 55 e8	 mov	 edx, DWORD PTR _col$[ebp]
  00267	89 55 9c	 mov	 DWORD PTR _result$[ebp], edx

; 749  :                 result.dotNum.y = row;

  0026a	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  0026d	89 45 a0	 mov	 DWORD PTR _result$[ebp+4], eax

; 750  :                 result.vertical = true;

  00270	c6 45 a4 01	 mov	 BYTE PTR _result$[ebp+8], 1

; 751  :                 result.moveType = moveType;

  00274	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  0027a	89 4d d0	 mov	 DWORD PTR _result$[ebp+52], ecx

; 752  :                 finalCaptures = newCaptures;

  0027d	8b 95 78 eb ff
	ff		 mov	 edx, DWORD PTR _newCaptures$[ebp]
  00283	89 95 74 eb ff
	ff		 mov	 DWORD PTR _finalCaptures$[ebp], edx
$LN13@TranslateS:

; 753  :               };
; 754  :             };
; 755  :           };
; 756  :         };
; 757  :       };
; 758  :     };

  00289	e9 46 fe ff ff	 jmp	 $LN5@TranslateS
$LN6@TranslateS:

; 759  :   };

  0028e	e9 23 fe ff ff	 jmp	 $LN2@TranslateS
$LN3@TranslateS:

; 760  :   if (result.dotNum.x == -1)

  00293	83 7d 9c ff	 cmp	 DWORD PTR _result$[ebp], -1
  00297	75 0d		 jne	 SHORT $LN18@TranslateS

; 761  :   {
; 762  :     ImplementationError("Cannot determine computer's move");

  00299	68 00 00 00 00	 push	 OFFSET $SG226704
  0029e	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  002a3	83 c4 04	 add	 esp, 4
$LN18@TranslateS:

; 763  :   };
; 764  :   return result;

  002a6	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  002ab	8d 75 9c	 lea	 esi, DWORD PTR _result$[ebp]
  002ae	8d bd 04 eb ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
  002b4	f3 a5		 rep movsd
  002b6	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  002ba	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  002c0	e8 00 00 00 00	 call	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  002c5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  002cc	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  002d2	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  002d7	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  002dc	8d b5 04 eb ff
	ff		 lea	 esi, DWORD PTR $T3[ebp]
  002e2	8b 7d 08	 mov	 edi, DWORD PTR __$ReturnAddress$[ebp]
  002e5	f3 a5		 rep movsd
  002e7	8b 45 08	 mov	 eax, DWORD PTR __$ReturnAddress$[ebp]

; 765  : }

  002ea	52		 push	 edx
  002eb	8b cd		 mov	 ecx, ebp
  002ed	50		 push	 eax
  002ee	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@TranslateS
  002f4	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002f9	58		 pop	 eax
  002fa	5a		 pop	 edx
  002fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00305	59		 pop	 ecx
  00306	5f		 pop	 edi
  00307	5e		 pop	 esi
  00308	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0030b	33 cd		 xor	 ecx, ebp
  0030d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00312	81 c4 04 15 00
	00		 add	 esp, 5380		; 00001504H
  00318	3b ec		 cmp	 ebp, esp
  0031a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0031f	8b e5		 mov	 esp, ebp
  00321	5d		 pop	 ebp
  00322	c3		 ret	 0
  00323	90		 npad	 1
$LN28@TranslateS:
  00324	04 00 00 00	 DD	 4
  00328	00 00 00 00	 DD	 $LN27@TranslateS
$LN27@TranslateS:
  0032c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00330	08 00 00 00	 DD	 8
  00334	00 00 00 00	 DD	 $LN22@TranslateS
  00338	9c ff ff ff	 DD	 -100			; ffffff9cH
  0033c	38 00 00 00	 DD	 56			; 00000038H
  00340	00 00 00 00	 DD	 $LN23@TranslateS
  00344	84 eb ff ff	 DD	 -5244			; ffffeb84H
  00348	10 14 00 00	 DD	 5136			; 00001410H
  0034c	00 00 00 00	 DD	 $LN24@TranslateS
  00350	40 eb ff ff	 DD	 -5312			; ffffeb40H
  00354	30 00 00 00	 DD	 48			; 00000030H
  00358	00 00 00 00	 DD	 $LN25@TranslateS
$LN25@TranslateS:
  0035c	64		 DB	 100			; 00000064H
  0035d	62		 DB	 98			; 00000062H
  0035e	00		 DB	 0
$LN24@TranslateS:
  0035f	63		 DB	 99			; 00000063H
  00360	6f		 DB	 111			; 0000006fH
  00361	6e		 DB	 110			; 0000006eH
  00362	00		 DB	 0
$LN23@TranslateS:
  00363	72		 DB	 114			; 00000072H
  00364	65		 DB	 101			; 00000065H
  00365	73		 DB	 115			; 00000073H
  00366	75		 DB	 117			; 00000075H
  00367	6c		 DB	 108			; 0000006cH
  00368	74		 DB	 116			; 00000074H
  00369	00		 DB	 0
$LN22@TranslateS:
  0036a	73		 DB	 115			; 00000073H
  0036b	69		 DB	 105			; 00000069H
  0036c	7a		 DB	 122			; 0000007aH
  0036d	65		 DB	 101			; 00000065H
  0036e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$0:
  00000	8d 8d 84 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
__unwindfunclet$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z$1:
  0000b	8d 8d 40 eb ff
	ff		 lea	 ecx, DWORD PTR _db$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1DOTS_AND_BOXES@@QAE@XZ ; DOTS_AND_BOXES::~DOTS_AND_BOXES
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a fc ea ff
	ff		 mov	 ecx, DWORD PTR [edx-5380]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TranslateSimpleWin@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@PBVCON@@@Z ENDP ; TranslateSimpleWin
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_temp$1 = -28						; size = 4
_temp$2 = -24						; size = 4
_j$3 = -20						; size = 4
_k$ = -16						; size = 4
_j$ = -12						; size = 4
_ns$ = -8						; size = 4
_i$ = -4						; size = 4
_weights$ = 8						; size = 4
_rank$ = 12						; size = 4
_num$ = 16						; size = 4
?FormRanks@@YAXPAH0H@Z PROC				; FormRanks

; 155  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax

; 156  :   //Arrange so largest weight comes first.
; 157  :   int i, ns, j, k;
; 158  :   for (i=0; i<num; i++)

  00021	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00028	eb 09		 jmp	 SHORT $LN4@FormRanks
$LN2@FormRanks:
  0002a	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0002d	83 c0 01	 add	 eax, 1
  00030	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN4@FormRanks:
  00033	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00036	3b 4d 10	 cmp	 ecx, DWORD PTR _num$[ebp]
  00039	7d 0e		 jge	 SHORT $LN3@FormRanks

; 159  :   {
; 160  :     rank[i] = i;

  0003b	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  0003e	8b 45 0c	 mov	 eax, DWORD PTR _rank$[ebp]
  00041	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00044	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 161  :   };

  00047	eb e1		 jmp	 SHORT $LN2@FormRanks
$LN3@FormRanks:

; 162  :   //Shuffle so that after the sort lines with the same weight
; 163  :   //are arranged at random.
; 164  :   for (i=num-1; i>0; i--)

  00049	8b 55 10	 mov	 edx, DWORD PTR _num$[ebp]
  0004c	83 ea 01	 sub	 edx, 1
  0004f	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
  00052	eb 09		 jmp	 SHORT $LN7@FormRanks
$LN5@FormRanks:
  00054	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00057	83 e8 01	 sub	 eax, 1
  0005a	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN7@FormRanks:
  0005d	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00061	7e 3e		 jle	 SHORT $LN6@FormRanks

; 165  :   {
; 166  :     int j, temp;
; 167  :     j = MyRandom(i+1);

  00063	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00066	83 c1 01	 add	 ecx, 1
  00069	51		 push	 ecx
  0006a	e8 00 00 00 00	 call	 ?MyRandom@@YAII@Z	; MyRandom
  0006f	83 c4 04	 add	 esp, 4
  00072	89 45 ec	 mov	 DWORD PTR _j$3[ebp], eax

; 168  :     temp = rank[j];

  00075	8b 55 ec	 mov	 edx, DWORD PTR _j$3[ebp]
  00078	8b 45 0c	 mov	 eax, DWORD PTR _rank$[ebp]
  0007b	8b 0c 90	 mov	 ecx, DWORD PTR [eax+edx*4]
  0007e	89 4d e8	 mov	 DWORD PTR _temp$2[ebp], ecx

; 169  :     rank[j] = rank[i];

  00081	8b 55 ec	 mov	 edx, DWORD PTR _j$3[ebp]
  00084	8b 45 0c	 mov	 eax, DWORD PTR _rank$[ebp]
  00087	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0008a	8b 75 0c	 mov	 esi, DWORD PTR _rank$[ebp]
  0008d	8b 0c 8e	 mov	 ecx, DWORD PTR [esi+ecx*4]
  00090	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 170  :     rank[i] = temp;

  00093	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00096	8b 45 0c	 mov	 eax, DWORD PTR _rank$[ebp]
  00099	8b 4d e8	 mov	 ecx, DWORD PTR _temp$2[ebp]
  0009c	89 0c 90	 mov	 DWORD PTR [eax+edx*4], ecx

; 171  :   };

  0009f	eb b3		 jmp	 SHORT $LN5@FormRanks
$LN6@FormRanks:

; 172  :   for (ns=num/2; ns>0; ns/=2)

  000a1	8b 45 10	 mov	 eax, DWORD PTR _num$[ebp]
  000a4	99		 cdq
  000a5	2b c2		 sub	 eax, edx
  000a7	d1 f8		 sar	 eax, 1
  000a9	89 45 f8	 mov	 DWORD PTR _ns$[ebp], eax
  000ac	eb 0b		 jmp	 SHORT $LN10@FormRanks
$LN8@FormRanks:
  000ae	8b 45 f8	 mov	 eax, DWORD PTR _ns$[ebp]
  000b1	99		 cdq
  000b2	2b c2		 sub	 eax, edx
  000b4	d1 f8		 sar	 eax, 1
  000b6	89 45 f8	 mov	 DWORD PTR _ns$[ebp], eax
$LN10@FormRanks:
  000b9	83 7d f8 00	 cmp	 DWORD PTR _ns$[ebp], 0
  000bd	0f 8e b5 00 00
	00		 jle	 $LN1@FormRanks

; 173  :   {
; 174  :     for (i=0; i<ns; i++)

  000c3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000ca	eb 09		 jmp	 SHORT $LN13@FormRanks
$LN11@FormRanks:
  000cc	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000cf	83 c2 01	 add	 edx, 1
  000d2	89 55 fc	 mov	 DWORD PTR _i$[ebp], edx
$LN13@FormRanks:
  000d5	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000d8	3b 45 f8	 cmp	 eax, DWORD PTR _ns$[ebp]
  000db	0f 8d 92 00 00
	00		 jge	 $LN12@FormRanks

; 175  :     {
; 176  :       for (j=i; j<num-ns; j+=ns)

  000e1	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  000e4	89 4d f4	 mov	 DWORD PTR _j$[ebp], ecx
  000e7	eb 09		 jmp	 SHORT $LN16@FormRanks
$LN14@FormRanks:
  000e9	8b 55 f4	 mov	 edx, DWORD PTR _j$[ebp]
  000ec	03 55 f8	 add	 edx, DWORD PTR _ns$[ebp]
  000ef	89 55 f4	 mov	 DWORD PTR _j$[ebp], edx
$LN16@FormRanks:
  000f2	8b 45 10	 mov	 eax, DWORD PTR _num$[ebp]
  000f5	2b 45 f8	 sub	 eax, DWORD PTR _ns$[ebp]
  000f8	39 45 f4	 cmp	 DWORD PTR _j$[ebp], eax
  000fb	7d 71		 jge	 SHORT $LN15@FormRanks

; 177  :       {
; 178  :         for (k=j; (k>=0)&&(weights[rank[k]]<weights[rank[k+ns]]); k-=ns)

  000fd	8b 4d f4	 mov	 ecx, DWORD PTR _j$[ebp]
  00100	89 4d f0	 mov	 DWORD PTR _k$[ebp], ecx
  00103	eb 09		 jmp	 SHORT $LN19@FormRanks
$LN17@FormRanks:
  00105	8b 55 f0	 mov	 edx, DWORD PTR _k$[ebp]
  00108	2b 55 f8	 sub	 edx, DWORD PTR _ns$[ebp]
  0010b	89 55 f0	 mov	 DWORD PTR _k$[ebp], edx
$LN19@FormRanks:
  0010e	83 7d f0 00	 cmp	 DWORD PTR _k$[ebp], 0
  00112	7c 55		 jl	 SHORT $LN18@FormRanks
  00114	8b 45 f0	 mov	 eax, DWORD PTR _k$[ebp]
  00117	8b 4d 0c	 mov	 ecx, DWORD PTR _rank$[ebp]
  0011a	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0011d	8b 45 f0	 mov	 eax, DWORD PTR _k$[ebp]
  00120	03 45 f8	 add	 eax, DWORD PTR _ns$[ebp]
  00123	8b 4d 0c	 mov	 ecx, DWORD PTR _rank$[ebp]
  00126	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00129	8b 4d 08	 mov	 ecx, DWORD PTR _weights$[ebp]
  0012c	8b 75 08	 mov	 esi, DWORD PTR _weights$[ebp]
  0012f	8b 14 91	 mov	 edx, DWORD PTR [ecx+edx*4]
  00132	3b 14 86	 cmp	 edx, DWORD PTR [esi+eax*4]
  00135	7d 32		 jge	 SHORT $LN18@FormRanks

; 179  :         {
; 180  :           int temp;
; 181  :           temp = rank[k];

  00137	8b 45 f0	 mov	 eax, DWORD PTR _k$[ebp]
  0013a	8b 4d 0c	 mov	 ecx, DWORD PTR _rank$[ebp]
  0013d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00140	89 55 e4	 mov	 DWORD PTR _temp$1[ebp], edx

; 182  :           rank[k] = rank[k+ns];

  00143	8b 45 f0	 mov	 eax, DWORD PTR _k$[ebp]
  00146	03 45 f8	 add	 eax, DWORD PTR _ns$[ebp]
  00149	8b 4d f0	 mov	 ecx, DWORD PTR _k$[ebp]
  0014c	8b 55 0c	 mov	 edx, DWORD PTR _rank$[ebp]
  0014f	8b 75 0c	 mov	 esi, DWORD PTR _rank$[ebp]
  00152	8b 04 86	 mov	 eax, DWORD PTR [esi+eax*4]
  00155	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 183  :           rank[k+ns] = temp;

  00158	8b 4d f0	 mov	 ecx, DWORD PTR _k$[ebp]
  0015b	03 4d f8	 add	 ecx, DWORD PTR _ns$[ebp]
  0015e	8b 55 0c	 mov	 edx, DWORD PTR _rank$[ebp]
  00161	8b 45 e4	 mov	 eax, DWORD PTR _temp$1[ebp]
  00164	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 184  :         };

  00167	eb 9c		 jmp	 SHORT $LN17@FormRanks
$LN18@FormRanks:

; 185  :       };

  00169	e9 7b ff ff ff	 jmp	 $LN14@FormRanks
$LN15@FormRanks:

; 186  :     };

  0016e	e9 59 ff ff ff	 jmp	 $LN11@FormRanks
$LN12@FormRanks:

; 187  :   };

  00173	e9 36 ff ff ff	 jmp	 $LN8@FormRanks
$LN1@FormRanks:

; 188  : }

  00178	5e		 pop	 esi
  00179	83 c4 1c	 add	 esp, 28			; 0000001cH
  0017c	3b ec		 cmp	 ebp, esp
  0017e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00183	8b e5		 mov	 esp, ebp
  00185	5d		 pop	 ebp
  00186	c3		 ret	 0
?FormRanks@@YAXPAH0H@Z ENDP				; FormRanks
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_n$ = -520						; size = 4
_height$ = -516						; size = 4
_width$ = -512						; size = 4
_numPossibleMove$ = -508				; size = 4
_col$ = -504						; size = 4
_row$ = -500						; size = 4
_possibleMoves$ = -492					; size = 482
__$ArrayPad$ = -4					; size = 4
_pGame$ = 8						; size = 4
?ComputerMoveRandom@@YAXPAVDOTS_AND_BOXES@@@Z PROC	; ComputerMoveRandom

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 02 00
	00		 sub	 esp, 520		; 00000208H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd f8 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-520]
  00011	b9 82 00 00 00	 mov	 ecx, 130		; 00000082H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 40   :   ui16 possibleMoves[MAX_HEIGHT*(MAX_WIDTH-1)+MAX_WIDTH*(MAX_HEIGHT-1)];
; 41   :   int row, col;
; 42   :   int numPossibleMove = 0;

  00027	c7 85 04 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _numPossibleMove$[ebp], 0

; 43   :   int width, height;
; 44   :   int n;
; 45   :   width = pGame->Width();

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00034	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00039	89 85 00 fe ff
	ff		 mov	 DWORD PTR _width$[ebp], eax

; 46   :   height = pGame->Height();

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00042	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  00047	89 85 fc fd ff
	ff		 mov	 DWORD PTR _height$[ebp], eax

; 47   :   //computerMove = 0;
; 48   :   for (col=0; col<width; col++)

  0004d	c7 85 08 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _col$[ebp], 0
  00057	eb 0f		 jmp	 SHORT $LN4@ComputerMo
$LN2@ComputerMo:
  00059	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _col$[ebp]
  0005f	83 c0 01	 add	 eax, 1
  00062	89 85 08 fe ff
	ff		 mov	 DWORD PTR _col$[ebp], eax
$LN4@ComputerMo:
  00068	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _col$[ebp]
  0006e	3b 8d 00 fe ff
	ff		 cmp	 ecx, DWORD PTR _width$[ebp]
  00074	0f 8d ff 00 00
	00		 jge	 $LN3@ComputerMo

; 49   :   {
; 50   :     for (row=0; row<height; row++)

  0007a	c7 85 0c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _row$[ebp], 0
  00084	eb 0f		 jmp	 SHORT $LN7@ComputerMo
$LN5@ComputerMo:
  00086	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _row$[ebp]
  0008c	83 c2 01	 add	 edx, 1
  0008f	89 95 0c fe ff
	ff		 mov	 DWORD PTR _row$[ebp], edx
$LN7@ComputerMo:
  00095	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _row$[ebp]
  0009b	3b 85 fc fd ff
	ff		 cmp	 eax, DWORD PTR _height$[ebp]
  000a1	0f 8d cd 00 00
	00		 jge	 $LN6@ComputerMo

; 51   :     {
; 52   :       //Check horizontal line.
; 53   :       if (col < width-1)

  000a7	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _width$[ebp]
  000ad	83 e9 01	 sub	 ecx, 1
  000b0	39 8d 08 fe ff
	ff		 cmp	 DWORD PTR _col$[ebp], ecx
  000b6	7d 4e		 jge	 SHORT $LN8@ComputerMo

; 54   :       {
; 55   :         if (pGame->HLineType(col, row) == LINE_NONE)

  000b8	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR _row$[ebp]
  000be	52		 push	 edx
  000bf	8b 85 08 fe ff
	ff		 mov	 eax, DWORD PTR _col$[ebp]
  000c5	50		 push	 eax
  000c6	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  000c9	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  000ce	85 c0		 test	 eax, eax
  000d0	75 34		 jne	 SHORT $LN8@ComputerMo

; 56   :         {
; 57   :           possibleMoves[numPossibleMove++] = (ui16)(col + row*(2*width-1));

  000d2	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _width$[ebp]
  000d8	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  000dc	0f af 95 0c fe
	ff ff		 imul	 edx, DWORD PTR _row$[ebp]
  000e3	03 95 08 fe ff
	ff		 add	 edx, DWORD PTR _col$[ebp]
  000e9	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _numPossibleMove$[ebp]
  000ef	66 89 94 45 14
	fe ff ff	 mov	 WORD PTR _possibleMoves$[ebp+eax*2], dx
  000f7	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _numPossibleMove$[ebp]
  000fd	83 c1 01	 add	 ecx, 1
  00100	89 8d 04 fe ff
	ff		 mov	 DWORD PTR _numPossibleMove$[ebp], ecx
$LN8@ComputerMo:

; 58   :         };
; 59   :       };
; 60   :       //Check vertical line.
; 61   :       if (row < height-1)

  00106	8b 95 fc fd ff
	ff		 mov	 edx, DWORD PTR _height$[ebp]
  0010c	83 ea 01	 sub	 edx, 1
  0010f	39 95 0c fe ff
	ff		 cmp	 DWORD PTR _row$[ebp], edx
  00115	7d 58		 jge	 SHORT $LN10@ComputerMo

; 62   :       {
; 63   :         if (pGame->VLineType(col, row) == LINE_NONE)

  00117	8b 85 0c fe ff
	ff		 mov	 eax, DWORD PTR _row$[ebp]
  0011d	50		 push	 eax
  0011e	8b 8d 08 fe ff
	ff		 mov	 ecx, DWORD PTR _col$[ebp]
  00124	51		 push	 ecx
  00125	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00128	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  0012d	85 c0		 test	 eax, eax
  0012f	75 3e		 jne	 SHORT $LN10@ComputerMo

; 64   :         {
; 65   :           possibleMoves[numPossibleMove++] = (ui16)(col + row*(2*width-1)+width-1);

  00131	8b 95 00 fe ff
	ff		 mov	 edx, DWORD PTR _width$[ebp]
  00137	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  0013b	0f af 85 0c fe
	ff ff		 imul	 eax, DWORD PTR _row$[ebp]
  00142	03 85 08 fe ff
	ff		 add	 eax, DWORD PTR _col$[ebp]
  00148	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _width$[ebp]
  0014e	8d 54 08 ff	 lea	 edx, DWORD PTR [eax+ecx-1]
  00152	8b 85 04 fe ff
	ff		 mov	 eax, DWORD PTR _numPossibleMove$[ebp]
  00158	66 89 94 45 14
	fe ff ff	 mov	 WORD PTR _possibleMoves$[ebp+eax*2], dx
  00160	8b 8d 04 fe ff
	ff		 mov	 ecx, DWORD PTR _numPossibleMove$[ebp]
  00166	83 c1 01	 add	 ecx, 1
  00169	89 8d 04 fe ff
	ff		 mov	 DWORD PTR _numPossibleMove$[ebp], ecx
$LN10@ComputerMo:

; 66   :         };
; 67   :       };
; 68   :     };

  0016f	e9 12 ff ff ff	 jmp	 $LN5@ComputerMo
$LN6@ComputerMo:

; 69   :   };

  00174	e9 e0 fe ff ff	 jmp	 $LN2@ComputerMo
$LN3@ComputerMo:

; 70   :   if (numPossibleMove == 0)

  00179	83 bd 04 fe ff
	ff 00		 cmp	 DWORD PTR _numPossibleMove$[ebp], 0
  00180	75 22		 jne	 SHORT $LN12@ComputerMo

; 71   :   {
; 72   :     MessageBox(NULL,"Asked to find move.  None exist.","Error",MB_OK);

  00182	8b f4		 mov	 esi, esp
  00184	6a 00		 push	 0
  00186	68 00 00 00 00	 push	 OFFSET $SG226409
  0018b	68 00 00 00 00	 push	 OFFSET $SG226410
  00190	6a 00		 push	 0
  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  00198	3b f4		 cmp	 esi, esp
  0019a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 73   : //    computerMove = -1;
; 74   :     return;

  0019f	e9 99 00 00 00	 jmp	 $LN1@ComputerMo
$LN12@ComputerMo:

; 75   :   };
; 76   :   n = pDoc->MyRandom(numPossibleMove);

  001a4	8b 95 04 fe ff
	ff		 mov	 edx, DWORD PTR _numPossibleMove$[ebp]
  001aa	52		 push	 edx
  001ab	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  001b1	e8 00 00 00 00	 call	 ?MyRandom@CNewBoxesDoc@@QAEII@Z ; CNewBoxesDoc::MyRandom
  001b6	89 85 f8 fd ff
	ff		 mov	 DWORD PTR _n$[ebp], eax

; 77   :   computerMoveDB.dotNum.y = (possibleMoves[n])/(2*width-1);

  001bc	8b 85 f8 fd ff
	ff		 mov	 eax, DWORD PTR _n$[ebp]
  001c2	0f b7 84 45 14
	fe ff ff	 movzx	 eax, WORD PTR _possibleMoves$[ebp+eax*2]
  001ca	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _width$[ebp]
  001d0	8d 4c 09 ff	 lea	 ecx, DWORD PTR [ecx+ecx-1]
  001d4	99		 cdq
  001d5	f7 f9		 idiv	 ecx
  001d7	a3 04 00 00 00	 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A+4, eax

; 78   :   computerMoveDB.dotNum.x = (possibleMoves[n])%(2*width-1);

  001dc	8b 95 f8 fd ff
	ff		 mov	 edx, DWORD PTR _n$[ebp]
  001e2	0f b7 84 55 14
	fe ff ff	 movzx	 eax, WORD PTR _possibleMoves$[ebp+edx*2]
  001ea	8b 8d 00 fe ff
	ff		 mov	 ecx, DWORD PTR _width$[ebp]
  001f0	8d 4c 09 ff	 lea	 ecx, DWORD PTR [ecx+ecx-1]
  001f4	99		 cdq
  001f5	f7 f9		 idiv	 ecx
  001f7	89 15 00 00 00
	00		 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, edx

; 79   :   computerMoveDB.vertical = false;

  001fd	c6 05 08 00 00
	00 00		 mov	 BYTE PTR ?computerMoveDB@@3UMOVE@@A+8, 0

; 80   :   if (computerMoveDB.dotNum.x >= width-1)

  00204	8b 95 00 fe ff
	ff		 mov	 edx, DWORD PTR _width$[ebp]
  0020a	83 ea 01	 sub	 edx, 1
  0020d	39 15 00 00 00
	00		 cmp	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, edx
  00213	7c 1e		 jl	 SHORT $LN13@ComputerMo

; 81   :   {
; 82   :     computerMoveDB.dotNum.x -= width-1;

  00215	8b 85 00 fe ff
	ff		 mov	 eax, DWORD PTR _width$[ebp]
  0021b	83 e8 01	 sub	 eax, 1
  0021e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?computerMoveDB@@3UMOVE@@A
  00224	2b c8		 sub	 ecx, eax
  00226	89 0d 00 00 00
	00		 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, ecx

; 83   :     computerMoveDB.vertical = true;

  0022c	c6 05 08 00 00
	00 01		 mov	 BYTE PTR ?computerMoveDB@@3UMOVE@@A+8, 1
$LN13@ComputerMo:

; 84   :   };
; 85   :   moveType = MT_RANDOM;

  00233	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 1 ; moveType
$LN1@ComputerMo:

; 86   : }

  0023d	52		 push	 edx
  0023e	8b cd		 mov	 ecx, ebp
  00240	50		 push	 eax
  00241	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@ComputerMo
  00247	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0024c	58		 pop	 eax
  0024d	5a		 pop	 edx
  0024e	5f		 pop	 edi
  0024f	5e		 pop	 esi
  00250	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00253	33 cd		 xor	 ecx, ebp
  00255	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0025a	81 c4 08 02 00
	00		 add	 esp, 520		; 00000208H
  00260	3b ec		 cmp	 ebp, esp
  00262	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00267	8b e5		 mov	 esp, ebp
  00269	5d		 pop	 ebp
  0026a	c3		 ret	 0
  0026b	90		 npad	 1
$LN17@ComputerMo:
  0026c	01 00 00 00	 DD	 1
  00270	00 00 00 00	 DD	 $LN16@ComputerMo
$LN16@ComputerMo:
  00274	14 fe ff ff	 DD	 -492			; fffffe14H
  00278	e2 01 00 00	 DD	 482			; 000001e2H
  0027c	00 00 00 00	 DD	 $LN15@ComputerMo
$LN15@ComputerMo:
  00280	70		 DB	 112			; 00000070H
  00281	6f		 DB	 111			; 0000006fH
  00282	73		 DB	 115			; 00000073H
  00283	73		 DB	 115			; 00000073H
  00284	69		 DB	 105			; 00000069H
  00285	62		 DB	 98			; 00000062H
  00286	6c		 DB	 108			; 0000006cH
  00287	65		 DB	 101			; 00000065H
  00288	4d		 DB	 77			; 0000004dH
  00289	6f		 DB	 111			; 0000006fH
  0028a	76		 DB	 118			; 00000076H
  0028b	65		 DB	 101			; 00000065H
  0028c	73		 DB	 115			; 00000073H
  0028d	00		 DB	 0
?ComputerMoveRandom@@YAXPAVDOTS_AND_BOXES@@@Z ENDP	; ComputerMoveRandom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
;	COMDAT ??__EcomputerMoveDB@@YAXXZ
text$di	SEGMENT
??__EcomputerMoveDB@@YAXXZ PROC				; `dynamic initializer for 'computerMoveDB'', COMDAT

; 25   : MOVE computerMoveDB;

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?computerMoveDB@@3UMOVE@@A ; computerMoveDB
  00008	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??__EcomputerMoveDB@@YAXXZ ENDP				; `dynamic initializer for 'computerMoveDB''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__FcomputerMove@@YAXXZ
text$yd	SEGMENT
??__FcomputerMove@@YAXXZ PROC				; `dynamic atexit destructor for 'computerMove'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A ; computerMove
  00008	e8 00 00 00 00	 call	 ??1PossibleMove@@QAE@XZ
  0000d	3b ec		 cmp	 ebp, esp
  0000f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
??__FcomputerMove@@YAXXZ ENDP				; `dynamic atexit destructor for 'computerMove''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
;	COMDAT ??__EcomputerMove@@YAXXZ
text$di	SEGMENT
??__EcomputerMove@@YAXXZ PROC				; `dynamic initializer for 'computerMove'', COMDAT

; 24   : PossibleMove computerMove; //The position following computer's move.

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	b9 00 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A ; computerMove
  00008	e8 00 00 00 00	 call	 ??0PossibleMove@@QAE@XZ
  0000d	68 00 00 00 00	 push	 OFFSET ??__FcomputerMove@@YAXXZ ; `dynamic atexit destructor for 'computerMove''
  00012	e8 00 00 00 00	 call	 _atexit
  00017	83 c4 04	 add	 esp, 4
  0001a	3b ec		 cmp	 ebp, esp
  0001c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
??__EcomputerMove@@YAXXZ ENDP				; `dynamic initializer for 'computerMove''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
tv90 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_move$ = 8						; size = 4
??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z PROC			; PROCESS_FLASH::PROCESS_FLASH
; _this$ = ecx

; 2045 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	c7 45 ec cc cc
	cc cc		 mov	 DWORD PTR [ebp-20], -858993460 ; ccccccccH
  0001d	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00029	33 c5		 xor	 eax, ebp
  0002b	50		 push	 eax
  0002c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0002f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00035	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  00038	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	e8 00 00 00 00	 call	 ??0PROCESS@@QAE@XZ	; PROCESS::PROCESS
  00040	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00047	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0004a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PROCESS_FLASH@@6B@
  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	83 c1 08	 add	 ecx, 8
  00056	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 2046 :   m_move = move;

  0005b	8b 7d f0	 mov	 edi, DWORD PTR _this$[ebp]
  0005e	83 c7 08	 add	 edi, 8
  00061	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00066	8b 75 08	 mov	 esi, DWORD PTR _move$[ebp]
  00069	f3 a5		 rep movsd

; 2047 :   m_lineType = m_move.newLineType;

  0006b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0006e	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00071	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00074	89 41 44	 mov	 DWORD PTR [ecx+68], eax

; 2048 :   m_ownerType = (m_lineType==LINE_HUMAN)?OWNER_HUMAN:OWNER_COMPUTER;

  00077	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	83 79 44 02	 cmp	 DWORD PTR [ecx+68], 2
  0007e	75 09		 jne	 SHORT $LN3@PROCESS_FL
  00080	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv90[ebp], 1
  00087	eb 07		 jmp	 SHORT $LN4@PROCESS_FL
$LN3@PROCESS_FL:
  00089	c7 45 ec 02 00
	00 00		 mov	 DWORD PTR tv90[ebp], 2
$LN4@PROCESS_FL:
  00090	8b 55 f0	 mov	 edx, DWORD PTR _this$[ebp]
  00093	8b 45 ec	 mov	 eax, DWORD PTR tv90[ebp]
  00096	89 42 48	 mov	 DWORD PTR [edx+72], eax

; 2049 : }

  00099	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a0	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	83 c4 14	 add	 esp, 20			; 00000014H
  000b3	3b ec		 cmp	 ebp, esp
  000b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ba	8b e5		 mov	 esp, ebp
  000bc	5d		 pop	 ebp
  000bd	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1PROCESS@@QAE@XZ	; PROCESS::~PROCESS
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z ENDP			; PROCESS_FLASH::PROCESS_FLASH
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnShutdown@PROCESS_FLASH@@EAE?AW4STATUS@@XZ PROC	; PROCESS_FLASH::OnShutdown
; _this$ = ecx

; 2149 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2150 :   pDoc->VerticalLineType(m_move.dotNum, m_move.newLineType);

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00014	51		 push	 ecx
  00015	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00018	83 c2 08	 add	 edx, 8
  0001b	52		 push	 edx
  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00022	e8 00 00 00 00	 call	 ?VerticalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; CNewBoxesDoc::VerticalLineType

; 2151 :   pDoc->UpdateAllViews(NULL);

  00027	6a 00		 push	 0
  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00033	e8 00 00 00 00	 call	 ?UpdateAllViews@CDocument@@QAEXPAVCView@@JPAVCObject@@@Z ; CDocument::UpdateAllViews

; 2152 :   return STATUS_DONE;

  00038	b8 02 00 00 00	 mov	 eax, 2

; 2153 : }

  0003d	83 c4 04	 add	 esp, 4
  00040	3b ec		 cmp	 ebp, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	8b e5		 mov	 esp, ebp
  00049	5d		 pop	 ebp
  0004a	c3		 ret	 0
?OnShutdown@PROCESS_FLASH@@EAE?AW4STATUS@@XZ ENDP	; PROCESS_FLASH::OnShutdown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?OnTimer@PROCESS_FLASH@@EAE?AW4STATUS@@I@Z PROC		; PROCESS_FLASH::OnTimer
; _this$ = ecx

; 2076 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2077 :   if (m_flashCount == 0)

  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	83 78 40 00	 cmp	 DWORD PTR [eax+64], 0
  00015	0f 85 d9 00 00
	00		 jne	 $LN2@OnTimer

; 2078 :   {
; 2079 :     if (m_move.dotNum.x >= 0)

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00022	7c 3f		 jl	 SHORT $LN3@OnTimer

; 2080 :     {
; 2081 :       if (m_move.vertical)

  00024	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00027	0f b6 42 10	 movzx	 eax, BYTE PTR [edx+16]
  0002b	85 c0		 test	 eax, eax
  0002d	74 1b		 je	 SHORT $LN4@OnTimer

; 2082 :       {
; 2083 :         pDoc->VerticalLineType(m_move.dotNum, m_move.newLineType);

  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00032	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00035	52		 push	 edx
  00036	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00039	83 c0 08	 add	 eax, 8
  0003c	50		 push	 eax
  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00043	e8 00 00 00 00	 call	 ?VerticalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; CNewBoxesDoc::VerticalLineType

; 2084 :       }

  00048	eb 19		 jmp	 SHORT $LN3@OnTimer
$LN4@OnTimer:

; 2085 :       else
; 2086 :       {
; 2087 :         pDoc->HorizontalLineType(m_move.dotNum, m_move.newLineType);

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0004d	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00050	52		 push	 edx
  00051	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00054	83 c0 08	 add	 eax, 8
  00057	50		 push	 eax
  00058	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0005e	e8 00 00 00 00	 call	 ?HorizontalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; CNewBoxesDoc::HorizontalLineType
$LN3@OnTimer:

; 2088 :       };
; 2089 :     };
; 2090 :     if (m_move.boxesCaptured[0].x >= 0) pDoc->BoxOwner(m_move.boxesCaptured[0], m_move.newOwnerType[0]);

  00063	b9 08 00 00 00	 mov	 ecx, 8
  00068	6b d1 00	 imul	 edx, ecx, 0
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	83 7c 10 14 00	 cmp	 DWORD PTR [eax+edx+20], 0
  00073	7c 2b		 jl	 SHORT $LN6@OnTimer
  00075	b9 04 00 00 00	 mov	 ecx, 4
  0007a	6b d1 00	 imul	 edx, ecx, 0
  0007d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00080	8b 4c 10 2c	 mov	 ecx, DWORD PTR [eax+edx+44]
  00084	51		 push	 ecx
  00085	ba 08 00 00 00	 mov	 edx, 8
  0008a	6b c2 00	 imul	 eax, edx, 0
  0008d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00090	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00094	52		 push	 edx
  00095	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0009b	e8 00 00 00 00	 call	 ?BoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; CNewBoxesDoc::BoxOwner
$LN6@OnTimer:

; 2091 :     if (m_move.boxesCaptured[1].x >= 0) pDoc->BoxOwner(m_move.boxesCaptured[1], m_move.newOwnerType[1]);

  000a0	b8 08 00 00 00	 mov	 eax, 8
  000a5	c1 e0 00	 shl	 eax, 0
  000a8	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000ab	83 7c 01 14 00	 cmp	 DWORD PTR [ecx+eax+20], 0
  000b0	7c 2b		 jl	 SHORT $LN7@OnTimer
  000b2	ba 04 00 00 00	 mov	 edx, 4
  000b7	c1 e2 00	 shl	 edx, 0
  000ba	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000bd	8b 4c 10 2c	 mov	 ecx, DWORD PTR [eax+edx+44]
  000c1	51		 push	 ecx
  000c2	ba 08 00 00 00	 mov	 edx, 8
  000c7	c1 e2 00	 shl	 edx, 0
  000ca	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000cd	8d 4c 10 14	 lea	 ecx, DWORD PTR [eax+edx+20]
  000d1	51		 push	 ecx
  000d2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  000d8	e8 00 00 00 00	 call	 ?BoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; CNewBoxesDoc::BoxOwner
$LN7@OnTimer:

; 2092 :     INVALIDATE

  000dd	e8 00 00 00 00	 call	 ?InvalidateView@@YAXXZ	; InvalidateView

; 2093 :     PopProcess();

  000e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	e8 00 00 00 00	 call	 ?PopProcess@PROCESS@@IAEXXZ ; PROCESS::PopProcess

; 2094 :     return STATUS_DONE;

  000ea	b8 02 00 00 00	 mov	 eax, 2
  000ef	e9 ba 01 00 00	 jmp	 $LN1@OnTimer
$LN2@OnTimer:

; 2095 :   };
; 2096 :   m_flashCount--;

  000f4	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000f7	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  000fa	83 e8 01	 sub	 eax, 1
  000fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00100	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 2097 :   if (m_move.dotNum.x >= 0)

  00103	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00106	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0010a	0f 8c 8b 00 00
	00		 jl	 $LN8@OnTimer

; 2098 :   {
; 2099 :     if (m_move.vertical)

  00110	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00113	0f b6 48 10	 movzx	 ecx, BYTE PTR [eax+16]
  00117	85 c9		 test	 ecx, ecx
  00119	74 41		 je	 SHORT $LN9@OnTimer

; 2100 :     {
; 2101 :       if (m_flashCount & 2)

  0011b	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0011e	8b 42 40	 mov	 eax, DWORD PTR [edx+64]
  00121	83 e0 02	 and	 eax, 2
  00124	74 1b		 je	 SHORT $LN11@OnTimer

; 2102 :       {
; 2103 :         pDoc->VerticalLineType(m_move.dotNum, m_move.oldLineType);

  00126	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00129	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  0012c	52		 push	 edx
  0012d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00130	83 c0 08	 add	 eax, 8
  00133	50		 push	 eax
  00134	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0013a	e8 00 00 00 00	 call	 ?VerticalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; CNewBoxesDoc::VerticalLineType

; 2104 :       }

  0013f	eb 19		 jmp	 SHORT $LN12@OnTimer
$LN11@OnTimer:

; 2105 :       else
; 2106 :       {
; 2107 :         pDoc->VerticalLineType(m_move.dotNum, m_move.newLineType);

  00141	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00144	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00147	52		 push	 edx
  00148	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0014b	83 c0 08	 add	 eax, 8
  0014e	50		 push	 eax
  0014f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00155	e8 00 00 00 00	 call	 ?VerticalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; CNewBoxesDoc::VerticalLineType
$LN12@OnTimer:

; 2108 :       };
; 2109 :     }

  0015a	eb 3f		 jmp	 SHORT $LN8@OnTimer
$LN9@OnTimer:

; 2110 :     else
; 2111 :     {
; 2112 :       if (m_flashCount & 2)

  0015c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0015f	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00162	83 e2 02	 and	 edx, 2
  00165	74 1b		 je	 SHORT $LN13@OnTimer

; 2113 :       {
; 2114 :         pDoc->HorizontalLineType(m_move.dotNum, m_move.oldLineType);

  00167	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0016a	8b 48 34	 mov	 ecx, DWORD PTR [eax+52]
  0016d	51		 push	 ecx
  0016e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00171	83 c2 08	 add	 edx, 8
  00174	52		 push	 edx
  00175	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0017b	e8 00 00 00 00	 call	 ?HorizontalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; CNewBoxesDoc::HorizontalLineType

; 2115 :       }

  00180	eb 19		 jmp	 SHORT $LN8@OnTimer
$LN13@OnTimer:

; 2116 :       else
; 2117 :       {
; 2118 :         pDoc->HorizontalLineType(m_move.dotNum, m_move.newLineType);

  00182	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00185	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  00188	51		 push	 ecx
  00189	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0018c	83 c2 08	 add	 edx, 8
  0018f	52		 push	 edx
  00190	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00196	e8 00 00 00 00	 call	 ?HorizontalLineType@CNewBoxesDoc@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; CNewBoxesDoc::HorizontalLineType
$LN8@OnTimer:

; 2119 :       };
; 2120 :     };
; 2121 :   };
; 2122 :   if (m_flashCount & 2)

  0019b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0019e	8b 48 40	 mov	 ecx, DWORD PTR [eax+64]
  001a1	83 e1 02	 and	 ecx, 2
  001a4	74 7c		 je	 SHORT $LN15@OnTimer

; 2123 :   {
; 2124 :     if (m_move.boxesCaptured[0].x >= 0) pDoc->BoxOwner(m_move.boxesCaptured[0], m_move.oldOwnerType[0]);

  001a6	ba 08 00 00 00	 mov	 edx, 8
  001ab	6b c2 00	 imul	 eax, edx, 0
  001ae	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001b1	83 7c 01 14 00	 cmp	 DWORD PTR [ecx+eax+20], 0
  001b6	7c 2b		 jl	 SHORT $LN17@OnTimer
  001b8	ba 04 00 00 00	 mov	 edx, 4
  001bd	6b c2 00	 imul	 eax, edx, 0
  001c0	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001c3	8b 54 01 24	 mov	 edx, DWORD PTR [ecx+eax+36]
  001c7	52		 push	 edx
  001c8	b8 08 00 00 00	 mov	 eax, 8
  001cd	6b c8 00	 imul	 ecx, eax, 0
  001d0	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001d3	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  001d7	50		 push	 eax
  001d8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  001de	e8 00 00 00 00	 call	 ?BoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; CNewBoxesDoc::BoxOwner
$LN17@OnTimer:

; 2125 :     if (m_move.boxesCaptured[1].x >= 0) pDoc->BoxOwner(m_move.boxesCaptured[1], m_move.oldOwnerType[1]);

  001e3	b9 08 00 00 00	 mov	 ecx, 8
  001e8	c1 e1 00	 shl	 ecx, 0
  001eb	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001ee	83 7c 0a 14 00	 cmp	 DWORD PTR [edx+ecx+20], 0
  001f3	7c 2b		 jl	 SHORT $LN18@OnTimer
  001f5	b8 04 00 00 00	 mov	 eax, 4
  001fa	c1 e0 00	 shl	 eax, 0
  001fd	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00200	8b 54 01 24	 mov	 edx, DWORD PTR [ecx+eax+36]
  00204	52		 push	 edx
  00205	b8 08 00 00 00	 mov	 eax, 8
  0020a	c1 e0 00	 shl	 eax, 0
  0020d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00210	8d 54 01 14	 lea	 edx, DWORD PTR [ecx+eax+20]
  00214	52		 push	 edx
  00215	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0021b	e8 00 00 00 00	 call	 ?BoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; CNewBoxesDoc::BoxOwner
$LN18@OnTimer:

; 2126 :   }

  00220	eb 7a		 jmp	 SHORT $LN16@OnTimer
$LN15@OnTimer:

; 2127 :   else
; 2128 :   {
; 2129 :     if (m_move.boxesCaptured[0].x >= 0) pDoc->BoxOwner(m_move.boxesCaptured[0], m_move.newOwnerType[0]);

  00222	b8 08 00 00 00	 mov	 eax, 8
  00227	6b c8 00	 imul	 ecx, eax, 0
  0022a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0022d	83 7c 0a 14 00	 cmp	 DWORD PTR [edx+ecx+20], 0
  00232	7c 2b		 jl	 SHORT $LN19@OnTimer
  00234	b8 04 00 00 00	 mov	 eax, 4
  00239	6b c8 00	 imul	 ecx, eax, 0
  0023c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0023f	8b 44 0a 2c	 mov	 eax, DWORD PTR [edx+ecx+44]
  00243	50		 push	 eax
  00244	b9 08 00 00 00	 mov	 ecx, 8
  00249	6b d1 00	 imul	 edx, ecx, 0
  0024c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024f	8d 4c 10 14	 lea	 ecx, DWORD PTR [eax+edx+20]
  00253	51		 push	 ecx
  00254	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0025a	e8 00 00 00 00	 call	 ?BoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; CNewBoxesDoc::BoxOwner
$LN19@OnTimer:

; 2130 :     if (m_move.boxesCaptured[1].x >= 0) pDoc->BoxOwner(m_move.boxesCaptured[1], m_move.newOwnerType[1]);

  0025f	ba 08 00 00 00	 mov	 edx, 8
  00264	c1 e2 00	 shl	 edx, 0
  00267	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0026a	83 7c 10 14 00	 cmp	 DWORD PTR [eax+edx+20], 0
  0026f	7c 2b		 jl	 SHORT $LN16@OnTimer
  00271	b9 04 00 00 00	 mov	 ecx, 4
  00276	c1 e1 00	 shl	 ecx, 0
  00279	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0027c	8b 44 0a 2c	 mov	 eax, DWORD PTR [edx+ecx+44]
  00280	50		 push	 eax
  00281	b9 08 00 00 00	 mov	 ecx, 8
  00286	c1 e1 00	 shl	 ecx, 0
  00289	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0028c	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  00290	50		 push	 eax
  00291	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00297	e8 00 00 00 00	 call	 ?BoxOwner@CNewBoxesDoc@@QAEXABUtagPOINT@@W4OWNER_TYPE@@@Z ; CNewBoxesDoc::BoxOwner
$LN16@OnTimer:

; 2131 :   };
; 2132 :   pViewWindow->Invalidate(false); //Don't clear background.

  0029c	6a 00		 push	 0
  0029e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pViewWindow@@3PAVCNewBoxesView@@A ; pViewWindow
  002a4	e8 00 00 00 00	 call	 ?Invalidate@CWnd@@QAEXH@Z ; CWnd::Invalidate

; 2133 :   return STATUS_OK;

  002a9	b8 03 00 00 00	 mov	 eax, 3
$LN1@OnTimer:

; 2134 : }

  002ae	83 c4 04	 add	 esp, 4
  002b1	3b ec		 cmp	 ebp, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	8b e5		 mov	 esp, ebp
  002ba	5d		 pop	 ebp
  002bb	c2 04 00	 ret	 4
?OnTimer@PROCESS_FLASH@@EAE?AW4STATUS@@I@Z ENDP		; PROCESS_FLASH::OnTimer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nChar$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?OnChar@PROCESS_FLASH@@EAE?AW4STATUS@@III@Z PROC	; PROCESS_FLASH::OnChar
; _this$ = ecx

; 2138 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2139 :   if (nChar == 0x1b)

  0000f	83 7d 08 1b	 cmp	 DWORD PTR _nChar$[ebp], 27 ; 0000001bH
  00013	75 1e		 jne	 SHORT $LN2@OnChar

; 2140 :   {
; 2141 :     PopProcess();

  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	e8 00 00 00 00	 call	 ?PopProcess@PROCESS@@IAEXXZ ; PROCESS::PopProcess

; 2142 :     OnShutdown();

  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 10		 mov	 edx, DWORD PTR [eax]
  00022	8b f4		 mov	 esi, esp
  00024	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0002a	ff d0		 call	 eax
  0002c	3b f4		 cmp	 esi, esp
  0002e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@OnChar:

; 2143 :   }
; 2144 :   return STATUS_OK;

  00033	b8 03 00 00 00	 mov	 eax, 3

; 2145 : }

  00038	5e		 pop	 esi
  00039	83 c4 04	 add	 esp, 4
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 0c 00	 ret	 12			; 0000000cH
?OnChar@PROCESS_FLASH@@EAE?AW4STATUS@@III@Z ENDP	; PROCESS_FLASH::OnChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnInitialize@PROCESS_FLASH@@EAE?AW4STATUS@@XZ PROC	; PROCESS_FLASH::OnInitialize
; _this$ = ecx

; 2060 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2061 :   m_flashCount = pDoc->MoveFlashCount();

  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00014	e8 00 00 00 00	 call	 ?MoveFlashCount@CNewBoxesDoc@@QAEHXZ ; CNewBoxesDoc::MoveFlashCount
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	89 41 40	 mov	 DWORD PTR [ecx+64], eax

; 2062 : #ifdef DISPLAYINTERNALS
; 2063 :   //m_title.Format("Making a move type %s", m_move.TypeName());
; 2064 : #endif
; 2065 :   return STATUS_OK;

  0001f	b8 03 00 00 00	 mov	 eax, 3

; 2066 : }

  00024	83 c4 04	 add	 esp, 4
  00027	3b ec		 cmp	 ebp, esp
  00029	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002e	8b e5		 mov	 esp, ebp
  00030	5d		 pop	 ebp
  00031	c3		 ret	 0
?OnInitialize@PROCESS_FLASH@@EAE?AW4STATUS@@XZ ENDP	; PROCESS_FLASH::OnInitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pGame$ = 8						; size = 4
??0PROCESS_NIMVALUE@@QAE@PAVDOTS_AND_BOXES@@@Z PROC	; PROCESS_NIMVALUE::PROCESS_NIMVALUE
; _this$ = ecx

; 1971 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0PROCESS@@QAE@XZ	; PROCESS::PROCESS
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PROCESS_NIMVALUE@@6B@

; 1972 :   m_pGame = pGame;

  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	8b 55 08	 mov	 edx, DWORD PTR _pGame$[ebp]
  00025	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 1973 : }

  00028	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b ec		 cmp	 ebp, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00035	8b e5		 mov	 esp, ebp
  00037	5d		 pop	 ebp
  00038	c2 04 00	 ret	 4
??0PROCESS_NIMVALUE@@QAE@PAVDOTS_AND_BOXES@@@Z ENDP	; PROCESS_NIMVALUE::PROCESS_NIMVALUE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnThreadCompletion@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ PROC ; PROCESS_NIMVALUE::OnThreadCompletion
; _this$ = ecx

; 2013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2014 :   PopProcess();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?PopProcess@PROCESS@@IAEXXZ ; PROCESS::PopProcess

; 2015 :   return STATUS_DONE;

  00016	b8 02 00 00 00	 mov	 eax, 2

; 2016 : }

  0001b	83 c4 04	 add	 esp, 4
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?OnThreadCompletion@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ ENDP ; PROCESS_NIMVALUE::OnThreadCompletion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nChar$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?OnChar@PROCESS_NIMVALUE@@EAE?AW4STATUS@@III@Z PROC	; PROCESS_NIMVALUE::OnChar
; _this$ = ecx

; 1985 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1986 : 
; 1987 :   if (nChar == 0x1b)

  0000f	83 7d 08 1b	 cmp	 DWORD PTR _nChar$[ebp], 27 ; 0000001bH
  00013	75 2c		 jne	 SHORT $LN4@OnChar
$LN2@OnChar:

; 1988 :   {
; 1989 :     //if (thinking) MessageBox(NULL,"Received esc-thinking","",MB_OK);
; 1990 :     //else MessageBox(NULL,"Received esc-Not thinking","",MB_OK);
; 1991 :     while (thinking)

  00015	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?thinking@@3_NA
  0001c	85 c0		 test	 eax, eax
  0001e	74 1a		 je	 SHORT $LN3@OnChar

; 1992 :     {
; 1993 :       stopThinking = true;

  00020	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?stopThinking@@3_NA, 1 ; stopThinking

; 1994 :       Sleep(0);

  00027	8b f4		 mov	 esi, esp
  00029	6a 00		 push	 0
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1995 :     };

  00038	eb db		 jmp	 SHORT $LN2@OnChar
$LN3@OnChar:

; 1996 :     //PopProcess();
; 1997 :     return STATUS_OK;

  0003a	b8 03 00 00 00	 mov	 eax, 3
  0003f	eb 05		 jmp	 SHORT $LN1@OnChar
$LN4@OnChar:

; 1998 :   };
; 1999 :   return STATUS_OK;

  00041	b8 03 00 00 00	 mov	 eax, 3
$LN1@OnChar:

; 2000 : }

  00046	5e		 pop	 esi
  00047	83 c4 04	 add	 esp, 4
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 0c 00	 ret	 12			; 0000000cH
?OnChar@PROCESS_NIMVALUE@@EAE?AW4STATUS@@III@Z ENDP	; PROCESS_NIMVALUE::OnChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_pProcess$ = 8						; size = 4
?OnReturn@PROCESS_NIMVALUE@@EAE?AW4STATUS@@PAVPROCESS@@@Z PROC ; PROCESS_NIMVALUE::OnReturn
; _this$ = ecx

; 2019 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 2020 :   delete pProcess;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00024	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00028	74 0f		 je	 SHORT $LN3@OnReturn
  0002a	6a 01		 push	 1
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	e8 00 00 00 00	 call	 ??_GPROCESS@@QAEPAXI@Z
  00034	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
  00037	eb 07		 jmp	 SHORT $LN4@OnReturn
$LN3@OnReturn:
  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN4@OnReturn:

; 2021 :   return STATUS_DONE;

  00040	b8 02 00 00 00	 mov	 eax, 2

; 2022 : }

  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?OnReturn@PROCESS_NIMVALUE@@EAE?AW4STATUS@@PAVPROCESS@@@Z ENDP ; PROCESS_NIMVALUE::OnReturn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnShutdown@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ PROC	; PROCESS_NIMVALUE::OnShutdown
; _this$ = ecx

; 2003 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@OnShutdown:

; 2004 :   while (thinking)

  0000f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?thinking@@3_NA
  00016	85 c0		 test	 eax, eax
  00018	74 1a		 je	 SHORT $LN3@OnShutdown

; 2005 :   {
; 2006 :     stopThinking = true;

  0001a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?stopThinking@@3_NA, 1 ; stopThinking

; 2007 :     Sleep(100);

  00021	8b f4		 mov	 esi, esp
  00023	6a 64		 push	 100			; 00000064H
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 2008 :   };

  00032	eb db		 jmp	 SHORT $LN2@OnShutdown
$LN3@OnShutdown:

; 2009 :   return STATUS_DONE;

  00034	b8 02 00 00 00	 mov	 eax, 2

; 2010 : }

  00039	5e		 pop	 esi
  0003a	83 c4 04	 add	 esp, 4
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?OnShutdown@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ ENDP	; PROCESS_NIMVALUE::OnShutdown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnInitialize@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ PROC	; PROCESS_NIMVALUE::OnInitialize
; _this$ = ecx

; 1977 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1978 :  // m_title="Computing Nimval...Press 'Esc' to make me quit trying";
; 1979 :   StartThread();

  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?StartThread@PROCESS_NIMVALUE@@AAEXXZ ; PROCESS_NIMVALUE::StartThread

; 1980 :   return STATUS_OK;

  00016	b8 03 00 00 00	 mov	 eax, 3

; 1981 : }

  0001b	83 c4 04	 add	 esp, 4
  0001e	3b ec		 cmp	 ebp, esp
  00020	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c3		 ret	 0
?OnInitialize@PROCESS_NIMVALUE@@EAE?AW4STATUS@@XZ ENDP	; PROCESS_NIMVALUE::OnInitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StartThread@PROCESS_NIMVALUE@@AAEXXZ PROC		; PROCESS_NIMVALUE::StartThread
; _this$ = ecx

; 1957 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@StartThrea:

; 1958 :   while (thinking)

  0000f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?thinking@@3_NA
  00016	85 c0		 test	 eax, eax
  00018	74 1a		 je	 SHORT $LN3@StartThrea

; 1959 :   {
; 1960 :     stopThinking = true;

  0001a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?stopThinking@@3_NA, 1 ; stopThinking

; 1961 :     Sleep(100);

  00021	8b f4		 mov	 esi, esp
  00023	6a 64		 push	 100			; 00000064H
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1962 :   };

  00032	eb db		 jmp	 SHORT $LN2@StartThrea
$LN3@StartThrea:

; 1963 :   stopThinking = false;

  00034	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?stopThinking@@3_NA, 0 ; stopThinking

; 1964 :   thinking = true;

  0003b	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?thinking@@3_NA, 1

; 1965 :   searchAborted = false;

  00042	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?searchAborted@@3_NA, 0 ; searchAborted

; 1966 :   timeLimit = 0x7fffffffffffffffI64;

  00049	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0004e	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?timeLimit@@3_JA, -1
  00058	89 0d 04 00 00
	00		 mov	 DWORD PTR ?timeLimit@@3_JA+4, ecx

; 1967 :   AfxBeginThread(ComputeNimvalProc, (LPVOID)m_pGame,0,80*sizeof(NIMCON));

  0005e	6a 00		 push	 0
  00060	6a 00		 push	 0
  00062	68 00 45 06 00	 push	 410880			; 00064500H
  00067	6a 00		 push	 0
  00069	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0006c	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006f	50		 push	 eax
  00070	68 00 00 00 00	 push	 OFFSET ?ComputeNimvalProc@@YAIPAX@Z ; ComputeNimvalProc
  00075	e8 00 00 00 00	 call	 ?AfxBeginThread@@YGPAVCWinThread@@P6AIPAX@Z0HIKPAU_SECURITY_ATTRIBUTES@@@Z ; AfxBeginThread

; 1968 : }

  0007a	5e		 pop	 esi
  0007b	83 c4 04	 add	 esp, 4
  0007e	3b ec		 cmp	 ebp, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
?StartThread@PROCESS_NIMVALUE@@AAEXXZ ENDP		; PROCESS_NIMVALUE::StartThread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pGame$ = 8						; size = 4
??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z PROC ; PROCESS_COMPUTER_MOVE::PROCESS_COMPUTER_MOVE
; _this$ = ecx

; 1844 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	c7 45 f0 cc cc
	cc cc		 mov	 DWORD PTR [ebp-16], -858993460 ; ccccccccH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d f0	 mov	 DWORD PTR _this$[ebp], ecx
  0002d	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0PROCESS@@QAE@XZ	; PROCESS::PROCESS
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET ??_7PROCESS_COMPUTER_MOVE@@6B@
  00045	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	83 c1 08	 add	 ecx, 8
  0004b	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 1845 :   m_pGame = pGame;

  00050	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 55 08	 mov	 edx, DWORD PTR _pGame$[ebp]
  00056	89 51 40	 mov	 DWORD PTR [ecx+64], edx

; 1846 : }

  00059	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00060	8b 45 f0	 mov	 eax, DWORD PTR _this$[ebp]
  00063	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00066	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006d	59		 pop	 ecx
  0006e	83 c4 10	 add	 esp, 16			; 00000010H
  00071	3b ec		 cmp	 ebp, esp
  00073	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00078	8b e5		 mov	 esp, ebp
  0007a	5d		 pop	 ebp
  0007b	c2 04 00	 ret	 4
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1PROCESS@@QAE@XZ	; PROCESS::~PROCESS
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0PROCESS_COMPUTER_MOVE@@QAE@PAVDOTS_AND_BOXES@@@Z ENDP ; PROCESS_COMPUTER_MOVE::PROCESS_COMPUTER_MOVE
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
tv142 = -144						; size = 4
$T2 = -140						; size = 4
$T3 = -136						; size = 4
$T4 = -132						; size = 56
$T5 = -76						; size = 56
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ PROC ; PROCESS_COMPUTER_MOVE::OnThreadCompletion
; _this$ = ecx

; 1904 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 84 00 00
	00		 sub	 esp, 132		; 00000084H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd 70 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-144]
  00020	b9 21 00 00 00	 mov	 ecx, 33			; 00000021H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1905 :   if (moveType == MT_NONE)

  00044	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 0 ; moveType
  0004b	75 12		 jne	 SHORT $LN2@OnThreadCo

; 1906 :   {
; 1907 :     PopProcess();

  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00050	e8 00 00 00 00	 call	 ?PopProcess@PROCESS@@IAEXXZ ; PROCESS::PopProcess

; 1908 :     return STATUS_DONE;

  00055	b8 02 00 00 00	 mov	 eax, 2
  0005a	e9 f1 00 00 00	 jmp	 $LN1@OnThreadCo
$LN2@OnThreadCo:

; 1909 :   };
; 1910 :   m_move = TranslateComputerMove(m_pGame, moveType, &computerMove.con);

  0005f	68 08 00 00 00	 push	 OFFSET ?computerMove@@3UPossibleMove@@A+8
  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  00069	50		 push	 eax
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006d	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00070	52		 push	 edx
  00071	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  00077	50		 push	 eax
  00078	e8 00 00 00 00	 call	 ?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z ; TranslateComputerMove
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
  00080	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00085	8b f0		 mov	 esi, eax
  00087	8d 7d b4	 lea	 edi, DWORD PTR $T5[ebp]
  0008a	f3 a5		 rep movsd
  0008c	8b 7d ec	 mov	 edi, DWORD PTR _this$[ebp]
  0008f	83 c7 08	 add	 edi, 8
  00092	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00097	8d 75 b4	 lea	 esi, DWORD PTR $T5[ebp]
  0009a	f3 a5		 rep movsd

; 1911 :   m_move.oldLineType = LINE_NONE;

  0009c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	c7 41 34 00 00
	00 00		 mov	 DWORD PTR [ecx+52], 0

; 1912 :   m_move.newLineType = LINE_COMPUTER;

  000a6	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000a9	c7 42 38 01 00
	00 00		 mov	 DWORD PTR [edx+56], 1

; 1913 :   m_move.moveType = moveType;

  000b0	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?moveType@@3W4MOVE_TYPE@@A ; moveType
  000b9	89 48 3c	 mov	 DWORD PTR [eax+60], ecx

; 1914 :   m_move.FindCaptures(&pDoc->Game());

  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  000c2	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  000c7	50		 push	 eax
  000c8	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000cb	83 c1 08	 add	 ecx, 8
  000ce	e8 00 00 00 00	 call	 ?FindCaptures@MOVE@@QAEXPAVDOTS_AND_BOXES@@@Z ; MOVE::FindCaptures

; 1915 :   PushProcess(new PROCESS_FLASH(m_move));

  000d3	6a 4c		 push	 76			; 0000004cH
  000d5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000da	83 c4 04	 add	 esp, 4
  000dd	89 85 74 ff ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  000e3	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000ea	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR $T2[ebp], 0
  000f1	74 1a		 je	 SHORT $LN4@OnThreadCo
  000f3	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000f6	83 c2 08	 add	 edx, 8
  000f9	52		 push	 edx
  000fa	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp]
  00100	e8 00 00 00 00	 call	 ??0PROCESS_FLASH@@QAE@ABUMOVE@@@Z ; PROCESS_FLASH::PROCESS_FLASH
  00105	89 85 70 ff ff
	ff		 mov	 DWORD PTR tv142[ebp], eax
  0010b	eb 0a		 jmp	 SHORT $LN5@OnThreadCo
$LN4@OnThreadCo:
  0010d	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv142[ebp], 0
$LN5@OnThreadCo:
  00117	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR tv142[ebp]
  0011d	89 85 78 ff ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00123	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012a	8b 8d 78 ff ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00130	51		 push	 ecx
  00131	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	e8 00 00 00 00	 call	 ?PushProcess@PROCESS@@IAEXPAV1@@Z ; PROCESS::PushProcess

; 1916 :   pDoc->AddMove(m_move);

  00139	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  0013c	83 c2 08	 add	 edx, 8
  0013f	52		 push	 edx
  00140	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00146	e8 00 00 00 00	 call	 ?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z ; CNewBoxesDoc::AddMove

; 1917 :   return STATUS_OK;

  0014b	b8 03 00 00 00	 mov	 eax, 3
$LN1@OnThreadCo:

; 1918 : }

  00150	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00153	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015a	59		 pop	 ecx
  0015b	5f		 pop	 edi
  0015c	5e		 pop	 esi
  0015d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00160	33 cd		 xor	 ecx, ebp
  00162	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00167	81 c4 90 00 00
	00		 add	 esp, 144		; 00000090H
  0016d	3b ec		 cmp	 ebp, esp
  0016f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ$0:
  00000	6a 4c		 push	 76			; 0000004cH
  00002	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
  00011	c3		 ret	 0
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
__ehhandler$?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ:
  00017	90		 npad	 1
  00018	90		 npad	 1
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 8a 70 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-144]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?OnThreadCompletion@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ ENDP ; PROCESS_COMPUTER_MOVE::OnThreadCompletion
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_iTime$ = -28						; size = 8
_fileTime$ = -16					; size = 8
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?OnTimer@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@I@Z PROC	; PROCESS_COMPUTER_MOVE::OnTimer
; _this$ = ecx

; 1889 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  0000f	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00012	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00015	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00018	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001b	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001e	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00021	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1890 :   FILETIME fileTime;
; 1891 :   i64 iTime;
; 1892 :   if (!thinking) 

  00024	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?thinking@@3_NA
  0002b	85 c0		 test	 eax, eax
  0002d	75 07		 jne	 SHORT $LN2@OnTimer

; 1893 :   {
; 1894 :     return STATUS_DONE;

  0002f	b8 02 00 00 00	 mov	 eax, 2
  00034	eb 61		 jmp	 SHORT $LN1@OnTimer
$LN2@OnTimer:

; 1895 :   };
; 1896 :   GetSystemTimeAsFileTime(& fileTime);

  00036	8b f4		 mov	 esi, esp
  00038	8d 4d f0	 lea	 ecx, DWORD PTR _fileTime$[ebp]
  0003b	51		 push	 ecx
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTimeAsFileTime@4
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1897 :   iTime = ((i64)fileTime.dwHighDateTime << 32) | fileTime.dwLowDateTime;

  00049	33 d2		 xor	 edx, edx
  0004b	8b 45 f4	 mov	 eax, DWORD PTR _fileTime$[ebp+4]
  0004e	b1 20		 mov	 cl, 32			; 00000020H
  00050	e8 00 00 00 00	 call	 __allshl
  00055	33 c9		 xor	 ecx, ecx
  00057	0b 45 f0	 or	 eax, DWORD PTR _fileTime$[ebp]
  0005a	0b d1		 or	 edx, ecx
  0005c	89 45 e4	 mov	 DWORD PTR _iTime$[ebp], eax
  0005f	89 55 e8	 mov	 DWORD PTR _iTime$[ebp+4], edx

; 1898 :   currentTime = iTime;

  00062	8b 55 e4	 mov	 edx, DWORD PTR _iTime$[ebp]
  00065	8b 45 e8	 mov	 eax, DWORD PTR _iTime$[ebp+4]
  00068	89 15 00 00 00
	00		 mov	 DWORD PTR ?currentTime@@3_JA, edx
  0006e	a3 04 00 00 00	 mov	 DWORD PTR ?currentTime@@3_JA+4, eax

; 1899 :   if (iTime > timeLimit) stopThinking = true;

  00073	8b 4d e8	 mov	 ecx, DWORD PTR _iTime$[ebp+4]
  00076	3b 0d 04 00 00
	00		 cmp	 ecx, DWORD PTR ?timeLimit@@3_JA+4
  0007c	7c 14		 jl	 SHORT $LN3@OnTimer
  0007e	7f 0b		 jg	 SHORT $LN5@OnTimer
  00080	8b 55 e4	 mov	 edx, DWORD PTR _iTime$[ebp]
  00083	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR ?timeLimit@@3_JA
  00089	76 07		 jbe	 SHORT $LN3@OnTimer
$LN5@OnTimer:
  0008b	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?stopThinking@@3_NA, 1 ; stopThinking
$LN3@OnTimer:

; 1900 :   return STATUS_OK;

  00092	b8 03 00 00 00	 mov	 eax, 3
$LN1@OnTimer:

; 1901 : }

  00097	52		 push	 edx
  00098	8b cd		 mov	 ecx, ebp
  0009a	50		 push	 eax
  0009b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@OnTimer
  000a1	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000a6	58		 pop	 eax
  000a7	5a		 pop	 edx
  000a8	5e		 pop	 esi
  000a9	83 c4 1c	 add	 esp, 28			; 0000001cH
  000ac	3b ec		 cmp	 ebp, esp
  000ae	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
  000b9	0f 1f 00	 npad	 3
$LN8@OnTimer:
  000bc	01 00 00 00	 DD	 1
  000c0	00 00 00 00	 DD	 $LN7@OnTimer
$LN7@OnTimer:
  000c4	f0 ff ff ff	 DD	 -16			; fffffff0H
  000c8	08 00 00 00	 DD	 8
  000cc	00 00 00 00	 DD	 $LN6@OnTimer
$LN6@OnTimer:
  000d0	66		 DB	 102			; 00000066H
  000d1	69		 DB	 105			; 00000069H
  000d2	6c		 DB	 108			; 0000006cH
  000d3	65		 DB	 101			; 00000065H
  000d4	54		 DB	 84			; 00000054H
  000d5	69		 DB	 105			; 00000069H
  000d6	6d		 DB	 109			; 0000006dH
  000d7	65		 DB	 101			; 00000065H
  000d8	00		 DB	 0
?OnTimer@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@I@Z ENDP	; PROCESS_COMPUTER_MOVE::OnTimer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nChar$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?OnChar@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@III@Z PROC ; PROCESS_COMPUTER_MOVE::OnChar
; _this$ = ecx

; 1863 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1864 : 
; 1865 :   if (nChar == 0x1b)

  0000f	83 7d 08 1b	 cmp	 DWORD PTR _nChar$[ebp], 27 ; 0000001bH
  00013	75 2c		 jne	 SHORT $LN4@OnChar
$LN2@OnChar:

; 1866 :   {
; 1867 :     while (thinking)

  00015	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?thinking@@3_NA
  0001c	85 c0		 test	 eax, eax
  0001e	74 1a		 je	 SHORT $LN3@OnChar

; 1868 :     {
; 1869 :       stopThinking = true;

  00020	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?stopThinking@@3_NA, 1 ; stopThinking

; 1870 :       Sleep(100);

  00027	8b f4		 mov	 esi, esp
  00029	6a 64		 push	 100			; 00000064H
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1871 :     };

  00038	eb db		 jmp	 SHORT $LN2@OnChar
$LN3@OnChar:

; 1872 :     //PopProcess();
; 1873 :     return STATUS_OK;

  0003a	b8 03 00 00 00	 mov	 eax, 3
  0003f	eb 05		 jmp	 SHORT $LN1@OnChar
$LN4@OnChar:

; 1874 :   };
; 1875 :   return STATUS_OK;

  00041	b8 03 00 00 00	 mov	 eax, 3
$LN1@OnChar:

; 1876 : }

  00046	5e		 pop	 esi
  00047	83 c4 04	 add	 esp, 4
  0004a	3b ec		 cmp	 ebp, esp
  0004c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 0c 00	 ret	 12			; 0000000cH
?OnChar@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@III@Z ENDP ; PROCESS_COMPUTER_MOVE::OnChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
tv68 = -12						; size = 4
$T1 = -8						; size = 4
_this$ = -4						; size = 4
_pProcess$ = 8						; size = 4
?OnReturn@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@PAVPROCESS@@@Z PROC ; PROCESS_COMPUTER_MOVE::OnReturn
; _this$ = ecx

; 1921 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1922 :   delete pProcess;

  0001e	8b 45 08	 mov	 eax, DWORD PTR _pProcess$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  00024	83 7d f8 00	 cmp	 DWORD PTR $T1[ebp], 0
  00028	74 0f		 je	 SHORT $LN6@OnReturn
  0002a	6a 01		 push	 1
  0002c	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0002f	e8 00 00 00 00	 call	 ??_GPROCESS@@QAEPAXI@Z
  00034	89 45 f4	 mov	 DWORD PTR tv68[ebp], eax
  00037	eb 07		 jmp	 SHORT $LN7@OnReturn
$LN6@OnReturn:
  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv68[ebp], 0
$LN7@OnReturn:

; 1923 :   if (    ((m_move.boxesCaptured[0].x >= 0) || (m_move.boxesCaptured[1].x >= 0))
; 1924 :        && pDoc->IsMoveAvailable())

  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	6b d1 00	 imul	 edx, ecx, 0
  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	83 7c 10 14 00	 cmp	 DWORD PTR [eax+edx+20], 0
  00050	7d 12		 jge	 SHORT $LN4@OnReturn
  00052	b9 08 00 00 00	 mov	 ecx, 8
  00057	c1 e1 00	 shl	 ecx, 0
  0005a	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	83 7c 0a 14 00	 cmp	 DWORD PTR [edx+ecx+20], 0
  00062	7c 23		 jl	 SHORT $LN2@OnReturn
$LN4@OnReturn:
  00064	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0006a	e8 00 00 00 00	 call	 ?IsMoveAvailable@CNewBoxesDoc@@QBE_NXZ ; CNewBoxesDoc::IsMoveAvailable
  0006f	0f b6 c0	 movzx	 eax, al
  00072	85 c0		 test	 eax, eax
  00074	74 11		 je	 SHORT $LN2@OnReturn

; 1925 :   {
; 1926 :     StartThread();

  00076	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	e8 00 00 00 00	 call	 ?StartThread@PROCESS_COMPUTER_MOVE@@AAEXXZ ; PROCESS_COMPUTER_MOVE::StartThread

; 1927 :     return STATUS_OK;

  0007e	b8 03 00 00 00	 mov	 eax, 3
  00083	eb 07		 jmp	 SHORT $LN1@OnReturn

; 1928 :   }

  00085	eb 05		 jmp	 SHORT $LN1@OnReturn
$LN2@OnReturn:

; 1929 :   else
; 1930 :   {
; 1931 :     return STATUS_DONE;

  00087	b8 02 00 00 00	 mov	 eax, 2
$LN1@OnReturn:

; 1932 :   };
; 1933 : }

  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	3b ec		 cmp	 ebp, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c2 04 00	 ret	 4
?OnReturn@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@PAVPROCESS@@@Z ENDP ; PROCESS_COMPUTER_MOVE::OnReturn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnShutdown@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ PROC ; PROCESS_COMPUTER_MOVE::OnShutdown
; _this$ = ecx

; 1879 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000c	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@OnShutdown:

; 1880 :   while (thinking)

  0000f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?thinking@@3_NA
  00016	85 c0		 test	 eax, eax
  00018	74 1a		 je	 SHORT $LN3@OnShutdown

; 1881 :   {
; 1882 :     stopThinking = true;

  0001a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?stopThinking@@3_NA, 1 ; stopThinking

; 1883 :     Sleep(100);

  00021	8b f4		 mov	 esi, esp
  00023	6a 64		 push	 100			; 00000064H
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1884 :   };

  00032	eb db		 jmp	 SHORT $LN2@OnShutdown
$LN3@OnShutdown:

; 1885 :   return STATUS_DONE;

  00034	b8 02 00 00 00	 mov	 eax, 2

; 1886 : }

  00039	5e		 pop	 esi
  0003a	83 c4 04	 add	 esp, 4
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?OnShutdown@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ ENDP ; PROCESS_COMPUTER_MOVE::OnShutdown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnInitialize@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ PROC ; PROCESS_COMPUTER_MOVE::OnInitialize
; _this$ = ecx

; 1850 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1851 :   if (pDoc->Game().IsFinished())

  0000e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00014	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  00019	8b c8		 mov	 ecx, eax
  0001b	e8 00 00 00 00	 call	 ?IsFinished@DOTS_AND_BOXES@@QBE_NXZ ; DOTS_AND_BOXES::IsFinished
  00020	0f b6 c0	 movzx	 eax, al
  00023	85 c0		 test	 eax, eax
  00025	74 0f		 je	 SHORT $LN2@OnInitiali

; 1852 :   {
; 1853 :     PopProcess();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?PopProcess@PROCESS@@IAEXXZ ; PROCESS::PopProcess

; 1854 :     return STATUS_DONE;

  0002f	b8 02 00 00 00	 mov	 eax, 2
  00034	eb 0d		 jmp	 SHORT $LN1@OnInitiali
$LN2@OnInitiali:

; 1855 :   };
; 1856 :  // m_title="Thinking...Press 'Esc' to make me quit trying";
; 1857 :   StartThread();

  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?StartThread@PROCESS_COMPUTER_MOVE@@AAEXXZ ; PROCESS_COMPUTER_MOVE::StartThread

; 1858 :   return STATUS_OK;

  0003e	b8 03 00 00 00	 mov	 eax, 3
$LN1@OnInitiali:

; 1859 : }

  00043	83 c4 04	 add	 esp, 4
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?OnInitialize@PROCESS_COMPUTER_MOVE@@EAE?AW4STATUS@@XZ ENDP ; PROCESS_COMPUTER_MOVE::OnInitialize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_fileTime$ = -16					; size = 8
_this$ = -4						; size = 4
?StartThread@PROCESS_COMPUTER_MOVE@@AAEXXZ PROC		; PROCESS_COMPUTER_MOVE::StartThread
; _this$ = ecx

; 1825 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000f	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00012	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00015	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00018	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
$LN2@StartThrea:

; 1826 :   FILETIME fileTime;
; 1827 :   while (thinking)

  0001e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?thinking@@3_NA
  00025	85 c0		 test	 eax, eax
  00027	74 1a		 je	 SHORT $LN3@StartThrea

; 1828 :   {
; 1829 :     stopThinking = true;

  00029	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?stopThinking@@3_NA, 1 ; stopThinking

; 1830 :     Sleep(100);

  00030	8b f4		 mov	 esi, esp
  00032	6a 64		 push	 100			; 00000064H
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__Sleep@4
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1831 :   };

  00041	eb db		 jmp	 SHORT $LN2@StartThrea
$LN3@StartThrea:

; 1832 :   stopThinking = false;

  00043	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?stopThinking@@3_NA, 0 ; stopThinking

; 1833 :   thinking = true;

  0004a	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?thinking@@3_NA, 1

; 1834 :   moveType = MT_NONE;

  00051	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 0 ; moveType

; 1835 :   GetSystemTimeAsFileTime(&fileTime);

  0005b	8b f4		 mov	 esi, esp
  0005d	8d 4d f0	 lea	 ecx, DWORD PTR _fileTime$[ebp]
  00060	51		 push	 ecx
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemTimeAsFileTime@4
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1836 :   timeLimit = ((i64)fileTime.dwHighDateTime<<32)|fileTime.dwLowDateTime;

  0006e	33 d2		 xor	 edx, edx
  00070	8b 45 f4	 mov	 eax, DWORD PTR _fileTime$[ebp+4]
  00073	b1 20		 mov	 cl, 32			; 00000020H
  00075	e8 00 00 00 00	 call	 __allshl
  0007a	33 c9		 xor	 ecx, ecx
  0007c	0b 45 f0	 or	 eax, DWORD PTR _fileTime$[ebp]
  0007f	0b d1		 or	 edx, ecx
  00081	a3 00 00 00 00	 mov	 DWORD PTR ?timeLimit@@3_JA, eax
  00086	89 15 04 00 00
	00		 mov	 DWORD PTR ?timeLimit@@3_JA+4, edx

; 1837 :   currentTime = timeLimit;

  0008c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?timeLimit@@3_JA
  00092	a1 04 00 00 00	 mov	 eax, DWORD PTR ?timeLimit@@3_JA+4
  00097	89 15 00 00 00
	00		 mov	 DWORD PTR ?currentTime@@3_JA, edx
  0009d	a3 04 00 00 00	 mov	 DWORD PTR ?currentTime@@3_JA+4, eax

; 1838 :   timeLimit += 10000000 * (_int64)pDoc->TimeLimit(); // five second

  000a2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  000a8	e8 00 00 00 00	 call	 ?TimeLimit@CNewBoxesDoc@@QAEHXZ ; CNewBoxesDoc::TimeLimit
  000ad	99		 cdq
  000ae	6a 00		 push	 0
  000b0	68 80 96 98 00	 push	 10000000		; 00989680H
  000b5	52		 push	 edx
  000b6	50		 push	 eax
  000b7	e8 00 00 00 00	 call	 __allmul
  000bc	03 05 00 00 00
	00		 add	 eax, DWORD PTR ?timeLimit@@3_JA
  000c2	13 15 04 00 00
	00		 adc	 edx, DWORD PTR ?timeLimit@@3_JA+4
  000c8	a3 00 00 00 00	 mov	 DWORD PTR ?timeLimit@@3_JA, eax
  000cd	89 15 04 00 00
	00		 mov	 DWORD PTR ?timeLimit@@3_JA+4, edx

; 1839 :   searchAborted = false;

  000d3	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?searchAborted@@3_NA, 0 ; searchAborted

; 1840 :   AfxBeginThread(ComputerMoveProc, (LPVOID)m_pGame);

  000da	6a 00		 push	 0
  000dc	6a 00		 push	 0
  000de	6a 00		 push	 0
  000e0	6a 00		 push	 0
  000e2	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  000e5	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  000e8	52		 push	 edx
  000e9	68 00 00 00 00	 push	 OFFSET ?ComputerMoveProc@@YAIPAX@Z ; ComputerMoveProc
  000ee	e8 00 00 00 00	 call	 ?AfxBeginThread@@YGPAVCWinThread@@P6AIPAX@Z0HIKPAU_SECURITY_ATTRIBUTES@@@Z ; AfxBeginThread

; 1841 : }

  000f3	52		 push	 edx
  000f4	8b cd		 mov	 ecx, ebp
  000f6	50		 push	 eax
  000f7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@StartThrea
  000fd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00102	58		 pop	 eax
  00103	5a		 pop	 edx
  00104	5e		 pop	 esi
  00105	83 c4 14	 add	 esp, 20			; 00000014H
  00108	3b ec		 cmp	 ebp, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	c3		 ret	 0
  00113	90		 npad	 1
$LN7@StartThrea:
  00114	01 00 00 00	 DD	 1
  00118	00 00 00 00	 DD	 $LN6@StartThrea
$LN6@StartThrea:
  0011c	f0 ff ff ff	 DD	 -16			; fffffff0H
  00120	08 00 00 00	 DD	 8
  00124	00 00 00 00	 DD	 $LN5@StartThrea
$LN5@StartThrea:
  00128	66		 DB	 102			; 00000066H
  00129	69		 DB	 105			; 00000069H
  0012a	6c		 DB	 108			; 0000006cH
  0012b	65		 DB	 101			; 00000065H
  0012c	54		 DB	 84			; 00000054H
  0012d	69		 DB	 105			; 00000069H
  0012e	6d		 DB	 109			; 0000006dH
  0012f	65		 DB	 101			; 00000065H
  00130	00		 DB	 0
?StartThread@PROCESS_COMPUTER_MOVE@@AAEXXZ ENDP		; PROCESS_COMPUTER_MOVE::StartThread
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GPROCESS@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GPROCESS@@QAEPAXI@Z PROC				; PROCESS::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1PROCESS@@QAE@XZ	; PROCESS::~PROCESS
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 08		 push	 8
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GPROCESS@@QAEPAXI@Z ENDP				; PROCESS::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_Options@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_Options@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_Options, COMDAT
; _this$ = ecx

; 48   :   virtual bool    IsOK_Options(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_Options@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_Options
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_TestCreation@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_TestCreation@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_TestCreation, COMDAT
; _this$ = ecx

; 47   :   virtual bool    IsOK_TestCreation(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_TestCreation@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_TestCreation
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ReDoTurn@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ReDoTurn@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_ReDoTurn, COMDAT
; _this$ = ecx

; 46   :   virtual bool    IsOK_ReDoTurn(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ReDoTurn@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_ReDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_UnDoTurn@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_UnDoTurn@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_UnDoTurn, COMDAT
; _this$ = ecx

; 45   :   virtual bool    IsOK_UnDoTurn(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_UnDoTurn@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_UnDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_PlayGame@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_PlayGame@PROCESS@@UBE_NXZ PROC			; PROCESS::IsOK_PlayGame, COMDAT
; _this$ = ecx

; 44   :   virtual bool    IsOK_PlayGame(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_PlayGame@PROCESS@@UBE_NXZ ENDP			; PROCESS::IsOK_PlayGame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_EnterPosition@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_EnterPosition@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_EnterPosition, COMDAT
; _this$ = ecx

; 43   :   virtual bool    IsOK_EnterPosition(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_EnterPosition@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_EnterPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ComputeNimval@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ComputeNimval@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_ComputeNimval, COMDAT
; _this$ = ecx

; 42   :   virtual bool    IsOK_ComputeNimval(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ComputeNimval@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_ComputeNimval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsOK_ComputerMove@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsOK_ComputerMove@PROCESS@@UBE_NXZ PROC		; PROCESS::IsOK_ComputerMove, COMDAT
; _this$ = ecx

; 41   :   virtual bool    IsOK_ComputerMove(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsOK_ComputerMove@PROCESS@@UBE_NXZ ENDP		; PROCESS::IsOK_ComputerMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?IsIdle@PROCESS@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsIdle@PROCESS@@UBE_NXZ PROC				; PROCESS::IsIdle, COMDAT
; _this$ = ecx

; 40   :   virtual bool    IsIdle(void)const{return false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	32 c0		 xor	 al, al
  00009	8b e5		 mov	 esp, ebp
  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
?IsIdle@PROCESS@@UBE_NXZ ENDP				; PROCESS::IsIdle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnReDoTurn, COMDAT
; _this$ = ecx

; 39   :   virtual STATUS  OnReDoTurn(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnReDoTurn@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnReDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnUnDoTurn, COMDAT
; _this$ = ecx

; 38   :   virtual STATUS  OnUnDoTurn(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnUnDoTurn@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnUnDoTurn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnPlayGame, COMDAT
; _this$ = ecx

; 37   :   virtual STATUS  OnPlayGame(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnPlayGame@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnPlayGame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ PROC	; PROCESS::OnEnterPosition, COMDAT
; _this$ = ecx

; 36   :   virtual STATUS  OnEnterPosition(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnEnterPosition@PROCESS@@UAE?AW4STATUS@@XZ ENDP	; PROCESS::OnEnterPosition
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ PROC	; PROCESS::OnComputeNimval, COMDAT
; _this$ = ecx

; 35   :   virtual STATUS  OnComputeNimval(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnComputeNimval@PROCESS@@UAE?AW4STATUS@@XZ ENDP	; PROCESS::OnComputeNimval
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ PROC		; PROCESS::OnComputerMove, COMDAT
; _this$ = ecx

; 34   :   virtual STATUS  OnComputerMove(void){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnComputerMove@PROCESS@@UAE?AW4STATUS@@XZ ENDP		; PROCESS::OnComputerMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ PROC	; PROCESS::OnThreadCompletion, COMDAT
; _this$ = ecx

; 33   :   virtual STATUS  OnThreadCompletion(void){return STATUS_OK;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 03 00 00 00	 mov	 eax, 3
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?OnThreadCompletion@PROCESS@@UAE?AW4STATUS@@XZ ENDP	; PROCESS::OnThreadCompletion
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z PROC		; PROCESS::OnTimer, COMDAT
; _this$ = ecx

; 32   :   virtual STATUS  OnTimer(UINT /*nIDEvent*/){return STATUS_OK;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 03 00 00 00	 mov	 eax, 3
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
?OnTimer@PROCESS@@UAE?AW4STATUS@@I@Z ENDP		; PROCESS::OnTimer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 8
?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z PROC ; PROCESS::OnLButtonDown, COMDAT
; _this$ = ecx

; 29   :   virtual STATUS  OnLButtonDown(UINT /*nFlags*/, CPoint /*point*/){return STATUS_IGNORED;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	8b e5		 mov	 esp, ebp
  0000e	5d		 pop	 ebp
  0000f	c2 0c 00	 ret	 12			; 0000000cH
?OnLButtonDown@PROCESS@@UAE?AW4STATUS@@IVCPoint@@@Z ENDP ; PROCESS::OnLButtonDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\Process.h
;	COMDAT ?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ PROC ; PROCESS::GetTitle, COMDAT
; _this$ = ecx

; 25   :   virtual CString GetTitle(void){return m_title;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00015	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00018	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c0 04	 add	 eax, 4
  00025	8b f4		 mov	 esi, esp
  00027	50		 push	 eax
  00028	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@QAE@ABV01@@Z
  00031	3b f4		 cmp	 esi, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
  0003b	83 c9 01	 or	 ecx, 1
  0003e	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00041	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00044	5e		 pop	 esi
  00045	83 c4 08	 add	 esp, 8
  00048	3b ec		 cmp	 ebp, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 04 00	 ret	 4
?GetTitle@PROCESS@@UAE?AV?$CStringT@DV?$StrTraitMFC_DLL@DV?$ChTraitsCRT@D@ATL@@@@@ATL@@XZ ENDP ; PROCESS::GetTitle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ PROC	; CNewBoxesDoc::Game, COMDAT
; _this$ = ecx

; 175  :   DOTS_AND_BOXES& Game(void){return *m_pGame;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 28 36 00
	00		 mov	 eax, DWORD PTR [eax+13864]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ENDP	; CNewBoxesDoc::Game
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?MyRandom@CNewBoxesDoc@@QAEII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?MyRandom@CNewBoxesDoc@@QAEII@Z PROC			; CNewBoxesDoc::MyRandom, COMDAT
; _this$ = ecx

; 161  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 162  :     m_random = m_random*0xbb40e62d + 11;

  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	69 88 30 01 00
	00 2d e6 40 bb	 imul	 ecx, DWORD PTR [eax+304], -1153374675
  00014	83 c1 0b	 add	 ecx, 11			; 0000000bH
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	89 8a 30 01 00
	00		 mov	 DWORD PTR [edx+304], ecx

; 163  :     return (m_random>>13)% n;

  00020	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00023	8b 80 30 01 00
	00		 mov	 eax, DWORD PTR [eax+304]
  00029	c1 e8 0d	 shr	 eax, 13			; 0000000dH
  0002c	33 d2		 xor	 edx, edx
  0002e	f7 75 08	 div	 DWORD PTR _n$[ebp]
  00031	8b c2		 mov	 eax, edx

; 164  :   }

  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?MyRandom@CNewBoxesDoc@@QAEII@Z ENDP			; CNewBoxesDoc::MyRandom
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_move$ = 8						; size = 4
?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z PROC		; CNewBoxesDoc::AddMove, COMDAT
; _this$ = ecx

; 154  :   void AddMove(const MOVE& move){m_moveHistory.AddMove(move);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 08	 mov	 eax, DWORD PTR _move$[ebp]
  00011	50		 push	 eax
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00015	81 c1 68 01 00
	00		 add	 ecx, 360		; 00000168H
  0001b	e8 00 00 00 00	 call	 ?AddMove@MOVE_HISTORY@@QAEXABUMOVE@@@Z ; MOVE_HISTORY::AddMove
  00020	83 c4 04	 add	 esp, 4
  00023	3b ec		 cmp	 ebp, esp
  00025	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
?AddMove@CNewBoxesDoc@@QAEXABUMOVE@@@Z ENDP		; CNewBoxesDoc::AddMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?NimstringValueToVerify@CNewBoxesDoc@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NimstringValueToVerify@CNewBoxesDoc@@QAEHXZ PROC	; CNewBoxesDoc::NimstringValueToVerify, COMDAT
; _this$ = ecx

; 130  :   int  NimstringValueToVerify(void){return m_nimstringValueToVerify;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 3c 01 00
	00		 mov	 eax, DWORD PTR [eax+316]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?NimstringValueToVerify@CNewBoxesDoc@@QAEHXZ ENDP	; CNewBoxesDoc::NimstringValueToVerify
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?MoveFlashCount@CNewBoxesDoc@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MoveFlashCount@CNewBoxesDoc@@QAEHXZ PROC		; CNewBoxesDoc::MoveFlashCount, COMDAT
; _this$ = ecx

; 95   :   int MoveFlashCount(void){return m_currentMoveFlashCount;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 20 01 00
	00		 mov	 eax, DWORD PTR [eax+288]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?MoveFlashCount@CNewBoxesDoc@@QAEHXZ ENDP		; CNewBoxesDoc::MoveFlashCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\NewBoxesDoc.h
;	COMDAT ?TimeLimit@CNewBoxesDoc@@QAEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?TimeLimit@CNewBoxesDoc@@QAEHXZ PROC			; CNewBoxesDoc::TimeLimit, COMDAT
; _this$ = ecx

; 71   :   int   TimeLimit(void){return m_timeLimit;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 80 24 01 00
	00		 mov	 eax, DWORD PTR [eax+292]
  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?TimeLimit@CNewBoxesDoc@@QAEHXZ ENDP			; CNewBoxesDoc::TimeLimit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0MOVE@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MOVE@@QAE@XZ PROC					; MOVE::MOVE, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0VECTOR@@QAE@XZ	; VECTOR::VECTOR
  00016	68 00 00 00 00	 push	 OFFSET ??0VECTOR@@QAE@XZ ; VECTOR::VECTOR
  0001b	6a 02		 push	 2
  0001d	6a 08		 push	 8
  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c0 0c	 add	 eax, 12			; 0000000cH
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z
  0002b	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002e	83 c4 04	 add	 esp, 4
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??0MOVE@@QAE@XZ ENDP					; MOVE::MOVE
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1NIMCON@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1NIMCON@@QAE@XZ PROC					; NIMCON::~NIMCON, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00016	83 c4 04	 add	 esp, 4
  00019	3b ec		 cmp	 ebp, esp
  0001b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
??1NIMCON@@QAE@XZ ENDP					; NIMCON::~NIMCON
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0NIMCON@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0NIMCON@@QAE@XZ PROC					; NIMCON::NIMCON, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??0NIMCON@@QAE@XZ ENDP					; NIMCON::NIMCON
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4PossibleMove@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4PossibleMove@@QAEAAU0@ABU0@@Z PROC			; PossibleMove::operator=, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00011	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 10		 mov	 DWORD PTR [eax], edx
  00018	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001b	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0001e	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00021	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00024	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  00027	83 c0 08	 add	 eax, 8
  0002a	50		 push	 eax
  0002b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	83 c1 08	 add	 ecx, 8
  00031	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABV0@@Z	; CON::operator=
  00036	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  0003c	8b 82 18 14 00
	00		 mov	 eax, DWORD PTR [edx+5144]
  00042	89 81 18 14 00
	00		 mov	 DWORD PTR [ecx+5144], eax
  00048	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0004b	83 c4 04	 add	 esp, 4
  0004e	3b ec		 cmp	 ebp, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
??4PossibleMove@@QAEAAU0@ABU0@@Z ENDP			; PossibleMove::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1PossibleMove@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1PossibleMove@@QAE@XZ PROC				; PossibleMove::~PossibleMove, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 08	 add	 ecx, 8
  00014	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00019	83 c4 04	 add	 esp, 4
  0001c	3b ec		 cmp	 ebp, esp
  0001e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c3		 ret	 0
??1PossibleMove@@QAE@XZ ENDP				; PossibleMove::~PossibleMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0PossibleMove@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0PossibleMove@@QAE@XZ PROC				; PossibleMove::PossibleMove, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 08	 add	 ecx, 8
  00014	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00019	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001c	83 c4 04	 add	 esp, 4
  0001f	3b ec		 cmp	 ebp, esp
  00021	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
??0PossibleMove@@QAE@XZ ENDP				; PossibleMove::PossibleMove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
$T2 = -5204						; size = 16
_result$ = -5184					; size = 16
_con$ = -5160						; size = 5136
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_pDB$ = 12						; size = 4
_pMove$ = 16						; size = 4
?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z PROC ; CON::ComputeLongChainInfo
; _this$ = ecx

; 1179 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 48 14 00 00	 mov	 eax, 5192		; 00001448H
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	57		 push	 edi
  0001c	51		 push	 ecx
  0001d	8d bd ac eb ff
	ff		 lea	 edi, DWORD PTR [ebp-5204]
  00023	b9 12 05 00 00	 mov	 ecx, 1298		; 00000512H
  00028	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002d	f3 ab		 rep stosd
  0002f	59		 pop	 ecx
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	50		 push	 eax
  0003b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00044	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1180 :   CON con;

  00047	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0004d	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00052	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1181 :   LONG_CHAIN_INFO result;
; 1182 :   if (pMove->vertical) pDB->SetVLineType(pMove->dotNum, LINE_COMPUTER);

  00059	8b 45 10	 mov	 eax, DWORD PTR _pMove$[ebp]
  0005c	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  00060	85 c9		 test	 ecx, ecx
  00062	74 10		 je	 SHORT $LN2@ComputeLon
  00064	6a 01		 push	 1
  00066	8b 55 10	 mov	 edx, DWORD PTR _pMove$[ebp]
  00069	52		 push	 edx
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _pDB$[ebp]
  0006d	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType
  00072	eb 0e		 jmp	 SHORT $LN3@ComputeLon
$LN2@ComputeLon:

; 1183 :   else pDB->SetHLineType(pMove->dotNum, LINE_COMPUTER);

  00074	6a 01		 push	 1
  00076	8b 45 10	 mov	 eax, DWORD PTR _pMove$[ebp]
  00079	50		 push	 eax
  0007a	8b 4d 0c	 mov	 ecx, DWORD PTR _pDB$[ebp]
  0007d	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType
$LN3@ComputeLon:

; 1184 :   con = *pDB;

  00082	8b 4d 0c	 mov	 ecx, DWORD PTR _pDB$[ebp]
  00085	51		 push	 ecx
  00086	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0008c	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABVDOTS_AND_BOXES@@@Z ; CON::operator=

; 1185 :   result = con.ComputeLongChainInfo();

  00091	8d 95 ac eb ff
	ff		 lea	 edx, DWORD PTR $T2[ebp]
  00097	52		 push	 edx
  00098	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  0009e	e8 00 00 00 00	 call	 ?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@XZ ; CON::ComputeLongChainInfo
  000a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a5	89 8d c0 eb ff
	ff		 mov	 DWORD PTR _result$[ebp], ecx
  000ab	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000ae	89 95 c4 eb ff
	ff		 mov	 DWORD PTR _result$[ebp+4], edx
  000b4	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b7	89 8d c8 eb ff
	ff		 mov	 DWORD PTR _result$[ebp+8], ecx
  000bd	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000c0	89 95 cc eb ff
	ff		 mov	 DWORD PTR _result$[ebp+12], edx

; 1186 :   if (pMove->vertical) pDB->SetVLineType(pMove->dotNum, LINE_NONE);

  000c6	8b 45 10	 mov	 eax, DWORD PTR _pMove$[ebp]
  000c9	0f b6 48 08	 movzx	 ecx, BYTE PTR [eax+8]
  000cd	85 c9		 test	 ecx, ecx
  000cf	74 10		 je	 SHORT $LN4@ComputeLon
  000d1	6a 00		 push	 0
  000d3	8b 55 10	 mov	 edx, DWORD PTR _pMove$[ebp]
  000d6	52		 push	 edx
  000d7	8b 4d 0c	 mov	 ecx, DWORD PTR _pDB$[ebp]
  000da	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType
  000df	eb 0e		 jmp	 SHORT $LN5@ComputeLon
$LN4@ComputeLon:

; 1187 :   else pDB->SetHLineType(pMove->dotNum, LINE_NONE);

  000e1	6a 00		 push	 0
  000e3	8b 45 10	 mov	 eax, DWORD PTR _pMove$[ebp]
  000e6	50		 push	 eax
  000e7	8b 4d 0c	 mov	 ecx, DWORD PTR _pDB$[ebp]
  000ea	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType
$LN5@ComputeLon:

; 1188 :   return result;

  000ef	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  000f2	8b 95 c0 eb ff
	ff		 mov	 edx, DWORD PTR _result$[ebp]
  000f8	89 11		 mov	 DWORD PTR [ecx], edx
  000fa	8b 85 c4 eb ff
	ff		 mov	 eax, DWORD PTR _result$[ebp+4]
  00100	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00103	8b 95 c8 eb ff
	ff		 mov	 edx, DWORD PTR _result$[ebp+8]
  00109	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0010c	8b 85 cc eb ff
	ff		 mov	 eax, DWORD PTR _result$[ebp+12]
  00112	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00115	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0011c	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00122	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  00127	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1189 : }

  0012a	52		 push	 edx
  0012b	8b cd		 mov	 ecx, ebp
  0012d	50		 push	 eax
  0012e	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@ComputeLon
  00134	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00139	58		 pop	 eax
  0013a	5a		 pop	 edx
  0013b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0013e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00145	59		 pop	 ecx
  00146	5f		 pop	 edi
  00147	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014a	33 cd		 xor	 ecx, ebp
  0014c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00151	81 c4 54 14 00
	00		 add	 esp, 5204		; 00001454H
  00157	3b ec		 cmp	 ebp, esp
  00159	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015e	8b e5		 mov	 esp, ebp
  00160	5d		 pop	 ebp
  00161	c2 0c 00	 ret	 12			; 0000000cH
$LN12@ComputeLon:
  00164	02 00 00 00	 DD	 2
  00168	00 00 00 00	 DD	 $LN11@ComputeLon
$LN11@ComputeLon:
  0016c	d8 eb ff ff	 DD	 -5160			; ffffebd8H
  00170	10 14 00 00	 DD	 5136			; 00001410H
  00174	00 00 00 00	 DD	 $LN8@ComputeLon
  00178	c0 eb ff ff	 DD	 -5184			; ffffebc0H
  0017c	10 00 00 00	 DD	 16			; 00000010H
  00180	00 00 00 00	 DD	 $LN9@ComputeLon
$LN9@ComputeLon:
  00184	72		 DB	 114			; 00000072H
  00185	65		 DB	 101			; 00000065H
  00186	73		 DB	 115			; 00000073H
  00187	75		 DB	 117			; 00000075H
  00188	6c		 DB	 108			; 0000006cH
  00189	74		 DB	 116			; 00000074H
  0018a	00		 DB	 0
$LN8@ComputeLon:
  0018b	63		 DB	 99			; 00000063H
  0018c	6f		 DB	 111			; 0000006fH
  0018d	6e		 DB	 110			; 0000006eH
  0018e	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z$0:
  00000	8d 8d d8 eb ff
	ff		 lea	 ecx, DWORD PTR _con$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a b0 eb ff
	ff		 mov	 ecx, DWORD PTR [edx-5200]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z ENDP ; CON::ComputeLongChainInfo
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_neighNodeA$1 = -52					; size = 4
_len$2 = -48						; size = 4
_nnA$3 = -44						; size = 4
_edge$ = -40						; size = 4
_nn$ = -36						; size = 4
_result$ = -28						; size = 16
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@XZ PROC ; CON::ComputeLongChainInfo
; _this$ = ecx

; 1073 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 34	 sub	 esp, 52			; 00000034H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d cc	 lea	 edi, DWORD PTR [ebp-52]
  0000b	b9 0d 00 00 00	 mov	 ecx, 13			; 0000000dH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00022	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1074 :   LONG_CHAIN_INFO result;
; 1075 :   result.longestChain = 0;

  00025	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _result$[ebp+4], 0

; 1076 :   result.numLongChain = 0;

  0002c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _result$[ebp], 0

; 1077 :   result.sumOfLongChains = 0;

  00033	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _result$[ebp+8], 0

; 1078 :   result.gain = 0;

  0003a	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _result$[ebp+12], 0

; 1079 :   int nn, edge;
; 1080 :   for (nn=0; nn<m_numNode; nn++)

  00041	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _nn$[ebp], 0
  00048	eb 09		 jmp	 SHORT $LN4@ComputeLon
$LN2@ComputeLon:
  0004a	8b 45 dc	 mov	 eax, DWORD PTR _nn$[ebp]
  0004d	83 c0 01	 add	 eax, 1
  00050	89 45 dc	 mov	 DWORD PTR _nn$[ebp], eax
$LN4@ComputeLon:
  00053	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00056	8b 55 dc	 mov	 edx, DWORD PTR _nn$[ebp]
  00059	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0005b	0f 8d 7d 02 00
	00		 jge	 $LN3@ComputeLon

; 1081 :   {
; 1082 :     int nnA, len, neighNodeA;
; 1083 :     nnA = nd[nn].ix;

  00061	8b 45 dc	 mov	 eax, DWORD PTR _nn$[ebp]
  00064	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  0006f	89 55 d4	 mov	 DWORD PTR _nnA$3[ebp], edx

; 1084 :     neighNodeA = sd[nnA][0].ns;

  00072	8b 45 d4	 mov	 eax, DWORD PTR _nnA$3[ebp]
  00075	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00078	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0007f	b8 02 00 00 00	 mov	 eax, 2
  00084	6b c8 00	 imul	 ecx, eax, 0
  00087	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  0008b	89 55 cc	 mov	 DWORD PTR _neighNodeA$1[ebp], edx

; 1085 :     if (IS_ISOLATED(neighNodeA))

  0008e	81 7d cc fa 00
	00 00		 cmp	 DWORD PTR _neighNodeA$1[ebp], 250 ; 000000faH
  00095	0f 8e e9 00 00
	00		 jle	 $LN8@ComputeLon

; 1086 :     {
; 1087 :       len = ed[nnA].e[0].el;

  0009b	8b 45 d4	 mov	 eax, DWORD PTR _nnA$3[ebp]
  0009e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a1	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  000a5	b8 02 00 00 00	 mov	 eax, 2
  000aa	6b c8 00	 imul	 ecx, eax, 0
  000ad	0f b6 54 0a 01	 movzx	 edx, BYTE PTR [edx+ecx+1]
  000b2	89 55 d0	 mov	 DWORD PTR _len$2[ebp], edx

; 1088 :       if (neighNodeA == GND_GND)

  000b5	81 7d cc fd 00
	00 00		 cmp	 DWORD PTR _neighNodeA$1[ebp], 253 ; 000000fdH
  000bc	75 38		 jne	 SHORT $LN10@ComputeLon

; 1089 :       {
; 1090 :         if (len > 2)

  000be	83 7d d0 02	 cmp	 DWORD PTR _len$2[ebp], 2
  000c2	7e 2d		 jle	 SHORT $LN12@ComputeLon

; 1091 :         {
; 1092 :           if (result.longestChain < len) result.longestChain = len;

  000c4	8b 45 e8	 mov	 eax, DWORD PTR _result$[ebp+4]
  000c7	3b 45 d0	 cmp	 eax, DWORD PTR _len$2[ebp]
  000ca	7d 06		 jge	 SHORT $LN13@ComputeLon
  000cc	8b 4d d0	 mov	 ecx, DWORD PTR _len$2[ebp]
  000cf	89 4d e8	 mov	 DWORD PTR _result$[ebp+4], ecx
$LN13@ComputeLon:

; 1093 :           result.numLongChain++;

  000d2	8b 55 e4	 mov	 edx, DWORD PTR _result$[ebp]
  000d5	83 c2 01	 add	 edx, 1
  000d8	89 55 e4	 mov	 DWORD PTR _result$[ebp], edx

; 1094 :           result.sumOfLongChains += len;

  000db	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp+8]
  000de	03 45 d0	 add	 eax, DWORD PTR _len$2[ebp]
  000e1	89 45 ec	 mov	 DWORD PTR _result$[ebp+8], eax

; 1095 :           result.gain += len-4;

  000e4	8b 4d d0	 mov	 ecx, DWORD PTR _len$2[ebp]
  000e7	8b 55 f0	 mov	 edx, DWORD PTR _result$[ebp+12]
  000ea	8d 44 0a fc	 lea	 eax, DWORD PTR [edx+ecx-4]
  000ee	89 45 f0	 mov	 DWORD PTR _result$[ebp+12], eax
$LN12@ComputeLon:

; 1096 :         };
; 1097 :       }

  000f1	e9 89 00 00 00	 jmp	 $LN11@ComputeLon
$LN10@ComputeLon:

; 1098 :       else if (neighNodeA == GND_DE)

  000f6	81 7d cc fc 00
	00 00		 cmp	 DWORD PTR _neighNodeA$1[ebp], 252 ; 000000fcH
  000fd	75 35		 jne	 SHORT $LN14@ComputeLon

; 1099 :       {
; 1100 :         if (len > 1)

  000ff	83 7d d0 01	 cmp	 DWORD PTR _len$2[ebp], 1
  00103	7e 2d		 jle	 SHORT $LN16@ComputeLon

; 1101 :         {
; 1102 :           if (result.longestChain < len) result.longestChain = len;

  00105	8b 4d e8	 mov	 ecx, DWORD PTR _result$[ebp+4]
  00108	3b 4d d0	 cmp	 ecx, DWORD PTR _len$2[ebp]
  0010b	7d 06		 jge	 SHORT $LN17@ComputeLon
  0010d	8b 55 d0	 mov	 edx, DWORD PTR _len$2[ebp]
  00110	89 55 e8	 mov	 DWORD PTR _result$[ebp+4], edx
$LN17@ComputeLon:

; 1103 :           result.numLongChain++;

  00113	8b 45 e4	 mov	 eax, DWORD PTR _result$[ebp]
  00116	83 c0 01	 add	 eax, 1
  00119	89 45 e4	 mov	 DWORD PTR _result$[ebp], eax

; 1104 :           result.sumOfLongChains += len;

  0011c	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp+8]
  0011f	03 4d d0	 add	 ecx, DWORD PTR _len$2[ebp]
  00122	89 4d ec	 mov	 DWORD PTR _result$[ebp+8], ecx

; 1105 :           result.gain += len-4;

  00125	8b 55 d0	 mov	 edx, DWORD PTR _len$2[ebp]
  00128	8b 45 f0	 mov	 eax, DWORD PTR _result$[ebp+12]
  0012b	8d 4c 10 fc	 lea	 ecx, DWORD PTR [eax+edx-4]
  0012f	89 4d f0	 mov	 DWORD PTR _result$[ebp+12], ecx
$LN16@ComputeLon:

; 1106 :         };
; 1107 :       }

  00132	eb 4b		 jmp	 SHORT $LN11@ComputeLon
$LN14@ComputeLon:

; 1108 :       else if (neighNodeA == LOOP)

  00134	81 7d cc fe 00
	00 00		 cmp	 DWORD PTR _neighNodeA$1[ebp], 254 ; 000000feH
  0013b	75 35		 jne	 SHORT $LN18@ComputeLon

; 1109 :       {
; 1110 :         if (len > 3)

  0013d	83 7d d0 03	 cmp	 DWORD PTR _len$2[ebp], 3
  00141	7e 2d		 jle	 SHORT $LN20@ComputeLon

; 1111 :         {
; 1112 :           if (result.longestChain < len) result.longestChain = len;

  00143	8b 55 e8	 mov	 edx, DWORD PTR _result$[ebp+4]
  00146	3b 55 d0	 cmp	 edx, DWORD PTR _len$2[ebp]
  00149	7d 06		 jge	 SHORT $LN21@ComputeLon
  0014b	8b 45 d0	 mov	 eax, DWORD PTR _len$2[ebp]
  0014e	89 45 e8	 mov	 DWORD PTR _result$[ebp+4], eax
$LN21@ComputeLon:

; 1113 :           result.numLongChain++;

  00151	8b 4d e4	 mov	 ecx, DWORD PTR _result$[ebp]
  00154	83 c1 01	 add	 ecx, 1
  00157	89 4d e4	 mov	 DWORD PTR _result$[ebp], ecx

; 1114 :           result.sumOfLongChains += len;

  0015a	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp+8]
  0015d	03 55 d0	 add	 edx, DWORD PTR _len$2[ebp]
  00160	89 55 ec	 mov	 DWORD PTR _result$[ebp+8], edx

; 1115 :           result.gain += len-8;

  00163	8b 45 d0	 mov	 eax, DWORD PTR _len$2[ebp]
  00166	8b 4d f0	 mov	 ecx, DWORD PTR _result$[ebp+12]
  00169	8d 54 01 f8	 lea	 edx, DWORD PTR [ecx+eax-8]
  0016d	89 55 f0	 mov	 DWORD PTR _result$[ebp+12], edx
$LN20@ComputeLon:

; 1116 :         };
; 1117 :       }

  00170	eb 0d		 jmp	 SHORT $LN11@ComputeLon
$LN18@ComputeLon:

; 1118 :       else
; 1119 :       {
; 1120 :         NotImplemented("ISOLATED EDGE");

  00172	68 00 00 00 00	 push	 OFFSET $SG226895
  00177	e8 00 00 00 00	 call	 ?NotImplemented@@YAXPAD@Z ; NotImplemented
  0017c	83 c4 04	 add	 esp, 4
$LN11@ComputeLon:

; 1121 :       };
; 1122 :     }

  0017f	e9 55 01 00 00	 jmp	 $LN9@ComputeLon
$LN8@ComputeLon:

; 1123 :     else
; 1124 :     {
; 1125 :       for (edge=0; edge<nd[nnA].ec; edge++)

  00184	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _edge$[ebp], 0
  0018b	eb 09		 jmp	 SHORT $LN7@ComputeLon
$LN5@ComputeLon:
  0018d	8b 45 d8	 mov	 eax, DWORD PTR _edge$[ebp]
  00190	83 c0 01	 add	 eax, 1
  00193	89 45 d8	 mov	 DWORD PTR _edge$[ebp], eax
$LN7@ComputeLon:
  00196	8b 4d d4	 mov	 ecx, DWORD PTR _nnA$3[ebp]
  00199	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0019c	0f b6 84 8a 10
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4112]
  001a4	39 45 d8	 cmp	 DWORD PTR _edge$[ebp], eax
  001a7	0f 8d 2c 01 00
	00		 jge	 $LN9@ComputeLon

; 1126 :       {
; 1127 :         len = ed[nnA].e[edge].el;

  001ad	8b 4d d4	 mov	 ecx, DWORD PTR _nnA$3[ebp]
  001b0	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001b3	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  001b7	8b 4d d8	 mov	 ecx, DWORD PTR _edge$[ebp]
  001ba	0f b6 54 48 01	 movzx	 edx, BYTE PTR [eax+ecx*2+1]
  001bf	89 55 d0	 mov	 DWORD PTR _len$2[ebp], edx

; 1128 :         neighNodeA = sd[nnA][edge].ns;

  001c2	8b 45 d4	 mov	 eax, DWORD PTR _nnA$3[ebp]
  001c5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001c8	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  001cf	8b 45 d8	 mov	 eax, DWORD PTR _edge$[ebp]
  001d2	0f b6 0c 42	 movzx	 ecx, BYTE PTR [edx+eax*2]
  001d6	89 4d cc	 mov	 DWORD PTR _neighNodeA$1[ebp], ecx

; 1129 :         if (IS_A_NODE(neighNodeA))

  001d9	81 7d cc f9 00
	00 00		 cmp	 DWORD PTR _neighNodeA$1[ebp], 249 ; 000000f9H
  001e0	7d 69		 jge	 SHORT $LN22@ComputeLon

; 1130 :         {
; 1131 :           if (    (neighNodeA > nnA)
; 1132 :               || ((neighNodeA == nnA) && (sd[nnA][edge].ne > edge))

  001e2	8b 55 cc	 mov	 edx, DWORD PTR _neighNodeA$1[ebp]
  001e5	3b 55 d4	 cmp	 edx, DWORD PTR _nnA$3[ebp]
  001e8	7f 22		 jg	 SHORT $LN26@ComputeLon
  001ea	8b 45 cc	 mov	 eax, DWORD PTR _neighNodeA$1[ebp]
  001ed	3b 45 d4	 cmp	 eax, DWORD PTR _nnA$3[ebp]
  001f0	75 4f		 jne	 SHORT $LN24@ComputeLon
  001f2	8b 4d d4	 mov	 ecx, DWORD PTR _nnA$3[ebp]
  001f5	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001f8	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  001ff	8b 4d d8	 mov	 ecx, DWORD PTR _edge$[ebp]
  00202	0f b6 54 48 01	 movzx	 edx, BYTE PTR [eax+ecx*2+1]
  00207	3b 55 d8	 cmp	 edx, DWORD PTR _edge$[ebp]
  0020a	7e 35		 jle	 SHORT $LN24@ComputeLon
$LN26@ComputeLon:

; 1133 :             )
; 1134 :           {
; 1135 :             if (len > 2)

  0020c	83 7d d0 02	 cmp	 DWORD PTR _len$2[ebp], 2
  00210	7e 2d		 jle	 SHORT $LN27@ComputeLon

; 1136 :             {
; 1137 :               if (result.longestChain < len) result.longestChain = len;

  00212	8b 45 e8	 mov	 eax, DWORD PTR _result$[ebp+4]
  00215	3b 45 d0	 cmp	 eax, DWORD PTR _len$2[ebp]
  00218	7d 06		 jge	 SHORT $LN28@ComputeLon
  0021a	8b 4d d0	 mov	 ecx, DWORD PTR _len$2[ebp]
  0021d	89 4d e8	 mov	 DWORD PTR _result$[ebp+4], ecx
$LN28@ComputeLon:

; 1138 :               result.numLongChain++;

  00220	8b 55 e4	 mov	 edx, DWORD PTR _result$[ebp]
  00223	83 c2 01	 add	 edx, 1
  00226	89 55 e4	 mov	 DWORD PTR _result$[ebp], edx

; 1139 :               result.sumOfLongChains += len;

  00229	8b 45 ec	 mov	 eax, DWORD PTR _result$[ebp+8]
  0022c	03 45 d0	 add	 eax, DWORD PTR _len$2[ebp]
  0022f	89 45 ec	 mov	 DWORD PTR _result$[ebp+8], eax

; 1140 :               result.gain += len-4;

  00232	8b 4d d0	 mov	 ecx, DWORD PTR _len$2[ebp]
  00235	8b 55 f0	 mov	 edx, DWORD PTR _result$[ebp+12]
  00238	8d 44 0a fc	 lea	 eax, DWORD PTR [edx+ecx-4]
  0023c	89 45 f0	 mov	 DWORD PTR _result$[ebp+12], eax
$LN27@ComputeLon:

; 1141 :             };
; 1142 :           }

  0023f	eb 05		 jmp	 SHORT $LN25@ComputeLon
$LN24@ComputeLon:

; 1143 :           else
; 1144 :           {
; 1145 :             continue; //Duplicate -  Don't count it twice

  00241	e9 47 ff ff ff	 jmp	 $LN5@ComputeLon
$LN25@ComputeLon:

; 1146 :           };
; 1147 :         }

  00246	e9 89 00 00 00	 jmp	 $LN23@ComputeLon
$LN22@ComputeLon:

; 1148 :         else if (neighNodeA == GROUND)

  0024b	81 7d cc fa 00
	00 00		 cmp	 DWORD PTR _neighNodeA$1[ebp], 250 ; 000000faH
  00252	75 35		 jne	 SHORT $LN29@ComputeLon

; 1149 :         {
; 1150 :           if (len > 2)

  00254	83 7d d0 02	 cmp	 DWORD PTR _len$2[ebp], 2
  00258	7e 2d		 jle	 SHORT $LN31@ComputeLon

; 1151 :           {
; 1152 :             result.numLongChain++;

  0025a	8b 4d e4	 mov	 ecx, DWORD PTR _result$[ebp]
  0025d	83 c1 01	 add	 ecx, 1
  00260	89 4d e4	 mov	 DWORD PTR _result$[ebp], ecx

; 1153 :             if (len > result.longestChain) result.longestChain = len;

  00263	8b 55 d0	 mov	 edx, DWORD PTR _len$2[ebp]
  00266	3b 55 e8	 cmp	 edx, DWORD PTR _result$[ebp+4]
  00269	7e 06		 jle	 SHORT $LN32@ComputeLon
  0026b	8b 45 d0	 mov	 eax, DWORD PTR _len$2[ebp]
  0026e	89 45 e8	 mov	 DWORD PTR _result$[ebp+4], eax
$LN32@ComputeLon:

; 1154 :             result.sumOfLongChains += len;

  00271	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp+8]
  00274	03 4d d0	 add	 ecx, DWORD PTR _len$2[ebp]
  00277	89 4d ec	 mov	 DWORD PTR _result$[ebp+8], ecx

; 1155 :             result.gain += len-4;

  0027a	8b 55 d0	 mov	 edx, DWORD PTR _len$2[ebp]
  0027d	8b 45 f0	 mov	 eax, DWORD PTR _result$[ebp+12]
  00280	8d 4c 10 fc	 lea	 ecx, DWORD PTR [eax+edx-4]
  00284	89 4d f0	 mov	 DWORD PTR _result$[ebp+12], ecx
$LN31@ComputeLon:

; 1156 :           };
; 1157 :         }

  00287	eb 4b		 jmp	 SHORT $LN23@ComputeLon
$LN29@ComputeLon:

; 1158 :         else if (neighNodeA == DEADEND)

  00289	81 7d cc f9 00
	00 00		 cmp	 DWORD PTR _neighNodeA$1[ebp], 249 ; 000000f9H
  00290	75 35		 jne	 SHORT $LN33@ComputeLon

; 1159 :         {
; 1160 :           if (len > 1)

  00292	83 7d d0 01	 cmp	 DWORD PTR _len$2[ebp], 1
  00296	7e 2d		 jle	 SHORT $LN35@ComputeLon

; 1161 :           {
; 1162 :             result.numLongChain++;

  00298	8b 55 e4	 mov	 edx, DWORD PTR _result$[ebp]
  0029b	83 c2 01	 add	 edx, 1
  0029e	89 55 e4	 mov	 DWORD PTR _result$[ebp], edx

; 1163 :             if (len > result.longestChain) result.longestChain = len;

  002a1	8b 45 d0	 mov	 eax, DWORD PTR _len$2[ebp]
  002a4	3b 45 e8	 cmp	 eax, DWORD PTR _result$[ebp+4]
  002a7	7e 06		 jle	 SHORT $LN36@ComputeLon
  002a9	8b 4d d0	 mov	 ecx, DWORD PTR _len$2[ebp]
  002ac	89 4d e8	 mov	 DWORD PTR _result$[ebp+4], ecx
$LN36@ComputeLon:

; 1164 :             result.sumOfLongChains += len;

  002af	8b 55 ec	 mov	 edx, DWORD PTR _result$[ebp+8]
  002b2	03 55 d0	 add	 edx, DWORD PTR _len$2[ebp]
  002b5	89 55 ec	 mov	 DWORD PTR _result$[ebp+8], edx

; 1165 :             result.gain += len-4;

  002b8	8b 45 d0	 mov	 eax, DWORD PTR _len$2[ebp]
  002bb	8b 4d f0	 mov	 ecx, DWORD PTR _result$[ebp+12]
  002be	8d 54 01 fc	 lea	 edx, DWORD PTR [ecx+eax-4]
  002c2	89 55 f0	 mov	 DWORD PTR _result$[ebp+12], edx
$LN35@ComputeLon:

; 1166 :           };
; 1167 :         }

  002c5	eb 0d		 jmp	 SHORT $LN23@ComputeLon
$LN33@ComputeLon:

; 1168 :         else
; 1169 :         {
; 1170 :           NotImplemented("Unknown edge type");

  002c7	68 00 00 00 00	 push	 OFFSET $SG226911
  002cc	e8 00 00 00 00	 call	 ?NotImplemented@@YAXPAD@Z ; NotImplemented
  002d1	83 c4 04	 add	 esp, 4
$LN23@ComputeLon:

; 1171 :         };
; 1172 :       };

  002d4	e9 b4 fe ff ff	 jmp	 $LN5@ComputeLon
$LN9@ComputeLon:

; 1173 :     }
; 1174 :   };

  002d9	e9 6c fd ff ff	 jmp	 $LN2@ComputeLon
$LN3@ComputeLon:

; 1175 :   return result;

  002de	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  002e1	8b 4d e4	 mov	 ecx, DWORD PTR _result$[ebp]
  002e4	89 08		 mov	 DWORD PTR [eax], ecx
  002e6	8b 55 e8	 mov	 edx, DWORD PTR _result$[ebp+4]
  002e9	89 50 04	 mov	 DWORD PTR [eax+4], edx
  002ec	8b 4d ec	 mov	 ecx, DWORD PTR _result$[ebp+8]
  002ef	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  002f2	8b 55 f0	 mov	 edx, DWORD PTR _result$[ebp+12]
  002f5	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  002f8	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1176 : }

  002fb	52		 push	 edx
  002fc	8b cd		 mov	 ecx, ebp
  002fe	50		 push	 eax
  002ff	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN40@ComputeLon
  00305	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0030a	58		 pop	 eax
  0030b	5a		 pop	 edx
  0030c	5f		 pop	 edi
  0030d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00310	33 cd		 xor	 ecx, ebp
  00312	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00317	83 c4 34	 add	 esp, 52			; 00000034H
  0031a	3b ec		 cmp	 ebp, esp
  0031c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00321	8b e5		 mov	 esp, ebp
  00323	5d		 pop	 ebp
  00324	c2 04 00	 ret	 4
  00327	90		 npad	 1
$LN40@ComputeLon:
  00328	01 00 00 00	 DD	 1
  0032c	00 00 00 00	 DD	 $LN39@ComputeLon
$LN39@ComputeLon:
  00330	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00334	10 00 00 00	 DD	 16			; 00000010H
  00338	00 00 00 00	 DD	 $LN38@ComputeLon
$LN38@ComputeLon:
  0033c	72		 DB	 114			; 00000072H
  0033d	65		 DB	 101			; 00000065H
  0033e	73		 DB	 115			; 00000073H
  0033f	75		 DB	 117			; 00000075H
  00340	6c		 DB	 108			; 0000006cH
  00341	74		 DB	 116			; 00000074H
  00342	00		 DB	 0
?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@XZ ENDP ; CON::ComputeLongChainInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
$T2 = -10376						; size = 4
$T3 = -10372						; size = 4
_cost$4 = -10368					; size = 4
_cost$5 = -10364					; size = 4
_len$6 = -10360						; size = 4
_cost$7 = -10356					; size = 4
_cost$8 = -10352					; size = 4
_cost$9 = -10348					; size = 4
_len$10 = -10344					; size = 4
_offering$11 = -10340					; size = 4
_nnB$12 = -10336					; size = 4
_ec$13 = -10332						; size = 4
_en$14 = -10328						; size = 4
_nnA$15 = -10324					; size = 4
_nimcon$ = -10316					; size = 5136
_pm$ = -5172						; size = 5136
_nimval$ = -32						; size = 4
_maxCost$ = -28						; size = 4
_nn$ = -24						; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_direction$ = 8						; size = 4
_depth$ = 12						; size = 4
?MaxCostOfNimZero@CON@@QBEHHH@Z PROC			; CON::MaxCostOfNimZero
; _this$ = ecx

; 535  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?MaxCostOfNimZero@CON@@QBEHHH@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 7c 28 00 00	 mov	 eax, 10364		; 0000287cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 78 d7 ff
	ff		 lea	 edi, DWORD PTR [ebp-10376]
  00024	b9 1f 0a 00 00	 mov	 ecx, 2591		; 00000a1fH
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	50		 push	 eax
  0003c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00045	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 536  :   // result is the cost of reducing the nimValue to zero.
; 537  :   // If direction == 1 then we maximize our opponent's cost of
; 538  :   //     forcing a nimvalue of zero.
; 539  :   // If direction == -1 then we minimize our cost of reducing the
; 540  :   //     nimvalue to zero.
; 541  :   int nn, maxCost, nimval;
; 542  :   CON pm;

  00048	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  0004e	e8 00 00 00 00	 call	 ??0CON@@QAE@XZ		; CON::CON
  00053	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 543  :   NIMCON nimcon;

  0005a	8d 8d b4 d7 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$[ebp]
  00060	e8 00 00 00 00	 call	 ??0NIMCON@@QAE@XZ
  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1

; 544  : #ifdef _CHECK
; 545  :   CheckEverything(0, m_numNode, false);
; 546  : #endif
; 547  :   if (depth == 0) return 0;

  00069	83 7d 0c 00	 cmp	 DWORD PTR _depth$[ebp], 0
  0006d	75 36		 jne	 SHORT $LN8@MaxCostOfN
  0006f	c7 85 7c d7 ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], 0
  00079	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  0007d	8d 8d b4 d7 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$[ebp]
  00083	e8 00 00 00 00	 call	 ??1NIMCON@@QAE@XZ
  00088	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0008f	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  00095	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  0009a	8b 85 7c d7 ff
	ff		 mov	 eax, DWORD PTR $T3[ebp]
  000a0	e9 4b 05 00 00	 jmp	 $LN1@MaxCostOfN
$LN8@MaxCostOfN:

; 548  :   maxCost = -9999*direction;

  000a5	69 45 08 f1 d8
	ff ff		 imul	 eax, DWORD PTR _direction$[ebp], -9999
  000ac	89 45 e4	 mov	 DWORD PTR _maxCost$[ebp], eax

; 549  :   for (nn=0; nn<m_numNode; nn++)

  000af	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nn$[ebp], 0
  000b6	eb 09		 jmp	 SHORT $LN4@MaxCostOfN
$LN2@MaxCostOfN:
  000b8	8b 4d e8	 mov	 ecx, DWORD PTR _nn$[ebp]
  000bb	83 c1 01	 add	 ecx, 1
  000be	89 4d e8	 mov	 DWORD PTR _nn$[ebp], ecx
$LN4@MaxCostOfN:
  000c1	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000c4	8b 45 e8	 mov	 eax, DWORD PTR _nn$[ebp]
  000c7	3b 02		 cmp	 eax, DWORD PTR [edx]
  000c9	0f 8d f1 04 00
	00		 jge	 $LN3@MaxCostOfN

; 550  :   {
; 551  :     int nnA, en, ec, nnB, offering;
; 552  :     nnA = nd[nn].ix;

  000cf	8b 4d e8	 mov	 ecx, DWORD PTR _nn$[ebp]
  000d2	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000d5	0f b6 84 8a 13
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4115]
  000dd	89 85 ac d7 ff
	ff		 mov	 DWORD PTR _nnA$15[ebp], eax

; 553  :     if (IS_ISOLATED(sd[nnA][0].ns))

  000e3	8b 8d ac d7 ff
	ff		 mov	 ecx, DWORD PTR _nnA$15[ebp]
  000e9	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000ec	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  000f3	b9 02 00 00 00	 mov	 ecx, 2
  000f8	6b d1 00	 imul	 edx, ecx, 0
  000fb	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  000ff	3d fa 00 00 00	 cmp	 eax, 250		; 000000faH
  00104	0f 8e 29 02 00
	00		 jle	 $LN9@MaxCostOfN

; 554  :     {
; 555  :       if (nn < m_numNode-1)

  0010a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0010d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0010f	83 ea 01	 sub	 edx, 1
  00112	39 55 e8	 cmp	 DWORD PTR _nn$[ebp], edx
  00115	7d 55		 jge	 SHORT $LN11@MaxCostOfN

; 556  :       {
; 557  :         nnB = nd[nn+1].ix;

  00117	8b 45 e8	 mov	 eax, DWORD PTR _nn$[ebp]
  0011a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0011d	0f b6 94 81 17
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4119]
  00125	89 95 a0 d7 ff
	ff		 mov	 DWORD PTR _nnB$12[ebp], edx

; 558  :         if (sd[nnA][0].ns == sd[nnB][0].ns)

  0012b	8b 85 ac d7 ff
	ff		 mov	 eax, DWORD PTR _nnA$15[ebp]
  00131	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00134	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0013b	b8 02 00 00 00	 mov	 eax, 2
  00140	6b c8 00	 imul	 ecx, eax, 0
  00143	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  00147	8b 85 a0 d7 ff
	ff		 mov	 eax, DWORD PTR _nnB$12[ebp]
  0014d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	8d 84 c1 10 08
	00 00		 lea	 eax, DWORD PTR [ecx+eax*8+2064]
  00157	b9 02 00 00 00	 mov	 ecx, 2
  0015c	6b c9 00	 imul	 ecx, ecx, 0
  0015f	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  00163	3b d0		 cmp	 edx, eax
  00165	75 05		 jne	 SHORT $LN11@MaxCostOfN

; 559  :         {
; 560  :           continue; //The shorter one comes later.

  00167	e9 4c ff ff ff	 jmp	 $LN2@MaxCostOfN
$LN11@MaxCostOfN:

; 561  :         };
; 562  :       };
; 563  :       if (sd[nnA][0].ns == GND_GND)

  0016c	8b 8d ac d7 ff
	ff		 mov	 ecx, DWORD PTR _nnA$15[ebp]
  00172	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00175	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0017c	b9 02 00 00 00	 mov	 ecx, 2
  00181	6b d1 00	 imul	 edx, ecx, 0
  00184	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00188	3d fd 00 00 00	 cmp	 eax, 253		; 000000fdH
  0018d	75 5a		 jne	 SHORT $LN13@MaxCostOfN

; 564  :       {
; 565  :         int len;
; 566  :         len = ed[nnA].e[0].el;

  0018f	8b 8d ac d7 ff
	ff		 mov	 ecx, DWORD PTR _nnA$15[ebp]
  00195	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00198	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  0019c	b9 02 00 00 00	 mov	 ecx, 2
  001a1	6b d1 00	 imul	 edx, ecx, 0
  001a4	0f b6 44 10 01	 movzx	 eax, BYTE PTR [eax+edx+1]
  001a9	89 85 98 d7 ff
	ff		 mov	 DWORD PTR _len$10[ebp], eax

; 567  :         if (len > 2) continue;

  001af	83 bd 98 d7 ff
	ff 02		 cmp	 DWORD PTR _len$10[ebp], 2
  001b6	7e 05		 jle	 SHORT $LN15@MaxCostOfN
  001b8	e9 fb fe ff ff	 jmp	 $LN2@MaxCostOfN
$LN15@MaxCostOfN:

; 568  :         pm = *this;

  001bd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c0	51		 push	 ecx
  001c1	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  001c7	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABV0@@Z	; CON::operator=

; 569  :         offering = len;

  001cc	8b 95 98 d7 ff
	ff		 mov	 edx, DWORD PTR _len$10[ebp]
  001d2	89 95 9c d7 ff
	ff		 mov	 DWORD PTR _offering$11[ebp], edx

; 570  :         pm.DeleteNode(nn);

  001d8	8b 45 e8	 mov	 eax, DWORD PTR _nn$[ebp]
  001db	50		 push	 eax
  001dc	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  001e2	e8 00 00 00 00	 call	 ?DeleteNode@CON@@QAEXH@Z ; CON::DeleteNode

; 571  :       }

  001e7	eb 41		 jmp	 SHORT $LN14@MaxCostOfN
$LN13@MaxCostOfN:

; 572  :       else if (sd[nnA][0].ns == LOOP)

  001e9	8b 8d ac d7 ff
	ff		 mov	 ecx, DWORD PTR _nnA$15[ebp]
  001ef	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  001f2	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  001f9	b9 02 00 00 00	 mov	 ecx, 2
  001fe	6b d1 00	 imul	 edx, ecx, 0
  00201	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00205	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  0020a	75 07		 jne	 SHORT $LN16@MaxCostOfN

; 573  :       {
; 574  :         continue;

  0020c	e9 a7 fe ff ff	 jmp	 $LN2@MaxCostOfN

; 575  :       }

  00211	eb 17		 jmp	 SHORT $LN14@MaxCostOfN
$LN16@MaxCostOfN:

; 576  :       else
; 577  :       {
; 578  :         offering = 0;

  00213	c7 85 9c d7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _offering$11[ebp], 0

; 579  :         NotImplemented("Unknown isolated chain");

  0021d	68 00 00 00 00	 push	 OFFSET $SG226637
  00222	e8 00 00 00 00	 call	 ?NotImplemented@@YAXPAD@Z ; NotImplemented
  00227	83 c4 04	 add	 esp, 4
$LN14@MaxCostOfN:

; 580  :       };
; 581  :       if (pm.m_numNode == 0)

  0022a	83 bd cc eb ff
	ff 00		 cmp	 DWORD PTR _pm$[ebp], 0
  00231	75 36		 jne	 SHORT $LN18@MaxCostOfN

; 582  :       {
; 583  :         if (direction < 0)

  00233	83 7d 08 00	 cmp	 DWORD PTR _direction$[ebp], 0
  00237	7d 0b		 jge	 SHORT $LN20@MaxCostOfN

; 584  :         {
; 585  :           maxCost = offering;

  00239	8b 8d 9c d7 ff
	ff		 mov	 ecx, DWORD PTR _offering$11[ebp]
  0023f	89 4d e4	 mov	 DWORD PTR _maxCost$[ebp], ecx

; 586  :           //ImplementationError("Expected non-zero nimval");
; 587  :         }

  00242	eb 20		 jmp	 SHORT $LN21@MaxCostOfN
$LN20@MaxCostOfN:

; 588  :         else
; 589  :         {
; 590  :           int cost;
; 591  :           cost = offering;

  00244	8b 95 9c d7 ff
	ff		 mov	 edx, DWORD PTR _offering$11[ebp]
  0024a	89 95 94 d7 ff
	ff		 mov	 DWORD PTR _cost$9[ebp], edx

; 592  :           if (cost > maxCost) maxCost = cost;

  00250	8b 85 94 d7 ff
	ff		 mov	 eax, DWORD PTR _cost$9[ebp]
  00256	3b 45 e4	 cmp	 eax, DWORD PTR _maxCost$[ebp]
  00259	7e 09		 jle	 SHORT $LN21@MaxCostOfN
  0025b	8b 8d 94 d7 ff
	ff		 mov	 ecx, DWORD PTR _cost$9[ebp]
  00261	89 4d e4	 mov	 DWORD PTR _maxCost$[ebp], ecx
$LN21@MaxCostOfN:

; 593  :         };
; 594  :       }

  00264	e9 c5 00 00 00	 jmp	 $LN19@MaxCostOfN
$LN18@MaxCostOfN:

; 595  :       else
; 596  :       {
; 597  :         pm.Canon(0, pm.m_numNode);

  00269	8b 95 cc eb ff
	ff		 mov	 edx, DWORD PTR _pm$[ebp]
  0026f	52		 push	 edx
  00270	6a 00		 push	 0
  00272	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  00278	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon

; 598  :         nimval = nimcon.NimVal(&pm);

  0027d	8d 85 cc eb ff
	ff		 lea	 eax, DWORD PTR _pm$[ebp]
  00283	50		 push	 eax
  00284	8d 8d b4 d7 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$[ebp]
  0028a	e8 00 00 00 00	 call	 ?NimVal@NIMCON@@QAEHPBVCON@@@Z ; NIMCON::NimVal
  0028f	89 45 e0	 mov	 DWORD PTR _nimval$[ebp], eax

; 599  :         if (direction > 0) // If looking for max

  00292	83 7d 08 00	 cmp	 DWORD PTR _direction$[ebp], 0
  00296	7e 53		 jle	 SHORT $LN23@MaxCostOfN

; 600  :         {
; 601  :           if (nimval == 0)

  00298	83 7d e0 00	 cmp	 DWORD PTR _nimval$[ebp], 0
  0029c	75 0f		 jne	 SHORT $LN25@MaxCostOfN

; 602  :           {
; 603  :             ImplementationError("Expected non-zero nimval");

  0029e	68 00 00 00 00	 push	 OFFSET $SG226647
  002a3	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  002a8	83 c4 04	 add	 esp, 4

; 604  :           }

  002ab	eb 3c		 jmp	 SHORT $LN26@MaxCostOfN
$LN25@MaxCostOfN:

; 605  :           else
; 606  :           {
; 607  :             int cost;
; 608  :             cost = -offering + pm.MaxCostOfNimZero(-direction, depth-1);

  002ad	8b b5 9c d7 ff
	ff		 mov	 esi, DWORD PTR _offering$11[ebp]
  002b3	f7 de		 neg	 esi
  002b5	8b 4d 0c	 mov	 ecx, DWORD PTR _depth$[ebp]
  002b8	83 e9 01	 sub	 ecx, 1
  002bb	51		 push	 ecx
  002bc	8b 55 08	 mov	 edx, DWORD PTR _direction$[ebp]
  002bf	f7 da		 neg	 edx
  002c1	52		 push	 edx
  002c2	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  002c8	e8 00 00 00 00	 call	 ?MaxCostOfNimZero@CON@@QBEHHH@Z ; CON::MaxCostOfNimZero
  002cd	03 f0		 add	 esi, eax
  002cf	89 b5 90 d7 ff
	ff		 mov	 DWORD PTR _cost$8[ebp], esi

; 609  :             if (cost > maxCost) maxCost = cost;

  002d5	8b 85 90 d7 ff
	ff		 mov	 eax, DWORD PTR _cost$8[ebp]
  002db	3b 45 e4	 cmp	 eax, DWORD PTR _maxCost$[ebp]
  002de	7e 09		 jle	 SHORT $LN26@MaxCostOfN
  002e0	8b 8d 90 d7 ff
	ff		 mov	 ecx, DWORD PTR _cost$8[ebp]
  002e6	89 4d e4	 mov	 DWORD PTR _maxCost$[ebp], ecx
$LN26@MaxCostOfN:

; 610  :           };
; 611  :         }

  002e9	eb 43		 jmp	 SHORT $LN19@MaxCostOfN
$LN23@MaxCostOfN:

; 612  :         else
; 613  :         {
; 614  :           if (nimval != 0) continue; //We need to find a move with nimval==0.

  002eb	83 7d e0 00	 cmp	 DWORD PTR _nimval$[ebp], 0
  002ef	74 05		 je	 SHORT $LN28@MaxCostOfN
  002f1	e9 c2 fd ff ff	 jmp	 $LN2@MaxCostOfN
$LN28@MaxCostOfN:

; 615  :           int cost;
; 616  :           cost = offering + pm.MaxCostOfNimZero(-direction, depth-1);

  002f6	8b 55 0c	 mov	 edx, DWORD PTR _depth$[ebp]
  002f9	83 ea 01	 sub	 edx, 1
  002fc	52		 push	 edx
  002fd	8b 45 08	 mov	 eax, DWORD PTR _direction$[ebp]
  00300	f7 d8		 neg	 eax
  00302	50		 push	 eax
  00303	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  00309	e8 00 00 00 00	 call	 ?MaxCostOfNimZero@CON@@QBEHHH@Z ; CON::MaxCostOfNimZero
  0030e	03 85 9c d7 ff
	ff		 add	 eax, DWORD PTR _offering$11[ebp]
  00314	89 85 8c d7 ff
	ff		 mov	 DWORD PTR _cost$7[ebp], eax

; 617  :           if (cost < maxCost) maxCost = cost;

  0031a	8b 8d 8c d7 ff
	ff		 mov	 ecx, DWORD PTR _cost$7[ebp]
  00320	3b 4d e4	 cmp	 ecx, DWORD PTR _maxCost$[ebp]
  00323	7d 09		 jge	 SHORT $LN19@MaxCostOfN
  00325	8b 95 8c d7 ff
	ff		 mov	 edx, DWORD PTR _cost$7[ebp]
  0032b	89 55 e4	 mov	 DWORD PTR _maxCost$[ebp], edx
$LN19@MaxCostOfN:

; 618  :         };
; 619  :       };
; 620  :     }

  0032e	e9 88 02 00 00	 jmp	 $LN10@MaxCostOfN
$LN9@MaxCostOfN:

; 621  :     else
; 622  :     {
; 623  :       if ((nn>0) && (ed[nnA] == ed[nd[nn-1].ix])) continue;

  00333	83 7d e8 00	 cmp	 DWORD PTR _nn$[ebp], 0
  00337	7e 34		 jle	 SHORT $LN30@MaxCostOfN
  00339	8b 45 e8	 mov	 eax, DWORD PTR _nn$[ebp]
  0033c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0033f	0f b6 94 81 0f
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4111]
  00347	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0034a	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  0034e	51		 push	 ecx
  0034f	8b 95 ac d7 ff
	ff		 mov	 edx, DWORD PTR _nnA$15[ebp]
  00355	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00358	8d 4c d0 10	 lea	 ecx, DWORD PTR [eax+edx*8+16]
  0035c	e8 00 00 00 00	 call	 ??8EDGEDATA@@QBE_NABU0@@Z ; EDGEDATA::operator==
  00361	0f b6 c8	 movzx	 ecx, al
  00364	85 c9		 test	 ecx, ecx
  00366	74 05		 je	 SHORT $LN30@MaxCostOfN
  00368	e9 4b fd ff ff	 jmp	 $LN2@MaxCostOfN
$LN30@MaxCostOfN:

; 624  :       ec = nd[nnA].ec;

  0036d	8b 95 ac d7 ff
	ff		 mov	 edx, DWORD PTR _nnA$15[ebp]
  00373	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00376	0f b6 8c 90 10
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4112]
  0037e	89 8d a4 d7 ff
	ff		 mov	 DWORD PTR _ec$13[ebp], ecx

; 625  :       for (en=0; en<ec; en++)

  00384	c7 85 a8 d7 ff
	ff 00 00 00 00	 mov	 DWORD PTR _en$14[ebp], 0
  0038e	eb 0f		 jmp	 SHORT $LN7@MaxCostOfN
$LN5@MaxCostOfN:
  00390	8b 95 a8 d7 ff
	ff		 mov	 edx, DWORD PTR _en$14[ebp]
  00396	83 c2 01	 add	 edx, 1
  00399	89 95 a8 d7 ff
	ff		 mov	 DWORD PTR _en$14[ebp], edx
$LN7@MaxCostOfN:
  0039f	8b 85 a8 d7 ff
	ff		 mov	 eax, DWORD PTR _en$14[ebp]
  003a5	3b 85 a4 d7 ff
	ff		 cmp	 eax, DWORD PTR _ec$13[ebp]
  003ab	0f 8d 0a 02 00
	00		 jge	 $LN10@MaxCostOfN

; 626  :       {
; 627  :         int len;
; 628  :         if ((en>0) && (ed[nnA].e[en-1] == ed[nnA].e[en])) 

  003b1	83 bd a8 d7 ff
	ff 00		 cmp	 DWORD PTR _en$14[ebp], 0
  003b8	7e 62		 jle	 SHORT $LN31@MaxCostOfN
  003ba	8b 8d ac d7 ff
	ff		 mov	 ecx, DWORD PTR _nnA$15[ebp]
  003c0	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  003c3	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  003c7	8b 8d a8 d7 ff
	ff		 mov	 ecx, DWORD PTR _en$14[ebp]
  003cd	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  003d0	52		 push	 edx
  003d1	8b 85 ac d7 ff
	ff		 mov	 eax, DWORD PTR _nnA$15[ebp]
  003d7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  003da	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  003de	8b 85 a8 d7 ff
	ff		 mov	 eax, DWORD PTR _en$14[ebp]
  003e4	8d 4c 42 fe	 lea	 ecx, DWORD PTR [edx+eax*2-2]
  003e8	e8 00 00 00 00	 call	 ??8EDGE@@QBE_NABU0@@Z	; EDGE::operator==
  003ed	0f b6 c8	 movzx	 ecx, al
  003f0	85 c9		 test	 ecx, ecx
  003f2	74 28		 je	 SHORT $LN31@MaxCostOfN

; 629  :         {
; 630  :           if (sd[nnA][en-1].ns != nnA)

  003f4	8b 95 ac d7 ff
	ff		 mov	 edx, DWORD PTR _nnA$15[ebp]
  003fa	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  003fd	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00404	8b 95 a8 d7 ff
	ff		 mov	 edx, DWORD PTR _en$14[ebp]
  0040a	0f b6 44 51 fe	 movzx	 eax, BYTE PTR [ecx+edx*2-2]
  0040f	3b 85 ac d7 ff
	ff		 cmp	 eax, DWORD PTR _nnA$15[ebp]
  00415	74 05		 je	 SHORT $LN31@MaxCostOfN

; 631  :           {
; 632  :             continue;

  00417	e9 74 ff ff ff	 jmp	 $LN5@MaxCostOfN
$LN31@MaxCostOfN:

; 633  :           };
; 634  :         };
; 635  :         nnB = sd[nnA][en].ns;

  0041c	8b 8d ac d7 ff
	ff		 mov	 ecx, DWORD PTR _nnA$15[ebp]
  00422	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00425	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0042c	8b 8d a8 d7 ff
	ff		 mov	 ecx, DWORD PTR _en$14[ebp]
  00432	0f b6 14 48	 movzx	 edx, BYTE PTR [eax+ecx*2]
  00436	89 95 a0 d7 ff
	ff		 mov	 DWORD PTR _nnB$12[ebp], edx

; 636  :         if (IS_A_NODE(nnB) && (nd[nnB].os < nn)) continue; //Only one direction, please

  0043c	81 bd a0 d7 ff
	ff f9 00 00 00	 cmp	 DWORD PTR _nnB$12[ebp], 249 ; 000000f9H
  00446	7d 1b		 jge	 SHORT $LN33@MaxCostOfN
  00448	8b 85 a0 d7 ff
	ff		 mov	 eax, DWORD PTR _nnB$12[ebp]
  0044e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00451	0f b6 94 81 12
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4114]
  00459	3b 55 e8	 cmp	 edx, DWORD PTR _nn$[ebp]
  0045c	7d 05		 jge	 SHORT $LN33@MaxCostOfN
  0045e	e9 2d ff ff ff	 jmp	 $LN5@MaxCostOfN
$LN33@MaxCostOfN:

; 637  :         if (nnB == DEADEND)

  00463	81 bd a0 d7 ff
	ff f9 00 00 00	 cmp	 DWORD PTR _nnB$12[ebp], 249 ; 000000f9H
  0046d	75 0d		 jne	 SHORT $LN34@MaxCostOfN

; 638  :         {
; 639  :           //Well, this is unexpected (in general).  But taking
; 640  :           //all these coins and/or offering a double-cross
; 641  :           //is guaranteed to be a proper move.
; 642  :           //LOGUIUI("Zero Length string=%d, link=%d", stringNum, ln);
; 643  :           NotImplemented("Capturable to joint");

  0046f	68 00 00 00 00	 push	 OFFSET $SG226656
  00474	e8 00 00 00 00	 call	 ?NotImplemented@@YAXPAD@Z ; NotImplemented
  00479	83 c4 04	 add	 esp, 4
$LN34@MaxCostOfN:

; 644  :         };
; 645  :         len = ed[nnA].e[en].el;

  0047c	8b 85 ac d7 ff
	ff		 mov	 eax, DWORD PTR _nnA$15[ebp]
  00482	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00485	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  00489	8b 85 a8 d7 ff
	ff		 mov	 eax, DWORD PTR _en$14[ebp]
  0048f	0f b6 4c 42 01	 movzx	 ecx, BYTE PTR [edx+eax*2+1]
  00494	89 8d 88 d7 ff
	ff		 mov	 DWORD PTR _len$6[ebp], ecx

; 646  :         if (nnB == nnA)

  0049a	8b 95 a0 d7 ff
	ff		 mov	 edx, DWORD PTR _nnB$12[ebp]
  004a0	3b 95 ac d7 ff
	ff		 cmp	 edx, DWORD PTR _nnA$15[ebp]
  004a6	75 0e		 jne	 SHORT $LN35@MaxCostOfN

; 647  :         {
; 648  :           //A loop to ourselves.  A loony move at best.
; 649  :           if (ec == 3) 

  004a8	83 bd a4 d7 ff
	ff 03		 cmp	 DWORD PTR _ec$13[ebp], 3
  004af	75 05		 jne	 SHORT $LN35@MaxCostOfN

; 650  :           {
; 651  :             continue; //I cannot see how this would help us

  004b1	e9 da fe ff ff	 jmp	 $LN5@MaxCostOfN
$LN35@MaxCostOfN:

; 652  :           };
; 653  :         };
; 654  :         if (len > 2) continue;

  004b6	83 bd 88 d7 ff
	ff 02		 cmp	 DWORD PTR _len$6[ebp], 2
  004bd	7e 05		 jle	 SHORT $LN37@MaxCostOfN
  004bf	e9 cc fe ff ff	 jmp	 $LN5@MaxCostOfN
$LN37@MaxCostOfN:

; 655  :         pm = *this;

  004c4	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  004c7	50		 push	 eax
  004c8	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  004ce	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABV0@@Z	; CON::operator=

; 656  :         offering = len;

  004d3	8b 8d 88 d7 ff
	ff		 mov	 ecx, DWORD PTR _len$6[ebp]
  004d9	89 8d 9c d7 ff
	ff		 mov	 DWORD PTR _offering$11[ebp], ecx

; 657  :         pm.DeleteEdge(nn, en);

  004df	8b 95 a8 d7 ff
	ff		 mov	 edx, DWORD PTR _en$14[ebp]
  004e5	52		 push	 edx
  004e6	8b 45 e8	 mov	 eax, DWORD PTR _nn$[ebp]
  004e9	50		 push	 eax
  004ea	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  004f0	e8 00 00 00 00	 call	 ?DeleteEdge@CON@@QAEXHH@Z ; CON::DeleteEdge

; 658  :         pm.Canon(0, pm.m_numNode);

  004f5	8b 8d cc eb ff
	ff		 mov	 ecx, DWORD PTR _pm$[ebp]
  004fb	51		 push	 ecx
  004fc	6a 00		 push	 0
  004fe	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  00504	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon

; 659  : 
; 660  :         nimval = nimcon.NimVal(&pm);

  00509	8d 95 cc eb ff
	ff		 lea	 edx, DWORD PTR _pm$[ebp]
  0050f	52		 push	 edx
  00510	8d 8d b4 d7 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$[ebp]
  00516	e8 00 00 00 00	 call	 ?NimVal@NIMCON@@QAEHPBVCON@@@Z ; NIMCON::NimVal
  0051b	89 45 e0	 mov	 DWORD PTR _nimval$[ebp], eax

; 661  :         if (direction > 0) // If looking for max

  0051e	83 7d 08 00	 cmp	 DWORD PTR _direction$[ebp], 0
  00522	7e 4f		 jle	 SHORT $LN38@MaxCostOfN

; 662  :         {
; 663  :           if (nimval == 0)

  00524	83 7d e0 00	 cmp	 DWORD PTR _nimval$[ebp], 0
  00528	75 0f		 jne	 SHORT $LN40@MaxCostOfN

; 664  :           {
; 665  :             ImplementationError("Expected non-zero nimval");

  0052a	68 00 00 00 00	 push	 OFFSET $SG226664
  0052f	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  00534	83 c4 04	 add	 esp, 4

; 666  :           }

  00537	eb 38		 jmp	 SHORT $LN41@MaxCostOfN
$LN40@MaxCostOfN:

; 667  :           else
; 668  :           {
; 669  :             int cost;
; 670  :             cost = offering + pm.MaxCostOfNimZero(-direction, depth-1);

  00539	8b 45 0c	 mov	 eax, DWORD PTR _depth$[ebp]
  0053c	83 e8 01	 sub	 eax, 1
  0053f	50		 push	 eax
  00540	8b 4d 08	 mov	 ecx, DWORD PTR _direction$[ebp]
  00543	f7 d9		 neg	 ecx
  00545	51		 push	 ecx
  00546	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  0054c	e8 00 00 00 00	 call	 ?MaxCostOfNimZero@CON@@QBEHHH@Z ; CON::MaxCostOfNimZero
  00551	03 85 9c d7 ff
	ff		 add	 eax, DWORD PTR _offering$11[ebp]
  00557	89 85 84 d7 ff
	ff		 mov	 DWORD PTR _cost$5[ebp], eax

; 671  :             if (cost > maxCost) maxCost = cost;

  0055d	8b 95 84 d7 ff
	ff		 mov	 edx, DWORD PTR _cost$5[ebp]
  00563	3b 55 e4	 cmp	 edx, DWORD PTR _maxCost$[ebp]
  00566	7e 09		 jle	 SHORT $LN41@MaxCostOfN
  00568	8b 85 84 d7 ff
	ff		 mov	 eax, DWORD PTR _cost$5[ebp]
  0056e	89 45 e4	 mov	 DWORD PTR _maxCost$[ebp], eax
$LN41@MaxCostOfN:

; 672  :           };
; 673  :         }

  00571	eb 43		 jmp	 SHORT $LN39@MaxCostOfN
$LN38@MaxCostOfN:

; 674  :         else
; 675  :         {
; 676  :           if (nimval != 0) continue; //We need to find a move with nimval==0.

  00573	83 7d e0 00	 cmp	 DWORD PTR _nimval$[ebp], 0
  00577	74 05		 je	 SHORT $LN43@MaxCostOfN
  00579	e9 12 fe ff ff	 jmp	 $LN5@MaxCostOfN
$LN43@MaxCostOfN:

; 677  :           int cost;
; 678  :           cost = offering + pm.MaxCostOfNimZero(-direction, depth-1);

  0057e	8b 4d 0c	 mov	 ecx, DWORD PTR _depth$[ebp]
  00581	83 e9 01	 sub	 ecx, 1
  00584	51		 push	 ecx
  00585	8b 55 08	 mov	 edx, DWORD PTR _direction$[ebp]
  00588	f7 da		 neg	 edx
  0058a	52		 push	 edx
  0058b	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  00591	e8 00 00 00 00	 call	 ?MaxCostOfNimZero@CON@@QBEHHH@Z ; CON::MaxCostOfNimZero
  00596	03 85 9c d7 ff
	ff		 add	 eax, DWORD PTR _offering$11[ebp]
  0059c	89 85 80 d7 ff
	ff		 mov	 DWORD PTR _cost$4[ebp], eax

; 679  :           if (cost < maxCost) maxCost = cost;

  005a2	8b 85 80 d7 ff
	ff		 mov	 eax, DWORD PTR _cost$4[ebp]
  005a8	3b 45 e4	 cmp	 eax, DWORD PTR _maxCost$[ebp]
  005ab	7d 09		 jge	 SHORT $LN39@MaxCostOfN
  005ad	8b 8d 80 d7 ff
	ff		 mov	 ecx, DWORD PTR _cost$4[ebp]
  005b3	89 4d e4	 mov	 DWORD PTR _maxCost$[ebp], ecx
$LN39@MaxCostOfN:

; 680  :         };
; 681  :       };

  005b6	e9 d5 fd ff ff	 jmp	 $LN5@MaxCostOfN
$LN10@MaxCostOfN:

; 682  :     };
; 683  :   };

  005bb	e9 f8 fa ff ff	 jmp	 $LN2@MaxCostOfN
$LN3@MaxCostOfN:

; 684  : #ifdef SW_DUMP
; 685  :   searchDepth = 8-depth;
; 686  :   DUMP("MaxCostOfNimZero", 23, direction, maxCost, 0, m_numNode);
; 687  : #endif
; 688  :   return maxCost;

  005c0	8b 55 e4	 mov	 edx, DWORD PTR _maxCost$[ebp]
  005c3	89 95 78 d7 ff
	ff		 mov	 DWORD PTR $T2[ebp], edx
  005c9	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
  005cd	8d 8d b4 d7 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$[ebp]
  005d3	e8 00 00 00 00	 call	 ??1NIMCON@@QAE@XZ
  005d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  005df	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  005e5	e8 00 00 00 00	 call	 ??1CON@@QAE@XZ		; CON::~CON
  005ea	8b 85 78 d7 ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]
$LN1@MaxCostOfN:

; 689  : }

  005f0	52		 push	 edx
  005f1	8b cd		 mov	 ecx, ebp
  005f3	50		 push	 eax
  005f4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN52@MaxCostOfN
  005fa	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  005ff	58		 pop	 eax
  00600	5a		 pop	 edx
  00601	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00604	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0060b	59		 pop	 ecx
  0060c	5f		 pop	 edi
  0060d	5e		 pop	 esi
  0060e	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00611	33 cd		 xor	 ecx, ebp
  00613	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00618	81 c4 88 28 00
	00		 add	 esp, 10376		; 00002888H
  0061e	3b ec		 cmp	 ebp, esp
  00620	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00625	8b e5		 mov	 esp, ebp
  00627	5d		 pop	 ebp
  00628	c2 08 00	 ret	 8
  0062b	90		 npad	 1
$LN52@MaxCostOfN:
  0062c	02 00 00 00	 DD	 2
  00630	00 00 00 00	 DD	 $LN51@MaxCostOfN
$LN51@MaxCostOfN:
  00634	cc eb ff ff	 DD	 -5172			; ffffebccH
  00638	10 14 00 00	 DD	 5136			; 00001410H
  0063c	00 00 00 00	 DD	 $LN48@MaxCostOfN
  00640	b4 d7 ff ff	 DD	 -10316			; ffffd7b4H
  00644	10 14 00 00	 DD	 5136			; 00001410H
  00648	00 00 00 00	 DD	 $LN49@MaxCostOfN
$LN49@MaxCostOfN:
  0064c	6e		 DB	 110			; 0000006eH
  0064d	69		 DB	 105			; 00000069H
  0064e	6d		 DB	 109			; 0000006dH
  0064f	63		 DB	 99			; 00000063H
  00650	6f		 DB	 111			; 0000006fH
  00651	6e		 DB	 110			; 0000006eH
  00652	00		 DB	 0
$LN48@MaxCostOfN:
  00653	70		 DB	 112			; 00000070H
  00654	6d		 DB	 109			; 0000006dH
  00655	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?MaxCostOfNimZero@CON@@QBEHHH@Z$0:
  00000	8d 8d cc eb ff
	ff		 lea	 ecx, DWORD PTR _pm$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CON@@QAE@XZ		; CON::~CON
__unwindfunclet$?MaxCostOfNimZero@CON@@QBEHHH@Z$1:
  0000b	8d 8d b4 d7 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1NIMCON@@QAE@XZ
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?MaxCostOfNimZero@CON@@QBEHHH@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 78 d7 ff
	ff		 mov	 ecx, DWORD PTR [edx-10376]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?MaxCostOfNimZero@CON@@QBEHHH@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?MaxCostOfNimZero@CON@@QBEHHH@Z ENDP			; CON::MaxCostOfNimZero
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_humanScore$ = -64					; size = 4
_computerScore$ = -60					; size = 4
_pm$ = -56						; size = 4
_moveValue$ = -48					; size = 20
_col$ = -24						; size = 4
_row$ = -20						; size = 4
_height$ = -16						; size = 4
_width$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_pGame$ = 8						; size = 4
?SimpleWin@CON@@QAEXPAVDOTS_AND_BOXES@@@Z PROC		; CON::SimpleWin
; _this$ = ecx

; 1544 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 40	 sub	 esp, 64			; 00000040H
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	51		 push	 ecx
  00009	8d 7d c0	 lea	 edi, DWORD PTR [ebp-64]
  0000c	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  00011	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00016	f3 ab		 rep stosd
  00018	59		 pop	 ecx
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 1545 :   int width, height;
; 1546 :   int row, col;
; 1547 :   SWVALUE moveValue;
; 1548 :   PossibleMove *pm;
; 1549 :   moveValue.numPossibleMove = 0;

  00026	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _moveValue$[ebp+12], 0

; 1550 :   availableMoveStack = MOVE_STACK_SIZE;

  0002d	c7 05 00 00 00
	00 a2 17 00 00	 mov	 DWORD PTR ?availableMoveStack@@3HA, 6050 ; availableMoveStack, 000017a2H

; 1551 :   pm = (PossibleMove *)malloc(availableMoveStack*sizeof(PossibleMove));

  00037	69 05 00 00 00
	00 1c 14 00 00	 imul	 eax, DWORD PTR ?availableMoveStack@@3HA, 5148 ; availableMoveStack
  00041	8b f4		 mov	 esi, esp
  00043	50		 push	 eax
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  0004a	83 c4 04	 add	 esp, 4
  0004d	3b f4		 cmp	 esi, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	89 45 c8	 mov	 DWORD PTR _pm$[ebp], eax

; 1552 :   if (pm == NULL)

  00057	83 7d c8 00	 cmp	 DWORD PTR _pm$[ebp], 0
  0005b	75 0d		 jne	 SHORT $LN8@SimpleWin

; 1553 :   {
; 1554 :     ImplementationError("Cannot allocate memory");

  0005d	68 00 00 00 00	 push	 OFFSET $SG227075
  00062	e8 00 00 00 00	 call	 ?ImplementationError@@YAXPBD@Z ; ImplementationError
  00067	83 c4 04	 add	 esp, 4
$LN8@SimpleWin:

; 1555 :   };
; 1556 : //  int size = MAX_NODES*4*(sizeof(PossibleMove));
; 1557 :   ui computerScore, humanScore;
; 1558 :   width = pGame->Width();

  0006a	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  0006d	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00072	89 45 f4	 mov	 DWORD PTR _width$[ebp], eax

; 1559 :   height = pGame->Height();

  00075	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  00078	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0007d	89 45 f0	 mov	 DWORD PTR _height$[ebp], eax

; 1560 :   computerScore = humanScore = 0;

  00080	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _humanScore$[ebp], 0
  00087	8b 4d c0	 mov	 ecx, DWORD PTR _humanScore$[ebp]
  0008a	89 4d c4	 mov	 DWORD PTR _computerScore$[ebp], ecx

; 1561 :   for (row=0; row<height-1; row++)

  0008d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _row$[ebp], 0
  00094	eb 09		 jmp	 SHORT $LN4@SimpleWin
$LN2@SimpleWin:
  00096	8b 55 ec	 mov	 edx, DWORD PTR _row$[ebp]
  00099	83 c2 01	 add	 edx, 1
  0009c	89 55 ec	 mov	 DWORD PTR _row$[ebp], edx
$LN4@SimpleWin:
  0009f	8b 45 f0	 mov	 eax, DWORD PTR _height$[ebp]
  000a2	83 e8 01	 sub	 eax, 1
  000a5	39 45 ec	 cmp	 DWORD PTR _row$[ebp], eax
  000a8	7d 5f		 jge	 SHORT $LN3@SimpleWin

; 1562 :   {
; 1563 :     for (col=0; col<width-1; col++)

  000aa	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _col$[ebp], 0
  000b1	eb 09		 jmp	 SHORT $LN7@SimpleWin
$LN5@SimpleWin:
  000b3	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  000b6	83 c1 01	 add	 ecx, 1
  000b9	89 4d e8	 mov	 DWORD PTR _col$[ebp], ecx
$LN7@SimpleWin:
  000bc	8b 55 f4	 mov	 edx, DWORD PTR _width$[ebp]
  000bf	83 ea 01	 sub	 edx, 1
  000c2	39 55 e8	 cmp	 DWORD PTR _col$[ebp], edx
  000c5	7d 40		 jge	 SHORT $LN6@SimpleWin

; 1564 :     {
; 1565 :       if (pGame->BoxOwner(col, row) == OWNER_COMPUTER) computerScore++;

  000c7	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  000ca	50		 push	 eax
  000cb	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  000ce	51		 push	 ecx
  000cf	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  000d2	e8 00 00 00 00	 call	 ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z ; DOTS_AND_BOXES::BoxOwner
  000d7	83 f8 02	 cmp	 eax, 2
  000da	75 0b		 jne	 SHORT $LN9@SimpleWin
  000dc	8b 55 c4	 mov	 edx, DWORD PTR _computerScore$[ebp]
  000df	83 c2 01	 add	 edx, 1
  000e2	89 55 c4	 mov	 DWORD PTR _computerScore$[ebp], edx
  000e5	eb 1e		 jmp	 SHORT $LN10@SimpleWin
$LN9@SimpleWin:

; 1566 :       else if (pGame->BoxOwner(col, row) == OWNER_HUMAN) humanScore++;

  000e7	8b 45 ec	 mov	 eax, DWORD PTR _row$[ebp]
  000ea	50		 push	 eax
  000eb	8b 4d e8	 mov	 ecx, DWORD PTR _col$[ebp]
  000ee	51		 push	 ecx
  000ef	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  000f2	e8 00 00 00 00	 call	 ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z ; DOTS_AND_BOXES::BoxOwner
  000f7	83 f8 01	 cmp	 eax, 1
  000fa	75 09		 jne	 SHORT $LN10@SimpleWin
  000fc	8b 55 c0	 mov	 edx, DWORD PTR _humanScore$[ebp]
  000ff	83 c2 01	 add	 edx, 1
  00102	89 55 c0	 mov	 DWORD PTR _humanScore$[ebp], edx
$LN10@SimpleWin:

; 1567 :     };

  00105	eb ac		 jmp	 SHORT $LN5@SimpleWin
$LN6@SimpleWin:

; 1568 :   };

  00107	eb 8d		 jmp	 SHORT $LN2@SimpleWin
$LN3@SimpleWin:

; 1569 :   m_coinsRemaining = (width-1)*(height-1);

  00109	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  0010c	83 e8 01	 sub	 eax, 1
  0010f	8b 4d f0	 mov	 ecx, DWORD PTR _height$[ebp]
  00112	83 e9 01	 sub	 ecx, 1
  00115	0f af c1	 imul	 eax, ecx
  00118	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0011b	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 1570 :   m_neededToWin = m_coinsRemaining/2 + 1;

  0011e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00121	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00124	d1 e9		 shr	 ecx, 1
  00126	83 c1 01	 add	 ecx, 1
  00129	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0012c	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1571 :   m_neededToTie = (m_coinsRemaining+1)/2;

  0012f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00132	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00135	83 c1 01	 add	 ecx, 1
  00138	d1 e9		 shr	 ecx, 1
  0013a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0013d	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 1572 :   m_coinsRemaining -= computerScore + humanScore;

  00140	8b 45 c4	 mov	 eax, DWORD PTR _computerScore$[ebp]
  00143	03 45 c0	 add	 eax, DWORD PTR _humanScore$[ebp]
  00146	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00149	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0014c	2b d0		 sub	 edx, eax
  0014e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00151	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1573 :   //if ((height==5) && (width==5))
; 1574 :   ////{
; 1575 :   //  TheCCD55Case(pGame);
; 1576 :   //}
; 1577 :   //else
; 1578 :   {
; 1579 :     TheGeneralCase(width, height, computerScore, humanScore, pm);

  00154	8b 4d c8	 mov	 ecx, DWORD PTR _pm$[ebp]
  00157	51		 push	 ecx
  00158	8b 55 c0	 mov	 edx, DWORD PTR _humanScore$[ebp]
  0015b	52		 push	 edx
  0015c	8b 45 c4	 mov	 eax, DWORD PTR _computerScore$[ebp]
  0015f	50		 push	 eax
  00160	8b 4d f0	 mov	 ecx, DWORD PTR _height$[ebp]
  00163	51		 push	 ecx
  00164	8b 55 f4	 mov	 edx, DWORD PTR _width$[ebp]
  00167	52		 push	 edx
  00168	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0016b	e8 00 00 00 00	 call	 ?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z ; CON::TheGeneralCase

; 1580 :   };
; 1581 : }

  00170	52		 push	 edx
  00171	8b cd		 mov	 ecx, ebp
  00173	50		 push	 eax
  00174	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@SimpleWin
  0017a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0017f	58		 pop	 eax
  00180	5a		 pop	 edx
  00181	5f		 pop	 edi
  00182	5e		 pop	 esi
  00183	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00186	33 cd		 xor	 ecx, ebp
  00188	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018d	83 c4 40	 add	 esp, 64			; 00000040H
  00190	3b ec		 cmp	 ebp, esp
  00192	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00197	8b e5		 mov	 esp, ebp
  00199	5d		 pop	 ebp
  0019a	c2 04 00	 ret	 4
  0019d	0f 1f 00	 npad	 3
$LN15@SimpleWin:
  001a0	01 00 00 00	 DD	 1
  001a4	00 00 00 00	 DD	 $LN14@SimpleWin
$LN14@SimpleWin:
  001a8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  001ac	14 00 00 00	 DD	 20			; 00000014H
  001b0	00 00 00 00	 DD	 $LN13@SimpleWin
$LN13@SimpleWin:
  001b4	6d		 DB	 109			; 0000006dH
  001b5	6f		 DB	 111			; 0000006fH
  001b6	76		 DB	 118			; 00000076H
  001b7	65		 DB	 101			; 00000065H
  001b8	56		 DB	 86			; 00000056H
  001b9	61		 DB	 97			; 00000061H
  001ba	6c		 DB	 108			; 0000006cH
  001bb	75		 DB	 117			; 00000075H
  001bc	65		 DB	 101			; 00000065H
  001bd	00		 DB	 0
?SimpleWin@CON@@QAEXPAVDOTS_AND_BOXES@@@Z ENDP		; CON::SimpleWin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?TheCCD55Case@CON@@QAEXPAVDOTS_AND_BOXES@@@Z PROC	; CON::TheCCD55Case
; _this$ = ecx

; 1539 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 1540 : //  SWVALUE moveValue;
; 1541 : }

  00007	8b e5		 mov	 esp, ebp
  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?TheCCD55Case@CON@@QAEXPAVDOTS_AND_BOXES@@@Z ENDP	; CON::TheCCD55Case
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
$T2 = -19368						; size = 8
$T3 = -19360						; size = 8
$T4 = -19352						; size = 56
_numMaxRope$5 = -19296					; size = 4
_maxRope$6 = -19292					; size = 4
_n$7 = -19288						; size = 4
_rope$8 = -19280					; size = 400
_decline$9 = -18876					; size = 4
_total$10 = -18872					; size = 4
_nimval$11 = -18868					; size = 4
_nimcon$12 = -18860					; size = 5136
_tw$13 = -13720						; size = 4
_tlci$14 = -13712					; size = 16
_tr$15 = -13688						; size = 56
_j$16 = -13628						; size = 4
$T17 = -13624						; size = 16
_line$18 = -13608					; size = 4
$T19 = -13604						; size = 56
_j$20 = -13548						; size = 4
_breakWeights$21 = -13540				; size = 400
_longChainInfo$22 = -13132				; size = 1600
_moveNum$23 = -11524					; size = 400
_results$24 = -11116					; size = 5600
_nimcon$25 = -5508					; size = 5136
_zeroNimvalPossible$26 = -365				; size = 1
_numBestMove$27 = -364					; size = 4
_bestMoves$28 = -356					; size = 241
_bestCost$29 = -108					; size = 4
_cost$30 = -104						; size = 4
_move$31 = -100						; size = 4
_i$32 = -96						; size = 4
$T33 = -92						; size = 20
$T34 = -72						; size = 20
_moveValue$ = -48					; size = 20
_totalCoins$ = -24					; size = 4
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_computerScore$ = 16					; size = 4
_humanScore$ = 20					; size = 4
_pm$ = 24						; size = 4
?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z PROC	; CON::TheGeneralCase
; _this$ = ecx

; 1207 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 9c 4b 00 00	 mov	 eax, 19356		; 00004b9cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	8d bd 58 b4 ff
	ff		 lea	 edi, DWORD PTR [ebp-19368]
  00024	b9 e7 12 00 00	 mov	 ecx, 4839		; 000012e7H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	59		 pop	 ecx
  00031	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00036	33 c5		 xor	 eax, ebp
  00038	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003b	50		 push	 eax
  0003c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00045	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1208 :   unsigned int totalCoins;
; 1209 :   SWVALUE moveValue;
; 1210 : #ifndef HASH_CARRY
; 1211 :   if (swHashTable != NULL) die("Forgot to release hash table");
; 1212 :   swHashTable = new SWHASHTABLE;
; 1213 :   if (nimHashTable != NULL) delete nimHashTable;
; 1214 :   nimHashTable = new NIMHASHTABLE;
; 1215 : #endif
; 1216 : //  MessageBox(NULL,"aaa","note",MB_OK);
; 1217 : //  Note("Start test capture");
; 1218 :   moveValue = CheckSWCapture(computerScore, humanScore, pm);

  00048	8b 45 18	 mov	 eax, DWORD PTR _pm$[ebp]
  0004b	50		 push	 eax
  0004c	8b 4d 14	 mov	 ecx, DWORD PTR _humanScore$[ebp]
  0004f	51		 push	 ecx
  00050	8b 55 10	 mov	 edx, DWORD PTR _computerScore$[ebp]
  00053	52		 push	 edx
  00054	8d 45 b8	 lea	 eax, DWORD PTR $T34[ebp]
  00057	50		 push	 eax
  00058	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0005b	e8 00 00 00 00	 call	 ?CheckSWCapture@CON@@QBE?AUSWVALUE@@IIPAUPossibleMove@@@Z ; CON::CheckSWCapture
  00060	8b 08		 mov	 ecx, DWORD PTR [eax]
  00062	89 4d d0	 mov	 DWORD PTR _moveValue$[ebp], ecx
  00065	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00068	89 55 d4	 mov	 DWORD PTR _moveValue$[ebp+4], edx
  0006b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0006e	89 4d d8	 mov	 DWORD PTR _moveValue$[ebp+8], ecx
  00071	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00074	89 55 dc	 mov	 DWORD PTR _moveValue$[ebp+12], edx
  00077	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0007a	89 45 e0	 mov	 DWORD PTR _moveValue$[ebp+16], eax

; 1219 : //  Note("end test capture");
; 1220 : //  MessageBox(NULL,"a","note",MB_OK);
; 1221 :   ASSERT(m_coinsRemaining == (width-1)*(height-1) - computerScore - humanScore);

  0007d	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00080	83 e9 01	 sub	 ecx, 1
  00083	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  00086	83 ea 01	 sub	 edx, 1
  00089	0f af ca	 imul	 ecx, edx
  0008c	2b 4d 10	 sub	 ecx, DWORD PTR _computerScore$[ebp]
  0008f	2b 4d 14	 sub	 ecx, DWORD PTR _humanScore$[ebp]
  00092	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00095	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00098	74 14		 je	 SHORT $LN65@TheGeneral
  0009a	68 c5 04 00 00	 push	 1221			; 000004c5H
  0009f	68 00 00 00 00	 push	 OFFSET $SG227012
  000a4	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  000a9	85 c0		 test	 eax, eax
  000ab	74 01		 je	 SHORT $LN65@TheGeneral
  000ad	cc		 int	 3
$LN65@TheGeneral:

; 1222 :   if (     (moveValue.moveType == MT_SIMPLEWINCAPTURE)
; 1223 :         || (moveValue.moveType == MT_SIMPLEWINDECLINE)
; 1224 :         || (moveValue.moveType == MT_NIMVALCAPTURE)
; 1225 :         || (moveValue.moveType == MT_NIMVALDECLINE)
; 1226 :         || (moveValue.moveType == MT_MAXCAPTURE)
; 1227 :         || (moveValue.moveType == MT_MAXDECLINE)

  000ae	83 7d d8 0b	 cmp	 DWORD PTR _moveValue$[ebp+8], 11 ; 0000000bH
  000b2	74 1e		 je	 SHORT $LN34@TheGeneral
  000b4	83 7d d8 0c	 cmp	 DWORD PTR _moveValue$[ebp+8], 12 ; 0000000cH
  000b8	74 18		 je	 SHORT $LN34@TheGeneral
  000ba	83 7d d8 15	 cmp	 DWORD PTR _moveValue$[ebp+8], 21 ; 00000015H
  000be	74 12		 je	 SHORT $LN34@TheGeneral
  000c0	83 7d d8 16	 cmp	 DWORD PTR _moveValue$[ebp+8], 22 ; 00000016H
  000c4	74 0c		 je	 SHORT $LN34@TheGeneral
  000c6	83 7d d8 14	 cmp	 DWORD PTR _moveValue$[ebp+8], 20 ; 00000014H
  000ca	74 06		 je	 SHORT $LN34@TheGeneral
  000cc	83 7d d8 13	 cmp	 DWORD PTR _moveValue$[ebp+8], 19 ; 00000013H
  000d0	75 26		 jne	 SHORT $LN32@TheGeneral
$LN34@TheGeneral:

; 1228 :      )
; 1229 :   {
; 1230 :     //We are supposed to play in a capturable chain.
; 1231 : //    computerMove = moveValue.bestMove;
; 1232 :     //computerMove = pm[moveValue.bestMove];
; 1233 :     moveType = moveValue.moveType;

  000d2	8b 55 d8	 mov	 edx, DWORD PTR _moveValue$[ebp+8]
  000d5	89 15 00 00 00
	00		 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, edx ; moveType

; 1234 : #ifndef HASH_CARRY
; 1235 :     delete swHashTable;
; 1236 :     swHashTable = NULL;
; 1237 :     delete nimHashTable;
; 1238 :     nimHashTable = NULL;
; 1239 : #endif
; 1240 :     free (pm);

  000db	8b f4		 mov	 esi, esp
  000dd	8b 45 18	 mov	 eax, DWORD PTR _pm$[ebp]
  000e0	50		 push	 eax
  000e1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000e7	83 c4 04	 add	 esp, 4
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1241 :     CLOSEDUMP
; 1242 :     return;

  000f1	e9 6e 0b 00 00	 jmp	 $LN1@TheGeneral

; 1243 :   }

  000f6	eb 2a		 jmp	 SHORT $LN33@TheGeneral
$LN32@TheGeneral:

; 1244 :   else if (moveValue.moveType == MT_SIMPLEWINDECLINE)

  000f8	83 7d d8 0c	 cmp	 DWORD PTR _moveValue$[ebp+8], 12 ; 0000000cH
  000fc	75 24		 jne	 SHORT $LN33@TheGeneral

; 1245 :   {
; 1246 :     //computerMove = pm[moveValue.bestMove];
; 1247 :     moveType = moveValue.moveType;

  000fe	8b 4d d8	 mov	 ecx, DWORD PTR _moveValue$[ebp+8]
  00101	89 0d 00 00 00
	00		 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, ecx ; moveType

; 1248 : #ifndef HASH_CARRY
; 1249 :     delete swHashTable;
; 1250 :     swHashTable = NULL;
; 1251 :     delete nimHashTable;
; 1252 :     nimHashTable = NULL;
; 1253 : #endif
; 1254 :     free (pm);

  00107	8b f4		 mov	 esi, esp
  00109	8b 55 18	 mov	 edx, DWORD PTR _pm$[ebp]
  0010c	52		 push	 edx
  0010d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00113	83 c4 04	 add	 esp, 4
  00116	3b f4		 cmp	 esi, esp
  00118	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1255 :     CLOSEDUMP
; 1256 :     return;

  0011d	e9 42 0b 00 00	 jmp	 $LN1@TheGeneral
$LN33@TheGeneral:

; 1257 :   };
; 1258 : //for (int kkk=0; kkk<100000; kkk++)
; 1259 :   moveValue = SWEvaluateAllMoves(computerScore, humanScore, pm);

  00122	8b 45 18	 mov	 eax, DWORD PTR _pm$[ebp]
  00125	50		 push	 eax
  00126	8b 4d 14	 mov	 ecx, DWORD PTR _humanScore$[ebp]
  00129	51		 push	 ecx
  0012a	8b 55 10	 mov	 edx, DWORD PTR _computerScore$[ebp]
  0012d	52		 push	 edx
  0012e	8d 45 a4	 lea	 eax, DWORD PTR $T33[ebp]
  00131	50		 push	 eax
  00132	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	e8 00 00 00 00	 call	 ?SWEvaluateAllMoves@CON@@QBE?AUSWVALUE@@IIPAUPossibleMove@@@Z ; CON::SWEvaluateAllMoves
  0013a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013c	89 4d d0	 mov	 DWORD PTR _moveValue$[ebp], ecx
  0013f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00142	89 55 d4	 mov	 DWORD PTR _moveValue$[ebp+4], edx
  00145	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00148	89 4d d8	 mov	 DWORD PTR _moveValue$[ebp+8], ecx
  0014b	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0014e	89 55 dc	 mov	 DWORD PTR _moveValue$[ebp+12], edx
  00151	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00154	89 45 e0	 mov	 DWORD PTR _moveValue$[ebp+16], eax

; 1260 :   if (searchAborted) 

  00157	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?searchAborted@@3_NA ; searchAborted
  0015e	85 c9		 test	 ecx, ecx
  00160	74 13		 je	 SHORT $LN36@TheGeneral

; 1261 :   {
; 1262 :     moveValue.player1Min = 0;

  00162	33 d2		 xor	 edx, edx
  00164	66 89 55 d0	 mov	 WORD PTR _moveValue$[ebp], dx

; 1263 :     moveValue.player2Min = 0;

  00168	33 c0		 xor	 eax, eax
  0016a	66 89 45 d2	 mov	 WORD PTR _moveValue$[ebp+2], ax

; 1264 :     moveValue.moveType = MT_NONE;

  0016e	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _moveValue$[ebp+8], 0
$LN36@TheGeneral:

; 1265 :   };
; 1266 :   ASSERT(m_coinsRemaining == (width-1)*(height-1) - computerScore - humanScore);

  00175	8b 4d 08	 mov	 ecx, DWORD PTR _width$[ebp]
  00178	83 e9 01	 sub	 ecx, 1
  0017b	8b 55 0c	 mov	 edx, DWORD PTR _height$[ebp]
  0017e	83 ea 01	 sub	 edx, 1
  00181	0f af ca	 imul	 ecx, edx
  00184	2b 4d 10	 sub	 ecx, DWORD PTR _computerScore$[ebp]
  00187	2b 4d 14	 sub	 ecx, DWORD PTR _humanScore$[ebp]
  0018a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0018d	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  00190	74 14		 je	 SHORT $LN66@TheGeneral
  00192	68 f2 04 00 00	 push	 1266			; 000004f2H
  00197	68 00 00 00 00	 push	 OFFSET $SG227018
  0019c	e8 00 00 00 00	 call	 ?AfxAssertFailedLine@@YGHPBDH@Z ; AfxAssertFailedLine
  001a1	85 c0		 test	 eax, eax
  001a3	74 01		 je	 SHORT $LN66@TheGeneral
  001a5	cc		 int	 3
$LN66@TheGeneral:

; 1267 :   if (computerScore+moveValue.player1Min >= m_neededToWin)

  001a6	0f b7 55 d0	 movzx	 edx, WORD PTR _moveValue$[ebp]
  001aa	03 55 10	 add	 edx, DWORD PTR _computerScore$[ebp]
  001ad	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  001b0	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  001b3	72 3a		 jb	 SHORT $LN37@TheGeneral

; 1268 :   {
; 1269 : //    computerMove = moveValue.bestMove;
; 1270 :     moveType = MT_SIMPLEWIN;

  001b5	c7 05 00 00 00
	00 09 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 9 ; moveType

; 1271 :     computerMove = pm[moveValue.bestMove];

  001bf	69 4d d4 1c 14
	00 00		 imul	 ecx, DWORD PTR _moveValue$[ebp+4], 5148
  001c6	03 4d 18	 add	 ecx, DWORD PTR _pm$[ebp]
  001c9	51		 push	 ecx
  001ca	b9 00 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A ; computerMove
  001cf	e8 00 00 00 00	 call	 ??4PossibleMove@@QAEAAU0@ABU0@@Z

; 1272 : #ifndef HASH_CARRY
; 1273 :     delete swHashTable;
; 1274 :     swHashTable = NULL;
; 1275 :     delete nimHashTable;
; 1276 :     nimHashTable = NULL;
; 1277 : #endif
; 1278 :     free (pm);

  001d4	8b f4		 mov	 esi, esp
  001d6	8b 55 18	 mov	 edx, DWORD PTR _pm$[ebp]
  001d9	52		 push	 edx
  001da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  001e0	83 c4 04	 add	 esp, 4
  001e3	3b f4		 cmp	 esi, esp
  001e5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1279 :     CLOSEDUMP
; 1280 :     return;

  001ea	e9 75 0a 00 00	 jmp	 $LN1@TheGeneral
$LN37@TheGeneral:

; 1281 :   };
; 1282 :   // Accept a tie if that is the best we can get
; 1283 :   totalCoins = (width-1)*(height-1);

  001ef	8b 45 08	 mov	 eax, DWORD PTR _width$[ebp]
  001f2	83 e8 01	 sub	 eax, 1
  001f5	8b 4d 0c	 mov	 ecx, DWORD PTR _height$[ebp]
  001f8	83 e9 01	 sub	 ecx, 1
  001fb	0f af c1	 imul	 eax, ecx
  001fe	89 45 e8	 mov	 DWORD PTR _totalCoins$[ebp], eax

; 1284 :   if (computerScore+moveValue.player1Min >= m_neededToTie)

  00201	0f b7 55 d0	 movzx	 edx, WORD PTR _moveValue$[ebp]
  00205	03 55 10	 add	 edx, DWORD PTR _computerScore$[ebp]
  00208	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0020b	3b 50 0c	 cmp	 edx, DWORD PTR [eax+12]
  0020e	72 3a		 jb	 SHORT $LN38@TheGeneral

; 1285 :   {
; 1286 : //    computerMove = moveValue.bestMove;
; 1287 :     moveType = MT_SIMPLETIE;

  00210	c7 05 00 00 00
	00 0a 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 10 ; moveType, 0000000aH

; 1288 :     computerMove = pm[moveValue.bestMove];

  0021a	69 4d d4 1c 14
	00 00		 imul	 ecx, DWORD PTR _moveValue$[ebp+4], 5148
  00221	03 4d 18	 add	 ecx, DWORD PTR _pm$[ebp]
  00224	51		 push	 ecx
  00225	b9 00 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A ; computerMove
  0022a	e8 00 00 00 00	 call	 ??4PossibleMove@@QAEAAU0@ABU0@@Z

; 1289 : #ifndef HASH_CARRY
; 1290 :     delete swHashTable;
; 1291 :     swHashTable = NULL;
; 1292 :     delete nimHashTable;
; 1293 :     nimHashTable = NULL;
; 1294 : #endif
; 1295 :     free (pm);

  0022f	8b f4		 mov	 esi, esp
  00231	8b 55 18	 mov	 edx, DWORD PTR _pm$[ebp]
  00234	52		 push	 edx
  00235	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0023b	83 c4 04	 add	 esp, 4
  0023e	3b f4		 cmp	 esi, esp
  00240	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1296 :     CLOSEDUMP
; 1297 :     return;

  00245	e9 1a 0a 00 00	 jmp	 $LN1@TheGeneral
$LN38@TheGeneral:

; 1298 :   };
; 1299 :   //enableDump = true;
; 1300 :   if (moveValue.numPossibleMove > 0)

  0024a	83 7d dc 00	 cmp	 DWORD PTR _moveValue$[ebp+12], 0
  0024e	0f 8e fa 09 00
	00		 jle	 $LN39@TheGeneral

; 1301 :   {
; 1302 :     int i, move;
; 1303 :     int cost, bestCost;;
; 1304 :     ui8 bestMoves[MAX_EDGES];
; 1305 :     int numBestMove;
; 1306 :     bool zeroNimvalPossible;
; 1307 :     numBestMove = 0;

  00254	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _numBestMove$27[ebp], 0

; 1308 :     //Among the moves that reduce the nimval to zero, we will
; 1309 :     //search for the one that will cost us the fewest coins in
; 1310 :     //this move and the next.
; 1311 :     bestCost = 9999;

  0025e	c7 45 94 0f 27
	00 00		 mov	 DWORD PTR _bestCost$29[ebp], 9999 ; 0000270fH

; 1312 :     move = -1;

  00265	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _move$31[ebp], -1

; 1313 :     searchAborted = false;

  0026c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?searchAborted@@3_NA, 0 ; searchAborted

; 1314 :     zeroNimvalPossible = false;

  00273	c6 85 93 fe ff
	ff 00		 mov	 BYTE PTR _zeroNimvalPossible$26[ebp], 0

; 1315 :     for (i=0; i<moveValue.numPossibleMove; i++)

  0027a	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$32[ebp], 0
  00281	eb 09		 jmp	 SHORT $LN4@TheGeneral
$LN2@TheGeneral:
  00283	8b 45 a0	 mov	 eax, DWORD PTR _i$32[ebp]
  00286	83 c0 01	 add	 eax, 1
  00289	89 45 a0	 mov	 DWORD PTR _i$32[ebp], eax
$LN4@TheGeneral:
  0028c	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  0028f	3b 4d dc	 cmp	 ecx, DWORD PTR _moveValue$[ebp+12]
  00292	0f 8d 02 01 00
	00		 jge	 $LN3@TheGeneral

; 1316 :     {
; 1317 :       if (pm[i].nimval == 0)

  00298	69 55 a0 1c 14
	00 00		 imul	 edx, DWORD PTR _i$32[ebp], 5148
  0029f	8b 45 18	 mov	 eax, DWORD PTR _pm$[ebp]
  002a2	83 7c 10 04 00	 cmp	 DWORD PTR [eax+edx+4], 0
  002a7	0f 85 e8 00 00
	00		 jne	 $LN40@TheGeneral

; 1318 :       {
; 1319 :         zeroNimvalPossible = true;

  002ad	c6 85 93 fe ff
	ff 01		 mov	 BYTE PTR _zeroNimvalPossible$26[ebp], 1

; 1320 :      //   if (pm[i].offering > 0) continue;//Don't sacrifice to maintain nimval.
; 1321 :         NIMCON nimcon;

  002b4	8d 8d 7c ea ff
	ff		 lea	 ecx, DWORD PTR _nimcon$25[ebp]
  002ba	e8 00 00 00 00	 call	 ??0NIMCON@@QAE@XZ
  002bf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1322 :         nimcon = &pm[i].con;

  002c6	69 4d a0 1c 14
	00 00		 imul	 ecx, DWORD PTR _i$32[ebp], 5148
  002cd	8b 55 18	 mov	 edx, DWORD PTR _pm$[ebp]
  002d0	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  002d4	50		 push	 eax
  002d5	8d 8d 7c ea ff
	ff		 lea	 ecx, DWORD PTR _nimcon$25[ebp]
  002db	e8 00 00 00 00	 call	 ??4NIMCON@@QAEAAV0@PBVCON@@@Z ; NIMCON::operator=

; 1323 :         //nimcon.Simplify();
; 1324 :         nimcon.Canon(0, nimcon.m_numNode);

  002e0	8b 8d 7c ea ff
	ff		 mov	 ecx, DWORD PTR _nimcon$25[ebp]
  002e6	51		 push	 ecx
  002e7	6a 00		 push	 0
  002e9	8d 8d 7c ea ff
	ff		 lea	 ecx, DWORD PTR _nimcon$25[ebp]
  002ef	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon

; 1325 :         if (moveValue.allNimvalComputed)

  002f4	0f b6 55 e0	 movzx	 edx, BYTE PTR _moveValue$[ebp+16]
  002f8	85 d2		 test	 edx, edx
  002fa	74 38		 je	 SHORT $LN41@TheGeneral

; 1326 :         {
; 1327 :           cost = pm[i].offering + nimcon.MaxCostOfNimZero(1, 2); //Find the largest response.

  002fc	69 75 a0 1c 14
	00 00		 imul	 esi, DWORD PTR _i$32[ebp], 5148
  00303	6a 02		 push	 2
  00305	6a 01		 push	 1
  00307	8d 8d 7c ea ff
	ff		 lea	 ecx, DWORD PTR _nimcon$25[ebp]
  0030d	e8 00 00 00 00	 call	 ?MaxCostOfNimZero@CON@@QBEHHH@Z ; CON::MaxCostOfNimZero
  00312	8b 4d 18	 mov	 ecx, DWORD PTR _pm$[ebp]
  00315	03 04 31	 add	 eax, DWORD PTR [ecx+esi]
  00318	89 45 98	 mov	 DWORD PTR _cost$30[ebp], eax

; 1328 :           cost = 1000*cost + pm[i].offering;

  0031b	69 55 98 e8 03
	00 00		 imul	 edx, DWORD PTR _cost$30[ebp], 1000
  00322	69 45 a0 1c 14
	00 00		 imul	 eax, DWORD PTR _i$32[ebp], 5148
  00329	8b 4d 18	 mov	 ecx, DWORD PTR _pm$[ebp]
  0032c	03 14 01	 add	 edx, DWORD PTR [ecx+eax]
  0032f	89 55 98	 mov	 DWORD PTR _cost$30[ebp], edx

; 1329 :         }

  00332	eb 10		 jmp	 SHORT $LN42@TheGeneral
$LN41@TheGeneral:

; 1330 :         else
; 1331 :         {
; 1332 :           cost = pm[i].offering;

  00334	69 55 a0 1c 14
	00 00		 imul	 edx, DWORD PTR _i$32[ebp], 5148
  0033b	8b 45 18	 mov	 eax, DWORD PTR _pm$[ebp]
  0033e	8b 0c 10	 mov	 ecx, DWORD PTR [eax+edx]
  00341	89 4d 98	 mov	 DWORD PTR _cost$30[ebp], ecx
$LN42@TheGeneral:

; 1333 :         };
; 1334 :         if (cost < bestCost) numBestMove = 0;

  00344	8b 55 98	 mov	 edx, DWORD PTR _cost$30[ebp]
  00347	3b 55 94	 cmp	 edx, DWORD PTR _bestCost$29[ebp]
  0034a	7d 0a		 jge	 SHORT $LN43@TheGeneral
  0034c	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _numBestMove$27[ebp], 0
$LN43@TheGeneral:

; 1335 :         if (cost <= bestCost)

  00356	8b 45 98	 mov	 eax, DWORD PTR _cost$30[ebp]
  00359	3b 45 94	 cmp	 eax, DWORD PTR _bestCost$29[ebp]
  0035c	7f 25		 jg	 SHORT $LN44@TheGeneral

; 1336 :         {
; 1337 :           bestCost = cost;

  0035e	8b 4d 98	 mov	 ecx, DWORD PTR _cost$30[ebp]
  00361	89 4d 94	 mov	 DWORD PTR _bestCost$29[ebp], ecx

; 1338 :           bestMoves[numBestMove++] = (ui8)i;

  00364	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR _numBestMove$27[ebp]
  0036a	8a 45 a0	 mov	 al, BYTE PTR _i$32[ebp]
  0036d	88 84 15 9c fe
	ff ff		 mov	 BYTE PTR _bestMoves$28[ebp+edx], al
  00374	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR _numBestMove$27[ebp]
  0037a	83 c1 01	 add	 ecx, 1
  0037d	89 8d 94 fe ff
	ff		 mov	 DWORD PTR _numBestMove$27[ebp], ecx
$LN44@TheGeneral:

; 1339 :         };
; 1340 :       };

  00383	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0038a	8d 8d 7c ea ff
	ff		 lea	 ecx, DWORD PTR _nimcon$25[ebp]
  00390	e8 00 00 00 00	 call	 ??1NIMCON@@QAE@XZ
$LN40@TheGeneral:

; 1341 :     };

  00395	e9 e9 fe ff ff	 jmp	 $LN2@TheGeneral
$LN3@TheGeneral:

; 1342 :     if (numBestMove != 0)

  0039a	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR _numBestMove$27[ebp], 0
  003a1	0f 84 3e 05 00
	00		 je	 $LN45@TheGeneral

; 1343 :     {
; 1344 :       MOVE results[100];

  003a7	68 00 00 00 00	 push	 OFFSET ??0MOVE@@QAE@XZ
  003ac	6a 64		 push	 100			; 00000064H
  003ae	6a 38		 push	 56			; 00000038H
  003b0	8d 95 94 d4 ff
	ff		 lea	 edx, DWORD PTR _results$24[ebp]
  003b6	52		 push	 edx
  003b7	e8 00 00 00 00	 call	 ??_H@YGXPAXIIP6EPAX0@Z@Z

; 1345 :       int moveNum[100];
; 1346 :       LONG_CHAIN_INFO longChainInfo[100];
; 1347 :       int  breakWeights[100];
; 1348 :       if (numBestMove > 100) numBestMove = 100;

  003bc	83 bd 94 fe ff
	ff 64		 cmp	 DWORD PTR _numBestMove$27[ebp], 100 ; 00000064H
  003c3	7e 0a		 jle	 SHORT $LN47@TheGeneral
  003c5	c7 85 94 fe ff
	ff 64 00 00 00	 mov	 DWORD PTR _numBestMove$27[ebp], 100 ; 00000064H
$LN47@TheGeneral:

; 1349 :       if (numBestMove > 1)

  003cf	83 bd 94 fe ff
	ff 01		 cmp	 DWORD PTR _numBestMove$27[ebp], 1
  003d6	0f 8e c1 04 00
	00		 jle	 $LN48@TheGeneral

; 1350 :       {
; 1351 :         int j;
; 1352 :         for (i=0; i<numBestMove; i++)

  003dc	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$32[ebp], 0
  003e3	eb 09		 jmp	 SHORT $LN7@TheGeneral
$LN5@TheGeneral:
  003e5	8b 45 a0	 mov	 eax, DWORD PTR _i$32[ebp]
  003e8	83 c0 01	 add	 eax, 1
  003eb	89 45 a0	 mov	 DWORD PTR _i$32[ebp], eax
$LN7@TheGeneral:
  003ee	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  003f1	3b 8d 94 fe ff
	ff		 cmp	 ecx, DWORD PTR _numBestMove$27[ebp]
  003f7	0f 8d a7 00 00
	00		 jge	 $LN6@TheGeneral

; 1353 :         {
; 1354 :           pm[bestMoves[i]].con.Canon(0, pm[bestMoves[i]].con.m_numNode);

  003fd	8b 55 a0	 mov	 edx, DWORD PTR _i$32[ebp]
  00400	0f b6 84 15 9c
	fe ff ff	 movzx	 eax, BYTE PTR _bestMoves$28[ebp+edx]
  00408	69 c8 1c 14 00
	00		 imul	 ecx, eax, 5148
  0040e	8b 55 18	 mov	 edx, DWORD PTR _pm$[ebp]
  00411	8b 44 0a 08	 mov	 eax, DWORD PTR [edx+ecx+8]
  00415	50		 push	 eax
  00416	6a 00		 push	 0
  00418	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  0041b	0f b6 94 0d 9c
	fe ff ff	 movzx	 edx, BYTE PTR _bestMoves$28[ebp+ecx]
  00423	69 c2 1c 14 00
	00		 imul	 eax, edx, 5148
  00429	8b 4d 18	 mov	 ecx, DWORD PTR _pm$[ebp]
  0042c	8d 4c 01 08	 lea	 ecx, DWORD PTR [ecx+eax+8]
  00430	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon

; 1355 :           results[i] = TranslateComputerMove(&pDoc->Game(), MT_NIMVAL, &pm[bestMoves[i]].con);

  00435	8b 55 a0	 mov	 edx, DWORD PTR _i$32[ebp]
  00438	0f b6 84 15 9c
	fe ff ff	 movzx	 eax, BYTE PTR _bestMoves$28[ebp+edx]
  00440	69 c8 1c 14 00
	00		 imul	 ecx, eax, 5148
  00446	8b 55 18	 mov	 edx, DWORD PTR _pm$[ebp]
  00449	8d 44 0a 08	 lea	 eax, DWORD PTR [edx+ecx+8]
  0044d	50		 push	 eax
  0044e	6a 0d		 push	 13			; 0000000dH
  00450	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00456	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  0045b	50		 push	 eax
  0045c	8d 8d 68 b4 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00462	51		 push	 ecx
  00463	e8 00 00 00 00	 call	 ?TranslateComputerMove@@YA?AUMOVE@@PBVDOTS_AND_BOXES@@W4MOVE_TYPE@@PBVCON@@@Z ; TranslateComputerMove
  00468	83 c4 10	 add	 esp, 16			; 00000010H
  0046b	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00470	8b f0		 mov	 esi, eax
  00472	8d bd dc ca ff
	ff		 lea	 edi, DWORD PTR $T19[ebp]
  00478	f3 a5		 rep movsd
  0047a	6b 55 a0 38	 imul	 edx, DWORD PTR _i$32[ebp], 56
  0047e	8d bc 15 94 d4
	ff ff		 lea	 edi, DWORD PTR _results$24[ebp+edx]
  00485	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  0048a	8d b5 dc ca ff
	ff		 lea	 esi, DWORD PTR $T19[ebp]
  00490	f3 a5		 rep movsd

; 1356 :           moveNum[i] = i;

  00492	8b 45 a0	 mov	 eax, DWORD PTR _i$32[ebp]
  00495	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  00498	89 8c 85 fc d2
	ff ff		 mov	 DWORD PTR _moveNum$23[ebp+eax*4], ecx

; 1357 :         };

  0049f	e9 41 ff ff ff	 jmp	 $LN5@TheGeneral
$LN6@TheGeneral:

; 1358 :         //Randomly choose among the equally good 'bestMoves'.
; 1359 :         pDoc->Game().FindAvoids();

  004a4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  004aa	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  004af	8b c8		 mov	 ecx, eax
  004b1	e8 00 00 00 00	 call	 ?FindAvoids@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::FindAvoids

; 1360 :         pDoc->Game().ComputeBreakUpLoopWeights(1);

  004b6	6a 01		 push	 1
  004b8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  004be	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  004c3	8b c8		 mov	 ecx, eax
  004c5	e8 00 00 00 00	 call	 ?ComputeBreakUpLoopWeights@DOTS_AND_BOXES@@QAEXH@Z ; DOTS_AND_BOXES::ComputeBreakUpLoopWeights

; 1361 :         for(i=0; i<numBestMove; i++)

  004ca	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$32[ebp], 0
  004d1	eb 09		 jmp	 SHORT $LN10@TheGeneral
$LN8@TheGeneral:
  004d3	8b 55 a0	 mov	 edx, DWORD PTR _i$32[ebp]
  004d6	83 c2 01	 add	 edx, 1
  004d9	89 55 a0	 mov	 DWORD PTR _i$32[ebp], edx
$LN10@TheGeneral:
  004dc	8b 45 a0	 mov	 eax, DWORD PTR _i$32[ebp]
  004df	3b 85 94 fe ff
	ff		 cmp	 eax, DWORD PTR _numBestMove$27[ebp]
  004e5	0f 8d f5 00 00
	00		 jge	 $LN9@TheGeneral

; 1362 :         {
; 1363 :           int line;
; 1364 :           line = pDoc->Game().Dot2Line(results[i].dotNum, results[i].vertical);

  004eb	6b 4d a0 38	 imul	 ecx, DWORD PTR _i$32[ebp], 56
  004ef	8b 94 0d 94 d4
	ff ff		 mov	 edx, DWORD PTR _results$24[ebp+ecx]
  004f6	8b 84 0d 98 d4
	ff ff		 mov	 eax, DWORD PTR _results$24[ebp+ecx+4]
  004fd	89 95 60 b4 ff
	ff		 mov	 DWORD PTR $T3[ebp], edx
  00503	89 85 64 b4 ff
	ff		 mov	 DWORD PTR $T3[ebp+4], eax
  00509	6b 4d a0 38	 imul	 ecx, DWORD PTR _i$32[ebp], 56
  0050d	0f b6 94 0d 9c
	d4 ff ff	 movzx	 edx, BYTE PTR _results$24[ebp+ecx+8]
  00515	52		 push	 edx
  00516	8b 85 64 b4 ff
	ff		 mov	 eax, DWORD PTR $T3[ebp+4]
  0051c	50		 push	 eax
  0051d	8b 8d 60 b4 ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp]
  00523	51		 push	 ecx
  00524	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0052a	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  0052f	8b c8		 mov	 ecx, eax
  00531	e8 00 00 00 00	 call	 ?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z ; DOTS_AND_BOXES::Dot2Line
  00536	89 85 d8 ca ff
	ff		 mov	 DWORD PTR _line$18[ebp], eax

; 1365 :           breakWeights[i] = pDoc->Game().LoopWeight(results[i].dotNum, results[i].vertical);

  0053c	6b 55 a0 38	 imul	 edx, DWORD PTR _i$32[ebp], 56
  00540	8b 84 15 94 d4
	ff ff		 mov	 eax, DWORD PTR _results$24[ebp+edx]
  00547	8b 8c 15 98 d4
	ff ff		 mov	 ecx, DWORD PTR _results$24[ebp+edx+4]
  0054e	89 85 58 b4 ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00554	89 8d 5c b4 ff
	ff		 mov	 DWORD PTR $T2[ebp+4], ecx
  0055a	6b 55 a0 38	 imul	 edx, DWORD PTR _i$32[ebp], 56
  0055e	0f b6 84 15 9c
	d4 ff ff	 movzx	 eax, BYTE PTR _results$24[ebp+edx+8]
  00566	50		 push	 eax
  00567	8b 8d 5c b4 ff
	ff		 mov	 ecx, DWORD PTR $T2[ebp+4]
  0056d	51		 push	 ecx
  0056e	8b 95 58 b4 ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00574	52		 push	 edx
  00575	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0057b	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  00580	8b c8		 mov	 ecx, eax
  00582	e8 00 00 00 00	 call	 ?LoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@_N@Z ; DOTS_AND_BOXES::LoopWeight
  00587	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  0058a	89 84 8d 1c cb
	ff ff		 mov	 DWORD PTR _breakWeights$21[ebp+ecx*4], eax

; 1366 :           longChainInfo[i] = ComputeLongChainInfo(&pDoc->Game(), &results[i]);

  00591	6b 55 a0 38	 imul	 edx, DWORD PTR _i$32[ebp], 56
  00595	8d 84 15 94 d4
	ff ff		 lea	 eax, DWORD PTR _results$24[ebp+edx]
  0059c	50		 push	 eax
  0059d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  005a3	e8 00 00 00 00	 call	 ?Game@CNewBoxesDoc@@QAEAAVDOTS_AND_BOXES@@XZ ; CNewBoxesDoc::Game
  005a8	50		 push	 eax
  005a9	8d 8d c8 ca ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  005af	51		 push	 ecx
  005b0	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  005b3	e8 00 00 00 00	 call	 ?ComputeLongChainInfo@CON@@QAE?AULONG_CHAIN_INFO@@PAVDOTS_AND_BOXES@@PAUMOVE@@@Z ; CON::ComputeLongChainInfo
  005b8	8b 55 a0	 mov	 edx, DWORD PTR _i$32[ebp]
  005bb	c1 e2 04	 shl	 edx, 4
  005be	8d 8c 15 b4 cc
	ff ff		 lea	 ecx, DWORD PTR _longChainInfo$22[ebp+edx]
  005c5	8b 10		 mov	 edx, DWORD PTR [eax]
  005c7	89 11		 mov	 DWORD PTR [ecx], edx
  005c9	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  005cc	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  005cf	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  005d2	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  005d5	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  005d8	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 1367 :         };

  005db	e9 f3 fe ff ff	 jmp	 $LN8@TheGeneral
$LN9@TheGeneral:

; 1368 :         for (i=0; i<numBestMove-1; i++)

  005e0	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$32[ebp], 0
  005e7	eb 09		 jmp	 SHORT $LN13@TheGeneral
$LN11@TheGeneral:
  005e9	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  005ec	83 c1 01	 add	 ecx, 1
  005ef	89 4d a0	 mov	 DWORD PTR _i$32[ebp], ecx
$LN13@TheGeneral:
  005f2	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR _numBestMove$27[ebp]
  005f8	83 ea 01	 sub	 edx, 1
  005fb	39 55 a0	 cmp	 DWORD PTR _i$32[ebp], edx
  005fe	0f 8d f3 01 00
	00		 jge	 $LN12@TheGeneral

; 1369 :         {
; 1370 :           int j;
; 1371 :           for (j=i; (j>=0) && MoveQualityGT(breakWeights, longChainInfo, j+1, j); j--)

  00604	8b 45 a0	 mov	 eax, DWORD PTR _i$32[ebp]
  00607	89 85 c4 ca ff
	ff		 mov	 DWORD PTR _j$16[ebp], eax
  0060d	eb 0f		 jmp	 SHORT $LN16@TheGeneral
$LN14@TheGeneral:
  0060f	8b 8d c4 ca ff
	ff		 mov	 ecx, DWORD PTR _j$16[ebp]
  00615	83 e9 01	 sub	 ecx, 1
  00618	89 8d c4 ca ff
	ff		 mov	 DWORD PTR _j$16[ebp], ecx
$LN16@TheGeneral:
  0061e	83 bd c4 ca ff
	ff 00		 cmp	 DWORD PTR _j$16[ebp], 0
  00625	0f 8c c7 01 00
	00		 jl	 $LN15@TheGeneral
  0062b	8b 95 c4 ca ff
	ff		 mov	 edx, DWORD PTR _j$16[ebp]
  00631	52		 push	 edx
  00632	8b 85 c4 ca ff
	ff		 mov	 eax, DWORD PTR _j$16[ebp]
  00638	83 c0 01	 add	 eax, 1
  0063b	50		 push	 eax
  0063c	8d 8d b4 cc ff
	ff		 lea	 ecx, DWORD PTR _longChainInfo$22[ebp]
  00642	51		 push	 ecx
  00643	8d 95 1c cb ff
	ff		 lea	 edx, DWORD PTR _breakWeights$21[ebp]
  00649	52		 push	 edx
  0064a	e8 00 00 00 00	 call	 ?MoveQualityGT@@YA_NPAHPAULONG_CHAIN_INFO@@HH@Z ; MoveQualityGT
  0064f	83 c4 10	 add	 esp, 16			; 00000010H
  00652	0f b6 c0	 movzx	 eax, al
  00655	85 c0		 test	 eax, eax
  00657	0f 84 95 01 00
	00		 je	 $LN15@TheGeneral

; 1372 :           {
; 1373 :             MOVE tr;

  0065d	8d 8d 88 ca ff
	ff		 lea	 ecx, DWORD PTR _tr$15[ebp]
  00663	e8 00 00 00 00	 call	 ??0MOVE@@QAE@XZ

; 1374 :             LONG_CHAIN_INFO tlci;
; 1375 :             int  tw;
; 1376 :             tw = breakWeights[j];

  00668	8b 8d c4 ca ff
	ff		 mov	 ecx, DWORD PTR _j$16[ebp]
  0066e	8b 94 8d 1c cb
	ff ff		 mov	 edx, DWORD PTR _breakWeights$21[ebp+ecx*4]
  00675	89 95 68 ca ff
	ff		 mov	 DWORD PTR _tw$13[ebp], edx

; 1377 :             breakWeights[j] = breakWeights[j+1];

  0067b	8b 85 c4 ca ff
	ff		 mov	 eax, DWORD PTR _j$16[ebp]
  00681	8b 8d c4 ca ff
	ff		 mov	 ecx, DWORD PTR _j$16[ebp]
  00687	8b 94 8d 20 cb
	ff ff		 mov	 edx, DWORD PTR _breakWeights$21[ebp+ecx*4+4]
  0068e	89 94 85 1c cb
	ff ff		 mov	 DWORD PTR _breakWeights$21[ebp+eax*4], edx

; 1378 :             breakWeights[j+1] = tw;

  00695	8b 85 c4 ca ff
	ff		 mov	 eax, DWORD PTR _j$16[ebp]
  0069b	8b 8d 68 ca ff
	ff		 mov	 ecx, DWORD PTR _tw$13[ebp]
  006a1	89 8c 85 20 cb
	ff ff		 mov	 DWORD PTR _breakWeights$21[ebp+eax*4+4], ecx

; 1379 :             tr = results[j];

  006a8	6b 95 c4 ca ff
	ff 38		 imul	 edx, DWORD PTR _j$16[ebp], 56
  006af	8d b4 15 94 d4
	ff ff		 lea	 esi, DWORD PTR _results$24[ebp+edx]
  006b6	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  006bb	8d bd 88 ca ff
	ff		 lea	 edi, DWORD PTR _tr$15[ebp]
  006c1	f3 a5		 rep movsd

; 1380 :             results[j] = results[j+1];

  006c3	8b 85 c4 ca ff
	ff		 mov	 eax, DWORD PTR _j$16[ebp]
  006c9	83 c0 01	 add	 eax, 1
  006cc	6b c8 38	 imul	 ecx, eax, 56
  006cf	8d b4 0d 94 d4
	ff ff		 lea	 esi, DWORD PTR _results$24[ebp+ecx]
  006d6	6b 95 c4 ca ff
	ff 38		 imul	 edx, DWORD PTR _j$16[ebp], 56
  006dd	8d bc 15 94 d4
	ff ff		 lea	 edi, DWORD PTR _results$24[ebp+edx]
  006e4	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  006e9	f3 a5		 rep movsd

; 1381 :             results[j+1] = tr;

  006eb	8b 85 c4 ca ff
	ff		 mov	 eax, DWORD PTR _j$16[ebp]
  006f1	83 c0 01	 add	 eax, 1
  006f4	6b c8 38	 imul	 ecx, eax, 56
  006f7	8d bc 0d 94 d4
	ff ff		 lea	 edi, DWORD PTR _results$24[ebp+ecx]
  006fe	b9 0e 00 00 00	 mov	 ecx, 14			; 0000000eH
  00703	8d b5 88 ca ff
	ff		 lea	 esi, DWORD PTR _tr$15[ebp]
  00709	f3 a5		 rep movsd

; 1382 :             tw = moveNum[j];

  0070b	8b 95 c4 ca ff
	ff		 mov	 edx, DWORD PTR _j$16[ebp]
  00711	8b 84 95 fc d2
	ff ff		 mov	 eax, DWORD PTR _moveNum$23[ebp+edx*4]
  00718	89 85 68 ca ff
	ff		 mov	 DWORD PTR _tw$13[ebp], eax

; 1383 :             moveNum[j] = moveNum[j+1];

  0071e	8b 8d c4 ca ff
	ff		 mov	 ecx, DWORD PTR _j$16[ebp]
  00724	8b 95 c4 ca ff
	ff		 mov	 edx, DWORD PTR _j$16[ebp]
  0072a	8b 84 95 00 d3
	ff ff		 mov	 eax, DWORD PTR _moveNum$23[ebp+edx*4+4]
  00731	89 84 8d fc d2
	ff ff		 mov	 DWORD PTR _moveNum$23[ebp+ecx*4], eax

; 1384 :             moveNum[j+1] = tw;

  00738	8b 8d c4 ca ff
	ff		 mov	 ecx, DWORD PTR _j$16[ebp]
  0073e	8b 95 68 ca ff
	ff		 mov	 edx, DWORD PTR _tw$13[ebp]
  00744	89 94 8d 00 d3
	ff ff		 mov	 DWORD PTR _moveNum$23[ebp+ecx*4+4], edx

; 1385 :             tlci = longChainInfo[j];

  0074b	8b 85 c4 ca ff
	ff		 mov	 eax, DWORD PTR _j$16[ebp]
  00751	c1 e0 04	 shl	 eax, 4
  00754	8d 8c 05 b4 cc
	ff ff		 lea	 ecx, DWORD PTR _longChainInfo$22[ebp+eax]
  0075b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0075d	89 95 70 ca ff
	ff		 mov	 DWORD PTR _tlci$14[ebp], edx
  00763	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00766	89 85 74 ca ff
	ff		 mov	 DWORD PTR _tlci$14[ebp+4], eax
  0076c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0076f	89 95 78 ca ff
	ff		 mov	 DWORD PTR _tlci$14[ebp+8], edx
  00775	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00778	89 85 7c ca ff
	ff		 mov	 DWORD PTR _tlci$14[ebp+12], eax

; 1386 :             longChainInfo[j] = longChainInfo[j+1];

  0077e	8b 8d c4 ca ff
	ff		 mov	 ecx, DWORD PTR _j$16[ebp]
  00784	83 c1 01	 add	 ecx, 1
  00787	c1 e1 04	 shl	 ecx, 4
  0078a	8d 94 0d b4 cc
	ff ff		 lea	 edx, DWORD PTR _longChainInfo$22[ebp+ecx]
  00791	8b 85 c4 ca ff
	ff		 mov	 eax, DWORD PTR _j$16[ebp]
  00797	c1 e0 04	 shl	 eax, 4
  0079a	8d 8c 05 b4 cc
	ff ff		 lea	 ecx, DWORD PTR _longChainInfo$22[ebp+eax]
  007a1	8b 02		 mov	 eax, DWORD PTR [edx]
  007a3	89 01		 mov	 DWORD PTR [ecx], eax
  007a5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  007a8	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  007ab	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  007ae	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  007b1	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  007b4	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 1387 :             longChainInfo[j+1] = tlci;

  007b7	8b 85 c4 ca ff
	ff		 mov	 eax, DWORD PTR _j$16[ebp]
  007bd	83 c0 01	 add	 eax, 1
  007c0	c1 e0 04	 shl	 eax, 4
  007c3	8d 8c 05 b4 cc
	ff ff		 lea	 ecx, DWORD PTR _longChainInfo$22[ebp+eax]
  007ca	8b 95 70 ca ff
	ff		 mov	 edx, DWORD PTR _tlci$14[ebp]
  007d0	89 11		 mov	 DWORD PTR [ecx], edx
  007d2	8b 85 74 ca ff
	ff		 mov	 eax, DWORD PTR _tlci$14[ebp+4]
  007d8	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  007db	8b 95 78 ca ff
	ff		 mov	 edx, DWORD PTR _tlci$14[ebp+8]
  007e1	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  007e4	8b 85 7c ca ff
	ff		 mov	 eax, DWORD PTR _tlci$14[ebp+12]
  007ea	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 1388 :           };

  007ed	e9 1d fe ff ff	 jmp	 $LN14@TheGeneral
$LN15@TheGeneral:

; 1389 :         };

  007f2	e9 f2 fd ff ff	 jmp	 $LN11@TheGeneral
$LN12@TheGeneral:

; 1390 :         for (j=0; (j<numBestMove-1) && !MoveQualityGT(breakWeights, longChainInfo, j, j+1); j++){};

  007f7	c7 85 14 cb ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$20[ebp], 0
  00801	eb 0f		 jmp	 SHORT $LN19@TheGeneral
$LN17@TheGeneral:
  00803	8b 8d 14 cb ff
	ff		 mov	 ecx, DWORD PTR _j$20[ebp]
  00809	83 c1 01	 add	 ecx, 1
  0080c	89 8d 14 cb ff
	ff		 mov	 DWORD PTR _j$20[ebp], ecx
$LN19@TheGeneral:
  00812	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR _numBestMove$27[ebp]
  00818	83 ea 01	 sub	 edx, 1
  0081b	39 95 14 cb ff
	ff		 cmp	 DWORD PTR _j$20[ebp], edx
  00821	7d 30		 jge	 SHORT $LN18@TheGeneral
  00823	8b 85 14 cb ff
	ff		 mov	 eax, DWORD PTR _j$20[ebp]
  00829	83 c0 01	 add	 eax, 1
  0082c	50		 push	 eax
  0082d	8b 8d 14 cb ff
	ff		 mov	 ecx, DWORD PTR _j$20[ebp]
  00833	51		 push	 ecx
  00834	8d 95 b4 cc ff
	ff		 lea	 edx, DWORD PTR _longChainInfo$22[ebp]
  0083a	52		 push	 edx
  0083b	8d 85 1c cb ff
	ff		 lea	 eax, DWORD PTR _breakWeights$21[ebp]
  00841	50		 push	 eax
  00842	e8 00 00 00 00	 call	 ?MoveQualityGT@@YA_NPAHPAULONG_CHAIN_INFO@@HH@Z ; MoveQualityGT
  00847	83 c4 10	 add	 esp, 16			; 00000010H
  0084a	0f b6 c8	 movzx	 ecx, al
  0084d	85 c9		 test	 ecx, ecx
  0084f	75 02		 jne	 SHORT $LN18@TheGeneral
  00851	eb b0		 jmp	 SHORT $LN17@TheGeneral
$LN18@TheGeneral:

; 1391 :         i = pDoc->MyRandom(j+1);

  00853	8b 95 14 cb ff
	ff		 mov	 edx, DWORD PTR _j$20[ebp]
  00859	83 c2 01	 add	 edx, 1
  0085c	52		 push	 edx
  0085d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00863	e8 00 00 00 00	 call	 ?MyRandom@CNewBoxesDoc@@QAEII@Z ; CNewBoxesDoc::MyRandom
  00868	89 45 a0	 mov	 DWORD PTR _i$32[ebp], eax

; 1392 :         computerMove = pm[bestMoves[moveNum[i]]];

  0086b	8b 45 a0	 mov	 eax, DWORD PTR _i$32[ebp]
  0086e	8b 8c 85 fc d2
	ff ff		 mov	 ecx, DWORD PTR _moveNum$23[ebp+eax*4]
  00875	0f b6 94 0d 9c
	fe ff ff	 movzx	 edx, BYTE PTR _bestMoves$28[ebp+ecx]
  0087d	69 c2 1c 14 00
	00		 imul	 eax, edx, 5148
  00883	03 45 18	 add	 eax, DWORD PTR _pm$[ebp]
  00886	50		 push	 eax
  00887	b9 00 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A ; computerMove
  0088c	e8 00 00 00 00	 call	 ??4PossibleMove@@QAEAAU0@ABU0@@Z

; 1393 :         moveType = MT_NIMVAL;

  00891	c7 05 00 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 13 ; moveType, 0000000dH

; 1394 :       }

  0089b	eb 43		 jmp	 SHORT $LN49@TheGeneral
$LN48@TheGeneral:

; 1395 :       else
; 1396 :       {
; 1397 :         i = 0;

  0089d	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$32[ebp], 0

; 1398 :         computerMove = pm[bestMoves[i]];

  008a4	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  008a7	0f b6 94 0d 9c
	fe ff ff	 movzx	 edx, BYTE PTR _bestMoves$28[ebp+ecx]
  008af	69 c2 1c 14 00
	00		 imul	 eax, edx, 5148
  008b5	03 45 18	 add	 eax, DWORD PTR _pm$[ebp]
  008b8	50		 push	 eax
  008b9	b9 00 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A ; computerMove
  008be	e8 00 00 00 00	 call	 ??4PossibleMove@@QAEAAU0@ABU0@@Z

; 1399 :         computerMove.con.Canon(0, computerMove.con.m_numNode);

  008c3	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR ?computerMove@@3UPossibleMove@@A+8
  008c9	51		 push	 ecx
  008ca	6a 00		 push	 0
  008cc	b9 08 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A+8
  008d1	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon

; 1400 :         moveType = MT_NIMVAL;

  008d6	c7 05 00 00 00
	00 0d 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 13 ; moveType, 0000000dH
$LN49@TheGeneral:

; 1401 :       };
; 1402 :     }

  008e0	e9 69 03 00 00	 jmp	 $LN39@TheGeneral
$LN45@TheGeneral:

; 1403 :     else if (moveValue.allNimvalComputed && !zeroNimvalPossible)

  008e5	0f b6 55 e0	 movzx	 edx, BYTE PTR _moveValue$[ebp+16]
  008e9	85 d2		 test	 edx, edx
  008eb	0f 84 5d 03 00
	00		 je	 $LN39@TheGeneral
  008f1	0f b6 85 93 fe
	ff ff		 movzx	 eax, BYTE PTR _zeroNimvalPossible$26[ebp]
  008f8	85 c0		 test	 eax, eax
  008fa	0f 85 4e 03 00
	00		 jne	 $LN39@TheGeneral

; 1404 :     {
; 1405 :       //All moves result in non-zero nimval.
; 1406 :       //Choose the one that will cost him most to keep
; 1407 :       //the nimval at zero.
; 1408 :       numBestMove = 0;

  00900	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _numBestMove$27[ebp], 0

; 1409 : 
; 1410 :       
; 1411 :       
; 1412 :       
; 1413 :       
; 1414 :       
; 1415 :       bestCost = -9999;

  0090a	c7 45 94 f1 d8
	ff ff		 mov	 DWORD PTR _bestCost$29[ebp], -9999 ; ffffd8f1H

; 1416 :       move = -1;

  00911	c7 45 9c ff ff
	ff ff		 mov	 DWORD PTR _move$31[ebp], -1

; 1417 :       for (i=0; i<moveValue.numPossibleMove; i++)

  00918	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$32[ebp], 0
  0091f	eb 09		 jmp	 SHORT $LN22@TheGeneral
$LN20@TheGeneral:
  00921	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  00924	83 c1 01	 add	 ecx, 1
  00927	89 4d a0	 mov	 DWORD PTR _i$32[ebp], ecx
$LN22@TheGeneral:
  0092a	8b 55 a0	 mov	 edx, DWORD PTR _i$32[ebp]
  0092d	3b 55 dc	 cmp	 edx, DWORD PTR _moveValue$[ebp+12]
  00930	0f 8d a4 01 00
	00		 jge	 $LN21@TheGeneral

; 1418 :       {
; 1419 :         NIMCON nimcon;

  00936	8d 8d 54 b6 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$12[ebp]
  0093c	e8 00 00 00 00	 call	 ??0NIMCON@@QAE@XZ
  00941	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1

; 1420 :         int nimval;
; 1421 :         nimcon = &pm[i].con;

  00948	69 45 a0 1c 14
	00 00		 imul	 eax, DWORD PTR _i$32[ebp], 5148
  0094f	8b 4d 18	 mov	 ecx, DWORD PTR _pm$[ebp]
  00952	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00956	52		 push	 edx
  00957	8d 8d 54 b6 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$12[ebp]
  0095d	e8 00 00 00 00	 call	 ??4NIMCON@@QAEAAV0@PBVCON@@@Z ; NIMCON::operator=

; 1422 :         if (pm[i].offering > 0) continue; //Don't give things away to establish nimval.

  00962	69 45 a0 1c 14
	00 00		 imul	 eax, DWORD PTR _i$32[ebp], 5148
  00969	8b 4d 18	 mov	 ecx, DWORD PTR _pm$[ebp]
  0096c	83 3c 01 00	 cmp	 DWORD PTR [ecx+eax], 0
  00970	7e 14		 jle	 SHORT $LN51@TheGeneral
  00972	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00979	8d 8d 54 b6 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$12[ebp]
  0097f	e8 00 00 00 00	 call	 ??1NIMCON@@QAE@XZ
  00984	eb 9b		 jmp	 SHORT $LN20@TheGeneral
$LN51@TheGeneral:

; 1423 :         if (pm[i].nimval < 0)

  00986	69 55 a0 1c 14
	00 00		 imul	 edx, DWORD PTR _i$32[ebp], 5148
  0098d	8b 45 18	 mov	 eax, DWORD PTR _pm$[ebp]
  00990	83 7c 10 04 00	 cmp	 DWORD PTR [eax+edx+4], 0
  00995	0f 8d b2 00 00
	00		 jge	 $LN52@TheGeneral

; 1424 :         {
; 1425 :           int total, decline;
; 1426 :           if (pm[i].nimval == LOONY2)

  0099b	69 4d a0 1c 14
	00 00		 imul	 ecx, DWORD PTR _i$32[ebp], 5148
  009a2	8b 55 18	 mov	 edx, DWORD PTR _pm$[ebp]
  009a5	83 7c 0a 04 fe	 cmp	 DWORD PTR [edx+ecx+4], -2 ; fffffffeH
  009aa	75 1f		 jne	 SHORT $LN54@TheGeneral

; 1427 :           {
; 1428 :             total = pm[i].offering;

  009ac	69 45 a0 1c 14
	00 00		 imul	 eax, DWORD PTR _i$32[ebp], 5148
  009b3	8b 4d 18	 mov	 ecx, DWORD PTR _pm$[ebp]
  009b6	8b 14 01	 mov	 edx, DWORD PTR [ecx+eax]
  009b9	89 95 48 b6 ff
	ff		 mov	 DWORD PTR _total$10[ebp], edx

; 1429 :             decline = 2;

  009bf	c7 85 44 b6 ff
	ff 02 00 00 00	 mov	 DWORD PTR _decline$9[ebp], 2

; 1430 :           }

  009c9	eb 28		 jmp	 SHORT $LN55@TheGeneral
$LN54@TheGeneral:

; 1431 :           else
; 1432 :           {
; 1433 :             NotImplemented("Negative nimval");

  009cb	68 00 00 00 00	 push	 OFFSET $SG227038
  009d0	e8 00 00 00 00	 call	 ?NotImplemented@@YAXPAD@Z ; NotImplemented
  009d5	83 c4 04	 add	 esp, 4

; 1434 :             total=0;

  009d8	c7 85 48 b6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _total$10[ebp], 0

; 1435 :             decline = 0;

  009e2	c7 85 44 b6 ff
	ff 00 00 00 00	 mov	 DWORD PTR _decline$9[ebp], 0

; 1436 :             cost = 0;

  009ec	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _cost$30[ebp], 0
$LN55@TheGeneral:

; 1437 :           };
; 1438 :           // Here is the situation.  The nimvalue of the current
; 1439 :           // game is zero.  There is a loony move available to us.
; 1440 :           // If we make the loony move, what must our oppponent do
; 1441 :           // to restore the nimvalue to zero?
; 1442 :           // 1) Take them all.  Make the nimvalue non-zero. then move again.
; 1443 :           // 2) Decline some, force us to take the rest and reduce the 
; 1444 :           //    nimvalue to zero.
; 1445 :           // We can decide which is the case by determining the nimvalue
; 1446 :           // of the game without any of the loony-move chain.
; 1447 :           nimval = nimcon.NimVal(&pm[i].con);

  009f3	69 45 a0 1c 14
	00 00		 imul	 eax, DWORD PTR _i$32[ebp], 5148
  009fa	8b 4d 18	 mov	 ecx, DWORD PTR _pm$[ebp]
  009fd	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  00a01	52		 push	 edx
  00a02	8d 8d 54 b6 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$12[ebp]
  00a08	e8 00 00 00 00	 call	 ?NimVal@NIMCON@@QAEHPBVCON@@@Z ; NIMCON::NimVal
  00a0d	89 85 4c b6 ff
	ff		 mov	 DWORD PTR _nimval$11[ebp], eax

; 1448 :           if (nimval != 0)

  00a13	83 bd 4c b6 ff
	ff 00		 cmp	 DWORD PTR _nimval$11[ebp], 0
  00a1a	74 1e		 je	 SHORT $LN56@TheGeneral

; 1449 :           {
; 1450 :             //It appears that if he takes them all then he will
; 1451 :             //get to move again from a non-zero game and thus
; 1452 :             //reduce the value to zero with his follow-up move.
; 1453 :             //So the cost to him is negative total chain length.
; 1454 :             cost = -total + nimcon.MaxCostOfNimZero(-1, 1);

  00a1c	8b b5 48 b6 ff
	ff		 mov	 esi, DWORD PTR _total$10[ebp]
  00a22	f7 de		 neg	 esi
  00a24	6a 01		 push	 1
  00a26	6a ff		 push	 -1
  00a28	8d 8d 54 b6 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$12[ebp]
  00a2e	e8 00 00 00 00	 call	 ?MaxCostOfNimZero@CON@@QBEHHH@Z ; CON::MaxCostOfNimZero
  00a33	03 f0		 add	 esi, eax
  00a35	89 75 98	 mov	 DWORD PTR _cost$30[ebp], esi

; 1455 :           }

  00a38	eb 11		 jmp	 SHORT $LN57@TheGeneral
$LN56@TheGeneral:

; 1456 :           else
; 1457 :           {
; 1458 :             //It appears that if our opponent taks all the long
; 1459 :             //chain which we offered, it will result in a zero valued
; 1460 :             //game.  So he dares not take them all.  He will decline 
; 1461 :             //a few.
; 1462 :             cost = 2*decline - total;

  00a3a	8b 85 44 b6 ff
	ff		 mov	 eax, DWORD PTR _decline$9[ebp]
  00a40	d1 e0		 shl	 eax, 1
  00a42	2b 85 48 b6 ff
	ff		 sub	 eax, DWORD PTR _total$10[ebp]
  00a48	89 45 98	 mov	 DWORD PTR _cost$30[ebp], eax
$LN57@TheGeneral:

; 1463 :           };
; 1464 :         }

  00a4b	eb 37		 jmp	 SHORT $LN53@TheGeneral
$LN52@TheGeneral:

; 1465 :         else
; 1466 :         { //nimval >= 0
; 1467 :           //nimcon.Simplify();
; 1468 :           nimcon.Canon(0, nimcon.m_numNode);

  00a4d	8b 8d 54 b6 ff
	ff		 mov	 ecx, DWORD PTR _nimcon$12[ebp]
  00a53	51		 push	 ecx
  00a54	6a 00		 push	 0
  00a56	8d 8d 54 b6 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$12[ebp]
  00a5c	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon

; 1469 :           cost = -pm[i].offering + nimcon.MaxCostOfNimZero(-1, 1); //Find the largest response.

  00a61	69 55 a0 1c 14
	00 00		 imul	 edx, DWORD PTR _i$32[ebp], 5148
  00a68	8b 45 18	 mov	 eax, DWORD PTR _pm$[ebp]
  00a6b	8b 34 10	 mov	 esi, DWORD PTR [eax+edx]
  00a6e	f7 de		 neg	 esi
  00a70	6a 01		 push	 1
  00a72	6a ff		 push	 -1
  00a74	8d 8d 54 b6 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$12[ebp]
  00a7a	e8 00 00 00 00	 call	 ?MaxCostOfNimZero@CON@@QBEHHH@Z ; CON::MaxCostOfNimZero
  00a7f	03 f0		 add	 esi, eax
  00a81	89 75 98	 mov	 DWORD PTR _cost$30[ebp], esi
$LN53@TheGeneral:

; 1470 :         };
; 1471 :         if (cost > bestCost) numBestMove = 0;

  00a84	8b 4d 98	 mov	 ecx, DWORD PTR _cost$30[ebp]
  00a87	3b 4d 94	 cmp	 ecx, DWORD PTR _bestCost$29[ebp]
  00a8a	7e 0a		 jle	 SHORT $LN58@TheGeneral
  00a8c	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _numBestMove$27[ebp], 0
$LN58@TheGeneral:

; 1472 :         if (cost >= bestCost)

  00a96	8b 55 98	 mov	 edx, DWORD PTR _cost$30[ebp]
  00a99	3b 55 94	 cmp	 edx, DWORD PTR _bestCost$29[ebp]
  00a9c	7c 25		 jl	 SHORT $LN59@TheGeneral

; 1473 :         {
; 1474 :           bestCost = cost;

  00a9e	8b 45 98	 mov	 eax, DWORD PTR _cost$30[ebp]
  00aa1	89 45 94	 mov	 DWORD PTR _bestCost$29[ebp], eax

; 1475 :           bestMoves[numBestMove++] = (ui8)i;

  00aa4	8b 8d 94 fe ff
	ff		 mov	 ecx, DWORD PTR _numBestMove$27[ebp]
  00aaa	8a 55 a0	 mov	 dl, BYTE PTR _i$32[ebp]
  00aad	88 94 0d 9c fe
	ff ff		 mov	 BYTE PTR _bestMoves$28[ebp+ecx], dl
  00ab4	8b 85 94 fe ff
	ff		 mov	 eax, DWORD PTR _numBestMove$27[ebp]
  00aba	83 c0 01	 add	 eax, 1
  00abd	89 85 94 fe ff
	ff		 mov	 DWORD PTR _numBestMove$27[ebp], eax
$LN59@TheGeneral:

; 1476 :         };
; 1477 :       };

  00ac3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00aca	8d 8d 54 b6 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$12[ebp]
  00ad0	e8 00 00 00 00	 call	 ??1NIMCON@@QAE@XZ
  00ad5	e9 47 fe ff ff	 jmp	 $LN20@TheGeneral
$LN21@TheGeneral:

; 1478 :       if (!searchAborted && (numBestMove != 0))

  00ada	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?searchAborted@@3_NA ; searchAborted
  00ae1	85 c9		 test	 ecx, ecx
  00ae3	0f 85 65 01 00
	00		 jne	 $LN39@TheGeneral
  00ae9	83 bd 94 fe ff
	ff 00		 cmp	 DWORD PTR _numBestMove$27[ebp], 0
  00af0	0f 84 58 01 00
	00		 je	 $LN39@TheGeneral

; 1479 :       {
; 1480 :         //
; 1481 :         {
; 1482 :           //Choose among the equally good 'bestMoves'.that result
; 1483 :           //in non-zero nimval.  Choose the one that will provide
; 1484 :           //our opponent with the most possible moves that will
; 1485 :           //leave the nimval non-zero.  The 'Enough Rope' principle.
; 1486 :           int rope[100];
; 1487 :           for (i=0; i<numBestMove; i++)

  00af6	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$32[ebp], 0
  00afd	eb 09		 jmp	 SHORT $LN25@TheGeneral
$LN23@TheGeneral:
  00aff	8b 55 a0	 mov	 edx, DWORD PTR _i$32[ebp]
  00b02	83 c2 01	 add	 edx, 1
  00b05	89 55 a0	 mov	 DWORD PTR _i$32[ebp], edx
$LN25@TheGeneral:
  00b08	8b 45 a0	 mov	 eax, DWORD PTR _i$32[ebp]
  00b0b	3b 85 94 fe ff
	ff		 cmp	 eax, DWORD PTR _numBestMove$27[ebp]
  00b11	7d 29		 jge	 SHORT $LN24@TheGeneral

; 1488 :           {
; 1489 :             rope[i] = pm[bestMoves[i]].con.MeasureRope();

  00b13	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  00b16	0f b6 94 0d 9c
	fe ff ff	 movzx	 edx, BYTE PTR _bestMoves$28[ebp+ecx]
  00b1e	69 c2 1c 14 00
	00		 imul	 eax, edx, 5148
  00b24	8b 4d 18	 mov	 ecx, DWORD PTR _pm$[ebp]
  00b27	8d 4c 01 08	 lea	 ecx, DWORD PTR [ecx+eax+8]
  00b2b	e8 00 00 00 00	 call	 ?MeasureRope@CON@@QAEHXZ ; CON::MeasureRope
  00b30	8b 55 a0	 mov	 edx, DWORD PTR _i$32[ebp]
  00b33	89 84 95 b0 b4
	ff ff		 mov	 DWORD PTR _rope$8[ebp+edx*4], eax

; 1490 :           };

  00b3a	eb c3		 jmp	 SHORT $LN23@TheGeneral
$LN24@TheGeneral:

; 1491 :           {
; 1492 :             int n, maxRope, numMaxRope;
; 1493 :             maxRope = -1;

  00b3c	c7 85 a4 b4 ff
	ff ff ff ff ff	 mov	 DWORD PTR _maxRope$6[ebp], -1

; 1494 :             numMaxRope = 0;

  00b46	c7 85 a0 b4 ff
	ff 00 00 00 00	 mov	 DWORD PTR _numMaxRope$5[ebp], 0

; 1495 :             for (i=0; i<numBestMove; i++)

  00b50	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$32[ebp], 0
  00b57	eb 09		 jmp	 SHORT $LN28@TheGeneral
$LN26@TheGeneral:
  00b59	8b 45 a0	 mov	 eax, DWORD PTR _i$32[ebp]
  00b5c	83 c0 01	 add	 eax, 1
  00b5f	89 45 a0	 mov	 DWORD PTR _i$32[ebp], eax
$LN28@TheGeneral:
  00b62	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  00b65	3b 8d 94 fe ff
	ff		 cmp	 ecx, DWORD PTR _numBestMove$27[ebp]
  00b6b	7d 4f		 jge	 SHORT $LN27@TheGeneral

; 1496 :             {
; 1497 :               if (rope[i] > maxRope)

  00b6d	8b 55 a0	 mov	 edx, DWORD PTR _i$32[ebp]
  00b70	8b 84 95 b0 b4
	ff ff		 mov	 eax, DWORD PTR _rope$8[ebp+edx*4]
  00b77	3b 85 a4 b4 ff
	ff		 cmp	 eax, DWORD PTR _maxRope$6[ebp]
  00b7d	7e 1a		 jle	 SHORT $LN61@TheGeneral

; 1498 :               {
; 1499 :                 maxRope = rope[i];

  00b7f	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  00b82	8b 94 8d b0 b4
	ff ff		 mov	 edx, DWORD PTR _rope$8[ebp+ecx*4]
  00b89	89 95 a4 b4 ff
	ff		 mov	 DWORD PTR _maxRope$6[ebp], edx

; 1500 :                 numMaxRope = 0;

  00b8f	c7 85 a0 b4 ff
	ff 00 00 00 00	 mov	 DWORD PTR _numMaxRope$5[ebp], 0
$LN61@TheGeneral:

; 1501 :               };
; 1502 :               if (rope[i] == maxRope)

  00b99	8b 45 a0	 mov	 eax, DWORD PTR _i$32[ebp]
  00b9c	8b 8c 85 b0 b4
	ff ff		 mov	 ecx, DWORD PTR _rope$8[ebp+eax*4]
  00ba3	3b 8d a4 b4 ff
	ff		 cmp	 ecx, DWORD PTR _maxRope$6[ebp]
  00ba9	75 0f		 jne	 SHORT $LN62@TheGeneral

; 1503 :               {
; 1504 :                 numMaxRope++;

  00bab	8b 95 a0 b4 ff
	ff		 mov	 edx, DWORD PTR _numMaxRope$5[ebp]
  00bb1	83 c2 01	 add	 edx, 1
  00bb4	89 95 a0 b4 ff
	ff		 mov	 DWORD PTR _numMaxRope$5[ebp], edx
$LN62@TheGeneral:

; 1505 :               };
; 1506 :             };

  00bba	eb 9d		 jmp	 SHORT $LN26@TheGeneral
$LN27@TheGeneral:

; 1507 :             n = pDoc->MyRandom(numMaxRope);

  00bbc	8b 85 a0 b4 ff
	ff		 mov	 eax, DWORD PTR _numMaxRope$5[ebp]
  00bc2	50		 push	 eax
  00bc3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00bc9	e8 00 00 00 00	 call	 ?MyRandom@CNewBoxesDoc@@QAEII@Z ; CNewBoxesDoc::MyRandom
  00bce	89 85 a8 b4 ff
	ff		 mov	 DWORD PTR _n$7[ebp], eax

; 1508 :             for (i=0; n>=0; i++)

  00bd4	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _i$32[ebp], 0
  00bdb	eb 09		 jmp	 SHORT $LN31@TheGeneral
$LN29@TheGeneral:
  00bdd	8b 4d a0	 mov	 ecx, DWORD PTR _i$32[ebp]
  00be0	83 c1 01	 add	 ecx, 1
  00be3	89 4d a0	 mov	 DWORD PTR _i$32[ebp], ecx
$LN31@TheGeneral:
  00be6	83 bd a8 b4 ff
	ff 00		 cmp	 DWORD PTR _n$7[ebp], 0
  00bed	7c 23		 jl	 SHORT $LN30@TheGeneral

; 1509 :             {
; 1510 :               if (rope[i] == maxRope) n--;

  00bef	8b 55 a0	 mov	 edx, DWORD PTR _i$32[ebp]
  00bf2	8b 84 95 b0 b4
	ff ff		 mov	 eax, DWORD PTR _rope$8[ebp+edx*4]
  00bf9	3b 85 a4 b4 ff
	ff		 cmp	 eax, DWORD PTR _maxRope$6[ebp]
  00bff	75 0f		 jne	 SHORT $LN63@TheGeneral
  00c01	8b 8d a8 b4 ff
	ff		 mov	 ecx, DWORD PTR _n$7[ebp]
  00c07	83 e9 01	 sub	 ecx, 1
  00c0a	89 8d a8 b4 ff
	ff		 mov	 DWORD PTR _n$7[ebp], ecx
$LN63@TheGeneral:

; 1511 :             };

  00c10	eb cb		 jmp	 SHORT $LN29@TheGeneral
$LN30@TheGeneral:

; 1512 :           };
; 1513 :           computerMove = pm[bestMoves[i-1]];

  00c12	8b 55 a0	 mov	 edx, DWORD PTR _i$32[ebp]
  00c15	0f b6 84 15 9b
	fe ff ff	 movzx	 eax, BYTE PTR _bestMoves$28[ebp+edx-1]
  00c1d	69 c8 1c 14 00
	00		 imul	 ecx, eax, 5148
  00c23	03 4d 18	 add	 ecx, DWORD PTR _pm$[ebp]
  00c26	51		 push	 ecx
  00c27	b9 00 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A ; computerMove
  00c2c	e8 00 00 00 00	 call	 ??4PossibleMove@@QAEAAU0@ABU0@@Z

; 1514 :           computerMove.con.Canon(0, computerMove.con.m_numNode);

  00c31	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?computerMove@@3UPossibleMove@@A+8
  00c37	52		 push	 edx
  00c38	6a 00		 push	 0
  00c3a	b9 08 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A+8
  00c3f	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon

; 1515 :           moveType = MT_NONIMVAL;

  00c44	c7 05 00 00 00
	00 0e 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 14 ; moveType, 0000000eH
$LN39@TheGeneral:

; 1516 :         };
; 1517 :       };
; 1518 :       
; 1519 :       
; 1520 :       
; 1521 :       
; 1522 :       
; 1523 :       
; 1524 :       //move = MaxCostOfNimZero(pm, moveValue.numPossibleMove, +1, 1); //Find the largest
; 1525 :     };
; 1526 :   };
; 1527 : #ifndef HASH_CARRY
; 1528 :   delete swHashTable;
; 1529 :   swHashTable = NULL;
; 1530 :   delete nimHashTable;
; 1531 :   nimHashTable = NULL;
; 1532 : #endif
; 1533 :   free (pm);

  00c4e	8b f4		 mov	 esi, esp
  00c50	8b 45 18	 mov	 eax, DWORD PTR _pm$[ebp]
  00c53	50		 push	 eax
  00c54	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00c5a	83 c4 04	 add	 esp, 4
  00c5d	3b f4		 cmp	 esi, esp
  00c5f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@TheGeneral:

; 1534 :   CLOSEDUMP
; 1535 : }

  00c64	52		 push	 edx
  00c65	8b cd		 mov	 ecx, ebp
  00c67	50		 push	 eax
  00c68	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN82@TheGeneral
  00c6e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00c73	58		 pop	 eax
  00c74	5a		 pop	 edx
  00c75	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00c78	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00c7f	59		 pop	 ecx
  00c80	5f		 pop	 edi
  00c81	5e		 pop	 esi
  00c82	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00c85	33 cd		 xor	 ecx, ebp
  00c87	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00c8c	81 c4 a8 4b 00
	00		 add	 esp, 19368		; 00004ba8H
  00c92	3b ec		 cmp	 ebp, esp
  00c94	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c99	8b e5		 mov	 esp, ebp
  00c9b	5d		 pop	 ebp
  00c9c	c2 14 00	 ret	 20			; 00000014H
  00c9f	90		 npad	 1
$LN82@TheGeneral:
  00ca0	0b 00 00 00	 DD	 11			; 0000000bH
  00ca4	00 00 00 00	 DD	 $LN81@TheGeneral
$LN81@TheGeneral:
  00ca8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00cac	14 00 00 00	 DD	 20			; 00000014H
  00cb0	00 00 00 00	 DD	 $LN69@TheGeneral
  00cb4	9c fe ff ff	 DD	 -356			; fffffe9cH
  00cb8	f1 00 00 00	 DD	 241			; 000000f1H
  00cbc	00 00 00 00	 DD	 $LN70@TheGeneral
  00cc0	7c ea ff ff	 DD	 -5508			; ffffea7cH
  00cc4	10 14 00 00	 DD	 5136			; 00001410H
  00cc8	00 00 00 00	 DD	 $LN71@TheGeneral
  00ccc	94 d4 ff ff	 DD	 -11116			; ffffd494H
  00cd0	e0 15 00 00	 DD	 5600			; 000015e0H
  00cd4	00 00 00 00	 DD	 $LN72@TheGeneral
  00cd8	fc d2 ff ff	 DD	 -11524			; ffffd2fcH
  00cdc	90 01 00 00	 DD	 400			; 00000190H
  00ce0	00 00 00 00	 DD	 $LN73@TheGeneral
  00ce4	b4 cc ff ff	 DD	 -13132			; ffffccb4H
  00ce8	40 06 00 00	 DD	 1600			; 00000640H
  00cec	00 00 00 00	 DD	 $LN74@TheGeneral
  00cf0	1c cb ff ff	 DD	 -13540			; ffffcb1cH
  00cf4	90 01 00 00	 DD	 400			; 00000190H
  00cf8	00 00 00 00	 DD	 $LN75@TheGeneral
  00cfc	88 ca ff ff	 DD	 -13688			; ffffca88H
  00d00	38 00 00 00	 DD	 56			; 00000038H
  00d04	00 00 00 00	 DD	 $LN76@TheGeneral
  00d08	70 ca ff ff	 DD	 -13712			; ffffca70H
  00d0c	10 00 00 00	 DD	 16			; 00000010H
  00d10	00 00 00 00	 DD	 $LN77@TheGeneral
  00d14	54 b6 ff ff	 DD	 -18860			; ffffb654H
  00d18	10 14 00 00	 DD	 5136			; 00001410H
  00d1c	00 00 00 00	 DD	 $LN78@TheGeneral
  00d20	b0 b4 ff ff	 DD	 -19280			; ffffb4b0H
  00d24	90 01 00 00	 DD	 400			; 00000190H
  00d28	00 00 00 00	 DD	 $LN79@TheGeneral
$LN79@TheGeneral:
  00d2c	72		 DB	 114			; 00000072H
  00d2d	6f		 DB	 111			; 0000006fH
  00d2e	70		 DB	 112			; 00000070H
  00d2f	65		 DB	 101			; 00000065H
  00d30	00		 DB	 0
$LN78@TheGeneral:
  00d31	6e		 DB	 110			; 0000006eH
  00d32	69		 DB	 105			; 00000069H
  00d33	6d		 DB	 109			; 0000006dH
  00d34	63		 DB	 99			; 00000063H
  00d35	6f		 DB	 111			; 0000006fH
  00d36	6e		 DB	 110			; 0000006eH
  00d37	00		 DB	 0
$LN77@TheGeneral:
  00d38	74		 DB	 116			; 00000074H
  00d39	6c		 DB	 108			; 0000006cH
  00d3a	63		 DB	 99			; 00000063H
  00d3b	69		 DB	 105			; 00000069H
  00d3c	00		 DB	 0
$LN76@TheGeneral:
  00d3d	74		 DB	 116			; 00000074H
  00d3e	72		 DB	 114			; 00000072H
  00d3f	00		 DB	 0
$LN75@TheGeneral:
  00d40	62		 DB	 98			; 00000062H
  00d41	72		 DB	 114			; 00000072H
  00d42	65		 DB	 101			; 00000065H
  00d43	61		 DB	 97			; 00000061H
  00d44	6b		 DB	 107			; 0000006bH
  00d45	57		 DB	 87			; 00000057H
  00d46	65		 DB	 101			; 00000065H
  00d47	69		 DB	 105			; 00000069H
  00d48	67		 DB	 103			; 00000067H
  00d49	68		 DB	 104			; 00000068H
  00d4a	74		 DB	 116			; 00000074H
  00d4b	73		 DB	 115			; 00000073H
  00d4c	00		 DB	 0
$LN74@TheGeneral:
  00d4d	6c		 DB	 108			; 0000006cH
  00d4e	6f		 DB	 111			; 0000006fH
  00d4f	6e		 DB	 110			; 0000006eH
  00d50	67		 DB	 103			; 00000067H
  00d51	43		 DB	 67			; 00000043H
  00d52	68		 DB	 104			; 00000068H
  00d53	61		 DB	 97			; 00000061H
  00d54	69		 DB	 105			; 00000069H
  00d55	6e		 DB	 110			; 0000006eH
  00d56	49		 DB	 73			; 00000049H
  00d57	6e		 DB	 110			; 0000006eH
  00d58	66		 DB	 102			; 00000066H
  00d59	6f		 DB	 111			; 0000006fH
  00d5a	00		 DB	 0
$LN73@TheGeneral:
  00d5b	6d		 DB	 109			; 0000006dH
  00d5c	6f		 DB	 111			; 0000006fH
  00d5d	76		 DB	 118			; 00000076H
  00d5e	65		 DB	 101			; 00000065H
  00d5f	4e		 DB	 78			; 0000004eH
  00d60	75		 DB	 117			; 00000075H
  00d61	6d		 DB	 109			; 0000006dH
  00d62	00		 DB	 0
$LN72@TheGeneral:
  00d63	72		 DB	 114			; 00000072H
  00d64	65		 DB	 101			; 00000065H
  00d65	73		 DB	 115			; 00000073H
  00d66	75		 DB	 117			; 00000075H
  00d67	6c		 DB	 108			; 0000006cH
  00d68	74		 DB	 116			; 00000074H
  00d69	73		 DB	 115			; 00000073H
  00d6a	00		 DB	 0
$LN71@TheGeneral:
  00d6b	6e		 DB	 110			; 0000006eH
  00d6c	69		 DB	 105			; 00000069H
  00d6d	6d		 DB	 109			; 0000006dH
  00d6e	63		 DB	 99			; 00000063H
  00d6f	6f		 DB	 111			; 0000006fH
  00d70	6e		 DB	 110			; 0000006eH
  00d71	00		 DB	 0
$LN70@TheGeneral:
  00d72	62		 DB	 98			; 00000062H
  00d73	65		 DB	 101			; 00000065H
  00d74	73		 DB	 115			; 00000073H
  00d75	74		 DB	 116			; 00000074H
  00d76	4d		 DB	 77			; 0000004dH
  00d77	6f		 DB	 111			; 0000006fH
  00d78	76		 DB	 118			; 00000076H
  00d79	65		 DB	 101			; 00000065H
  00d7a	73		 DB	 115			; 00000073H
  00d7b	00		 DB	 0
$LN69@TheGeneral:
  00d7c	6d		 DB	 109			; 0000006dH
  00d7d	6f		 DB	 111			; 0000006fH
  00d7e	76		 DB	 118			; 00000076H
  00d7f	65		 DB	 101			; 00000065H
  00d80	56		 DB	 86			; 00000056H
  00d81	61		 DB	 97			; 00000061H
  00d82	6c		 DB	 108			; 0000006cH
  00d83	75		 DB	 117			; 00000075H
  00d84	65		 DB	 101			; 00000065H
  00d85	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z$0:
  00000	8d 8d 7c ea ff
	ff		 lea	 ecx, DWORD PTR _nimcon$25[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1NIMCON@@QAE@XZ
__unwindfunclet$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z$1:
  0000b	8d 8d 54 b6 ff
	ff		 lea	 ecx, DWORD PTR _nimcon$12[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1NIMCON@@QAE@XZ
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
__ehhandler$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z:
  0001b	90		 npad	 1
  0001c	90		 npad	 1
  0001d	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00021	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00024	8b 8a 58 b4 ff
	ff		 mov	 ecx, DWORD PTR [edx-19368]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00034	33 c8		 xor	 ecx, eax
  00036	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z
  00040	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TheGeneralCase@CON@@QAEXIIIIPAUPossibleMove@@@Z ENDP	; CON::TheGeneralCase
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_i$1 = -276						; size = 4
_possibleEdges$ = -268					; size = 110
_possibleNodes$ = -148					; size = 110
_shortest$ = -32					; size = 4
_numPossible$ = -28					; size = 4
_length$ = -24						; size = 4
_en$ = -20						; size = 4
_nnA$ = -16						; size = 4
_nn$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GiveLittle@CON@@QBEXXZ PROC				; CON::GiveLittle
; _this$ = ecx

; 422  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00011	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 423  :   int nn, nnA, en;
; 424  :   int length;
; 425  :   int numPossible=0;

  0002b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _numPossible$[ebp], 0

; 426  :   int shortest = 99999;

  00032	c7 45 e0 9f 86
	01 00		 mov	 DWORD PTR _shortest$[ebp], 99999 ; 0001869fH

; 427  :   STOPNUM possibleNodes[MAX_NODES];
; 428  :   EDGENUM possibleEdges[MAX_NODES];
; 429  :   for (nn=0; nn<m_numNode; nn++)

  00039	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nn$[ebp], 0
  00040	eb 09		 jmp	 SHORT $LN4@GiveLittle
$LN2@GiveLittle:
  00042	8b 45 f4	 mov	 eax, DWORD PTR _nn$[ebp]
  00045	83 c0 01	 add	 eax, 1
  00048	89 45 f4	 mov	 DWORD PTR _nn$[ebp], eax
$LN4@GiveLittle:
  0004b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004e	8b 55 f4	 mov	 edx, DWORD PTR _nn$[ebp]
  00051	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00053	0f 8d bc 01 00
	00		 jge	 $LN3@GiveLittle

; 430  :   {
; 431  :     length = -1;

  00059	c7 45 e8 ff ff
	ff ff		 mov	 DWORD PTR _length$[ebp], -1

; 432  :     nnA = nd[nn].ix;

  00060	8b 45 f4	 mov	 eax, DWORD PTR _nn$[ebp]
  00063	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00066	0f b6 94 81 13
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4115]
  0006e	89 55 f0	 mov	 DWORD PTR _nnA$[ebp], edx

; 433  :     if (   (sd[nnA][0].ns == LOOP)
; 434  :         || (sd[nnA][0].ns == GND_GND))

  00071	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  00074	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00077	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0007e	b8 02 00 00 00	 mov	 eax, 2
  00083	6b c8 00	 imul	 ecx, eax, 0
  00086	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  0008a	81 fa fe 00 00
	00		 cmp	 edx, 254		; 000000feH
  00090	74 21		 je	 SHORT $LN10@GiveLittle
  00092	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  00095	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  0009f	b8 02 00 00 00	 mov	 eax, 2
  000a4	6b c8 00	 imul	 ecx, eax, 0
  000a7	0f b6 14 0a	 movzx	 edx, BYTE PTR [edx+ecx]
  000ab	81 fa fd 00 00
	00		 cmp	 edx, 253		; 000000fdH
  000b1	75 6b		 jne	 SHORT $LN8@GiveLittle
$LN10@GiveLittle:

; 435  :     {
; 436  :       length = ed[nnA].e[0].el;

  000b3	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  000b6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000b9	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  000bd	b8 02 00 00 00	 mov	 eax, 2
  000c2	6b c8 00	 imul	 ecx, eax, 0
  000c5	0f b6 54 0a 01	 movzx	 edx, BYTE PTR [edx+ecx+1]
  000ca	89 55 e8	 mov	 DWORD PTR _length$[ebp], edx

; 437  :       en = 0;

  000cd	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _en$[ebp], 0

; 438  :       if (length > shortest) continue;

  000d4	8b 45 e8	 mov	 eax, DWORD PTR _length$[ebp]
  000d7	3b 45 e0	 cmp	 eax, DWORD PTR _shortest$[ebp]
  000da	7e 05		 jle	 SHORT $LN11@GiveLittle
  000dc	e9 61 ff ff ff	 jmp	 $LN2@GiveLittle
$LN11@GiveLittle:

; 439  :       if (length < shortest) numPossible = 0;

  000e1	8b 4d e8	 mov	 ecx, DWORD PTR _length$[ebp]
  000e4	3b 4d e0	 cmp	 ecx, DWORD PTR _shortest$[ebp]
  000e7	7d 07		 jge	 SHORT $LN12@GiveLittle
  000e9	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _numPossible$[ebp], 0
$LN12@GiveLittle:

; 440  :       possibleNodes[numPossible] = (STOPNUM)nnA;

  000f0	8b 55 e4	 mov	 edx, DWORD PTR _numPossible$[ebp]
  000f3	8a 45 f0	 mov	 al, BYTE PTR _nnA$[ebp]
  000f6	88 84 15 6c ff
	ff ff		 mov	 BYTE PTR _possibleNodes$[ebp+edx], al

; 441  :       possibleEdges[numPossible] = (EDGENUM)en;

  000fd	8b 4d e4	 mov	 ecx, DWORD PTR _numPossible$[ebp]
  00100	8a 55 ec	 mov	 dl, BYTE PTR _en$[ebp]
  00103	88 94 0d f4 fe
	ff ff		 mov	 BYTE PTR _possibleEdges$[ebp+ecx], dl

; 442  :       shortest = length;

  0010a	8b 45 e8	 mov	 eax, DWORD PTR _length$[ebp]
  0010d	89 45 e0	 mov	 DWORD PTR _shortest$[ebp], eax

; 443  :       numPossible++;

  00110	8b 4d e4	 mov	 ecx, DWORD PTR _numPossible$[ebp]
  00113	83 c1 01	 add	 ecx, 1
  00116	89 4d e4	 mov	 DWORD PTR _numPossible$[ebp], ecx

; 444  :     }

  00119	e9 f2 00 00 00	 jmp	 $LN9@GiveLittle
$LN8@GiveLittle:

; 445  :     else
; 446  :     {
; 447  :       for (en=0; en<nd[nnA].ec; en++)

  0011e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _en$[ebp], 0
  00125	eb 09		 jmp	 SHORT $LN7@GiveLittle
$LN5@GiveLittle:
  00127	8b 55 ec	 mov	 edx, DWORD PTR _en$[ebp]
  0012a	83 c2 01	 add	 edx, 1
  0012d	89 55 ec	 mov	 DWORD PTR _en$[ebp], edx
$LN7@GiveLittle:
  00130	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  00133	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00136	0f b6 94 81 10
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4112]
  0013e	39 55 ec	 cmp	 DWORD PTR _en$[ebp], edx
  00141	0f 8d c9 00 00
	00		 jge	 $LN9@GiveLittle

; 448  :       {
; 449  :         if (    (sd[nnA][en].ns == GROUND)
; 450  :              || (sd[nnA][en].ns >= nnA))

  00147	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  0014a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0014d	8d 94 c1 10 08
	00 00		 lea	 edx, DWORD PTR [ecx+eax*8+2064]
  00154	8b 45 ec	 mov	 eax, DWORD PTR _en$[ebp]
  00157	0f b6 0c 42	 movzx	 ecx, BYTE PTR [edx+eax*2]
  0015b	81 f9 fa 00 00
	00		 cmp	 ecx, 250		; 000000faH
  00161	74 1d		 je	 SHORT $LN14@GiveLittle
  00163	8b 55 f0	 mov	 edx, DWORD PTR _nnA$[ebp]
  00166	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00169	8d 8c d0 10 08
	00 00		 lea	 ecx, DWORD PTR [eax+edx*8+2064]
  00170	8b 55 ec	 mov	 edx, DWORD PTR _en$[ebp]
  00173	0f b6 04 51	 movzx	 eax, BYTE PTR [ecx+edx*2]
  00177	3b 45 f0	 cmp	 eax, DWORD PTR _nnA$[ebp]
  0017a	0f 8c 8b 00 00
	00		 jl	 $LN13@GiveLittle
$LN14@GiveLittle:

; 451  :         {
; 452  :           if (sd[nnA][en].ns == nnA)

  00180	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00183	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00186	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0018d	8b 4d ec	 mov	 ecx, DWORD PTR _en$[ebp]
  00190	0f b6 14 48	 movzx	 edx, BYTE PTR [eax+ecx*2]
  00194	3b 55 f0	 cmp	 edx, DWORD PTR _nnA$[ebp]
  00197	75 18		 jne	 SHORT $LN15@GiveLittle

; 453  :           {
; 454  :             if (nd[nnA].ec < 4) 

  00199	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  0019c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019f	0f b6 94 81 10
	10 00 00	 movzx	 edx, BYTE PTR [ecx+eax*4+4112]
  001a7	83 fa 04	 cmp	 edx, 4
  001aa	7d 05		 jge	 SHORT $LN15@GiveLittle

; 455  :             {
; 456  :               continue; //Deleting the loop sacrifices the tail, too!

  001ac	e9 76 ff ff ff	 jmp	 $LN5@GiveLittle
$LN15@GiveLittle:

; 457  :             };
; 458  :           };
; 459  :           length = ed[nnA].e[en].el;

  001b1	8b 45 f0	 mov	 eax, DWORD PTR _nnA$[ebp]
  001b4	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b7	8d 54 c1 10	 lea	 edx, DWORD PTR [ecx+eax*8+16]
  001bb	8b 45 ec	 mov	 eax, DWORD PTR _en$[ebp]
  001be	0f b6 4c 42 01	 movzx	 ecx, BYTE PTR [edx+eax*2+1]
  001c3	89 4d e8	 mov	 DWORD PTR _length$[ebp], ecx

; 460  :           if (length > shortest) continue;

  001c6	8b 55 e8	 mov	 edx, DWORD PTR _length$[ebp]
  001c9	3b 55 e0	 cmp	 edx, DWORD PTR _shortest$[ebp]
  001cc	7e 05		 jle	 SHORT $LN17@GiveLittle
  001ce	e9 54 ff ff ff	 jmp	 $LN5@GiveLittle
$LN17@GiveLittle:

; 461  :           if (length < shortest) numPossible = 0;

  001d3	8b 45 e8	 mov	 eax, DWORD PTR _length$[ebp]
  001d6	3b 45 e0	 cmp	 eax, DWORD PTR _shortest$[ebp]
  001d9	7d 07		 jge	 SHORT $LN18@GiveLittle
  001db	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _numPossible$[ebp], 0
$LN18@GiveLittle:

; 462  :           possibleNodes[numPossible] = (STOPNUM)nnA;

  001e2	8b 4d e4	 mov	 ecx, DWORD PTR _numPossible$[ebp]
  001e5	8a 55 f0	 mov	 dl, BYTE PTR _nnA$[ebp]
  001e8	88 94 0d 6c ff
	ff ff		 mov	 BYTE PTR _possibleNodes$[ebp+ecx], dl

; 463  :           possibleEdges[numPossible] = (EDGENUM)en;

  001ef	8b 45 e4	 mov	 eax, DWORD PTR _numPossible$[ebp]
  001f2	8a 4d ec	 mov	 cl, BYTE PTR _en$[ebp]
  001f5	88 8c 05 f4 fe
	ff ff		 mov	 BYTE PTR _possibleEdges$[ebp+eax], cl

; 464  :           shortest = length;

  001fc	8b 55 e8	 mov	 edx, DWORD PTR _length$[ebp]
  001ff	89 55 e0	 mov	 DWORD PTR _shortest$[ebp], edx

; 465  :           numPossible++;

  00202	8b 45 e4	 mov	 eax, DWORD PTR _numPossible$[ebp]
  00205	83 c0 01	 add	 eax, 1
  00208	89 45 e4	 mov	 DWORD PTR _numPossible$[ebp], eax
$LN13@GiveLittle:

; 466  :         };
; 467  :       };

  0020b	e9 17 ff ff ff	 jmp	 $LN5@GiveLittle
$LN9@GiveLittle:

; 468  :     };
; 469  :   };

  00210	e9 2d fe ff ff	 jmp	 $LN2@GiveLittle
$LN3@GiveLittle:

; 470  :   if (numPossible > 0)

  00215	83 7d e4 00	 cmp	 DWORD PTR _numPossible$[ebp], 0
  00219	0f 8e 6a 01 00
	00		 jle	 $LN1@GiveLittle

; 471  :   {
; 472  :     int i;
; 473  :     i = pDoc->MyRandom(numPossible);

  0021f	8b 4d e4	 mov	 ecx, DWORD PTR _numPossible$[ebp]
  00222	51		 push	 ecx
  00223	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  00229	e8 00 00 00 00	 call	 ?MyRandom@CNewBoxesDoc@@QAEII@Z ; CNewBoxesDoc::MyRandom
  0022e	89 85 ec fe ff
	ff		 mov	 DWORD PTR _i$1[ebp], eax

; 474  :     nnA = possibleNodes[i];

  00234	8b 95 ec fe ff
	ff		 mov	 edx, DWORD PTR _i$1[ebp]
  0023a	0f b6 84 15 6c
	ff ff ff	 movzx	 eax, BYTE PTR _possibleNodes$[ebp+edx]
  00242	89 45 f0	 mov	 DWORD PTR _nnA$[ebp], eax

; 475  :     en = possibleEdges[i];

  00245	8b 8d ec fe ff
	ff		 mov	 ecx, DWORD PTR _i$1[ebp]
  0024b	0f b6 94 0d f4
	fe ff ff	 movzx	 edx, BYTE PTR _possibleEdges$[ebp+ecx]
  00253	89 55 ec	 mov	 DWORD PTR _en$[ebp], edx

; 476  :     computerMove.con = *this;

  00256	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00259	50		 push	 eax
  0025a	b9 08 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A+8
  0025f	e8 00 00 00 00	 call	 ??4CON@@QAEAAV0@ABV0@@Z	; CON::operator=

; 477  :     moveType = MT_GIVELITTLE;

  00264	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 7 ; moveType

; 478  :     if (sd[nnA][0].ns == LOOP)

  0026e	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00271	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00274	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0027b	b9 02 00 00 00	 mov	 ecx, 2
  00280	6b d1 00	 imul	 edx, ecx, 0
  00283	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  00287	3d fe 00 00 00	 cmp	 eax, 254		; 000000feH
  0028c	75 1e		 jne	 SHORT $LN20@GiveLittle

; 479  :     {
; 480  :         computerMove.con.DeleteNode(nd[nnA].os);

  0028e	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00291	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00294	0f b6 84 8a 12
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4114]
  0029c	50		 push	 eax
  0029d	b9 08 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A+8
  002a2	e8 00 00 00 00	 call	 ?DeleteNode@CON@@QAEXH@Z ; CON::DeleteNode

; 481  :       //NotImplemented("Give Loop");
; 482  :     }

  002a7	e9 ca 00 00 00	 jmp	 $LN21@GiveLittle
$LN20@GiveLittle:

; 483  :     else if (sd[nnA][0].ns == GND_GND)

  002ac	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  002af	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002b2	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  002b9	b9 02 00 00 00	 mov	 ecx, 2
  002be	6b d1 00	 imul	 edx, ecx, 0
  002c1	0f b6 04 10	 movzx	 eax, BYTE PTR [eax+edx]
  002c5	3d fd 00 00 00	 cmp	 eax, 253		; 000000fdH
  002ca	75 52		 jne	 SHORT $LN22@GiveLittle

; 484  :     {
; 485  :       if (ed[nnA].e[0].el == 1)

  002cc	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  002cf	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002d2	8d 44 ca 10	 lea	 eax, DWORD PTR [edx+ecx*8+16]
  002d6	b9 02 00 00 00	 mov	 ecx, 2
  002db	6b d1 00	 imul	 edx, ecx, 0
  002de	0f b6 44 10 01	 movzx	 eax, BYTE PTR [eax+edx+1]
  002e3	83 f8 01	 cmp	 eax, 1
  002e6	75 1b		 jne	 SHORT $LN24@GiveLittle

; 486  :       {
; 487  :         computerMove.con.DeleteNode(nd[nnA].os);

  002e8	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  002eb	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  002ee	0f b6 84 8a 12
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4114]
  002f6	50		 push	 eax
  002f7	b9 08 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A+8
  002fc	e8 00 00 00 00	 call	 ?DeleteNode@CON@@QAEXH@Z ; CON::DeleteNode

; 488  :       }

  00301	eb 19		 jmp	 SHORT $LN25@GiveLittle
$LN24@GiveLittle:

; 489  :       else
; 490  :       {
; 491  :         //We need to change it into two GND_DE of length one and
; 492  :         //length len-1;
; 493  :         computerMove.con.DeleteNode(nd[nnA].os);

  00303	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00306	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00309	0f b6 84 8a 12
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4114]
  00311	50		 push	 eax
  00312	b9 08 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A+8
  00317	e8 00 00 00 00	 call	 ?DeleteNode@CON@@QAEXH@Z ; CON::DeleteNode
$LN25@GiveLittle:

; 494  :       };
; 495  :     }

  0031c	eb 58		 jmp	 SHORT $LN21@GiveLittle
$LN22@GiveLittle:

; 496  :     else if (sd[nnA][en].ns == GROUND)

  0031e	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00321	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00324	8d 84 ca 10 08
	00 00		 lea	 eax, DWORD PTR [edx+ecx*8+2064]
  0032b	8b 4d ec	 mov	 ecx, DWORD PTR _en$[ebp]
  0032e	0f b6 14 48	 movzx	 edx, BYTE PTR [eax+ecx*2]
  00332	81 fa fa 00 00
	00		 cmp	 edx, 250		; 000000faH
  00338	75 1f		 jne	 SHORT $LN26@GiveLittle

; 497  :     {
; 498  :       computerMove.con.DeleteEdge(nd[nnA].os, en);

  0033a	8b 45 ec	 mov	 eax, DWORD PTR _en$[ebp]
  0033d	50		 push	 eax
  0033e	8b 4d f0	 mov	 ecx, DWORD PTR _nnA$[ebp]
  00341	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00344	0f b6 84 8a 12
	10 00 00	 movzx	 eax, BYTE PTR [edx+ecx*4+4114]
  0034c	50		 push	 eax
  0034d	b9 08 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A+8
  00352	e8 00 00 00 00	 call	 ?DeleteEdge@CON@@QAEXHH@Z ; CON::DeleteEdge

; 499  :     }

  00357	eb 1d		 jmp	 SHORT $LN21@GiveLittle
$LN26@GiveLittle:

; 500  :     else // Must be a node at the other end
; 501  :     {
; 502  :       computerMove.con.DeleteEdge(nd[nnA].os, en);

  00359	8b 4d ec	 mov	 ecx, DWORD PTR _en$[ebp]
  0035c	51		 push	 ecx
  0035d	8b 55 f0	 mov	 edx, DWORD PTR _nnA$[ebp]
  00360	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00363	0f b6 8c 90 12
	10 00 00	 movzx	 ecx, BYTE PTR [eax+edx*4+4114]
  0036b	51		 push	 ecx
  0036c	b9 08 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A+8
  00371	e8 00 00 00 00	 call	 ?DeleteEdge@CON@@QAEXHH@Z ; CON::DeleteEdge
$LN21@GiveLittle:

; 503  :     };
; 504  :     computerMove.con.Canon(0,computerMove.con.m_numNode);

  00376	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?computerMove@@3UPossibleMove@@A+8
  0037c	52		 push	 edx
  0037d	6a 00		 push	 0
  0037f	b9 08 00 00 00	 mov	 ecx, OFFSET ?computerMove@@3UPossibleMove@@A+8
  00384	e8 00 00 00 00	 call	 ?Canon@CON@@QAEXHH@Z	; CON::Canon
$LN1@GiveLittle:

; 505  :   };
; 506  : }

  00389	52		 push	 edx
  0038a	8b cd		 mov	 ecx, ebp
  0038c	50		 push	 eax
  0038d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@GiveLittle
  00393	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00398	58		 pop	 eax
  00399	5a		 pop	 edx
  0039a	5f		 pop	 edi
  0039b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0039e	33 cd		 xor	 ecx, ebp
  003a0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003a5	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  003ab	3b ec		 cmp	 ebp, esp
  003ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003b2	8b e5		 mov	 esp, ebp
  003b4	5d		 pop	 ebp
  003b5	c3		 ret	 0
  003b6	66 90		 npad	 2
$LN32@GiveLittle:
  003b8	02 00 00 00	 DD	 2
  003bc	00 00 00 00	 DD	 $LN31@GiveLittle
$LN31@GiveLittle:
  003c0	6c ff ff ff	 DD	 -148			; ffffff6cH
  003c4	6e 00 00 00	 DD	 110			; 0000006eH
  003c8	00 00 00 00	 DD	 $LN29@GiveLittle
  003cc	f4 fe ff ff	 DD	 -268			; fffffef4H
  003d0	6e 00 00 00	 DD	 110			; 0000006eH
  003d4	00 00 00 00	 DD	 $LN30@GiveLittle
$LN30@GiveLittle:
  003d8	70		 DB	 112			; 00000070H
  003d9	6f		 DB	 111			; 0000006fH
  003da	73		 DB	 115			; 00000073H
  003db	73		 DB	 115			; 00000073H
  003dc	69		 DB	 105			; 00000069H
  003dd	62		 DB	 98			; 00000062H
  003de	6c		 DB	 108			; 0000006cH
  003df	65		 DB	 101			; 00000065H
  003e0	45		 DB	 69			; 00000045H
  003e1	64		 DB	 100			; 00000064H
  003e2	67		 DB	 103			; 00000067H
  003e3	65		 DB	 101			; 00000065H
  003e4	73		 DB	 115			; 00000073H
  003e5	00		 DB	 0
$LN29@GiveLittle:
  003e6	70		 DB	 112			; 00000070H
  003e7	6f		 DB	 111			; 0000006fH
  003e8	73		 DB	 115			; 00000073H
  003e9	73		 DB	 115			; 00000073H
  003ea	69		 DB	 105			; 00000069H
  003eb	62		 DB	 98			; 00000062H
  003ec	6c		 DB	 108			; 0000006cH
  003ed	65		 DB	 101			; 00000065H
  003ee	4e		 DB	 78			; 0000004eH
  003ef	6f		 DB	 111			; 0000006fH
  003f0	64		 DB	 100			; 00000064H
  003f1	65		 DB	 101			; 00000065H
  003f2	73		 DB	 115			; 00000073H
  003f3	00		 DB	 0
?GiveLittle@CON@@QBEXXZ ENDP				; CON::GiveLittle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ??8EDGEDATA@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv65 = -16						; size = 4
tv70 = -12						; size = 4
tv69 = -8						; size = 4
_this$ = -4						; size = 4
_ed$ = 8						; size = 4
??8EDGEDATA@@QBE_NABU0@@Z PROC				; EDGEDATA::operator==, COMDAT
; _this$ = ecx

; 168  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 169  :     return *((ui64 *)(this)) == *((ui64 *)(&ed));

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	8b 4d 08	 mov	 ecx, DWORD PTR _ed$[ebp]
  0000f	89 45 f8	 mov	 DWORD PTR tv69[ebp], eax
  00012	89 4d f4	 mov	 DWORD PTR tv70[ebp], ecx
  00015	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  00018	8b 45 f4	 mov	 eax, DWORD PTR tv70[ebp]
  0001b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001d	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0001f	75 17		 jne	 SHORT $LN3@operator
  00021	8b 55 f8	 mov	 edx, DWORD PTR tv69[ebp]
  00024	8b 45 f4	 mov	 eax, DWORD PTR tv70[ebp]
  00027	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0002a	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0002d	75 09		 jne	 SHORT $LN3@operator
  0002f	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR tv65[ebp], 1
  00036	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00038	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR tv65[ebp], 0
$LN4@operator:
  0003f	0f b6 45 f0	 movzx	 eax, BYTE PTR tv65[ebp]

; 170  :   };

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??8EDGEDATA@@QBE_NABU0@@Z ENDP				; EDGEDATA::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\NIMCON.h
;	COMDAT ??8EDGE@@QBE_NABU0@@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
_this$ = -4						; size = 4
_e$ = 8							; size = 4
??8EDGE@@QBE_NABU0@@Z PROC				; EDGE::operator==, COMDAT
; _this$ = ecx

; 149  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 150  :     return *((ui16 *)(this)) == *((ui16 *)(&e));

  00009	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0000f	8b 55 08	 mov	 edx, DWORD PTR _e$[ebp]
  00012	0f b7 02	 movzx	 eax, WORD PTR [edx]
  00015	3b c8		 cmp	 ecx, eax
  00017	75 09		 jne	 SHORT $LN3@operator
  00019	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00020	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00022	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN4@operator:
  00029	0f b6 45 f8	 movzx	 eax, BYTE PTR tv67[ebp]

; 151  :   };

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??8EDGE@@QBE_NABU0@@Z ENDP				; EDGE::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GNIMHASHTABLE@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GNIMHASHTABLE@@QAEPAXI@Z PROC			; NIMHASHTABLE::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ??1NIMHASHTABLE@@QAE@XZ	; NIMHASHTABLE::~NIMHASHTABLE
  00016	8b 45 08	 mov	 eax, DWORD PTR ___flags$[ebp]
  00019	83 e0 01	 and	 eax, 1
  0001c	74 0e		 je	 SHORT $LN2@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	51		 push	 ecx
  00024	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00029	83 c4 08	 add	 esp, 8
$LN2@scalar:
  0002c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 04 00	 ret	 4
??_GNIMHASHTABLE@@QAEPAXI@Z ENDP			; NIMHASHTABLE::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?NumPositions@OPENINGp@@QAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 4
?NumPositions@OPENINGp@@QAEHH@Z PROC			; OPENINGp::NumPositions, COMDAT
; _this$ = ecx

; 241  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 242  :     return numPositions[type];

  00007	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]

; 243  :   };

  00010	8b e5		 mov	 esp, ebp
  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?NumPositions@OPENINGp@@QAEHH@Z ENDP			; OPENINGp::NumPositions
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Position@OPENINGp@@QAE_KHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_type$ = 8						; size = 4
_positionNumber$ = 12					; size = 4
?Position@OPENINGp@@QAE_KHH@Z PROC			; OPENINGp::Position, COMDAT
; _this$ = ecx

; 237  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 238  :     return positions[type][positionNumber];

  00007	8b 45 08	 mov	 eax, DWORD PTR _type$[ebp]
  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0000d	8b 54 81 10	 mov	 edx, DWORD PTR [ecx+eax*4+16]
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _positionNumber$[ebp]
  00014	8b 04 ca	 mov	 eax, DWORD PTR [edx+ecx*8]
  00017	8b 54 ca 04	 mov	 edx, DWORD PTR [edx+ecx*8+4]

; 239  :   };

  0001b	8b e5		 mov	 esp, ebp
  0001d	5d		 pop	 ebp
  0001e	c2 08 00	 ret	 8
?Position@OPENINGp@@QAE_KHH@Z ENDP			; OPENINGp::Position
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
tv316 = -272						; size = 8
tv246 = -264						; size = 8
_numTieMove$ = -256					; size = 4
_numWinMove$ = -252					; size = 4
_tieMoves$ = -244					; size = 64
_winMoves$ = -172					; size = 64
_numLine$ = -104					; size = 4
_line$ = -100						; size = 4
_k$ = -96						; size = 4
_j$ = -92						; size = 4
_i$ = -88						; size = 4
_newPos$ = -84						; size = 8
_originalPos$ = -76					; size = 8
_move$ = -68						; size = 8
_ccdp$ = -56						; size = 32
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pGame$ = 8						; size = 4
?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z PROC		; OPENINGp::Play
; _this$ = ecx

; 1586 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	51		 push	 ecx
  0001a	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00020	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	59		 pop	 ecx
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx

; 1587 :   CCDp ccdp(5,5);;

  00044	6a 05		 push	 5
  00046	6a 05		 push	 5
  00048	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  0004b	e8 00 00 00 00	 call	 ??0CCDp@@QAE@HH@Z	; CCDp::CCDp
  00050	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1588 :   ui64 move, originalPos, newPos;
; 1589 :   int i, j, k, line, numLine;
; 1590 :   ui8 winMoves[64], tieMoves[64];
; 1591 :   int numWinMove = 0, numTieMove = 0;

  00057	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _numWinMove$[ebp], 0
  00061	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _numTieMove$[ebp], 0

; 1592 :   numLine = pGame->NumberOfLines();

  0006b	8b 4d 08	 mov	 ecx, DWORD PTR _pGame$[ebp]
  0006e	e8 00 00 00 00	 call	 ?NumberOfLines@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::NumberOfLines
  00073	89 45 98	 mov	 DWORD PTR _numLine$[ebp], eax

; 1593 :   ccdp = pGame;

  00076	8b f4		 mov	 esi, esp
  00078	8b 45 08	 mov	 eax, DWORD PTR _pGame$[ebp]
  0007b	50		 push	 eax
  0007c	8b 55 c8	 mov	 edx, DWORD PTR _ccdp$[ebp]
  0007f	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  00082	8b 02		 mov	 eax, DWORD PTR [edx]
  00084	ff d0		 call	 eax
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 1594 :   originalPos = ccdp.m_pos;

  0008d	8b 4d d8	 mov	 ecx, DWORD PTR _ccdp$[ebp+16]
  00090	8b 55 dc	 mov	 edx, DWORD PTR _ccdp$[ebp+20]
  00093	89 4d b4	 mov	 DWORD PTR _originalPos$[ebp], ecx
  00096	89 55 b8	 mov	 DWORD PTR _originalPos$[ebp+4], edx

; 1595 :   ccdp.Canon();

  00099	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  0009c	e8 00 00 00 00	 call	 ?Canon@CCDn@@QAEXXZ	; CCDn::Canon

; 1596 :   //Try every possible move except those that offer
; 1597 :   //our opponent a box.
; 1598 :   for (line=0,move=1; line<40; move<<=1,line++)

  000a1	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _line$[ebp], 0
  000a8	33 c0		 xor	 eax, eax
  000aa	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR _move$[ebp], 1
  000b1	89 45 c0	 mov	 DWORD PTR _move$[ebp+4], eax
  000b4	eb 1c		 jmp	 SHORT $LN4@Play
$LN2@Play:
  000b6	8b 45 bc	 mov	 eax, DWORD PTR _move$[ebp]
  000b9	8b 55 c0	 mov	 edx, DWORD PTR _move$[ebp+4]
  000bc	b1 01		 mov	 cl, 1
  000be	e8 00 00 00 00	 call	 __allshl
  000c3	89 45 bc	 mov	 DWORD PTR _move$[ebp], eax
  000c6	89 55 c0	 mov	 DWORD PTR _move$[ebp+4], edx
  000c9	8b 4d 9c	 mov	 ecx, DWORD PTR _line$[ebp]
  000cc	83 c1 01	 add	 ecx, 1
  000cf	89 4d 9c	 mov	 DWORD PTR _line$[ebp], ecx
$LN4@Play:
  000d2	83 7d 9c 28	 cmp	 DWORD PTR _line$[ebp], 40 ; 00000028H
  000d6	0f 8d 0e 01 00
	00		 jge	 $LN3@Play

; 1599 :   {
; 1600 :     if ((ccdp.m_pos & move) != 0) continue; // That line is already taken!

  000dc	8b 55 d8	 mov	 edx, DWORD PTR _ccdp$[ebp+16]
  000df	23 55 bc	 and	 edx, DWORD PTR _move$[ebp]
  000e2	8b 45 dc	 mov	 eax, DWORD PTR _ccdp$[ebp+20]
  000e5	23 45 c0	 and	 eax, DWORD PTR _move$[ebp+4]
  000e8	89 95 f8 fe ff
	ff		 mov	 DWORD PTR tv246[ebp], edx
  000ee	89 85 fc fe ff
	ff		 mov	 DWORD PTR tv246[ebp+4], eax
  000f4	8b 8d f8 fe ff
	ff		 mov	 ecx, DWORD PTR tv246[ebp]
  000fa	0b 8d fc fe ff
	ff		 or	 ecx, DWORD PTR tv246[ebp+4]
  00100	74 02		 je	 SHORT $LN14@Play
  00102	eb b2		 jmp	 SHORT $LN2@Play
$LN14@Play:

; 1601 :     if (ccdp.IsCapture(line))

  00104	8b 55 9c	 mov	 edx, DWORD PTR _line$[ebp]
  00107	52		 push	 edx
  00108	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  0010b	e8 00 00 00 00	 call	 ?IsCapture@CCDp@@QAE_NH@Z ; CCDp::IsCapture
  00110	0f b6 c0	 movzx	 eax, al
  00113	85 c0		 test	 eax, eax
  00115	74 09		 je	 SHORT $LN15@Play

; 1602 :     {
; 1603 :       j=2; //Search Straits

  00117	c7 45 a4 02 00
	00 00		 mov	 DWORD PTR _j$[ebp], 2

; 1604 :     }

  0011e	eb 07		 jmp	 SHORT $LN16@Play
$LN15@Play:

; 1605 :     else 
; 1606 :     {
; 1607 :       j = 0; //Search Islands

  00120	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _j$[ebp], 0
$LN16@Play:

; 1608 :     };
; 1609 :     for (k=j; k<j+2; k++)

  00127	8b 4d a4	 mov	 ecx, DWORD PTR _j$[ebp]
  0012a	89 4d a0	 mov	 DWORD PTR _k$[ebp], ecx
  0012d	eb 09		 jmp	 SHORT $LN7@Play
$LN5@Play:
  0012f	8b 55 a0	 mov	 edx, DWORD PTR _k$[ebp]
  00132	83 c2 01	 add	 edx, 1
  00135	89 55 a0	 mov	 DWORD PTR _k$[ebp], edx
$LN7@Play:
  00138	8b 45 a4	 mov	 eax, DWORD PTR _j$[ebp]
  0013b	83 c0 02	 add	 eax, 2
  0013e	39 45 a0	 cmp	 DWORD PTR _k$[ebp], eax
  00141	0f 8d 9e 00 00
	00		 jge	 $LN6@Play

; 1610 :     {
; 1611 :       for (i=0; i<NumPositions(k); i++)

  00147	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0014e	eb 09		 jmp	 SHORT $LN10@Play
$LN8@Play:
  00150	8b 4d a8	 mov	 ecx, DWORD PTR _i$[ebp]
  00153	83 c1 01	 add	 ecx, 1
  00156	89 4d a8	 mov	 DWORD PTR _i$[ebp], ecx
$LN10@Play:
  00159	8b 55 a0	 mov	 edx, DWORD PTR _k$[ebp]
  0015c	52		 push	 edx
  0015d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00160	e8 00 00 00 00	 call	 ?NumPositions@OPENINGp@@QAEHH@Z ; OPENINGp::NumPositions
  00165	39 45 a8	 cmp	 DWORD PTR _i$[ebp], eax
  00168	7d 76		 jge	 SHORT $LN9@Play

; 1612 :       {
; 1613 :         if (ccdp.GoodOpening(Position(k, i), move))

  0016a	8b 45 c0	 mov	 eax, DWORD PTR _move$[ebp+4]
  0016d	50		 push	 eax
  0016e	8b 4d bc	 mov	 ecx, DWORD PTR _move$[ebp]
  00171	51		 push	 ecx
  00172	8b 55 a8	 mov	 edx, DWORD PTR _i$[ebp]
  00175	52		 push	 edx
  00176	8b 45 a0	 mov	 eax, DWORD PTR _k$[ebp]
  00179	50		 push	 eax
  0017a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0017d	e8 00 00 00 00	 call	 ?Position@OPENINGp@@QAE_KHH@Z ; OPENINGp::Position
  00182	52		 push	 edx
  00183	50		 push	 eax
  00184	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  00187	e8 00 00 00 00	 call	 ?GoodOpening@CCDp@@QAE_N_K0@Z ; CCDp::GoodOpening
  0018c	0f b6 c8	 movzx	 ecx, al
  0018f	85 c9		 test	 ecx, ecx
  00191	74 48		 je	 SHORT $LN17@Play

; 1614 :         {
; 1615 :           if (k==j) //if winning play

  00193	8b 55 a0	 mov	 edx, DWORD PTR _k$[ebp]
  00196	3b 55 a4	 cmp	 edx, DWORD PTR _j$[ebp]
  00199	75 21		 jne	 SHORT $LN18@Play

; 1616 :           {
; 1617 :             winMoves[numWinMove++] = (ui8)line;

  0019b	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _numWinMove$[ebp]
  001a1	8a 4d 9c	 mov	 cl, BYTE PTR _line$[ebp]
  001a4	88 8c 05 54 ff
	ff ff		 mov	 BYTE PTR _winMoves$[ebp+eax], cl
  001ab	8b 95 04 ff ff
	ff		 mov	 edx, DWORD PTR _numWinMove$[ebp]
  001b1	83 c2 01	 add	 edx, 1
  001b4	89 95 04 ff ff
	ff		 mov	 DWORD PTR _numWinMove$[ebp], edx

; 1618 :           }

  001ba	eb 1f		 jmp	 SHORT $LN17@Play
$LN18@Play:

; 1619 :           else
; 1620 :           {
; 1621 :             tieMoves[numTieMove++] = (ui8)line;

  001bc	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _numTieMove$[ebp]
  001c2	8a 4d 9c	 mov	 cl, BYTE PTR _line$[ebp]
  001c5	88 8c 05 0c ff
	ff ff		 mov	 BYTE PTR _tieMoves$[ebp+eax], cl
  001cc	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _numTieMove$[ebp]
  001d2	83 c2 01	 add	 edx, 1
  001d5	89 95 00 ff ff
	ff		 mov	 DWORD PTR _numTieMove$[ebp], edx
$LN17@Play:

; 1622 :           };
; 1623 :         };
; 1624 :       };

  001db	e9 70 ff ff ff	 jmp	 $LN8@Play
$LN9@Play:

; 1625 :     };

  001e0	e9 4a ff ff ff	 jmp	 $LN5@Play
$LN6@Play:

; 1626 :   };

  001e5	e9 cc fe ff ff	 jmp	 $LN2@Play
$LN3@Play:

; 1627 :   if (numWinMove > 0)

  001ea	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _numWinMove$[ebp], 0
  001f1	7e 2c		 jle	 SHORT $LN20@Play

; 1628 :   {
; 1629 :     moveType = MT_OPENINGWIN;

  001f3	c7 05 00 00 00
	00 11 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 17 ; moveType, 00000011H

; 1630 :     computerMove.lineNum = winMoves[pDoc->MyRandom(numWinMove)];

  001fd	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _numWinMove$[ebp]
  00203	50		 push	 eax
  00204	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0020a	e8 00 00 00 00	 call	 ?MyRandom@CNewBoxesDoc@@QAEII@Z ; CNewBoxesDoc::MyRandom
  0020f	0f b6 8c 05 54
	ff ff ff	 movzx	 ecx, BYTE PTR _winMoves$[ebp+eax]
  00217	89 0d 18 14 00
	00		 mov	 DWORD PTR ?computerMove@@3UPossibleMove@@A+5144, ecx

; 1631 :   }

  0021d	eb 48		 jmp	 SHORT $LN21@Play
$LN20@Play:

; 1632 :   else if (numTieMove > 0)

  0021f	83 bd 00 ff ff
	ff 00		 cmp	 DWORD PTR _numTieMove$[ebp], 0
  00226	7e 2b		 jle	 SHORT $LN22@Play

; 1633 :   {
; 1634 :     moveType = MT_OPENINGTIE;

  00228	c7 05 00 00 00
	00 12 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 18 ; moveType, 00000012H

; 1635 :     computerMove.lineNum = tieMoves[pDoc->MyRandom(numTieMove)];

  00232	8b 95 00 ff ff
	ff		 mov	 edx, DWORD PTR _numTieMove$[ebp]
  00238	52		 push	 edx
  00239	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?pDoc@@3PAVCNewBoxesDoc@@A ; pDoc
  0023f	e8 00 00 00 00	 call	 ?MyRandom@CNewBoxesDoc@@QAEII@Z ; CNewBoxesDoc::MyRandom
  00244	0f b6 84 05 0c
	ff ff ff	 movzx	 eax, BYTE PTR _tieMoves$[ebp+eax]
  0024c	a3 18 14 00 00	 mov	 DWORD PTR ?computerMove@@3UPossibleMove@@A+5144, eax

; 1636 :   }

  00251	eb 14		 jmp	 SHORT $LN21@Play
$LN22@Play:

; 1637 :   else
; 1638 :   {
; 1639 :     return;

  00253	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0025a	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  0025d	e8 00 00 00 00	 call	 ??1CCDp@@QAE@XZ		; CCDp::~CCDp
  00262	e9 f5 00 00 00	 jmp	 $LN1@Play
$LN21@Play:

; 1640 :   };
; 1641 :   //Now our problem is to determine what line in the original
; 1642 :   //problem is the same line as the line in the canonical problem.
; 1643 :   //
; 1644 :   // First create the new resulting position after the move.
; 1645 :   ccdp.m_pos = ccdp.m_pos | (1I64<<computerMove.lineNum);

  00267	b8 01 00 00 00	 mov	 eax, 1
  0026c	33 d2		 xor	 edx, edx
  0026e	8b 0d 18 14 00
	00		 mov	 ecx, DWORD PTR ?computerMove@@3UPossibleMove@@A+5144
  00274	e8 00 00 00 00	 call	 __allshl
  00279	0b 45 d8	 or	 eax, DWORD PTR _ccdp$[ebp+16]
  0027c	0b 55 dc	 or	 edx, DWORD PTR _ccdp$[ebp+20]
  0027f	89 45 d8	 mov	 DWORD PTR _ccdp$[ebp+16], eax
  00282	89 55 dc	 mov	 DWORD PTR _ccdp$[ebp+20], edx

; 1646 :   ccdp.Canon();

  00285	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  00288	e8 00 00 00 00	 call	 ?Canon@CCDn@@QAEXXZ	; CCDn::Canon

; 1647 :   newPos = ccdp.m_pos;

  0028d	8b 4d d8	 mov	 ecx, DWORD PTR _ccdp$[ebp+16]
  00290	8b 55 dc	 mov	 edx, DWORD PTR _ccdp$[ebp+20]
  00293	89 4d ac	 mov	 DWORD PTR _newPos$[ebp], ecx
  00296	89 55 b0	 mov	 DWORD PTR _newPos$[ebp+4], edx

; 1648 :   //Then apply all possible moves to the original until
; 1649 :   //we get a match.
; 1650 :   for (line=0, move=1; line<40; line++, move<<=1)

  00299	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _line$[ebp], 0
  002a0	33 c0		 xor	 eax, eax
  002a2	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR _move$[ebp], 1
  002a9	89 45 c0	 mov	 DWORD PTR _move$[ebp+4], eax
  002ac	eb 1c		 jmp	 SHORT $LN13@Play
$LN11@Play:
  002ae	8b 4d 9c	 mov	 ecx, DWORD PTR _line$[ebp]
  002b1	83 c1 01	 add	 ecx, 1
  002b4	89 4d 9c	 mov	 DWORD PTR _line$[ebp], ecx
  002b7	8b 45 bc	 mov	 eax, DWORD PTR _move$[ebp]
  002ba	8b 55 c0	 mov	 edx, DWORD PTR _move$[ebp+4]
  002bd	b1 01		 mov	 cl, 1
  002bf	e8 00 00 00 00	 call	 __allshl
  002c4	89 45 bc	 mov	 DWORD PTR _move$[ebp], eax
  002c7	89 55 c0	 mov	 DWORD PTR _move$[ebp+4], edx
$LN13@Play:
  002ca	83 7d 9c 28	 cmp	 DWORD PTR _line$[ebp], 40 ; 00000028H
  002ce	7d 70		 jge	 SHORT $LN12@Play

; 1651 :   {
; 1652 :     if (originalPos & move) continue; 

  002d0	8b 55 b4	 mov	 edx, DWORD PTR _originalPos$[ebp]
  002d3	23 55 bc	 and	 edx, DWORD PTR _move$[ebp]
  002d6	8b 45 b8	 mov	 eax, DWORD PTR _originalPos$[ebp+4]
  002d9	23 45 c0	 and	 eax, DWORD PTR _move$[ebp+4]
  002dc	89 95 f0 fe ff
	ff		 mov	 DWORD PTR tv316[ebp], edx
  002e2	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv316[ebp+4], eax
  002e8	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR tv316[ebp]
  002ee	0b 8d f4 fe ff
	ff		 or	 ecx, DWORD PTR tv316[ebp+4]
  002f4	74 02		 je	 SHORT $LN24@Play
  002f6	eb b6		 jmp	 SHORT $LN11@Play
$LN24@Play:

; 1653 :     ccdp.m_pos = originalPos | move;

  002f8	8b 55 b4	 mov	 edx, DWORD PTR _originalPos$[ebp]
  002fb	0b 55 bc	 or	 edx, DWORD PTR _move$[ebp]
  002fe	8b 45 b8	 mov	 eax, DWORD PTR _originalPos$[ebp+4]
  00301	0b 45 c0	 or	 eax, DWORD PTR _move$[ebp+4]
  00304	89 55 d8	 mov	 DWORD PTR _ccdp$[ebp+16], edx
  00307	89 45 dc	 mov	 DWORD PTR _ccdp$[ebp+20], eax

; 1654 :     ccdp.Canon();

  0030a	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  0030d	e8 00 00 00 00	 call	 ?Canon@CCDn@@QAEXXZ	; CCDn::Canon

; 1655 :     if (ccdp.m_pos == newPos)

  00312	8b 4d d8	 mov	 ecx, DWORD PTR _ccdp$[ebp+16]
  00315	3b 4d ac	 cmp	 ecx, DWORD PTR _newPos$[ebp]
  00318	75 21		 jne	 SHORT $LN25@Play
  0031a	8b 55 dc	 mov	 edx, DWORD PTR _ccdp$[ebp+20]
  0031d	3b 55 b0	 cmp	 edx, DWORD PTR _newPos$[ebp+4]
  00320	75 19		 jne	 SHORT $LN25@Play

; 1656 :     {
; 1657 :       computerMove.lineNum = line;

  00322	8b 45 9c	 mov	 eax, DWORD PTR _line$[ebp]
  00325	a3 18 14 00 00	 mov	 DWORD PTR ?computerMove@@3UPossibleMove@@A+5144, eax

; 1658 :       return;

  0032a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00331	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  00334	e8 00 00 00 00	 call	 ??1CCDp@@QAE@XZ		; CCDp::~CCDp
  00339	eb 21		 jmp	 SHORT $LN1@Play
$LN25@Play:

; 1659 :     };
; 1660 :   };

  0033b	e9 6e ff ff ff	 jmp	 $LN11@Play
$LN12@Play:

; 1661 :   die("Internal Error");

  00340	68 00 00 00 00	 push	 OFFSET $SG227122
  00345	e8 00 00 00 00	 call	 ?die@@YAXPBD@Z		; die
  0034a	83 c4 04	 add	 esp, 4

; 1662 : }

  0034d	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00354	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  00357	e8 00 00 00 00	 call	 ??1CCDp@@QAE@XZ		; CCDp::~CCDp
$LN1@Play:
  0035c	52		 push	 edx
  0035d	8b cd		 mov	 ecx, ebp
  0035f	50		 push	 eax
  00360	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN33@Play
  00366	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0036b	58		 pop	 eax
  0036c	5a		 pop	 edx
  0036d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00370	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00377	59		 pop	 ecx
  00378	5f		 pop	 edi
  00379	5e		 pop	 esi
  0037a	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0037d	33 cd		 xor	 ecx, ebp
  0037f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00384	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  0038a	3b ec		 cmp	 ebp, esp
  0038c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00391	8b e5		 mov	 esp, ebp
  00393	5d		 pop	 ebp
  00394	c2 04 00	 ret	 4
  00397	90		 npad	 1
$LN33@Play:
  00398	03 00 00 00	 DD	 3
  0039c	00 00 00 00	 DD	 $LN32@Play
$LN32@Play:
  003a0	c8 ff ff ff	 DD	 -56			; ffffffc8H
  003a4	20 00 00 00	 DD	 32			; 00000020H
  003a8	00 00 00 00	 DD	 $LN28@Play
  003ac	54 ff ff ff	 DD	 -172			; ffffff54H
  003b0	40 00 00 00	 DD	 64			; 00000040H
  003b4	00 00 00 00	 DD	 $LN29@Play
  003b8	0c ff ff ff	 DD	 -244			; ffffff0cH
  003bc	40 00 00 00	 DD	 64			; 00000040H
  003c0	00 00 00 00	 DD	 $LN30@Play
$LN30@Play:
  003c4	74		 DB	 116			; 00000074H
  003c5	69		 DB	 105			; 00000069H
  003c6	65		 DB	 101			; 00000065H
  003c7	4d		 DB	 77			; 0000004dH
  003c8	6f		 DB	 111			; 0000006fH
  003c9	76		 DB	 118			; 00000076H
  003ca	65		 DB	 101			; 00000065H
  003cb	73		 DB	 115			; 00000073H
  003cc	00		 DB	 0
$LN29@Play:
  003cd	77		 DB	 119			; 00000077H
  003ce	69		 DB	 105			; 00000069H
  003cf	6e		 DB	 110			; 0000006eH
  003d0	4d		 DB	 77			; 0000004dH
  003d1	6f		 DB	 111			; 0000006fH
  003d2	76		 DB	 118			; 00000076H
  003d3	65		 DB	 101			; 00000065H
  003d4	73		 DB	 115			; 00000073H
  003d5	00		 DB	 0
$LN28@Play:
  003d6	63		 DB	 99			; 00000063H
  003d7	63		 DB	 99			; 00000063H
  003d8	64		 DB	 100			; 00000064H
  003d9	70		 DB	 112			; 00000070H
  003da	00		 DB	 0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z$0:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR _ccdp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCDp@@QAE@XZ		; CCDp::~CCDp
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a f0 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-272]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Play@OPENINGp@@QAEXPAVDOTS_AND_BOXES@@@Z ENDP		; OPENINGp::Play
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_count$1 = -48						; size = 4
_vline$2 = -44						; size = 4
_hline$3 = -40						; size = 4
_dotNum$ = -32						; size = 8
_numEdges$ = -20					; size = 4
_height$ = -16						; size = 4
_width$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?FindAvoids@DOTS_AND_BOXES@@QAEXXZ PROC			; DOTS_AND_BOXES::FindAvoids
; _this$ = ecx

; 192  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d0	 lea	 edi, DWORD PTR [ebp-48]
  0000b	b9 0c 00 00 00	 mov	 ecx, 12			; 0000000cH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 193  :   int i;
; 194  :   int width, height, numEdges;
; 195  :   POINT dotNum;
; 196  :   width = Width();

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00023	89 45 f4	 mov	 DWORD PTR _width$[ebp], eax

; 197  :   height = Height();

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0002e	89 45 f0	 mov	 DWORD PTR _height$[ebp], eax

; 198  :   numEdges = width*(height-1) + height*(width-1);

  00031	8b 45 f0	 mov	 eax, DWORD PTR _height$[ebp]
  00034	83 e8 01	 sub	 eax, 1
  00037	0f af 45 f4	 imul	 eax, DWORD PTR _width$[ebp]
  0003b	8b 4d f4	 mov	 ecx, DWORD PTR _width$[ebp]
  0003e	83 e9 01	 sub	 ecx, 1
  00041	0f af 4d f0	 imul	 ecx, DWORD PTR _height$[ebp]
  00045	03 c1		 add	 eax, ecx
  00047	89 45 ec	 mov	 DWORD PTR _numEdges$[ebp], eax

; 199  :   for (i=0; i<numEdges; i++)

  0004a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00051	eb 09		 jmp	 SHORT $LN4@FindAvoids
$LN2@FindAvoids:
  00053	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00056	83 c2 01	 add	 edx, 1
  00059	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$LN4@FindAvoids:
  0005c	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0005f	3b 45 ec	 cmp	 eax, DWORD PTR _numEdges$[ebp]
  00062	7d 0f		 jge	 SHORT $LN3@FindAvoids

; 200  :   {
; 201  :     m_avoidFlgs[i] = 0;

  00064	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00067	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0006a	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  0006d	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0

; 202  :   };

  00071	eb e0		 jmp	 SHORT $LN2@FindAvoids
$LN3@FindAvoids:

; 203  :   for (dotNum.x=0; dotNum.x<width; dotNum.x++)

  00073	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _dotNum$[ebp], 0
  0007a	eb 09		 jmp	 SHORT $LN7@FindAvoids
$LN5@FindAvoids:
  0007c	8b 4d e0	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  0007f	83 c1 01	 add	 ecx, 1
  00082	89 4d e0	 mov	 DWORD PTR _dotNum$[ebp], ecx
$LN7@FindAvoids:
  00085	8b 55 e0	 mov	 edx, DWORD PTR _dotNum$[ebp]
  00088	3b 55 f4	 cmp	 edx, DWORD PTR _width$[ebp]
  0008b	0f 8d 35 02 00
	00		 jge	 $LN1@FindAvoids

; 204  :   {
; 205  :     for (dotNum.y=0; dotNum.y<height; dotNum.y++)

  00091	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _dotNum$[ebp+4], 0
  00098	eb 09		 jmp	 SHORT $LN10@FindAvoids
$LN8@FindAvoids:
  0009a	8b 45 e4	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  0009d	83 c0 01	 add	 eax, 1
  000a0	89 45 e4	 mov	 DWORD PTR _dotNum$[ebp+4], eax
$LN10@FindAvoids:
  000a3	8b 4d e4	 mov	 ecx, DWORD PTR _dotNum$[ebp+4]
  000a6	3b 4d f0	 cmp	 ecx, DWORD PTR _height$[ebp]
  000a9	0f 8d 12 02 00
	00		 jge	 $LN9@FindAvoids

; 206  :     {
; 207  :       int hline, vline, count;
; 208  :       hline = dotNum.y*(2*width-1) + dotNum.x;

  000af	8b 55 f4	 mov	 edx, DWORD PTR _width$[ebp]
  000b2	8d 44 12 ff	 lea	 eax, DWORD PTR [edx+edx-1]
  000b6	0f af 45 e4	 imul	 eax, DWORD PTR _dotNum$[ebp+4]
  000ba	03 45 e0	 add	 eax, DWORD PTR _dotNum$[ebp]
  000bd	89 45 d8	 mov	 DWORD PTR _hline$3[ebp], eax

; 209  :       vline = hline + width - 1;

  000c0	8b 4d f4	 mov	 ecx, DWORD PTR _width$[ebp]
  000c3	8b 55 d8	 mov	 edx, DWORD PTR _hline$3[ebp]
  000c6	8d 44 0a ff	 lea	 eax, DWORD PTR [edx+ecx-1]
  000ca	89 45 d4	 mov	 DWORD PTR _vline$2[ebp], eax

; 210  :       {
; 211  :         // Mark the edges
; 212  :         if ((dotNum.x == 0) && (dotNum.y < height-1))

  000cd	83 7d e0 00	 cmp	 DWORD PTR _dotNum$[ebp], 0
  000d1	75 27		 jne	 SHORT $LN11@FindAvoids
  000d3	8b 4d f0	 mov	 ecx, DWORD PTR _height$[ebp]
  000d6	83 e9 01	 sub	 ecx, 1
  000d9	39 4d e4	 cmp	 DWORD PTR _dotNum$[ebp+4], ecx
  000dc	7d 1c		 jge	 SHORT $LN11@FindAvoids

; 213  :         {
; 214  :           m_avoidFlgs[vline] |= AV_PERIMETER;

  000de	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  000e1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  000e4	8b 4d d4	 mov	 ecx, DWORD PTR _vline$2[ebp]
  000e7	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  000eb	83 ca 04	 or	 edx, 4
  000ee	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000f1	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  000f4	8b 45 d4	 mov	 eax, DWORD PTR _vline$2[ebp]
  000f7	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
$LN11@FindAvoids:

; 215  :         };
; 216  :         if ((dotNum.x == width-1) && (dotNum.y < height-1))

  000fa	8b 4d f4	 mov	 ecx, DWORD PTR _width$[ebp]
  000fd	83 e9 01	 sub	 ecx, 1
  00100	39 4d e0	 cmp	 DWORD PTR _dotNum$[ebp], ecx
  00103	75 27		 jne	 SHORT $LN12@FindAvoids
  00105	8b 55 f0	 mov	 edx, DWORD PTR _height$[ebp]
  00108	83 ea 01	 sub	 edx, 1
  0010b	39 55 e4	 cmp	 DWORD PTR _dotNum$[ebp+4], edx
  0010e	7d 1c		 jge	 SHORT $LN12@FindAvoids

; 217  :         {
; 218  :           m_avoidFlgs[vline] |= AV_PERIMETER;

  00110	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00113	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00116	8b 55 d4	 mov	 edx, DWORD PTR _vline$2[ebp]
  00119	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  0011d	83 c8 04	 or	 eax, 4
  00120	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00126	8b 4d d4	 mov	 ecx, DWORD PTR _vline$2[ebp]
  00129	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
$LN12@FindAvoids:

; 219  :         };
; 220  :         if ((dotNum.y == 0) && (dotNum.x < width-1))

  0012c	83 7d e4 00	 cmp	 DWORD PTR _dotNum$[ebp+4], 0
  00130	75 27		 jne	 SHORT $LN13@FindAvoids
  00132	8b 55 f4	 mov	 edx, DWORD PTR _width$[ebp]
  00135	83 ea 01	 sub	 edx, 1
  00138	39 55 e0	 cmp	 DWORD PTR _dotNum$[ebp], edx
  0013b	7d 1c		 jge	 SHORT $LN13@FindAvoids

; 221  :         {
; 222  :           m_avoidFlgs[hline] |= AV_PERIMETER;

  0013d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00140	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00143	8b 55 d8	 mov	 edx, DWORD PTR _hline$3[ebp]
  00146	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  0014a	83 c8 04	 or	 eax, 4
  0014d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00150	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00153	8b 4d d8	 mov	 ecx, DWORD PTR _hline$3[ebp]
  00156	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
$LN13@FindAvoids:

; 223  :         };
; 224  :         if ((dotNum.y == height-1) && (dotNum.x < width-1))

  00159	8b 55 f0	 mov	 edx, DWORD PTR _height$[ebp]
  0015c	83 ea 01	 sub	 edx, 1
  0015f	39 55 e4	 cmp	 DWORD PTR _dotNum$[ebp+4], edx
  00162	75 27		 jne	 SHORT $LN14@FindAvoids
  00164	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  00167	83 e8 01	 sub	 eax, 1
  0016a	39 45 e0	 cmp	 DWORD PTR _dotNum$[ebp], eax
  0016d	7d 1c		 jge	 SHORT $LN14@FindAvoids

; 225  :         {
; 226  :           m_avoidFlgs[hline] |= AV_PERIMETER;

  0016f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00172	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00175	8b 45 d8	 mov	 eax, DWORD PTR _hline$3[ebp]
  00178	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  0017c	83 c9 04	 or	 ecx, 4
  0017f	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00182	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00185	8b 55 d8	 mov	 edx, DWORD PTR _hline$3[ebp]
  00188	88 0c 10	 mov	 BYTE PTR [eax+edx], cl
$LN14@FindAvoids:

; 227  :         };
; 228  :       };
; 229  :       if (   (dotNum.x < width-1)
; 230  :            &&(HLineType(dotNum.x, dotNum.y) != LINE_NONE)

  0018b	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  0018e	83 e8 01	 sub	 eax, 1
  00191	39 45 e0	 cmp	 DWORD PTR _dotNum$[ebp], eax
  00194	7d 30		 jge	 SHORT $LN15@FindAvoids
  00196	8b 4d e4	 mov	 ecx, DWORD PTR _dotNum$[ebp+4]
  00199	51		 push	 ecx
  0019a	8b 55 e0	 mov	 edx, DWORD PTR _dotNum$[ebp]
  0019d	52		 push	 edx
  0019e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001a1	e8 00 00 00 00	 call	 ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::HLineType
  001a6	85 c0		 test	 eax, eax
  001a8	74 1c		 je	 SHORT $LN15@FindAvoids

; 231  :          )
; 232  :       {
; 233  :         m_avoidFlgs[hline] |= AV_OCCUPIED;

  001aa	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001ad	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001b0	8b 55 d8	 mov	 edx, DWORD PTR _hline$3[ebp]
  001b3	0f b6 04 11	 movzx	 eax, BYTE PTR [ecx+edx]
  001b7	83 c8 01	 or	 eax, 1
  001ba	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001bd	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001c0	8b 4d d8	 mov	 ecx, DWORD PTR _hline$3[ebp]
  001c3	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
$LN15@FindAvoids:

; 234  :       };
; 235  :       if (   (dotNum.y<height-1)
; 236  :            &&(VLineType(dotNum.x, dotNum.y) != LINE_NONE)

  001c6	8b 55 f0	 mov	 edx, DWORD PTR _height$[ebp]
  001c9	83 ea 01	 sub	 edx, 1
  001cc	39 55 e4	 cmp	 DWORD PTR _dotNum$[ebp+4], edx
  001cf	7d 30		 jge	 SHORT $LN16@FindAvoids
  001d1	8b 45 e4	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  001d4	50		 push	 eax
  001d5	8b 4d e0	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  001d8	51		 push	 ecx
  001d9	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  001dc	e8 00 00 00 00	 call	 ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ; DOTS_AND_BOXES::VLineType
  001e1	85 c0		 test	 eax, eax
  001e3	74 1c		 je	 SHORT $LN16@FindAvoids

; 237  :          )
; 238  :       {
; 239  :         m_avoidFlgs[vline] |= AV_OCCUPIED;

  001e5	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  001e8	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  001eb	8b 4d d4	 mov	 ecx, DWORD PTR _vline$2[ebp]
  001ee	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  001f2	83 ca 01	 or	 edx, 1
  001f5	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  001f8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001fb	8b 45 d4	 mov	 eax, DWORD PTR _vline$2[ebp]
  001fe	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
$LN16@FindAvoids:

; 240  :       };
; 241  :       if ((dotNum.x < width-1) && (dotNum.y<height-1))

  00201	8b 4d f4	 mov	 ecx, DWORD PTR _width$[ebp]
  00204	83 e9 01	 sub	 ecx, 1
  00207	39 4d e0	 cmp	 DWORD PTR _dotNum$[ebp], ecx
  0020a	0f 8d ac 00 00
	00		 jge	 $LN17@FindAvoids
  00210	8b 55 f0	 mov	 edx, DWORD PTR _height$[ebp]
  00213	83 ea 01	 sub	 edx, 1
  00216	39 55 e4	 cmp	 DWORD PTR _dotNum$[ebp+4], edx
  00219	0f 8d 9d 00 00
	00		 jge	 $LN17@FindAvoids

; 242  :       {
; 243  :         count = CountLines(dotNum);

  0021f	8b 45 e4	 mov	 eax, DWORD PTR _dotNum$[ebp+4]
  00222	50		 push	 eax
  00223	8b 4d e0	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00226	51		 push	 ecx
  00227	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0022a	e8 00 00 00 00	 call	 ?CountLines@DOTS_AND_BOXES@@QBEHUtagPOINT@@@Z ; DOTS_AND_BOXES::CountLines
  0022f	89 45 d0	 mov	 DWORD PTR _count$1[ebp], eax

; 244  :         if (count >= 2)

  00232	83 7d d0 02	 cmp	 DWORD PTR _count$1[ebp], 2
  00236	0f 8c 80 00 00
	00		 jl	 $LN17@FindAvoids

; 245  :         {
; 246  :           m_avoidFlgs[hline] |= AV_SACRIFICE;

  0023c	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0023f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00242	8b 4d d8	 mov	 ecx, DWORD PTR _hline$3[ebp]
  00245	0f b6 14 08	 movzx	 edx, BYTE PTR [eax+ecx]
  00249	83 ca 02	 or	 edx, 2
  0024c	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0024f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00252	8b 45 d8	 mov	 eax, DWORD PTR _hline$3[ebp]
  00255	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 247  :           m_avoidFlgs[vline] |= AV_SACRIFICE;

  00258	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0025b	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  0025e	8b 45 d4	 mov	 eax, DWORD PTR _vline$2[ebp]
  00261	0f b6 0c 02	 movzx	 ecx, BYTE PTR [edx+eax]
  00265	83 c9 02	 or	 ecx, 2
  00268	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0026b	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  0026e	8b 55 d4	 mov	 edx, DWORD PTR _vline$2[ebp]
  00271	88 0c 10	 mov	 BYTE PTR [eax+edx], cl

; 248  :           m_avoidFlgs[hline+2*width-1] |= AV_SACRIFICE;

  00274	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  00277	8b 4d d8	 mov	 ecx, DWORD PTR _hline$3[ebp]
  0027a	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0027d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00280	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  00283	0f b6 54 11 ff	 movzx	 edx, BYTE PTR [ecx+edx-1]
  00288	83 ca 02	 or	 edx, 2
  0028b	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  0028e	8b 4d d8	 mov	 ecx, DWORD PTR _hline$3[ebp]
  00291	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00294	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00297	8b 49 24	 mov	 ecx, DWORD PTR [ecx+36]
  0029a	88 54 01 ff	 mov	 BYTE PTR [ecx+eax-1], dl

; 249  :           m_avoidFlgs[vline+1] |= AV_SACRIFICE;

  0029e	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  002a1	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  002a4	8b 4d d4	 mov	 ecx, DWORD PTR _vline$2[ebp]
  002a7	0f b6 54 08 01	 movzx	 edx, BYTE PTR [eax+ecx+1]
  002ac	83 ca 02	 or	 edx, 2
  002af	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  002b2	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  002b5	8b 45 d4	 mov	 eax, DWORD PTR _vline$2[ebp]
  002b8	88 54 01 01	 mov	 BYTE PTR [ecx+eax+1], dl
$LN17@FindAvoids:

; 250  :         };
; 251  :       };
; 252  :     };

  002bc	e9 d9 fd ff ff	 jmp	 $LN8@FindAvoids
$LN9@FindAvoids:

; 253  :   };

  002c1	e9 b6 fd ff ff	 jmp	 $LN5@FindAvoids
$LN1@FindAvoids:

; 254  : }

  002c6	52		 push	 edx
  002c7	8b cd		 mov	 ecx, ebp
  002c9	50		 push	 eax
  002ca	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@FindAvoids
  002d0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  002d5	58		 pop	 eax
  002d6	5a		 pop	 edx
  002d7	5f		 pop	 edi
  002d8	83 c4 30	 add	 esp, 48			; 00000030H
  002db	3b ec		 cmp	 ebp, esp
  002dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002e2	8b e5		 mov	 esp, ebp
  002e4	5d		 pop	 ebp
  002e5	c3		 ret	 0
  002e6	66 90		 npad	 2
$LN22@FindAvoids:
  002e8	01 00 00 00	 DD	 1
  002ec	00 00 00 00	 DD	 $LN21@FindAvoids
$LN21@FindAvoids:
  002f0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  002f4	08 00 00 00	 DD	 8
  002f8	00 00 00 00	 DD	 $LN20@FindAvoids
$LN20@FindAvoids:
  002fc	64		 DB	 100			; 00000064H
  002fd	6f		 DB	 111			; 0000006fH
  002fe	74		 DB	 116			; 00000074H
  002ff	4e		 DB	 78			; 0000004eH
  00300	75		 DB	 117			; 00000075H
  00301	6d		 DB	 109			; 0000006dH
  00302	00		 DB	 0
?FindAvoids@DOTS_AND_BOXES@@QAEXXZ ENDP			; DOTS_AND_BOXES::FindAvoids
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?LoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
_vertical$ = 16						; size = 1
?LoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@_N@Z PROC	; DOTS_AND_BOXES::LoopWeight, COMDAT
; _this$ = ecx

; 135  :   INLINE int LoopWeight(POINT dotNum, bool vertical){return m_breakUpLoopsWeight[Dot2Line(dotNum,vertical)];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	0f b6 45 10	 movzx	 eax, BYTE PTR _vertical$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _dotNum$[ebp+4]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  0001a	52		 push	 edx
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z ; DOTS_AND_BOXES::Dot2Line
  00023	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00029	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0002c	83 c4 04	 add	 esp, 4
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 0c 00	 ret	 12			; 0000000cH
?LoopWeight@DOTS_AND_BOXES@@QAEHUtagPOINT@@_N@Z ENDP	; DOTS_AND_BOXES::LoopWeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_lines$ = -36						; size = 8
_totalWeight$ = -24					; size = 4
_height$ = -20						; size = 4
_width$ = -16						; size = 4
_n$ = -12						; size = 4
_i$ = -8						; size = 4
_this$ = -4						; size = 4
?DivideAndConquer@DOTS_AND_BOXES@@QAEXXZ PROC		; DOTS_AND_BOXES::DivideAndConquer
; _this$ = ecx

; 126  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	57		 push	 edi
  00007	51		 push	 ecx
  00008	8d 7d d8	 lea	 edi, DWORD PTR [ebp-40]
  0000b	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	59		 pop	 ecx
  00018	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 127  :   int i, n;
; 128  :   int width, height;
; 129  :   int totalWeight;
; 130  :   //POINT dotNum;
; 131  :   //int numPossible;
; 132  :   int  lines[NUM_DIVIDES_TO_CONSIDER];
; 133  :   //int  weights[NUM_DIVIDES_TO_CONSIDER];
; 134  :   //flow.ComputeFlow(this);
; 135  :   width = Width();

  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00023	89 45 f0	 mov	 DWORD PTR _width$[ebp], eax

; 136  :   height = Height();

  00026	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00029	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0002e	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax

; 137  :   totalWeight = 0;

  00031	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _totalWeight$[ebp], 0

; 138  :   for (i=0; i<NUM_DIVIDES_TO_CONSIDER; i++)

  00038	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0003f	eb 09		 jmp	 SHORT $LN4@DivideAndC
$LN2@DivideAndC:
  00041	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00044	83 c0 01	 add	 eax, 1
  00047	89 45 f8	 mov	 DWORD PTR _i$[ebp], eax
$LN4@DivideAndC:
  0004a	83 7d f8 02	 cmp	 DWORD PTR _i$[ebp], 2
  0004e	7d 17		 jge	 SHORT $LN3@DivideAndC

; 139  :   {
; 140  :     totalWeight += m_divideAndConquerWeight[lines[i]];

  00050	8b 4d f8	 mov	 ecx, DWORD PTR _i$[ebp]
  00053	8b 54 8d dc	 mov	 edx, DWORD PTR _lines$[ebp+ecx*4]
  00057	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005c	8b 45 e8	 mov	 eax, DWORD PTR _totalWeight$[ebp]
  0005f	03 04 91	 add	 eax, DWORD PTR [ecx+edx*4]
  00062	89 45 e8	 mov	 DWORD PTR _totalWeight$[ebp], eax

; 141  :   };

  00065	eb da		 jmp	 SHORT $LN2@DivideAndC
$LN3@DivideAndC:

; 142  :   n = MyRandom(totalWeight);

  00067	8b 4d e8	 mov	 ecx, DWORD PTR _totalWeight$[ebp]
  0006a	51		 push	 ecx
  0006b	e8 00 00 00 00	 call	 ?MyRandom@@YAII@Z	; MyRandom
  00070	83 c4 04	 add	 esp, 4
  00073	89 45 f4	 mov	 DWORD PTR _n$[ebp], eax

; 143  :   for (i=0; i<NUM_DIVIDES_TO_CONSIDER; i++)

  00076	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0007d	eb 09		 jmp	 SHORT $LN7@DivideAndC
$LN5@DivideAndC:
  0007f	8b 55 f8	 mov	 edx, DWORD PTR _i$[ebp]
  00082	83 c2 01	 add	 edx, 1
  00085	89 55 f8	 mov	 DWORD PTR _i$[ebp], edx
$LN7@DivideAndC:
  00088	83 7d f8 02	 cmp	 DWORD PTR _i$[ebp], 2
  0008c	7d 17		 jge	 SHORT $LN6@DivideAndC

; 144  :   {
; 145  :     n -= m_divideAndConquerWeight[lines[i]];

  0008e	8b 45 f8	 mov	 eax, DWORD PTR _i$[ebp]
  00091	8b 4c 85 dc	 mov	 ecx, DWORD PTR _lines$[ebp+eax*4]
  00095	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00098	8b 02		 mov	 eax, DWORD PTR [edx]
  0009a	8b 55 f4	 mov	 edx, DWORD PTR _n$[ebp]
  0009d	2b 14 88	 sub	 edx, DWORD PTR [eax+ecx*4]
  000a0	89 55 f4	 mov	 DWORD PTR _n$[ebp], edx

; 146  :     if (n <= 0)
; 147  :     {
; 148  :     };
; 149  :   };

  000a3	eb da		 jmp	 SHORT $LN5@DivideAndC
$LN6@DivideAndC:

; 150  :   die("Internal Error");

  000a5	68 00 00 00 00	 push	 OFFSET $SG226429
  000aa	e8 00 00 00 00	 call	 ?die@@YAXPBD@Z		; die
  000af	83 c4 04	 add	 esp, 4

; 151  : }

  000b2	52		 push	 edx
  000b3	8b cd		 mov	 ecx, ebp
  000b5	50		 push	 eax
  000b6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@DivideAndC
  000bc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000c1	58		 pop	 eax
  000c2	5a		 pop	 edx
  000c3	5f		 pop	 edi
  000c4	83 c4 28	 add	 esp, 40			; 00000028H
  000c7	3b ec		 cmp	 ebp, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	8b e5		 mov	 esp, ebp
  000d0	5d		 pop	 ebp
  000d1	c3		 ret	 0
  000d2	66 90		 npad	 2
$LN12@DivideAndC:
  000d4	01 00 00 00	 DD	 1
  000d8	00 00 00 00	 DD	 $LN11@DivideAndC
$LN11@DivideAndC:
  000dc	dc ff ff ff	 DD	 -36			; ffffffdcH
  000e0	08 00 00 00	 DD	 8
  000e4	00 00 00 00	 DD	 $LN10@DivideAndC
$LN10@DivideAndC:
  000e8	6c		 DB	 108			; 0000006cH
  000e9	69		 DB	 105			; 00000069H
  000ea	6e		 DB	 110			; 0000006eH
  000eb	65		 DB	 101			; 00000065H
  000ec	73		 DB	 115			; 00000073H
  000ed	00		 DB	 0
?DivideAndConquer@DOTS_AND_BOXES@@QAEXXZ ENDP		; DOTS_AND_BOXES::DivideAndConquer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?IsSpecial5x5@DOTS_AND_BOXES@@QAE_NXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?IsSpecial5x5@DOTS_AND_BOXES@@QAE_NXZ PROC		; DOTS_AND_BOXES::IsSpecial5x5, COMDAT
; _this$ = ecx

; 130  :   bool IsSpecial5x5(void){return (m_width==5)&&(m_height==5)&&(NumberOfLines()<10);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000d	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  00014	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00017	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0001a	83 78 10 05	 cmp	 DWORD PTR [eax+16], 5
  0001e	75 1f		 jne	 SHORT $LN3@IsSpecial5
  00020	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00023	83 79 14 05	 cmp	 DWORD PTR [ecx+20], 5
  00027	75 16		 jne	 SHORT $LN3@IsSpecial5
  00029	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	e8 00 00 00 00	 call	 ?NumberOfLines@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::NumberOfLines
  00031	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00034	7d 09		 jge	 SHORT $LN3@IsSpecial5
  00036	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  0003d	eb 07		 jmp	 SHORT $LN4@IsSpecial5
$LN3@IsSpecial5:
  0003f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN4@IsSpecial5:
  00046	0f b6 45 f8	 movzx	 eax, BYTE PTR tv71[ebp]
  0004a	83 c4 08	 add	 esp, 8
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
?IsSpecial5x5@DOTS_AND_BOXES@@QAE_NXZ ENDP		; DOTS_AND_BOXES::IsSpecial5x5
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_divideRank$ = -1960					; size = 964
_loopRank$ = -988					; size = 964
_numEdges$ = -20					; size = 4
_height$ = -16						; size = 4
_width$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?GiveNothing@DOTS_AND_BOXES@@QAEXXZ PROC		; DOTS_AND_BOXES::GiveNothing
; _this$ = ecx

; 369  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 07 00
	00		 sub	 esp, 1964		; 000007acH
  00009	57		 push	 edi
  0000a	51		 push	 ecx
  0000b	8d bd 54 f8 ff
	ff		 lea	 edi, DWORD PTR [ebp-1964]
  00011	b9 eb 01 00 00	 mov	 ecx, 491		; 000001ebH
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	59		 pop	 ecx
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 370  :   int width, height, numEdges;
; 371  :   int loopRank[MAX_EDGES], divideRank[MAX_EDGES];
; 372  :   width = Width();

  0002b	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0002e	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00033	89 45 f4	 mov	 DWORD PTR _width$[ebp], eax

; 373  :   height = Height();

  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0003e	89 45 f0	 mov	 DWORD PTR _height$[ebp], eax

; 374  :   numEdges = height*(width-1) + width*(height-1);

  00041	8b 45 f4	 mov	 eax, DWORD PTR _width$[ebp]
  00044	83 e8 01	 sub	 eax, 1
  00047	0f af 45 f0	 imul	 eax, DWORD PTR _height$[ebp]
  0004b	8b 4d f0	 mov	 ecx, DWORD PTR _height$[ebp]
  0004e	83 e9 01	 sub	 ecx, 1
  00051	0f af 4d f4	 imul	 ecx, DWORD PTR _width$[ebp]
  00055	03 c1		 add	 eax, ecx
  00057	89 45 ec	 mov	 DWORD PTR _numEdges$[ebp], eax

; 375  :   FindAvoids();

  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	e8 00 00 00 00	 call	 ?FindAvoids@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::FindAvoids

; 376  :   m_loopWeightsValid = false;

  00062	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00065	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 377  :   m_divideWeightsValid = false;

  00069	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 378  :   ComputeDivideAndConquerWeights_3();

  00070	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00073	e8 00 00 00 00	 call	 ?ComputeDivideAndConquerWeights_3@DOTS_AND_BOXES@@QAEXXZ ; DOTS_AND_BOXES::ComputeDivideAndConquerWeights_3

; 379  :   FormRanks(m_divideAndConquerWeight, divideRank, numEdges);

  00078	8b 4d ec	 mov	 ecx, DWORD PTR _numEdges$[ebp]
  0007b	51		 push	 ecx
  0007c	8d 95 58 f8 ff
	ff		 lea	 edx, DWORD PTR _divideRank$[ebp]
  00082	52		 push	 edx
  00083	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 08		 mov	 ecx, DWORD PTR [eax]
  00088	51		 push	 ecx
  00089	e8 00 00 00 00	 call	 ?FormRanks@@YAXPAH0H@Z	; FormRanks
  0008e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 380  :   ComputeBreakUpLoopWeights(4);

  00091	6a 04		 push	 4
  00093	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00096	e8 00 00 00 00	 call	 ?ComputeBreakUpLoopWeights@DOTS_AND_BOXES@@QAEXH@Z ; DOTS_AND_BOXES::ComputeBreakUpLoopWeights

; 381  :   FormRanks(m_breakUpLoopsWeight, loopRank, numEdges);

  0009b	8b 55 ec	 mov	 edx, DWORD PTR _numEdges$[ebp]
  0009e	52		 push	 edx
  0009f	8d 85 24 fc ff
	ff		 lea	 eax, DWORD PTR _loopRank$[ebp]
  000a5	50		 push	 eax
  000a6	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000a9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 ?FormRanks@@YAXPAH0H@Z	; FormRanks
  000b2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 382  :   if (GiveNothing_BreakLoops(12, loopRank))

  000b5	8d 85 24 fc ff
	ff		 lea	 eax, DWORD PTR _loopRank$[ebp]
  000bb	50		 push	 eax
  000bc	6a 0c		 push	 12			; 0000000cH
  000be	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000c1	e8 00 00 00 00	 call	 ?GiveNothing_BreakLoops@DOTS_AND_BOXES@@ABE_NHPAH@Z ; DOTS_AND_BOXES::GiveNothing_BreakLoops
  000c6	0f b6 c8	 movzx	 ecx, al
  000c9	85 c9		 test	 ecx, ecx
  000cb	74 05		 je	 SHORT $LN2@GiveNothin

; 383  :   {
; 384  : //    m_loopWeightsValid = false;
; 385  : //    ComputeBreakUpLoopWeights(3);
; 386  : //    FormRanks(m_breakUpLoopsWeight, loopRank, numEdges);
; 387  : //    if (GiveNothing_BreakLoops(6, loopRank))
; 388  :     {
; 389  :       return;

  000cd	e9 8a 00 00 00	 jmp	 $LN1@GiveNothin
$LN2@GiveNothin:

; 390  :     };
; 391  :   }
; 392  :   if (GiveNothing_Divide(divideRank, 1)) return;

  000d2	6a 01		 push	 1
  000d4	8d 95 58 f8 ff
	ff		 lea	 edx, DWORD PTR _divideRank$[ebp]
  000da	52		 push	 edx
  000db	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000de	e8 00 00 00 00	 call	 ?GiveNothing_Divide@DOTS_AND_BOXES@@AAE_NPAHH@Z ; DOTS_AND_BOXES::GiveNothing_Divide
  000e3	0f b6 c0	 movzx	 eax, al
  000e6	85 c0		 test	 eax, eax
  000e8	74 02		 je	 SHORT $LN3@GiveNothin
  000ea	eb 70		 jmp	 SHORT $LN1@GiveNothin
$LN3@GiveNothin:

; 393  :   ComputeBreakUpLoopWeights(2);

  000ec	6a 02		 push	 2
  000ee	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000f1	e8 00 00 00 00	 call	 ?ComputeBreakUpLoopWeights@DOTS_AND_BOXES@@QAEXH@Z ; DOTS_AND_BOXES::ComputeBreakUpLoopWeights

; 394  :   if (GiveNothing_BreakLoops(9, loopRank)) return;

  000f6	8d 8d 24 fc ff
	ff		 lea	 ecx, DWORD PTR _loopRank$[ebp]
  000fc	51		 push	 ecx
  000fd	6a 09		 push	 9
  000ff	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00102	e8 00 00 00 00	 call	 ?GiveNothing_BreakLoops@DOTS_AND_BOXES@@ABE_NHPAH@Z ; DOTS_AND_BOXES::GiveNothing_BreakLoops
  00107	0f b6 d0	 movzx	 edx, al
  0010a	85 d2		 test	 edx, edx
  0010c	74 02		 je	 SHORT $LN4@GiveNothin
  0010e	eb 4c		 jmp	 SHORT $LN1@GiveNothin
$LN4@GiveNothin:

; 395  :   if (GiveNothing_BothLoopAndDivide(5, loopRank, divideRank)) return;

  00110	8d 85 58 f8 ff
	ff		 lea	 eax, DWORD PTR _divideRank$[ebp]
  00116	50		 push	 eax
  00117	8d 8d 24 fc ff
	ff		 lea	 ecx, DWORD PTR _loopRank$[ebp]
  0011d	51		 push	 ecx
  0011e	6a 05		 push	 5
  00120	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00123	e8 00 00 00 00	 call	 ?GiveNothing_BothLoopAndDivide@DOTS_AND_BOXES@@AAE_NHPAH0@Z ; DOTS_AND_BOXES::GiveNothing_BothLoopAndDivide
  00128	0f b6 d0	 movzx	 edx, al
  0012b	85 d2		 test	 edx, edx
  0012d	74 02		 je	 SHORT $LN5@GiveNothin
  0012f	eb 2b		 jmp	 SHORT $LN1@GiveNothin
$LN5@GiveNothin:

; 396  :   if (GiveNothing_BreakLoops(1, loopRank)) return;

  00131	8d 85 24 fc ff
	ff		 lea	 eax, DWORD PTR _loopRank$[ebp]
  00137	50		 push	 eax
  00138	6a 01		 push	 1
  0013a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013d	e8 00 00 00 00	 call	 ?GiveNothing_BreakLoops@DOTS_AND_BOXES@@ABE_NHPAH@Z ; DOTS_AND_BOXES::GiveNothing_BreakLoops
  00142	0f b6 c8	 movzx	 ecx, al
  00145	85 c9		 test	 ecx, ecx
  00147	74 02		 je	 SHORT $LN6@GiveNothin
  00149	eb 11		 jmp	 SHORT $LN1@GiveNothin
$LN6@GiveNothin:

; 397  :   if (GiveNothing_Divide(divideRank, 1)) return;

  0014b	6a 01		 push	 1
  0014d	8d 95 58 f8 ff
	ff		 lea	 edx, DWORD PTR _divideRank$[ebp]
  00153	52		 push	 edx
  00154	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00157	e8 00 00 00 00	 call	 ?GiveNothing_Divide@DOTS_AND_BOXES@@AAE_NPAHH@Z ; DOTS_AND_BOXES::GiveNothing_Divide
$LN1@GiveNothin:

; 398  : }

  0015c	52		 push	 edx
  0015d	8b cd		 mov	 ecx, ebp
  0015f	50		 push	 eax
  00160	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@GiveNothin
  00166	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016b	58		 pop	 eax
  0016c	5a		 pop	 edx
  0016d	5f		 pop	 edi
  0016e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00171	33 cd		 xor	 ecx, ebp
  00173	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00178	81 c4 ac 07 00
	00		 add	 esp, 1964		; 000007acH
  0017e	3b ec		 cmp	 ebp, esp
  00180	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00185	8b e5		 mov	 esp, ebp
  00187	5d		 pop	 ebp
  00188	c3		 ret	 0
  00189	0f 1f 00	 npad	 3
$LN12@GiveNothin:
  0018c	02 00 00 00	 DD	 2
  00190	00 00 00 00	 DD	 $LN11@GiveNothin
$LN11@GiveNothin:
  00194	24 fc ff ff	 DD	 -988			; fffffc24H
  00198	c4 03 00 00	 DD	 964			; 000003c4H
  0019c	00 00 00 00	 DD	 $LN9@GiveNothin
  001a0	58 f8 ff ff	 DD	 -1960			; fffff858H
  001a4	c4 03 00 00	 DD	 964			; 000003c4H
  001a8	00 00 00 00	 DD	 $LN10@GiveNothin
$LN10@GiveNothin:
  001ac	64		 DB	 100			; 00000064H
  001ad	69		 DB	 105			; 00000069H
  001ae	76		 DB	 118			; 00000076H
  001af	69		 DB	 105			; 00000069H
  001b0	64		 DB	 100			; 00000064H
  001b1	65		 DB	 101			; 00000065H
  001b2	52		 DB	 82			; 00000052H
  001b3	61		 DB	 97			; 00000061H
  001b4	6e		 DB	 110			; 0000006eH
  001b5	6b		 DB	 107			; 0000006bH
  001b6	00		 DB	 0
$LN9@GiveNothin:
  001b7	6c		 DB	 108			; 0000006cH
  001b8	6f		 DB	 111			; 0000006fH
  001b9	6f		 DB	 111			; 0000006fH
  001ba	70		 DB	 112			; 00000070H
  001bb	52		 DB	 82			; 00000052H
  001bc	61		 DB	 97			; 00000061H
  001bd	6e		 DB	 110			; 0000006eH
  001be	6b		 DB	 107			; 0000006bH
  001bf	00		 DB	 0
?GiveNothing@DOTS_AND_BOXES@@QAEXXZ ENDP		; DOTS_AND_BOXES::GiveNothing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 8
_vertical$ = 16						; size = 1
?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z PROC	; DOTS_AND_BOXES::Dot2Line, COMDAT
; _this$ = ecx

; 116  :   {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 117  :     return Dot2Line(dotNum.x, dotNum.y, vertical);

  0000e	0f b6 45 10	 movzx	 eax, BYTE PTR _vertical$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 0c	 mov	 ecx, DWORD PTR _dotNum$[ebp+4]
  00016	51		 push	 ecx
  00017	8b 55 08	 mov	 edx, DWORD PTR _dotNum$[ebp]
  0001a	52		 push	 edx
  0001b	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001e	e8 00 00 00 00	 call	 ?Dot2Line@DOTS_AND_BOXES@@QBEHHH_N@Z ; DOTS_AND_BOXES::Dot2Line

; 118  :   };

  00023	83 c4 04	 add	 esp, 4
  00026	3b ec		 cmp	 ebp, esp
  00028	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 0c 00	 ret	 12			; 0000000cH
?Dot2Line@DOTS_AND_BOXES@@QBEHUtagPOINT@@_N@Z ENDP	; DOTS_AND_BOXES::Dot2Line
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Dot2Line@DOTS_AND_BOXES@@QBEHHH_N@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_vertical$ = 16						; size = 1
?Dot2Line@DOTS_AND_BOXES@@QBEHHH_N@Z PROC		; DOTS_AND_BOXES::Dot2Line, COMDAT
; _this$ = ecx

; 112  :          {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 113  :            return y * (2*m_width-1) + x + (vertical?(m_width-1):0);

  00009	0f b6 45 10	 movzx	 eax, BYTE PTR _vertical$[ebp]
  0000d	85 c0		 test	 eax, eax
  0000f	74 0e		 je	 SHORT $LN3@Dot2Line
  00011	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00014	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00017	83 ea 01	 sub	 edx, 1
  0001a	89 55 f8	 mov	 DWORD PTR tv73[ebp], edx
  0001d	eb 07		 jmp	 SHORT $LN4@Dot2Line
$LN3@Dot2Line:
  0001f	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv73[ebp], 0
$LN4@Dot2Line:
  00026	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00029	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0002c	8d 54 09 ff	 lea	 edx, DWORD PTR [ecx+ecx-1]
  00030	8b c2		 mov	 eax, edx
  00032	0f af 45 0c	 imul	 eax, DWORD PTR _y$[ebp]
  00036	03 45 08	 add	 eax, DWORD PTR _x$[ebp]
  00039	03 45 f8	 add	 eax, DWORD PTR tv73[ebp]

; 114  :          };

  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?Dot2Line@DOTS_AND_BOXES@@QBEHHH_N@Z ENDP		; DOTS_AND_BOXES::Dot2Line
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetBoxOwner@DOTS_AND_BOXES@@QAEXHHW4OWNER_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
_ot$ = 16						; size = 4
?SetBoxOwner@DOTS_AND_BOXES@@QAEXHHW4OWNER_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetBoxOwner, COMDAT
; _this$ = ecx

; 108  :   INLINE void SetBoxOwner(int col, int row, OWNER_TYPE ot){m_owners[row*(m_width-1)+col]=(ui8)ot;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	0f af 4d 0c	 imul	 ecx, DWORD PTR _row$[ebp]
  00014	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001d	8a 55 10	 mov	 dl, BYTE PTR _ot$[ebp]
  00020	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 0c 00	 ret	 12			; 0000000cH
?SetBoxOwner@DOTS_AND_BOXES@@QAEXHHW4OWNER_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetBoxOwner
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z PROC	; DOTS_AND_BOXES::BoxOwner, COMDAT
; _this$ = ecx

; 106  :   INLINE OWNER_TYPE BoxOwner(int col, int row)const{return (OWNER_TYPE)m_owners[row*(m_width-1) + col];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	0f af 4d 0c	 imul	 ecx, DWORD PTR _row$[ebp]
  00014	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  0001d	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?BoxOwner@DOTS_AND_BOXES@@QBE?AW4OWNER_TYPE@@HH@Z ENDP	; DOTS_AND_BOXES::BoxOwner
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
_lt$ = 12						; size = 4
?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetHLineType, COMDAT
; _this$ = ecx

; 104  :   INLINE void SetHLineType(const POINT& dotNum, LINE_TYPE lt){SetHLineType(dotNum.x, dotNum.y, lt);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _lt$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	52		 push	 edx
  00019	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	51		 push	 ecx
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetHLineType
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?SetHLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetHLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
_lt$ = 16						; size = 4
?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetHLineType, COMDAT
; _this$ = ecx

; 103  :   INLINE void SetHLineType(int col, int row, LINE_TYPE lt){v();m_hlines[row*(m_width-1)+col]=(ui8)lt;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?v@DOTS_AND_BOXES@@AAEXXZ ; DOTS_AND_BOXES::v
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0001c	83 e9 01	 sub	 ecx, 1
  0001f	0f af 4d 0c	 imul	 ecx, DWORD PTR _row$[ebp]
  00023	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0002c	8a 55 10	 mov	 dl, BYTE PTR _lt$[ebp]
  0002f	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  00032	83 c4 04	 add	 esp, 4
  00035	3b ec		 cmp	 ebp, esp
  00037	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003c	8b e5		 mov	 esp, ebp
  0003e	5d		 pop	 ebp
  0003f	c2 0c 00	 ret	 12			; 0000000cH
?SetHLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetHLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z PROC	; DOTS_AND_BOXES::HLineType, COMDAT
; _this$ = ecx

; 101  :   INLINE LINE_TYPE HLineType(int col, int row)const{return (LINE_TYPE)m_hlines[row*(m_width-1) + col];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	0f af 4d 0c	 imul	 ecx, DWORD PTR _row$[ebp]
  00014	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  0001a	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0001d	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?HLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ENDP	; DOTS_AND_BOXES::HLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dotNum$ = 8						; size = 4
_lt$ = 12						; size = 4
?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetVLineType, COMDAT
; _this$ = ecx

; 100  :   INLINE void SetVLineType(const POINT& dotNum, LINE_TYPE lt){SetVLineType(dotNum.x, dotNum.y, lt);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 45 0c	 mov	 eax, DWORD PTR _lt$[ebp]
  00011	50		 push	 eax
  00012	8b 4d 08	 mov	 ecx, DWORD PTR _dotNum$[ebp]
  00015	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00018	52		 push	 edx
  00019	8b 45 08	 mov	 eax, DWORD PTR _dotNum$[ebp]
  0001c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001e	51		 push	 ecx
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00022	e8 00 00 00 00	 call	 ?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ; DOTS_AND_BOXES::SetVLineType
  00027	83 c4 04	 add	 esp, 4
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c2 08 00	 ret	 8
?SetVLineType@DOTS_AND_BOXES@@QAEXABUtagPOINT@@W4LINE_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetVLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
_lt$ = 16						; size = 4
?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z PROC ; DOTS_AND_BOXES::SetVLineType, COMDAT
; _this$ = ecx

; 99   :   INLINE void SetVLineType(int col, int row, LINE_TYPE lt){v();m_vlines[row*m_width+col]=(ui8)lt;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	e8 00 00 00 00	 call	 ?v@DOTS_AND_BOXES@@AAEXXZ ; DOTS_AND_BOXES::v
  00016	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00019	8b 4d 0c	 mov	 ecx, DWORD PTR _row$[ebp]
  0001c	0f af 48 10	 imul	 ecx, DWORD PTR [eax+16]
  00020	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00023	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00026	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  00029	8a 55 10	 mov	 dl, BYTE PTR _lt$[ebp]
  0002c	88 14 08	 mov	 BYTE PTR [eax+ecx], dl
  0002f	83 c4 04	 add	 esp, 4
  00032	3b ec		 cmp	 ebp, esp
  00034	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
?SetVLineType@DOTS_AND_BOXES@@QAEXHHW4LINE_TYPE@@@Z ENDP ; DOTS_AND_BOXES::SetVLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_col$ = 8						; size = 4
_row$ = 12						; size = 4
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z PROC	; DOTS_AND_BOXES::VLineType, COMDAT
; _this$ = ecx

; 97   :   INLINE LINE_TYPE VLineType(int col, int row)const{return (LINE_TYPE)m_vlines[row*m_width + col];};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 4d 0c	 mov	 ecx, DWORD PTR _row$[ebp]
  0000d	0f af 48 10	 imul	 ecx, DWORD PTR [eax+16]
  00011	03 4d 08	 add	 ecx, DWORD PTR _col$[ebp]
  00014	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00017	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  0001a	0f b6 04 08	 movzx	 eax, BYTE PTR [eax+ecx]
  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
?VLineType@DOTS_AND_BOXES@@QBE?AW4LINE_TYPE@@HH@Z ENDP	; DOTS_AND_BOXES::VLineType
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Size@DOTS_AND_BOXES@@QBE?AUtagPOINT@@XZ
_TEXT	SEGMENT
_p$ = -16						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Size@DOTS_AND_BOXES@@QBE?AUtagPOINT@@XZ PROC		; DOTS_AND_BOXES::Size, COMDAT
; _this$ = ecx

; 95   :   INLINE POINT Size(void) const {POINT p; p.x=m_width; p.y=m_height; return p;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000b	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  0000e	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00011	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00014	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00017	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001a	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  0001d	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00020	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00023	89 4d f0	 mov	 DWORD PTR _p$[ebp], ecx
  00026	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00029	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0002c	89 45 f4	 mov	 DWORD PTR _p$[ebp+4], eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00032	8b 55 f0	 mov	 edx, DWORD PTR _p$[ebp]
  00035	8b 45 f4	 mov	 eax, DWORD PTR _p$[ebp+4]
  00038	89 11		 mov	 DWORD PTR [ecx], edx
  0003a	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0003d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00040	52		 push	 edx
  00041	8b cd		 mov	 ecx, ebp
  00043	50		 push	 eax
  00044	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@Size
  0004a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0004f	58		 pop	 eax
  00050	5a		 pop	 edx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
  00057	90		 npad	 1
$LN5@Size:
  00058	01 00 00 00	 DD	 1
  0005c	00 00 00 00	 DD	 $LN4@Size
$LN4@Size:
  00060	f0 ff ff ff	 DD	 -16			; fffffff0H
  00064	08 00 00 00	 DD	 8
  00068	00 00 00 00	 DD	 $LN3@Size
$LN3@Size:
  0006c	70		 DB	 112			; 00000070H
  0006d	00		 DB	 0
?Size@DOTS_AND_BOXES@@QBE?AUtagPOINT@@XZ ENDP		; DOTS_AND_BOXES::Size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?NumEdges@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumEdges@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::NumEdges, COMDAT
; _this$ = ecx

; 94   :   INLINE int NumEdges(void) const {return m_width*(m_height-1)+m_height*(m_width-1);};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0000d	83 e9 01	 sub	 ecx, 1
  00010	8b 55 fc	 mov	 edx, DWORD PTR _this$[ebp]
  00013	8b c1		 mov	 eax, ecx
  00015	0f af 42 10	 imul	 eax, DWORD PTR [edx+16]
  00019	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0001c	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  0001f	83 ea 01	 sub	 edx, 1
  00022	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00025	0f af 51 14	 imul	 edx, DWORD PTR [ecx+20]
  00029	03 c2		 add	 eax, edx
  0002b	8b e5		 mov	 esp, ebp
  0002d	5d		 pop	 ebp
  0002e	c3		 ret	 0
?NumEdges@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::NumEdges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Height@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::Height, COMDAT
; _this$ = ecx

; 93   :   INLINE int Height(void) const {return m_height;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Height@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::Height
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?Width@DOTS_AND_BOXES@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@DOTS_AND_BOXES@@QBEHXZ PROC			; DOTS_AND_BOXES::Width, COMDAT
; _this$ = ecx

; 92   :   INLINE int Width(void) const {return m_width;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0000d	8b e5		 mov	 esp, ebp
  0000f	5d		 pop	 ebp
  00010	c3		 ret	 0
?Width@DOTS_AND_BOXES@@QBEHXZ ENDP			; DOTS_AND_BOXES::Width
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\DotBoxLib\DotsAndBoxes.h
;	COMDAT ?v@DOTS_AND_BOXES@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?v@DOTS_AND_BOXES@@AAEXXZ PROC				; DOTS_AND_BOXES::v, COMDAT
; _this$ = ecx

; 80   :   INLINE void v(void){m_loopWeightsValid=false;m_divideWeightsValid=false;};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  0000e	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  00015	8b e5		 mov	 esp, ebp
  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
?v@DOTS_AND_BOXES@@AAEXXZ ENDP				; DOTS_AND_BOXES::v
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_this$ = -4						; size = 4
_divideRank$ = 8					; size = 4
_minWeight$ = 12					; size = 4
?GiveNothing_Divide@DOTS_AND_BOXES@@AAE_NPAHH@Z PROC	; DOTS_AND_BOXES::GiveNothing_Divide
; _this$ = ecx

; 349  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 350  :   if (m_divideAndConquerWeight[divideRank[0]] >= minWeight)

  00007	b8 04 00 00 00	 mov	 eax, 4
  0000c	6b c8 00	 imul	 ecx, eax, 0
  0000f	8b 55 08	 mov	 edx, DWORD PTR _divideRank$[ebp]
  00012	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00015	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00018	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001a	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  0001d	3b 45 0c	 cmp	 eax, DWORD PTR _minWeight$[ebp]
  00020	0f 8c 8f 00 00
	00		 jl	 $LN2@GiveNothin

; 351  :   {
; 352  :     moveType = MT_DIVIDE;

  00026	c7 05 00 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 6 ; moveType

; 353  :     computerMoveDB.moveType = MT_DIVIDE;

  00030	c7 05 34 00 00
	00 06 00 00 00	 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A+52, 6

; 354  :     computerMoveDB.dotNum.y = (divideRank[0])/(2*m_width-1);

  0003a	b9 04 00 00 00	 mov	 ecx, 4
  0003f	6b d1 00	 imul	 edx, ecx, 0
  00042	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00045	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00048	8d 4c 09 ff	 lea	 ecx, DWORD PTR [ecx+ecx-1]
  0004c	8b 45 08	 mov	 eax, DWORD PTR _divideRank$[ebp]
  0004f	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  00052	99		 cdq
  00053	f7 f9		 idiv	 ecx
  00055	a3 04 00 00 00	 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A+4, eax

; 355  :     computerMoveDB.dotNum.x = (divideRank[0])%(2*m_width-1);

  0005a	b9 04 00 00 00	 mov	 ecx, 4
  0005f	6b d1 00	 imul	 edx, ecx, 0
  00062	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00065	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00068	8d 4c 09 ff	 lea	 ecx, DWORD PTR [ecx+ecx-1]
  0006c	8b 45 08	 mov	 eax, DWORD PTR _divideRank$[ebp]
  0006f	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]
  00072	99		 cdq
  00073	f7 f9		 idiv	 ecx
  00075	89 15 00 00 00
	00		 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, edx

; 356  :     computerMoveDB.vertical = false;

  0007b	c6 05 08 00 00
	00 00		 mov	 BYTE PTR ?computerMoveDB@@3UMOVE@@A+8, 0

; 357  :     if (computerMoveDB.dotNum.x >= m_width-1)

  00082	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00085	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00088	83 ea 01	 sub	 edx, 1
  0008b	39 15 00 00 00
	00		 cmp	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, edx
  00091	7c 1e		 jl	 SHORT $LN3@GiveNothin

; 358  :     {
; 359  :       computerMoveDB.dotNum.x -= m_width-1;

  00093	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00096	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00099	83 e9 01	 sub	 ecx, 1
  0009c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?computerMoveDB@@3UMOVE@@A
  000a2	2b d1		 sub	 edx, ecx
  000a4	89 15 00 00 00
	00		 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, edx

; 360  :       computerMoveDB.vertical = true;

  000aa	c6 05 08 00 00
	00 01		 mov	 BYTE PTR ?computerMoveDB@@3UMOVE@@A+8, 1
$LN3@GiveNothin:

; 361  :     };
; 362  :     return true;

  000b1	b0 01		 mov	 al, 1
  000b3	eb 02		 jmp	 SHORT $LN1@GiveNothin
$LN2@GiveNothin:

; 363  :   };
; 364  :   return false;

  000b5	32 c0		 xor	 al, al
$LN1@GiveNothin:

; 365  : }

  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c2 08 00	 ret	 8
?GiveNothing_Divide@DOTS_AND_BOXES@@AAE_NPAHH@Z ENDP	; DOTS_AND_BOXES::GiveNothing_Divide
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_j$1 = -32						; size = 4
_i$2 = -28						; size = 4
_numEdges$ = -24					; size = 4
_height$ = -20						; size = 4
_width$ = -16						; size = 4
_nDivide$ = -12						; size = 4
_nLoop$ = -8						; size = 4
_this$ = -4						; size = 4
_searchDepth$ = 8					; size = 4
_loopRank$ = 12						; size = 4
_divideRank$ = 16					; size = 4
?GiveNothing_BothLoopAndDivide@DOTS_AND_BOXES@@AAE_NHPAH0@Z PROC ; DOTS_AND_BOXES::GiveNothing_BothLoopAndDivide
; _this$ = ecx

; 294  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e0	 mov	 DWORD PTR [ebp-32], eax
  0000f	89 45 e4	 mov	 DWORD PTR [ebp-28], eax
  00012	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  00015	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00018	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  0001b	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  0001e	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  00021	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  00024	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 295  :   int nLoop, nDivide;
; 296  :   int width, height, numEdges;
; 297  :   width = Width();

  00027	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002a	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  0002f	89 45 f0	 mov	 DWORD PTR _width$[ebp], eax

; 298  :   height = Height();

  00032	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  0003a	89 45 ec	 mov	 DWORD PTR _height$[ebp], eax

; 299  :   numEdges = NumEdges();

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	e8 00 00 00 00	 call	 ?NumEdges@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::NumEdges
  00045	89 45 e8	 mov	 DWORD PTR _numEdges$[ebp], eax

; 300  :   for (nLoop=nDivide=0; searchDepth>0; searchDepth--)

  00048	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _nDivide$[ebp], 0
  0004f	8b 45 f4	 mov	 eax, DWORD PTR _nDivide$[ebp]
  00052	89 45 f8	 mov	 DWORD PTR _nLoop$[ebp], eax
  00055	eb 09		 jmp	 SHORT $LN4@GiveNothin
$LN2@GiveNothin:
  00057	8b 4d 08	 mov	 ecx, DWORD PTR _searchDepth$[ebp]
  0005a	83 e9 01	 sub	 ecx, 1
  0005d	89 4d 08	 mov	 DWORD PTR _searchDepth$[ebp], ecx
$LN4@GiveNothin:
  00060	83 7d 08 00	 cmp	 DWORD PTR _searchDepth$[ebp], 0
  00064	0f 8e 91 01 00
	00		 jle	 $LN3@GiveNothin

; 301  :   {
; 302  :     nLoop++;

  0006a	8b 55 f8	 mov	 edx, DWORD PTR _nLoop$[ebp]
  0006d	83 c2 01	 add	 edx, 1
  00070	89 55 f8	 mov	 DWORD PTR _nLoop$[ebp], edx

; 303  :     nDivide++;

  00073	8b 45 f4	 mov	 eax, DWORD PTR _nDivide$[ebp]
  00076	83 c0 01	 add	 eax, 1
  00079	89 45 f4	 mov	 DWORD PTR _nDivide$[ebp], eax

; 304  :     if (m_breakUpLoopsWeight[loopRank[nLoop]] == 0) return false;

  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _nLoop$[ebp]
  0007f	8b 55 0c	 mov	 edx, DWORD PTR _loopRank$[ebp]
  00082	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  00085	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00088	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0008b	83 3c 82 00	 cmp	 DWORD PTR [edx+eax*4], 0
  0008f	75 07		 jne	 SHORT $LN15@GiveNothin
  00091	32 c0		 xor	 al, al
  00093	e9 65 01 00 00	 jmp	 $LN1@GiveNothin
$LN15@GiveNothin:

; 305  :     if (m_divideAndConquerWeight[divideRank[nDivide]] == 0) return false;

  00098	8b 45 f4	 mov	 eax, DWORD PTR _nDivide$[ebp]
  0009b	8b 4d 10	 mov	 ecx, DWORD PTR _divideRank$[ebp]
  0009e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000a4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a6	83 3c 91 00	 cmp	 DWORD PTR [ecx+edx*4], 0
  000aa	75 07		 jne	 SHORT $LN5@GiveNothin
  000ac	32 c0		 xor	 al, al
  000ae	e9 4a 01 00 00	 jmp	 $LN1@GiveNothin
$LN5@GiveNothin:

; 306  :     while (    (nLoop<numEdges) 
; 307  :             && (    m_breakUpLoopsWeight[loopRank[nLoop]] 

  000b3	8b 55 f8	 mov	 edx, DWORD PTR _nLoop$[ebp]
  000b6	3b 55 e8	 cmp	 edx, DWORD PTR _numEdges$[ebp]
  000b9	7d 32		 jge	 SHORT $LN7@GiveNothin
  000bb	8b 45 f8	 mov	 eax, DWORD PTR _nLoop$[ebp]
  000be	8b 4d 0c	 mov	 ecx, DWORD PTR _loopRank$[ebp]
  000c1	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000c4	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  000c7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ca	8b 45 f8	 mov	 eax, DWORD PTR _nLoop$[ebp]
  000cd	8b 75 0c	 mov	 esi, DWORD PTR _loopRank$[ebp]
  000d0	8b 44 86 fc	 mov	 eax, DWORD PTR [esi+eax*4-4]
  000d4	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  000d7	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  000da	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  000dd	3b 0c 86	 cmp	 ecx, DWORD PTR [esi+eax*4]
  000e0	75 0b		 jne	 SHORT $LN7@GiveNothin

; 308  :                  == m_breakUpLoopsWeight[loopRank[nLoop-1]]
; 309  :                )
; 310  :           )
; 311  :     {
; 312  :       nLoop++;

  000e2	8b 55 f8	 mov	 edx, DWORD PTR _nLoop$[ebp]
  000e5	83 c2 01	 add	 edx, 1
  000e8	89 55 f8	 mov	 DWORD PTR _nLoop$[ebp], edx

; 313  :     };

  000eb	eb c6		 jmp	 SHORT $LN5@GiveNothin
$LN7@GiveNothin:

; 314  :     while (    (nDivide<numEdges) 
; 315  :             && (    m_divideAndConquerWeight[divideRank[nDivide]] 

  000ed	8b 45 f4	 mov	 eax, DWORD PTR _nDivide$[ebp]
  000f0	3b 45 e8	 cmp	 eax, DWORD PTR _numEdges$[ebp]
  000f3	7d 30		 jge	 SHORT $LN8@GiveNothin
  000f5	8b 4d f4	 mov	 ecx, DWORD PTR _nDivide$[ebp]
  000f8	8b 55 10	 mov	 edx, DWORD PTR _divideRank$[ebp]
  000fb	8b 04 8a	 mov	 eax, DWORD PTR [edx+ecx*4]
  000fe	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	8b 11		 mov	 edx, DWORD PTR [ecx]
  00103	8b 4d f4	 mov	 ecx, DWORD PTR _nDivide$[ebp]
  00106	8b 75 10	 mov	 esi, DWORD PTR _divideRank$[ebp]
  00109	8b 4c 8e fc	 mov	 ecx, DWORD PTR [esi+ecx*4-4]
  0010d	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  00110	8b 36		 mov	 esi, DWORD PTR [esi]
  00112	8b 14 82	 mov	 edx, DWORD PTR [edx+eax*4]
  00115	3b 14 8e	 cmp	 edx, DWORD PTR [esi+ecx*4]
  00118	75 0b		 jne	 SHORT $LN8@GiveNothin

; 316  :                  == m_divideAndConquerWeight[divideRank[nDivide-1]]
; 317  :                )
; 318  :           )
; 319  :     {
; 320  :       nDivide++;

  0011a	8b 45 f4	 mov	 eax, DWORD PTR _nDivide$[ebp]
  0011d	83 c0 01	 add	 eax, 1
  00120	89 45 f4	 mov	 DWORD PTR _nDivide$[ebp], eax

; 321  :     };

  00123	eb c8		 jmp	 SHORT $LN7@GiveNothin
$LN8@GiveNothin:

; 322  :     //Look for an edge in both groups.
; 323  :     for (int i=0; i<nLoop; i++)

  00125	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0012c	eb 09		 jmp	 SHORT $LN11@GiveNothin
$LN9@GiveNothin:
  0012e	8b 4d e4	 mov	 ecx, DWORD PTR _i$2[ebp]
  00131	83 c1 01	 add	 ecx, 1
  00134	89 4d e4	 mov	 DWORD PTR _i$2[ebp], ecx
$LN11@GiveNothin:
  00137	8b 55 e4	 mov	 edx, DWORD PTR _i$2[ebp]
  0013a	3b 55 f8	 cmp	 edx, DWORD PTR _nLoop$[ebp]
  0013d	0f 8d b3 00 00
	00		 jge	 $LN10@GiveNothin

; 324  :     {
; 325  :       int j;
; 326  :       for (j=0; j<nDivide; j++)

  00143	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _j$1[ebp], 0
  0014a	eb 09		 jmp	 SHORT $LN14@GiveNothin
$LN12@GiveNothin:
  0014c	8b 45 e0	 mov	 eax, DWORD PTR _j$1[ebp]
  0014f	83 c0 01	 add	 eax, 1
  00152	89 45 e0	 mov	 DWORD PTR _j$1[ebp], eax
$LN14@GiveNothin:
  00155	8b 4d e0	 mov	 ecx, DWORD PTR _j$1[ebp]
  00158	3b 4d f4	 cmp	 ecx, DWORD PTR _nDivide$[ebp]
  0015b	0f 8d 90 00 00
	00		 jge	 $LN13@GiveNothin

; 327  :       {
; 328  :         if (divideRank[j] == loopRank[i])

  00161	8b 55 e0	 mov	 edx, DWORD PTR _j$1[ebp]
  00164	8b 45 10	 mov	 eax, DWORD PTR _divideRank$[ebp]
  00167	8b 4d e4	 mov	 ecx, DWORD PTR _i$2[ebp]
  0016a	8b 75 0c	 mov	 esi, DWORD PTR _loopRank$[ebp]
  0016d	8b 14 90	 mov	 edx, DWORD PTR [eax+edx*4]
  00170	3b 14 8e	 cmp	 edx, DWORD PTR [esi+ecx*4]
  00173	75 77		 jne	 SHORT $LN17@GiveNothin

; 329  :         {
; 330  :           moveType = MT_LOOPDIVIDE;

  00175	c7 05 00 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 5 ; moveType

; 331  :           computerMoveDB.moveType = MT_LOOPDIVIDE;

  0017f	c7 05 34 00 00
	00 05 00 00 00	 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A+52, 5

; 332  :           computerMoveDB.dotNum.y = (divideRank[j])/(2*width-1);

  00189	8b 45 f0	 mov	 eax, DWORD PTR _width$[ebp]
  0018c	8d 4c 00 ff	 lea	 ecx, DWORD PTR [eax+eax-1]
  00190	8b 55 e0	 mov	 edx, DWORD PTR _j$1[ebp]
  00193	8b 45 10	 mov	 eax, DWORD PTR _divideRank$[ebp]
  00196	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00199	99		 cdq
  0019a	f7 f9		 idiv	 ecx
  0019c	a3 04 00 00 00	 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A+4, eax

; 333  :           computerMoveDB.dotNum.x = (divideRank[j])%(2*width-1);

  001a1	8b 4d f0	 mov	 ecx, DWORD PTR _width$[ebp]
  001a4	8d 4c 09 ff	 lea	 ecx, DWORD PTR [ecx+ecx-1]
  001a8	8b 55 e0	 mov	 edx, DWORD PTR _j$1[ebp]
  001ab	8b 45 10	 mov	 eax, DWORD PTR _divideRank$[ebp]
  001ae	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  001b1	99		 cdq
  001b2	f7 f9		 idiv	 ecx
  001b4	89 15 00 00 00
	00		 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, edx

; 334  :           computerMoveDB.vertical = false;

  001ba	c6 05 08 00 00
	00 00		 mov	 BYTE PTR ?computerMoveDB@@3UMOVE@@A+8, 0

; 335  :           if (computerMoveDB.dotNum.x >= width-1)

  001c1	8b 4d f0	 mov	 ecx, DWORD PTR _width$[ebp]
  001c4	83 e9 01	 sub	 ecx, 1
  001c7	39 0d 00 00 00
	00		 cmp	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, ecx
  001cd	7c 19		 jl	 SHORT $LN18@GiveNothin

; 336  :           {
; 337  :             computerMoveDB.dotNum.x -= width-1;

  001cf	8b 55 f0	 mov	 edx, DWORD PTR _width$[ebp]
  001d2	83 ea 01	 sub	 edx, 1
  001d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?computerMoveDB@@3UMOVE@@A
  001da	2b c2		 sub	 eax, edx
  001dc	a3 00 00 00 00	 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, eax

; 338  :             computerMoveDB.vertical = true;

  001e1	c6 05 08 00 00
	00 01		 mov	 BYTE PTR ?computerMoveDB@@3UMOVE@@A+8, 1
$LN18@GiveNothin:

; 339  :           };
; 340  :           return true;

  001e8	b0 01		 mov	 al, 1
  001ea	eb 11		 jmp	 SHORT $LN1@GiveNothin
$LN17@GiveNothin:

; 341  :         };
; 342  :       };

  001ec	e9 5b ff ff ff	 jmp	 $LN12@GiveNothin
$LN13@GiveNothin:

; 343  :     };

  001f1	e9 38 ff ff ff	 jmp	 $LN9@GiveNothin
$LN10@GiveNothin:

; 344  :   };

  001f6	e9 5c fe ff ff	 jmp	 $LN2@GiveNothin
$LN3@GiveNothin:

; 345  :   return false;

  001fb	32 c0		 xor	 al, al
$LN1@GiveNothin:

; 346  : }

  001fd	5e		 pop	 esi
  001fe	83 c4 20	 add	 esp, 32			; 00000020H
  00201	3b ec		 cmp	 ebp, esp
  00203	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00208	8b e5		 mov	 esp, ebp
  0020a	5d		 pop	 ebp
  0020b	c2 0c 00	 ret	 12			; 0000000cH
?GiveNothing_BothLoopAndDivide@DOTS_AND_BOXES@@AAE_NHPAH0@Z ENDP ; DOTS_AND_BOXES::GiveNothing_BothLoopAndDivide
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
_TEXT	SEGMENT
_nLoop$1 = -24						; size = 4
_n$2 = -20						; size = 4
_numEdges$ = -16					; size = 4
_height$ = -12						; size = 4
_width$ = -8						; size = 4
_this$ = -4						; size = 4
_minWeight$ = 8						; size = 4
_loopRank$ = 12						; size = 4
?GiveNothing_BreakLoops@DOTS_AND_BOXES@@ABE_NHPAH@Z PROC ; DOTS_AND_BOXES::GiveNothing_BreakLoops
; _this$ = ecx

; 257  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	56		 push	 esi
  00007	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0000c	89 45 e8	 mov	 DWORD PTR [ebp-24], eax
  0000f	89 45 ec	 mov	 DWORD PTR [ebp-20], eax
  00012	89 45 f0	 mov	 DWORD PTR [ebp-16], eax
  00015	89 45 f4	 mov	 DWORD PTR [ebp-12], eax
  00018	89 45 f8	 mov	 DWORD PTR [ebp-8], eax
  0001b	89 45 fc	 mov	 DWORD PTR [ebp-4], eax
  0001e	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 258  :   int width, height, numEdges;
; 259  :   width = Width();

  00021	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00024	e8 00 00 00 00	 call	 ?Width@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Width
  00029	89 45 f8	 mov	 DWORD PTR _width$[ebp], eax

; 260  :   height = Height();

  0002c	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0002f	e8 00 00 00 00	 call	 ?Height@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::Height
  00034	89 45 f4	 mov	 DWORD PTR _height$[ebp], eax

; 261  :   numEdges = NumEdges();

  00037	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	e8 00 00 00 00	 call	 ?NumEdges@DOTS_AND_BOXES@@QBEHXZ ; DOTS_AND_BOXES::NumEdges
  0003f	89 45 f0	 mov	 DWORD PTR _numEdges$[ebp], eax

; 262  :   if (m_breakUpLoopsWeight[loopRank[0]] >= minWeight)

  00042	b8 04 00 00 00	 mov	 eax, 4
  00047	6b c8 00	 imul	 ecx, eax, 0
  0004a	8b 55 0c	 mov	 edx, DWORD PTR _loopRank$[ebp]
  0004d	8b 04 0a	 mov	 eax, DWORD PTR [edx+ecx]
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00056	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00059	3b 45 08	 cmp	 eax, DWORD PTR _minWeight$[ebp]
  0005c	0f 8c c9 00 00
	00		 jl	 $LN5@GiveNothin

; 263  :   {
; 264  :     int n, nLoop;
; 265  :     for ( nLoop=0; 

  00062	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _nLoop$1[ebp], 0
  00069	eb 09		 jmp	 SHORT $LN4@GiveNothin
$LN2@GiveNothin:

; 268  :                   == m_breakUpLoopsWeight[loopRank[0]]
; 269  :                 ); 
; 270  :           nLoop++

  0006b	8b 4d e8	 mov	 ecx, DWORD PTR _nLoop$1[ebp]
  0006e	83 c1 01	 add	 ecx, 1
  00071	89 4d e8	 mov	 DWORD PTR _nLoop$1[ebp], ecx
$LN4@GiveNothin:

; 266  :                 (nLoop<numEdges)
; 267  :              && (    m_breakUpLoopsWeight[loopRank[nLoop]] 

  00074	8b 55 e8	 mov	 edx, DWORD PTR _nLoop$1[ebp]
  00077	3b 55 f0	 cmp	 edx, DWORD PTR _numEdges$[ebp]
  0007a	7d 2d		 jge	 SHORT $LN3@GiveNothin
  0007c	8b 45 e8	 mov	 eax, DWORD PTR _nLoop$1[ebp]
  0007f	8b 4d 0c	 mov	 ecx, DWORD PTR _loopRank$[ebp]
  00082	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00085	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0008b	b8 04 00 00 00	 mov	 eax, 4
  00090	6b c0 00	 imul	 eax, eax, 0
  00093	8b 75 0c	 mov	 esi, DWORD PTR _loopRank$[ebp]
  00096	8b 04 06	 mov	 eax, DWORD PTR [esi+eax]
  00099	8b 75 fc	 mov	 esi, DWORD PTR _this$[ebp]
  0009c	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  0009f	8b 0c 91	 mov	 ecx, DWORD PTR [ecx+edx*4]
  000a2	3b 0c 86	 cmp	 ecx, DWORD PTR [esi+eax*4]
  000a5	75 02		 jne	 SHORT $LN3@GiveNothin

; 271  :         )
; 272  :     {};

  000a7	eb c2		 jmp	 SHORT $LN2@GiveNothin
$LN3@GiveNothin:

; 273  :     n = loopRank[MyRandom(nLoop)];

  000a9	8b 55 e8	 mov	 edx, DWORD PTR _nLoop$1[ebp]
  000ac	52		 push	 edx
  000ad	e8 00 00 00 00	 call	 ?MyRandom@@YAII@Z	; MyRandom
  000b2	83 c4 04	 add	 esp, 4
  000b5	8b 4d 0c	 mov	 ecx, DWORD PTR _loopRank$[ebp]
  000b8	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000bb	89 55 ec	 mov	 DWORD PTR _n$2[ebp], edx

; 274  :     moveType = MT_BREAKLOOPS;

  000be	c7 05 00 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?moveType@@3W4MOVE_TYPE@@A, 4 ; moveType

; 275  :     computerMoveDB.moveType = MT_BREAKLOOPS;

  000c8	c7 05 34 00 00
	00 04 00 00 00	 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A+52, 4

; 276  :     computerMoveDB.dotNum.y = n/(2*width-1);

  000d2	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  000d5	8d 4c 00 ff	 lea	 ecx, DWORD PTR [eax+eax-1]
  000d9	8b 45 ec	 mov	 eax, DWORD PTR _n$2[ebp]
  000dc	99		 cdq
  000dd	f7 f9		 idiv	 ecx
  000df	a3 04 00 00 00	 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A+4, eax

; 277  :     computerMoveDB.dotNum.x = n%(2*width-1);

  000e4	8b 55 f8	 mov	 edx, DWORD PTR _width$[ebp]
  000e7	8d 4c 12 ff	 lea	 ecx, DWORD PTR [edx+edx-1]
  000eb	8b 45 ec	 mov	 eax, DWORD PTR _n$2[ebp]
  000ee	99		 cdq
  000ef	f7 f9		 idiv	 ecx
  000f1	89 15 00 00 00
	00		 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, edx

; 278  :     computerMoveDB.vertical = false;

  000f7	c6 05 08 00 00
	00 00		 mov	 BYTE PTR ?computerMoveDB@@3UMOVE@@A+8, 0

; 279  :     if (computerMoveDB.dotNum.x >= width-1)

  000fe	8b 55 f8	 mov	 edx, DWORD PTR _width$[ebp]
  00101	83 ea 01	 sub	 edx, 1
  00104	39 15 00 00 00
	00		 cmp	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, edx
  0010a	7c 1b		 jl	 SHORT $LN6@GiveNothin

; 280  :     {
; 281  :       computerMoveDB.dotNum.x -= width-1;

  0010c	8b 45 f8	 mov	 eax, DWORD PTR _width$[ebp]
  0010f	83 e8 01	 sub	 eax, 1
  00112	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?computerMoveDB@@3UMOVE@@A
  00118	2b c8		 sub	 ecx, eax
  0011a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?computerMoveDB@@3UMOVE@@A, ecx

; 282  :       computerMoveDB.vertical = true;

  00120	c6 05 08 00 00
	00 01		 mov	 BYTE PTR ?computerMoveDB@@3UMOVE@@A+8, 1
$LN6@GiveNothin:

; 283  :     };
; 284  :     return true;

  00127	b0 01		 mov	 al, 1
  00129	eb 02		 jmp	 SHORT $LN1@GiveNothin
$LN5@GiveNothin:

; 285  :   };
; 286  :   return false;

  0012b	32 c0		 xor	 al, al
$LN1@GiveNothin:

; 287  : }

  0012d	5e		 pop	 esi
  0012e	83 c4 18	 add	 esp, 24			; 00000018H
  00131	3b ec		 cmp	 ebp, esp
  00133	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00138	8b e5		 mov	 esp, ebp
  0013a	5d		 pop	 ebp
  0013b	c2 08 00	 ret	 8
?GiveNothing_BreakLoops@DOTS_AND_BOXES@@ABE_NHPAH@Z ENDP ; DOTS_AND_BOXES::GiveNothing_BreakLoops
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\stdafx.h
;	COMDAT ??0VECTOR@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0VECTOR@@QAE@XZ PROC					; VECTOR::VECTOR, COMDAT
; _this$ = ecx

; 61   :   VECTOR(void){};

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx
  00007	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  0000a	8b e5		 mov	 esp, ebp
  0000c	5d		 pop	 ebp
  0000d	c3		 ret	 0
??0VECTOR@@QAE@XZ ENDP					; VECTOR::VECTOR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z
_TEXT	SEGMENT
_buffer$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_pszCategory$ = 8					; size = 4
_nCategory$ = 12					; size = 4
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z PROC		; ATL::CTrace::RegisterCategory, COMDAT

; 329  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00011	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00016	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001b	f3 ab		 rep stosd
  0001d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00022	33 c5		 xor	 eax, ebp
  00024	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 330  : 		if (pszCategory == nullptr)

  00027	83 7d 08 00	 cmp	 DWORD PTR _pszCategory$[ebp], 0
  0002b	75 05		 jne	 SHORT $LN2@RegisterCa

; 331  : 		{
; 332  : 			return;

  0002d	e9 bb 00 00 00	 jmp	 $LN1@RegisterCa
$LN2@RegisterCa:

; 333  : 		}
; 334  : 
; 335  : 		if (m_nLastCategory >= MaxCategoryArray) 

  00032	83 3d 00 00 00
	00 20		 cmp	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 32 ; ATL::CTrace::m_nLastCategory, 00000020H
  00039	72 36		 jb	 SHORT $LN3@RegisterCa

; 336  : 		{
; 337  : 			ATLASSERT(false && "Too many categories defined");

  0003b	33 c0		 xor	 eax, eax
  0003d	75 30		 jne	 SHORT $LN5@RegisterCa
  0003f	8b f4		 mov	 esi, esp
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1EO@EBPPKGOM@?$AAf?$AAa?$AAl?$AAs?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAT?$AAo?$AAo?$AA?5?$AAm@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_17CNPHIMPH@?$AA?$CF?$AAl?$AAs@
  0004b	6a 00		 push	 0
  0004d	68 51 01 00 00	 push	 337			; 00000151H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1LM@KONDCONO@?$AAG?$AA?3?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt?$AA?5?$AAV?$AAi@
  00057	6a 02		 push	 2
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReportW
  0005f	83 c4 18	 add	 esp, 24			; 00000018H
  00062	3b f4		 cmp	 esi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	83 f8 01	 cmp	 eax, 1
  0006c	75 01		 jne	 SHORT $LN5@RegisterCa
  0006e	cc		 int	 3
$LN5@RegisterCa:

; 338  : 			return;

  0006f	eb 7c		 jmp	 SHORT $LN1@RegisterCa
$LN3@RegisterCa:

; 339  : 		}
; 340  : 
; 341  : 		m_nMap[m_nLastCategory].nCategory = nCategory;

  00071	69 15 00 00 00
	00 04 01 00 00	 imul	 edx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  0007b	8b 45 0c	 mov	 eax, DWORD PTR _nCategory$[ebp]
  0007e	89 82 00 00 00
	00		 mov	 DWORD PTR ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A[edx], eax

; 342  : #ifdef _UNICODE
; 343  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, pszCategory);
; 344  : #else
; 345  : 		wchar_t buffer[MaxLengthOfCategoryName] = { 0 };	

  00084	68 00 01 00 00	 push	 256			; 00000100H
  00089	6a 00		 push	 0
  0008b	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  00091	51		 push	 ecx
  00092	e8 00 00 00 00	 call	 _memset
  00097	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  : #if _MSC_VER < 1900
; 347  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%S", pszCategory);
; 348  : #else
; 349  : 		swprintf_s(buffer, MaxLengthOfCategoryName - 1, L"%hs", pszCategory);

  0009a	8b 55 08	 mov	 edx, DWORD PTR _pszCategory$[ebp]
  0009d	52		 push	 edx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_17LGGGMOOB@?$AA?$CF?$AAh?$AAs@
  000a3	6a 7f		 push	 127			; 0000007fH
  000a5	8d 85 f8 fe ff
	ff		 lea	 eax, DWORD PTR _buffer$[ebp]
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 _swprintf_s
  000b1	83 c4 10	 add	 esp, 16			; 00000010H

; 350  : #endif
; 351  : 		wcscpy_s(m_nMap[m_nLastCategory].categryName, MaxLengthOfCategoryName - 1, buffer);

  000b4	8b f4		 mov	 esi, esp
  000b6	8d 8d f8 fe ff
	ff		 lea	 ecx, DWORD PTR _buffer$[ebp]
  000bc	51		 push	 ecx
  000bd	6a 7f		 push	 127			; 0000007fH
  000bf	69 15 00 00 00
	00 04 01 00 00	 imul	 edx, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, 260 ; ATL::CTrace::m_nLastCategory
  000c9	81 c2 04 00 00
	00		 add	 edx, OFFSET ?m_nMap@CTrace@ATL@@1PAUCategoryMap@12@A+4
  000cf	52		 push	 edx
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__wcscpy_s
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 352  : #endif
; 353  : 	
; 354  : 		m_nLastCategory++;

  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA ; ATL::CTrace::m_nLastCategory
  000e5	83 c0 01	 add	 eax, 1
  000e8	a3 00 00 00 00	 mov	 DWORD PTR ?m_nLastCategory@CTrace@ATL@@1IA, eax ; ATL::CTrace::m_nLastCategory
$LN1@RegisterCa:

; 355  : 	}

  000ed	52		 push	 edx
  000ee	8b cd		 mov	 ecx, ebp
  000f0	50		 push	 eax
  000f1	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@RegisterCa
  000f7	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000fc	58		 pop	 eax
  000fd	5a		 pop	 edx
  000fe	5f		 pop	 edi
  000ff	5e		 pop	 esi
  00100	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00103	33 cd		 xor	 ecx, ebp
  00105	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010a	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00110	3b ec		 cmp	 ebp, esp
  00112	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00117	8b e5		 mov	 esp, ebp
  00119	5d		 pop	 ebp
  0011a	c3		 ret	 0
  0011b	90		 npad	 1
$LN8@RegisterCa:
  0011c	01 00 00 00	 DD	 1
  00120	00 00 00 00	 DD	 $LN7@RegisterCa
$LN7@RegisterCa:
  00124	f8 fe ff ff	 DD	 -264			; fffffef8H
  00128	00 01 00 00	 DD	 256			; 00000100H
  0012c	00 00 00 00	 DD	 $LN6@RegisterCa
$LN6@RegisterCa:
  00130	62		 DB	 98			; 00000062H
  00131	75		 DB	 117			; 00000075H
  00132	66		 DB	 102			; 00000066H
  00133	66		 DB	 102			; 00000066H
  00134	65		 DB	 101			; 00000065H
  00135	72		 DB	 114			; 00000072H
  00136	00		 DB	 0
?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ENDP		; ATL::CTrace::RegisterCategory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceString@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceString@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceString'', COMDAT

; 114  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceString> atlTraceString(_T("atlTraceString"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG74238
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceString@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceString''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 00 02 00	 push	 131072			; 00020000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??__EatlTraceException@ATL@@YAXXZ
text$di	SEGMENT
??__EatlTraceException@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for 'atlTraceException'', COMDAT

; 110  : __declspec(selectany) CTraceCategoryEx<CTraceCategoryEx<>::TraceException> atlTraceException(_T("atlTraceException"));

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	68 00 00 00 00	 push	 OFFSET $SG74042
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
  0000d	e8 00 00 00 00	 call	 ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
  00012	3b ec		 cmp	 ebp, esp
  00014	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
??__EatlTraceException@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for 'atlTraceException''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 480  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
  0000b	89 4d fc	 mov	 DWORD PTR _this$[ebp], ecx

; 481  : 	CTrace::RegisterCategory(pszCategoryName, traceCategory);

  0000e	68 00 20 00 00	 push	 8192			; 00002000H
  00013	8b 45 08	 mov	 eax, DWORD PTR _pszCategoryName$[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ?RegisterCategory@CTrace@ATL@@SAXPBDI@Z ; ATL::CTrace::RegisterCategory
  0001c	83 c4 08	 add	 esp, 8

; 482  : }

  0001f	8b 45 fc	 mov	 eax, DWORD PTR _this$[ebp]
  00022	83 c4 04	 add	 esp, 4
  00025	3b ec		 cmp	 ebp, esp
  00027	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 04 00	 ret	 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PBD@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File G:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.35.32215\atlmfc\include\afx.h
;	COMDAT ?AfxAssertFailedLine@@YGHPBDH@Z
_TEXT	SEGMENT
_bResult$ = -44						; size = 4
_bQuit$ = -40						; size = 4
_msg$ = -32						; size = 28
_lpszFileName$ = 8					; size = 4
_nLine$ = 12						; size = 4
?AfxAssertFailedLine@@YGHPBDH@Z PROC			; AfxAssertFailedLine, COMDAT

; 312  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8d 7d d4	 lea	 edi, DWORD PTR [ebp-44]
  0000b	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 313  : 	// we remove WM_QUIT because if it is in the queue then the message box
; 314  : 	// won't display
; 315  : 	MSG msg;
; 316  : 	BOOL bQuit = PeekMessage(&msg, NULL, WM_QUIT, WM_QUIT, PM_REMOVE);

  00017	8b f4		 mov	 esi, esp
  00019	6a 01		 push	 1
  0001b	6a 12		 push	 18			; 00000012H
  0001d	6a 12		 push	 18			; 00000012H
  0001f	6a 00		 push	 0
  00021	8d 45 e0	 lea	 eax, DWORD PTR _msg$[ebp]
  00024	50		 push	 eax
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0002b	3b f4		 cmp	 esi, esp
  0002d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00032	89 45 d8	 mov	 DWORD PTR _bQuit$[ebp], eax

; 317  : 	BOOL bResult = _CrtDbgReport(_CRT_ASSERT, lpszFileName, nLine, NULL, NULL);

  00035	8b f4		 mov	 esi, esp
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	8b 4d 0c	 mov	 ecx, DWORD PTR _nLine$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 08	 mov	 edx, DWORD PTR _lpszFileName$[ebp]
  00042	52		 push	 edx
  00043	6a 02		 push	 2
  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___CrtDbgReport
  0004b	83 c4 14	 add	 esp, 20			; 00000014H
  0004e	3b f4		 cmp	 esi, esp
  00050	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00055	89 45 d4	 mov	 DWORD PTR _bResult$[ebp], eax

; 318  : 	if (bQuit)

  00058	83 7d d8 00	 cmp	 DWORD PTR _bQuit$[ebp], 0
  0005c	74 13		 je	 SHORT $LN2@AfxAssertF

; 319  : 		PostQuitMessage((int)msg.wParam);

  0005e	8b f4		 mov	 esi, esp
  00060	8b 45 e8	 mov	 eax, DWORD PTR _msg$[ebp+8]
  00063	50		 push	 eax
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@AfxAssertF:

; 320  : 	return bResult;

  00071	8b 45 d4	 mov	 eax, DWORD PTR _bResult$[ebp]

; 321  : }

  00074	52		 push	 edx
  00075	8b cd		 mov	 ecx, ebp
  00077	50		 push	 eax
  00078	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@AfxAssertF
  0007e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00083	58		 pop	 eax
  00084	5a		 pop	 edx
  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	83 c4 2c	 add	 esp, 44			; 0000002cH
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
  00097	90		 npad	 1
$LN6@AfxAssertF:
  00098	01 00 00 00	 DD	 1
  0009c	00 00 00 00	 DD	 $LN5@AfxAssertF
$LN5@AfxAssertF:
  000a0	e0 ff ff ff	 DD	 -32			; ffffffe0H
  000a4	1c 00 00 00	 DD	 28			; 0000001cH
  000a8	00 00 00 00	 DD	 $LN4@AfxAssertF
$LN4@AfxAssertF:
  000ac	6d		 DB	 109			; 0000006dH
  000ad	73		 DB	 115			; 00000073H
  000ae	67		 DB	 103			; 00000067H
  000af	00		 DB	 0
?AfxAssertFailedLine@@YGHPBDH@Z ENDP			; AfxAssertFailedLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_wstdio.h
;	COMDAT _swprintf_s
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_swprintf_s PROC					; COMDAT

; 1523 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	c7 45 f4 cc cc
	cc cc		 mov	 DWORD PTR [ebp-12], -858993460 ; ccccccccH
  0000d	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  00014	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1524 :             int _Result;
; 1525 :             va_list _ArgList;
; 1526 :             __crt_va_start(_ArgList, _Format);

  0001b	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0001e	89 45 f8	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1527 :             _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00021	8b 4d f8	 mov	 ecx, DWORD PTR __ArgList$[ebp]
  00024	51		 push	 ecx
  00025	6a 00		 push	 0
  00027	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  0002a	52		 push	 edx
  0002b	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  0002e	50		 push	 eax
  0002f	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  00032	51		 push	 ecx
  00033	e8 00 00 00 00	 call	 __vswprintf_s_l
  00038	83 c4 14	 add	 esp, 20			; 00000014H
  0003b	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1528 :             __crt_va_end(_ArgList);

  0003e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1529 :             return _Result;

  00045	8b 45 fc	 mov	 eax, DWORD PTR __Result$[ebp]

; 1530 :         }

  00048	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_swprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_wstdio.h
;	COMDAT __vswprintf_s_l
_TEXT	SEGMENT
tv73 = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vswprintf_s_l PROC					; COMDAT

; 1256 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH

; 1257 :         int const _Result = __stdio_common_vswprintf_s(

  00015	8b f4		 mov	 esi, esp
  00017	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0001a	50		 push	 eax
  0001b	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0001e	51		 push	 ecx
  0001f	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00022	52		 push	 edx
  00023	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0002a	51		 push	 ecx
  0002b	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00030	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00033	52		 push	 edx
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	50		 push	 eax
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vswprintf_s
  0003d	83 c4 1c	 add	 esp, 28			; 0000001cH
  00040	3b f4		 cmp	 esi, esp
  00042	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00047	89 45 fc	 mov	 DWORD PTR __Result$[ebp], eax

; 1258 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1259 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1260 : 
; 1261 :         return _Result < 0 ? -1 : _Result;

  0004a	83 7d fc 00	 cmp	 DWORD PTR __Result$[ebp], 0
  0004e	7d 09		 jge	 SHORT $LN3@vswprintf_
  00050	c7 45 f8 ff ff
	ff ff		 mov	 DWORD PTR tv73[ebp], -1
  00057	eb 06		 jmp	 SHORT $LN4@vswprintf_
$LN3@vswprintf_:
  00059	8b 4d fc	 mov	 ecx, DWORD PTR __Result$[ebp]
  0005c	89 4d f8	 mov	 DWORD PTR tv73[ebp], ecx
$LN4@vswprintf_:
  0005f	8b 45 f8	 mov	 eax, DWORD PTR tv73[ebp]

; 1262 :     }

  00062	5e		 pop	 esi
  00063	83 c4 08	 add	 esp, 8
  00066	3b ec		 cmp	 ebp, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
__vswprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File D:\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00003	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00008	5d		 pop	 ebp
  00009	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File C:\Users\15485\Desktop\工程之星点格棋\工程之星点格棋\ComputerMove.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
tv67 = -8						; size = 4
tv66 = -4						; size = 4
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	c7 45 f8 cc cc
	cc cc		 mov	 DWORD PTR [ebp-8], -858993460 ; ccccccccH
  0000e	c7 45 fc cc cc
	cc cc		 mov	 DWORD PTR [ebp-4], -858993460 ; ccccccccH
$LN2@vector:
  00015	8b 45 10	 mov	 eax, DWORD PTR ___n$[ebp]
  00018	89 45 fc	 mov	 DWORD PTR tv66[ebp], eax
  0001b	8b 4d 10	 mov	 ecx, DWORD PTR ___n$[ebp]
  0001e	83 e9 01	 sub	 ecx, 1
  00021	89 4d 10	 mov	 DWORD PTR ___n$[ebp], ecx
  00024	83 7d fc 00	 cmp	 DWORD PTR tv66[ebp], 0
  00028	76 09		 jbe	 SHORT $LN5@vector
  0002a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv67[ebp], 1
  00031	eb 07		 jmp	 SHORT $LN6@vector
$LN5@vector:
  00033	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv67[ebp], 0
$LN6@vector:
  0003a	83 7d f8 00	 cmp	 DWORD PTR tv67[ebp], 0
  0003e	74 1a		 je	 SHORT $LN1@vector
  00040	8b f4		 mov	 esi, esp
  00042	8b 4d 08	 mov	 ecx, DWORD PTR ___t$[ebp]
  00045	ff 55 14	 call	 DWORD PTR ___f$[ebp]
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	8b 55 08	 mov	 edx, DWORD PTR ___t$[ebp]
  00052	03 55 0c	 add	 edx, DWORD PTR ___s$[ebp]
  00055	89 55 08	 mov	 DWORD PTR ___t$[ebp], edx
  00058	eb bb		 jmp	 SHORT $LN2@vector
$LN1@vector:
  0005a	5e		 pop	 esi
  0005b	83 c4 08	 add	 esp, 8
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 10 00	 ret	 16			; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
